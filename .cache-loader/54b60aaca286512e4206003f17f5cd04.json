{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/zoom.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/zoom.ts","mtime":1675280253981},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnOwppbXBvcnQgeyBqc29uUmVxdWVzdCB9IGZyb20gJy4vYmFzZSc7CmltcG9ydCB7IGNyZWF0ZVpvb21NZWV0aW5nIH0gZnJvbSAnQHNyYy9tb2Nrcy96b29tJzsKdmFyIFpvb21DbGllbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7CiAgICBmdW5jdGlvbiBab29tQ2xpZW50KCkgewogICAgfQogICAgWm9vbUNsaWVudC5wcm90b3R5cGUuY3JlYXRlTWVldGluZyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4ganNvblJlcXVlc3QoewogICAgICAgICAgICBtZXRob2Q6ICdQT1NUJywKICAgICAgICAgICAgcm91dGU6ICIvdjEvem9vbS9tZWV0aW5ncyIsCiAgICAgICAgfSk7CiAgICB9OwogICAgcmV0dXJuIFpvb21DbGllbnQ7Cn0oKSk7CmV4cG9ydCB7IFpvb21DbGllbnQgfTsKZXhwb3J0IGZ1bmN0aW9uIG1vY2tab29tQ2xpZW50KCkgewogICAgcmV0dXJuIHsKICAgICAgICBjcmVhdGVNZWV0aW5nOiBmdW5jdGlvbiAoKSB7IHJldHVybiBPYnNlcnZhYmxlLm9mKGNyZWF0ZVpvb21NZWV0aW5nKCkpOyB9LAogICAgfTsKfQo="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/zoom.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/zoom.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAGlC,OAAO,EAAE,WAAW,EAAE,MAAM,QAAQ,CAAC;AACrC,OAAO,EAAE,iBAAiB,EAAE,MAAM,iBAAiB,CAAC;AAMpD;IAAA;IAOA,CAAC;IANC,kCAAa,GAAb;QACE,OAAO,WAAW,CAAC;YACjB,MAAM,EAAE,MAAM;YACd,KAAK,EAAE,mBAAmB;SAC3B,CAAC,CAAC;IACL,CAAC;IACH,iBAAC;AAAD,CAAC,AAPD,IAOC;;AAED,MAAM,UAAU,cAAc;IAC5B,OAAO;QACL,aAAa,EAAE,cAAM,OAAA,UAAU,CAAC,EAAE,CAAC,iBAAiB,EAAE,CAAC,EAAlC,CAAkC;KACxD,CAAC;AACJ,CAAC","sourcesContent":["import { Observable } from 'rxjs';\n\nimport { ZoomMeeting } from '@src/types/zoom';\nimport { jsonRequest } from './base';\nimport { createZoomMeeting } from '@src/mocks/zoom';\n\nexport interface ZoomAPI {\n  createMeeting(): Observable<ZoomMeeting>;\n}\n\nexport class ZoomClient implements ZoomAPI {\n  createMeeting(): Observable<ZoomMeeting> {\n    return jsonRequest({\n      method: 'POST',\n      route: `/v1/zoom/meetings`,\n    });\n  }\n}\n\nexport function mockZoomClient(): ZoomAPI {\n  return {\n    createMeeting: () => Observable.of(createZoomMeeting()),\n  };\n}\n"]}]}