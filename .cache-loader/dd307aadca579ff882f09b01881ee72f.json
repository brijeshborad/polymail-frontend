{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/sequences.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/sequences.ts","mtime":1675280254058},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/sequences.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/sequences.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ActionStatus, Action, StoreState,\n} from '@src/types';\nimport FileSaver from 'file-saver';\nimport {\n  Sequence, SequenceTab, SequenceRecipient, SequenceRecipientFilter,\n} from '@src/types/sequences';\nimport { Epic } from 'redux-observable';\nimport { Deps } from '@src/lib/epic';\nimport {\n  SEQUENCE_LIST, sequenceList,\n  SEQUENCE_CREATE, sequenceCreate,\n  SEQUENCE_UPDATE, sequenceUpdate,\n  SEQUENCE_DELETE, sequenceDelete,\n  sequenceSelect,\n  sequenceTabSelect,\n  SEQUENCE_SELECT,\n  SEQUENCE_CSV_UPLOAD,\n  SequenceCsvUploadPayload,\n  sequenceCsvUpload,\n  SEQUENCE_DUPLICATE,\n  sequenceDuplicate,\n  SEQUENCE_EXPORT,\n  sequenceExport,\n  SEQUENCE_COUNT,\n  sequenceCount,\n  SEQUENCE_SHARE,\n  sequenceShare,\n} from '@src/ducks/sequences';\nimport { Observable } from 'rxjs';\nimport { LocationChangeAction, LOCATION_CHANGE, push, RouterAction } from 'react-router-redux';\nimport { toastSet } from '@src/ducks/toasts';\nimport { ApiError } from '@src/api/base';\nimport { sequenceStageList, sequenceStageCreate } from '@src/ducks/sequenceStages';\nimport {\n  sequenceRecipientList, SequenceRecipientListMeta,\n} from '@src/ducks/sequenceRecipients';\nimport { getQueryVariable } from '@src/lib/query';\n\nconst locationChangeUpdateSequences: Epic<Action<any, any>, StoreState, Deps> =\n  (action$, store, deps) =>\n    action$.ofType(LOCATION_CHANGE)\n      .filter((action) => {\n        const path = ((action as any) as LocationChangeAction).payload.pathname.toLowerCase();\n\n        return path === '/sequences' || path === '/sequences/archive';\n      })\n      .debounceTime(200, deps.scheduler)\n      .flatMap((action) => {\n        const path = ((action as any) as LocationChangeAction).payload.pathname.toLowerCase();\n\n        if (path.startsWith('/sequences/archive')) {\n          return Observable.merge(\n            Observable.of(sequenceList(true)),\n            Observable.of(sequenceCount(null)),\n          );\n        }\n\n        return Observable.of(sequenceList(false));\n      });\n\nconst locationChangeSelectSequence: Epic<Action<any, any>, StoreState, Deps> =\n  (action$, store, deps) =>\n    action$.ofType(LOCATION_CHANGE)\n      .filter((action) => {\n        const path = ((action as any) as LocationChangeAction).payload.pathname.toLowerCase();\n        const split = path.split('/');\n\n        return path.startsWith('/sequences')\n          && !path.startsWith('/sequences/archive')\n          && !path.startsWith('/sequences/campaigns')\n          && split.length > 2;\n      })\n      .debounceTime(200, deps.scheduler)\n      .flatMap((action) => {\n        const path = ((action as any) as LocationChangeAction).payload.pathname.toLowerCase();\n        const split = path.split('/');\n        const filter = getQueryVariable(\n          'filter',\n          ((action as any) as LocationChangeAction).payload.search,\n        );\n\n        let tab = SequenceTab.Stages;\n        if (split[3] === 'recipients') {\n          tab = SequenceTab.Recipients;\n        } else if (split[3] === 'settings') {\n          tab = SequenceTab.Settings;\n        }\n\n        return Observable.concat(\n          Observable.of(sequenceTabSelect(tab)),\n          Observable.of(sequenceStageList(split[2])),\n          Observable.of(sequenceSelect(split[2])),\n          Observable.of(sequenceRecipientList({\n            sequence: split[2],\n            filter: filter ? filter as SequenceRecipientFilter : SequenceRecipientFilter.All,\n          })),\n        );\n      });\n\nconst sequenceListEpic: Epic<Action<boolean, Sequence[]>, StoreState, Deps>\n  = (action$, store, deps) =>\n    action$.ofType(SEQUENCE_LIST)\n      .filter(action => action.status === ActionStatus.Start)\n      .flatMap(action =>\n        deps.sequences.list(action.meta)\n          .map(result => sequenceList(action.meta, result))\n          .catch((e: Error) => Observable.of(sequenceList(action.meta, e))),\n    );\n\nconst sequenceCreateEpic: Epic<Action<any, any>|RouterAction, StoreState, Deps>\n  = (action$, store, deps) =>\n    action$.ofType(SEQUENCE_CREATE)\n      .filter(action => (action as Action<any, any>).status === ActionStatus.Start)\n      .flatMap(action =>\n        deps.sequences.create((action as Action<any, any>).meta)\n          .flatMap((result) => {\n            return Observable.concat(\n              Observable.of(sequenceCreate((action as Action<any, any>).meta, result)),\n              Observable.of(sequenceSelect(result.id)),\n              Observable.of(sequenceStageCreate({\n                stage: {\n                  sequence: result.id,\n                  intervalDays: 3,\n                  newThread: true,\n                },\n                navigateTo: false,\n              })),\n              Observable.of(push(`/sequences/${result.id}`)),\n            );\n          })\n          .catch(error => Observable.of(toastSet(error))),\n      );\n\nconst sequenceUpdateEpic: Epic<Action<Sequence|Error|null, Sequence|null>, StoreState, Deps>\n  = (action$, store, deps) =>\n    action$.ofType(SEQUENCE_UPDATE)\n      .filter(action => action.status === ActionStatus.Start)\n      .flatMap(action =>\n        deps.sequences.update(action.meta as Sequence)\n          .map(result => sequenceUpdate(action.meta as Sequence, result))\n          .catch((e: Error | ApiError) => {\n            if ((e as ApiError).errors && (e as ApiError).errors!.DaysOfWeek &&\n              (e as ApiError).errors!.DaysOfWeek === 'DaysOfWeek is required.') {\n              (e as ApiError).errors!.DaysOfWeek =\n                'You must select at least one day to send this Sequence on.';\n            }\n            return Observable.of(toastSet(e));\n          }),\n      );\n\nconst sequenceShareEpic: Epic<Action<Sequence | Error | null, Sequence | null>, StoreState, Deps>\n  = (action$, store, deps) =>\n    action$.ofType(SEQUENCE_SHARE)\n      .filter(action => action.status === ActionStatus.Start)\n      .flatMap(action =>\n        deps.sequences.share(action.meta as Sequence)\n          .map(result => sequenceShare(action.meta as Sequence, result))\n          .catch((e: Error | ApiError) => {\n            if ((e as ApiError).errors && (e as ApiError).errors!.DaysOfWeek &&\n              (e as ApiError).errors!.DaysOfWeek === 'DaysOfWeek is required.') {\n              (e as ApiError).errors!.DaysOfWeek =\n                'You must select at least one day to send this Sequence on.';\n            }\n            return Observable.of(toastSet(e));\n          }),\n      );\n\nconst sequenceDeleteEpic: Epic<Action<Sequence, null>, StoreState, Deps>\n  = (action$, store, deps) =>\n    action$.ofType(SEQUENCE_DELETE)\n      .filter(action => action.status === ActionStatus.Start)\n      .flatMap(action =>\n        deps.sequences.delete(action.meta)\n          .map(result => sequenceDelete(action.meta, null))\n          .catch((e) => {\n            // handle 404 as completion\n            if (e as ApiError && e.code === 404) {\n              return Observable.of(sequenceDelete(action.meta, null));\n            }\n\n            throw e;\n          })\n          .catch((e: Error) => Observable.of(sequenceDelete(action.meta, e))),\n      );\n\nconst sequenceSelectEpic: Epic<Action<\n  string|SequenceRecipientListMeta, Sequence|SequenceRecipient[]\n>, StoreState, Deps>\n  = (action$, store, deps) =>\n    action$.ofType(SEQUENCE_SELECT)\n      .filter(action => action.status === ActionStatus.Start)\n      .flatMap(action =>\n        deps.sequences.get(action.meta as string)\n          .map(result =>\n            sequenceSelect(action.meta as string, result),\n          ),\n      );\n\nconst sequenceCSVUploadEpic: Epic<\n  Action<File|Error|null, SequenceCsvUploadPayload|null>,\n  StoreState,\n  Deps\n> = (action$, store, deps) =>\n  action$.ofType(SEQUENCE_CSV_UPLOAD)\n    .filter(action => action.status === ActionStatus.Start)\n    .flatMap((action: Action<File, SequenceCsvUploadPayload>) => {\n      let cloudFile = '';\n      return deps.cloudFile.upload(action.meta)\n        .flatMap((response) => {\n          cloudFile = response.cloudFile;\n          return deps.sequences.parseCsv(response.cloudFile);\n        })\n        .map(response =>\n          sequenceCsvUpload(action.meta, {\n            cloudFile,\n            headers: response.headers,\n            emailHeader: response.emailHeader,\n            familyNameHeader: response.familyNameHeader,\n            givenNameHeader: response.givenNameHeader,\n          }),\n        )\n        .catch(error => Observable.merge(\n          Observable.of(toastSet(error)),\n          Observable.of(sequenceCsvUpload(action.meta, error)),\n        ));\n    });\n\nconst sequenceDuplicateEpic: Epic<\n  Action<string | Error | null, Sequence | null> | RouterAction, StoreState, Deps\n>\n= (action$, store, deps) =>\n  action$.ofType(SEQUENCE_DUPLICATE)\n    .filter((\n      action: Action<string | Error | null, Sequence | null>,\n    ) => action.status === ActionStatus.Start)\n    .flatMap((action: Action<string | Error | null, Sequence | null>) =>\n      deps.sequences.duplicate(action.meta as string)\n        .flatMap(result =>\n          Observable.concat(\n            Observable.of(sequenceDuplicate(action.meta as string, result)),\n            Observable.of(push(`/sequences/${result.id}`)),\n          ),\n        )\n        .catch(error => Observable.of(toastSet(error))),\n    );\n\nconst sequenceExportEpic: Epic<Action<Sequence|Error|null, null>, StoreState, Deps>\n  = (action$, store, deps) =>\n    action$.ofType(SEQUENCE_EXPORT)\n      .filter(action => action.status === ActionStatus.Start)\n      .flatMap(action =>\n        deps.sequences.export((action.meta as Sequence).id)\n          .map((file) => {\n            FileSaver.saveAs(file, `sequence-${(action.meta as Sequence).name}.csv`);\n            return sequenceExport(action.meta as Sequence, null);\n          })\n          .catch(error => Observable.of(toastSet(error))),\n      );\n\nconst sequenceCountEpic: Epic<Action<null, Sequence[]>, StoreState, Deps>\n  = (action$, store, deps) =>\n    action$.ofType(SEQUENCE_COUNT)\n      .filter(action => action.status === ActionStatus.Start)\n      .flatMap(action =>\n        deps.sequences.list(false)\n          .map(result => sequenceCount(action.meta, result)),\n      );\n\nexport default [\n  locationChangeUpdateSequences,\n  locationChangeSelectSequence,\n  sequenceCreateEpic,\n  sequenceListEpic,\n  sequenceUpdateEpic,\n  sequenceDeleteEpic,\n  sequenceSelectEpic,\n  sequenceCSVUploadEpic,\n  sequenceDuplicateEpic,\n  sequenceExportEpic,\n  sequenceCountEpic,\n  sequenceShareEpic,\n];\n"]}]}