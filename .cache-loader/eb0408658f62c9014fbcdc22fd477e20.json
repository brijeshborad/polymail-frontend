{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Sequences/routes/SequenceDetail/StageList/StageList.tsx","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Sequences/routes/SequenceDetail/StageList/StageList.tsx","mtime":1675280254088},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Sequences/routes/SequenceDetail/StageList/StageList.tsx","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Sequences/routes/SequenceDetail/StageList/StageList.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport classnames from 'classnames';\nimport { Resource } from '@src/types';\nimport { SequenceStage, Sequence } from '@src/types/sequences';\nimport './StageList.scss';\nimport Checkbox from '@src/components/Form/Checkbox/Checkbox';\nimport StageCell from '@src/routes/Sequences/routes/SequenceDetail/StageList/StageCell';\nimport { filter, includes } from 'lodash';\nimport { createSequenceStage } from '@src/mocks/sequences';\nimport { SequenceStageCreateMeta, SequenceStageUpdateMeta } from '@src/ducks/sequenceStages';\nimport { PulseGem } from '@src/components/Base/PulseGem';\nimport Confirm, { Props as ConfirmProps } from '@src/components/Base/Confirm';\nimport { RouteComponentProps } from 'react-router';\n\nexport interface StateProps {\n  selectedSequence?: Sequence;\n  stages: Array<Resource<SequenceStage>>;\n  showNewStageGem?: boolean;\n  showFirstStageGem?: boolean;\n}\n\nexport interface DispatchProps {\n  createStage: (meta: SequenceStageCreateMeta) => void;\n  deleteStage: (stage: SequenceStage) => void;\n  updateStage: (stage: SequenceStageUpdateMeta) => void;\n  duplicateStage: (stage: SequenceStage) => void;\n}\n\nexport interface State {\n  checked: { [id: string]: boolean };\n  confirmProps?: ConfirmProps;\n}\n\nclass StageList extends React.PureComponent<\n  StateProps & DispatchProps & RouteComponentProps<any>, State\n> {\n  constructor() {\n    super();\n\n    this.state = {\n      checked: {},\n    };\n  }\n\n  handleCheckAll = () => {\n    const { checked } = this.state;\n    const { stages } = this.props;\n    const newChecked = {};\n\n    // TODO(SHIN): Determine mechanism to show loading vs empty state when calling list\n    if (!stages.length) {\n      return;\n    }\n\n    const allChecked = filter(checked, c => c).length === stages.length;\n\n    if (allChecked) {\n      stages.forEach((s) => {\n        if (s.data) {\n          newChecked[s.data.id] = false;\n        }\n      });\n    } else {\n      stages.forEach((s) => {\n        if (s.data) {\n          newChecked[s.data.id] = false;\n        }\n      });\n    }\n\n    this.setState({\n      checked: newChecked,\n    });\n  }\n\n  handleCheckboxChange = (id: string) => {\n    const{ checked } = this.state;\n\n    this.setState({\n      checked: {\n        ...checked,\n        [id]: !checked[id],\n      },\n    });\n  }\n\n  // TODO(SHIN): Update handling of creating new sequence stage & instance with UI implementation\n  handleCreate = () => {\n    const { createStage, selectedSequence } = this.props;\n    const mockStage = createSequenceStage({ sequence: selectedSequence && selectedSequence.id });\n    createStage({ stage: mockStage, navigateTo: true });\n  }\n\n  handleDelete = () => {\n    const { deleteStage, stages } = this.props;\n    const checked = Object.keys(this.state.checked)\n      .filter(key => !!this.state.checked[key]);\n    const checkedStages = stages\n      .filter(stage => stage.data && includes(checked, stage.data.id));\n\n    const deleteHandler = () => {\n      // Run through all stages and delete\n      checkedStages.forEach((resource) => {\n        const stage = resource.data!;\n        deleteStage(stage);\n      });\n\n      this.setState({ confirmProps: undefined });\n    };\n\n    // Show confirm dialogue to delete stages\n    const deleteDescriptor = Object.keys(checked).length > 1\n      ? 'these Stages'\n      : 'this Stage';\n    const confirmProps: ConfirmProps = {\n      title: `Delete ${deleteDescriptor}?`,\n      message: `Are you sure you want to delete ${deleteDescriptor}?`\n        + ' Any analytics and recipients data will be lost forever.',\n      confirmCopy: 'Delete',\n      cancelCopy: 'Cancel',\n      onConfirm: () => deleteHandler(),\n      onCancel: () => this.setState({ confirmProps: undefined }),\n    };\n\n    this.setState({\n      confirmProps,\n    });\n  }\n\n  handleDuplicate = () => {\n    const { stages, duplicateStage } = this.props;\n\n    const checked = Object.keys(this.state.checked)\n      .filter(key => !!this.state.checked[key]);\n    const checkedStages = stages\n      .filter(stage => stage.data && includes(checked, stage.data.id));\n\n    if (checkedStages.length === 1 && checkedStages[0].data) {\n      duplicateStage(checkedStages[0].data);\n    }\n  }\n\n  render() {\n    const { stages, selectedSequence, showFirstStageGem, showNewStageGem } = this.props;\n    const { checked, confirmProps } = this.state;\n\n    // TODO(SHIN): Identify way to check if list is refreshing or empty\n    // if (!stages.length) {\n    //   return <div />;\n    // }\n\n    const numChecked = filter(checked, c => c).length;\n    const allChecked = filter(checked, c => c).length === stages.length;\n\n    return (\n      <div className=\"stage-list\">\n        {confirmProps &&\n          <Confirm\n            {...confirmProps}\n          />\n        }\n        <div className=\"header\">\n          <div className=\"checked\">\n            <Checkbox\n              onChange={this.handleCheckAll}\n              checked={allChecked}\n            />\n          </div>\n          {!!numChecked && <div className=\"action-bar\">\n            <span className=\"selected-num\">\n              {`${numChecked} selected`}\n            </span>\n            <button\n              className={classnames('duplicate', {\n                disabled: numChecked !== 1,\n              })}\n              onClick={this.handleDuplicate}\n            >\n              Duplicate\n            </button>\n            <button>Export</button>\n            <button\n              className=\"delete\"\n              onClick={this.handleDelete}\n            >\n              Delete\n            </button>\n          </div>}\n          {showNewStageGem &&\n            <PulseGem left=\"-20px\" top=\"-16px\" />\n          }\n          <button\n            className=\"new-stage\"\n            onClick={this.handleCreate}\n          >\n            + New Stage\n          </button>\n        </div>\n        {!!stages.length && stages.map((s, i) => (s.data &&\n          [\n            showFirstStageGem && i === 0 &&\n              <PulseGem top=\"34px\" left=\"-28px\" />,\n            <StageCell\n              stage={s.data}\n              key={s.data.id}\n              onCheckboxChange={this.handleCheckboxChange}\n              checked={checked[s.data.id]}\n              index={s.data.order}\n              readOnly={selectedSequence && selectedSequence.archived}\n            />,\n          ]\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default StageList;\n"]}]}