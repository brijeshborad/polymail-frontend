{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Login/components/ChoosePassword/index.tsx","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Login/components/ChoosePassword/index.tsx","mtime":1675280254078},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IENob29zZVBhc3N3b3JkIGZyb20gJy4vQ2hvb3NlUGFzc3dvcmQnOwppbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnOwppbXBvcnQgeyB0b2FzdFNldCB9IGZyb20gJ0BzcmMvZHVja3MvdG9hc3RzJzsKaW1wb3J0IHsgbWVDcmVhdGUgfSBmcm9tICdAc3JjL2R1Y2tzL21lJzsKdmFyIG1hcFN0YXRlVG9Qcm9wcyA9IGZ1bmN0aW9uIChzdGF0ZSwgb3duUHJvcHMpIHsKICAgIHZhciBzZWFyY2ggPSBuZXcgVVJMU2VhcmNoUGFyYW1zKG93blByb3BzLmxvY2F0aW9uLnNlYXJjaCk7CiAgICB2YXIgdHlwZSA9IHNlYXJjaC5nZXQoJ2FjY291bnRUeXBlJykgfHwgJyc7CiAgICB2YXIgZW1haWwgPSBzZWFyY2guZ2V0KCdlbWFpbCcpIHx8ICcnOwogICAgdmFyIGZpcnN0TmFtZSA9IHNlYXJjaC5nZXQoJ2ZpcnN0TmFtZScpIHx8ICcnOwogICAgdmFyIGxhc3ROYW1lID0gc2VhcmNoLmdldCgnbGFzdE5hbWUnKSB8fCAnJzsKICAgIHZhciB0ZWFtTmFtZSA9IHNlYXJjaC5nZXQoJ3RlYW1OYW1lJykgfHwgJyc7CiAgICB2YXIgc2VjcmV0ID0gc2VhcmNoLmdldCgnc2VjcmV0JykgfHwgJyc7CiAgICB2YXIgdGVhbUludml0ZU5vbmNlID0gc2VhcmNoLmdldCgndGVhbUludml0ZU5vbmNlJykgfHwgJyc7CiAgICB2YXIgdGVhbUludml0ZVBheWxvYWQgPSBzZWFyY2guZ2V0KCd0ZWFtSW52aXRlUGF5bG9hZCcpIHx8ICcnOwogICAgcmV0dXJuIHsKICAgICAgICB0eXBlOiB0eXBlLAogICAgICAgIGVtYWlsOiBlbWFpbCwKICAgICAgICBmaXJzdE5hbWU6IGZpcnN0TmFtZSwKICAgICAgICBsYXN0TmFtZTogbGFzdE5hbWUsCiAgICAgICAgdGVhbU5hbWU6IHRlYW1OYW1lLAogICAgICAgIHNlY3JldDogc2VjcmV0LAogICAgICAgIHRlYW1JbnZpdGVOb25jZTogdGVhbUludml0ZU5vbmNlLAogICAgICAgIHRlYW1JbnZpdGVQYXlsb2FkOiB0ZWFtSW52aXRlUGF5bG9hZCwKICAgICAgICB1bnN1YnNjcmliZXI6IHN0YXRlLnVuc3Vic2NyaWJlclNpZ251cCwKICAgICAgICBzaWduVXBQZW5kaW5nOiBzdGF0ZS5zaWduVXBQZW5kaW5nLAogICAgfTsKfTsKdmFyIG1hcERpc3BhdGNoVG9Qcm9wcyA9IGZ1bmN0aW9uIChkaXNwYXRjaCkgeyByZXR1cm4gKHsKICAgIHNldFRvYXN0OiBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiBkaXNwYXRjaCh0b2FzdFNldChlcnIpKTsgfSwKICAgIHNpZ251cDogZnVuY3Rpb24gKG1ldGEpIHsgcmV0dXJuIGRpc3BhdGNoKG1lQ3JlYXRlKG1ldGEpKTsgfSwKfSk7IH07CmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMpKENob29zZVBhc3N3b3JkKTsK"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Login/components/ChoosePassword/index.tsx","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Login/components/ChoosePassword/index.tsx"],"names":[],"mappings":"AAAA,OAAO,cAA6C,MAAM,kBAAkB,CAAC;AAC7E,OAAO,EAAE,OAAO,EAAY,MAAM,aAAa,CAAC;AAIhD,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAC7C,OAAO,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AAEzC,IAAM,eAAe,GAAG,UAAC,KAAiB,EAAE,QAAkC;IAC5E,IAAM,MAAM,GAAG,IAAI,eAAe,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IAC7D,IAAM,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;IAC7C,IAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;IACxC,IAAM,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;IAChD,IAAM,QAAQ,GAAG,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;IAC9C,IAAM,QAAQ,GAAG,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;IAC9C,IAAM,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;IAC1C,IAAM,eAAe,GAAG,MAAM,CAAC,GAAG,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC;IAC5D,IAAM,iBAAiB,GAAG,MAAM,CAAC,GAAG,CAAC,mBAAmB,CAAC,IAAI,EAAE,CAAC;IAEhE,OAAO;QACL,IAAI,MAAA;QACJ,KAAK,OAAA;QACL,SAAS,WAAA;QACT,QAAQ,UAAA;QACR,QAAQ,UAAA;QACR,MAAM,QAAA;QACN,eAAe,iBAAA;QACf,iBAAiB,mBAAA;QACjB,YAAY,EAAE,KAAK,CAAC,kBAAkB;QACtC,aAAa,EAAE,KAAK,CAAC,aAAa;KACnC,CAAC;AACJ,CAAC,CAAC;AAEF,IAAM,kBAAkB,GAAG,UAAC,QAAuB,IAAoB,OAAA,CAAC;IACtE,QAAQ,EAAE,UAAA,GAAG,IAAI,OAAA,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAvB,CAAuB;IACxC,MAAM,EAAE,UAAA,IAAI,IAAI,OAAA,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAxB,CAAwB;CACzC,CAAC,EAHqE,CAGrE,CAAC;AAEH,eAAe,OAAO,CAAC,eAAe,EAAE,kBAAkB,CAAC,CAAC,cAAc,CAAC,CAAC","sourcesContent":["import ChoosePassword, { StateProps, DispatchProps } from './ChoosePassword';\nimport { connect, Dispatch } from 'react-redux';\n\nimport { StoreState } from '@src/types';\nimport { RouteComponentProps } from 'react-router';\nimport { toastSet } from '@src/ducks/toasts';\nimport { meCreate } from '@src/ducks/me';\n\nconst mapStateToProps = (state: StoreState, ownProps: RouteComponentProps<any>): StateProps => {\n  const search = new URLSearchParams(ownProps.location.search);\n  const type = search.get('accountType') || '';\n  const email = search.get('email') || '';\n  const firstName = search.get('firstName') || '';\n  const lastName = search.get('lastName') || '';\n  const teamName = search.get('teamName') || '';\n  const secret = search.get('secret') || '';\n  const teamInviteNonce = search.get('teamInviteNonce') || '';\n  const teamInvitePayload = search.get('teamInvitePayload') || '';\n\n  return {\n    type,\n    email,\n    firstName,\n    lastName,\n    teamName,\n    secret,\n    teamInviteNonce,\n    teamInvitePayload,\n    unsubscriber: state.unsubscriberSignup,\n    signUpPending: state.signUpPending,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>): DispatchProps => ({\n  setToast: err => dispatch(toastSet(err)),\n  signup: meta => dispatch(meCreate(meta)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChoosePassword);\n"]}]}