{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/db.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/db.ts","mtime":1675280254063},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/db.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/db.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable, Observer } from 'rxjs';\nimport { FileUploadMeta, Commit, CommitStatus, HistoryObject, Draft } from '@src/types';\nimport { initSearchDb, getSearchDb } from './searchDb';\nimport { getSearchDbConfig } from './device';\nimport { AUTH_TOKEN_NONE } from '@src/api/base';\nimport { getCreateClearCacheStatus, saveClearCacheStatus } from './cache';\nimport { sendTriggerElectronClearCache } from '@src/worker/bridge/workerEvents';\nimport { deleteFile, unserializeFile, serializeFile } from './filesystem';\nimport { fetchStagedDrafts } from './models/draft';\nimport { fetchRefreshCommits } from './commit';\nimport { LogLevel } from '@src/api/log';\nimport { recordLogFunc } from './log_worker';\n\n// Enable debug / logging of IndexDB call times\nlet userDebug = false;\nlet userDebugPrefix = '';\nlet userDebugCb: recordLogFunc | undefined;\nlet forceDebug = false;\n\nexport function enableForceDebug() {\n  forceDebug = true;\n\n  // tslint:disable-next-line:no-console\n  console.debug('Enabled IDB Logs to Console.');\n}\n\nexport function enableUserDebug(prefix: string, cb: recordLogFunc) {\n  userDebug = true;\n  userDebugPrefix = prefix;\n  userDebugCb = cb;\n\n  if (userDebugPrefix !== '') {\n    userDebugPrefix += ': ';\n  }\n\n  // tslint:disable-next-line:no-console\n  console.debug('Enabled IDB User Logs.', { userDebug, userDebugPrefix });\n}\n\nexport function disableUserDebug() {\n  if (!userDebug) {\n    return;\n  }\n\n  userDebug = false;\n  userDebugPrefix = '';\n  userDebugCb = undefined;\n\n  // tslint:disable-next-line:no-console\n  console.debug('Disabled IDB User Logs.');\n}\n\nfunction debugLog(store: Stores, timer: number, method: string, data?: any) {\n\n  if (userDebug && userDebugCb) {\n    let message = userDebugPrefix + 'Completed IDB-' + method + '-' + store\n      + ' in ' + (performance.now() - timer).toFixed(2) + 'ms';\n\n    if (data && typeof test !== 'function') {\n      // Extract index?\n      if (data.index) {\n        message += '. Index: ' + data.index;\n      }\n\n      // Extract range of object\n      if (data.range) {\n        message += '. Range: ' + JSON.stringify(data.range);\n      }\n\n      // Extract count of object\n      if (data.length) {\n        message += '. Count: ' + data.length;\n      }\n\n      // Extract length of object\n      const parsed = JSON.stringify(data);\n      if (parsed) {\n        message += '. Bytes: ' + parsed.length;\n      }\n    }\n\n    userDebugCb(LogLevel.Debug, message);\n  }\n\n  if (forceDebug) {\n    // tslint:disable-next-line:no-console\n    console.debug(\n      'IDB-' + method + '-' + store,\n      (performance.now() - timer).toFixed(2) + 'ms',\n      data,\n    );\n  }\n}\n\n// Clear Cache Mechanism\nexport enum ClearCacheMechanism {\n  Default,\n  ElectronBridge,\n  WorkerElectronBridge,\n}\n\nlet clearCacheMechanism = ClearCacheMechanism.Default;\n\nexport function setClearCacheMechanism(mechanism: ClearCacheMechanism) {\n  clearCacheMechanism = mechanism;\n}\n\nexport function getClearCacheMechanism(): ClearCacheMechanism {\n  return clearCacheMechanism;\n}\n\n// Stores enum for\nexport enum Stores {\n  ActivityFeed = 'activityFeed',\n  Calendars = 'calendars',\n  CalendarEvents = 'calendarEvents',\n  Commits = 'commits',\n  ContactGroups = 'contactGroups',\n  ContactNotes = 'contactNotes',\n  Contacts = 'contacts',\n  Drafts = 'drafts',\n  FileUploads = 'fileUploads',\n  MessageBodies = 'messageBodies',\n  SharedThreads = 'sharedThreads',\n  TeamMembers = 'teamMembers',\n  Templates = 'templates',\n  Threads = 'threads',\n  Workers = 'workers',\n  KeyValue = 'keyValue',\n}\n\n// Version needs to be incremented when adding stores or indexes\nconst DB_NAME = 'polymail';\nconst DB_VERSION = 29;\n// Users who update, and have version below this number will have a clear cache\nconst DB_MIN_VERSION_NO_CLEAR_CACHE = 29;\n\n// Increment to update db via the migrateDb function below\n// This allows migrations without a full clear cache\nexport const DB_MIGRATION_VERSION = 1;\n\nconst COMMITS_RESTORE_FILENAME = 'commits-restore.json';\nconst DRAFTS_RESTORE_FILENAME = 'drafts-restore.json';\n\n// IMPORTANT: READ WHEN UPGRADING https://dexie.org/docs/Tutorial/Design#database-versioning\nexport const SEARCH_DB_VERSION = DB_MIN_VERSION_NO_CLEAR_CACHE * 1.0 / 10;\n\n// Holds the indexed db instance\nlet _db: IDBDatabase|null = null;\nlet dbOpen = true;\nlet allowReconnect = true;\n\nconst closeEventListener = () => {\n  dbOpen = false;\n  _db?.removeEventListener('close', closeEventListener);\n  _db = null;\n};\n\n// isDbReady returns whether the db connection is ready\nexport const isDbReady = (): boolean =>  {\n  return _db !== null && dbOpen;\n};\n\n// migrateDb allows upgrading data in a database without a full clear cache\nfunction migrateDb(currentVersion: number): Observable<null> {\n  const ops: Observable<null>[] = [];\n\n  if (currentVersion < 1) {\n    // Clear out calendars, calendar events, and sync state for calendars\n    ops.push(clear(Stores.Calendars));\n    ops.push(clear(Stores.CalendarEvents));\n    ops.push(\n      listRange(Stores.Workers, prefixKeyRange('CalendarEventSync-'))\n        .flatMap(\n          (workers: any[]) => deleteBatch(Stores.Workers, workers.map(worker => worker.worker),\n        )),\n    );\n  }\n\n  if (ops.length === 0) {\n    return Observable.of(null);\n  }\n\n  return Observable.zip(...ops).map(() => null);\n}\n\nexport function prefixKeyRange(prefix: string): IDBKeyRange {\n  return IDBKeyRange.bound(\n    prefix,\n    prefix + '\\uffff',\n    false,\n    false,\n  );\n}\n\n// initDb must be called by app and worker init once\nexport function initDb(force: boolean = false): Observable<IDBDatabase> {\n  const usualCheck = !force && dbOpen && _db;\n  if (usualCheck && _db) {\n    return Observable.of(_db);\n  }\n\n  if (!force && !allowReconnect) {\n    return Observable.throw(new Error('programmer: clear cache in progress'));\n  }\n\n  // create new instance and set it\n  return createDbInstance()\n    .flatMap((instance) => {\n      _db = instance;\n      dbOpen = true;\n      _db.addEventListener('close', closeEventListener);\n      return initSearchDb();\n    })\n    .flatMap(() => getCreateClearCacheStatus())\n    .flatMap((status) => {\n      // Handle DB Migrations if needed\n      if (!status.version || status.version !== DB_MIGRATION_VERSION) {\n        // Run DB Migration\n        return migrateDb(status.version ? status.version : 0)\n          .flatMap(() => {\n            status.version = DB_MIGRATION_VERSION;\n            return saveClearCacheStatus(status);\n          });\n      }\n\n      return Observable.of(null);\n    })\n    .flatMap(() => {\n      // These commit restores only apply to electron builds\n      if (clearCacheMechanism === ClearCacheMechanism.Default) {\n        return Observable.of(null);\n      }\n\n      // Handle commits\n      const commitsRestore = unserializeFile<Commit[]>(COMMITS_RESTORE_FILENAME)\n        .flatMap((commits) => {\n          const cleanedCommits = commits.map((c) => {\n            delete c.id;\n\n            if (c.resource === HistoryObject.DraftAttachment) {\n              const e = new Error('Attachment upload failed. Please try again');\n              c.status = CommitStatus.Error;\n              c.rehydrateMeta = {\n                ...c.rehydrateMeta,\n                error: e,\n              };\n            }\n\n            return c;\n          });\n          return load(Stores.Commits, cleanedCommits);\n        })\n        .flatMap(() => deleteFile(COMMITS_RESTORE_FILENAME))\n        .catch((e: DOMException) => {\n          if (e.code && e.code === e.NOT_FOUND_ERR) {\n            return Observable.of(null);\n          }\n          throw e;\n        });\n\n      // Handle Drafts\n      const draftsRestore = unserializeFile<Draft[]>(DRAFTS_RESTORE_FILENAME)\n        .flatMap((drafts) => {\n          return load(Stores.Drafts, drafts);\n        })\n        .flatMap(() => deleteFile(DRAFTS_RESTORE_FILENAME))\n        .catch((e: DOMException) => {\n          if (e.code && e.code === e.NOT_FOUND_ERR) {\n            return Observable.of(null);\n          }\n          throw e;\n        });\n\n      return Observable.zip(commitsRestore, draftsRestore).map(() => null);\n    })\n    .map(() => _db!);\n}\n\nexport function setAllowReconnect(allow: boolean) {\n  allowReconnect = allow;\n}\n\nexport function getAllowReconnect(): boolean {\n  return allowReconnect;\n}\n\n// createDbInstance creates a db instance\nfunction createDbInstance(): Observable<IDBDatabase> {\n  return Observable.create((observer: Observer<any>) => {\n    const timer = performance.now();\n    debugLog('all' as any, timer, 'createdbstart');\n\n    const open = indexedDB.open(DB_NAME, DB_VERSION);\n    open.onsuccess = (event) => {\n      debugLog('all' as any, timer, 'createdbsuccess');\n\n      open.result.onversionchange = () => {\n        open.result.close();\n      };\n\n      observer.next(open.result);\n      observer.complete();\n    };\n\n    open.onerror = (e: ErrorEvent) => {\n      debugLog('all' as any, timer, 'createdberror');\n\n      observer.error(open.error);\n    };\n\n    // Handles DB upgrades and index creations\n    open.onupgradeneeded = (e) => {\n      debugLog('all' as any, timer, 'createdbupgradeneededstart');\n\n      // Clear Stores if really old version\n      if (e.oldVersion < DB_MIN_VERSION_NO_CLEAR_CACHE) {\n        Object.keys(Stores).forEach((store) => {\n          const name = Stores[store];\n          if (open.result.objectStoreNames.contains(name)) {\n            open.result.deleteObjectStore(name);\n          }\n        });\n      }\n\n      // Create Stores\n      const basicStores: Stores[] = [\n        Stores.ActivityFeed,\n        Stores.Calendars,\n        Stores.CalendarEvents,\n        Stores.Contacts,\n        Stores.ContactGroups,\n        Stores.ContactNotes,\n        Stores.Drafts,\n        Stores.MessageBodies,\n        Stores.SharedThreads,\n        Stores.TeamMembers,\n        Stores.Templates,\n      ];\n      basicStores.forEach((store) => {\n        // create store if it doesn't exist\n        if (!open.result.objectStoreNames.contains(store)) {\n          open.result.createObjectStore(store, { keyPath: 'id' });\n        }\n      });\n\n      if (!open.result.objectStoreNames.contains(Stores.KeyValue)) {\n        open.result.createObjectStore(Stores.KeyValue);\n      }\n\n      if (!open.result.objectStoreNames.contains(Stores.Commits)) {\n        open.result.createObjectStore(Stores.Commits, { keyPath: 'id', autoIncrement: true });\n      }\n      if (!open.result.objectStoreNames.contains(Stores.FileUploads)) {\n        open.result.createObjectStore(Stores.FileUploads, { keyPath: 'id' });\n      }\n\n      if (!open.result.objectStoreNames.contains(Stores.Workers)) {\n        open.result.createObjectStore(Stores.Workers, { keyPath: 'worker' });\n      }\n\n      if (!open.result.objectStoreNames.contains(Stores.Threads)) {\n        open.result.createObjectStore(Stores.Threads, { keyPath: 'id' });\n      }\n\n      // Thread Indexes\n      interface IndexArgs {\n        name: string;\n        key: string|string[];\n        options: IDBIndexParameters;\n        deleted?: boolean;\n      }\n      const threadIndexes: IndexArgs[] = [\n        // Index for box queries\n        {\n          name: 'box_sort',\n          key: ['box', 'sort'],\n          options: { unique: false },\n        },\n        {\n          name: 'account_internal',\n          key: ['account', 'internal'],\n          options: { unique: false },\n        },\n        {\n          name: 'account_box_sort',\n          key: ['account', 'box', 'sort'],\n          options: { unique: false },\n        },\n\n        // Index for Sent filter queries\n        {\n          name: 'lastsent',\n          key: ['lastSent'],\n          options: { unique: false },\n        },\n        {\n          name: 'account_lastsent',\n          key: ['account', 'lastSent'],\n          options: { unique: false },\n        },\n\n        // Index for List box queries\n        {\n          name: 'list_internal',\n          key: ['list', 'internal'],\n          options: { unique: false },\n        },\n        {\n          name: 'account_list_internal',\n          key: ['account', 'list', 'internal'],\n          options: { unique: false },\n        },\n\n        // Index for Email Lookup\n        {\n          name: 'participantemails',\n          key: 'participantEmails',\n          options: { unique: false, multiEntry: true },\n        },\n\n        // Index for starred threads\n        {\n          name: 'starred',\n          key: 'starredIndex',\n          options: { unique: false },\n          deleted: true,\n        },\n\n        {\n          name: 'starred_internal',\n          key: ['starredIndex', 'internal'],\n          options: { unique: false },\n        },\n\n        {\n          name: 'starred_account_internal',\n          key: ['starredIndex', 'account', 'internal'],\n          options: { unique: false },\n        },\n\n        // Index for threads with follow up reminders\n        {\n          name: 'waiting',\n          key: 'waitingIndex',\n          options: { unique: false },\n        },\n\n        // Index for unread threads in a list\n        {\n          name: 'account_list_unread',\n          key: ['account', 'listUnreadIndex'],\n          options: { unique: false },\n        },\n\n        // Index for read/unread threads in inbox\n        {\n          name: 'account_inbox_unread',\n          key: ['account', 'inboxUnreadIndex'],\n          options: { unique: false },\n        },\n      ];\n      const threads = open.transaction!.objectStore(Stores.Threads);\n      threadIndexes.forEach((arg) => {\n        const contains = threads.indexNames.contains(arg.name);\n        if (arg.deleted && contains) {\n          threads.deleteIndex(arg.name);\n        } else if (!contains && !arg.deleted) {\n          threads.createIndex(arg.name, arg.key, arg.options);\n        }\n      });\n\n      // Contact Indexes\n      const contactIndexes: IndexArgs[] = [\n        // Index for Email Lookup\n        {\n          name: 'email',\n          key: 'email',\n          options: { unique: false },\n        },\n\n        // Index for Autocomplete\n        {\n          name: 'search',\n          key: 'searchIndex',\n          options: { unique: false, multiEntry: true },\n        },\n      ];\n      const contacts = open.transaction!.objectStore(Stores.Contacts);\n      contactIndexes.forEach((arg) => {\n        if (!contacts.indexNames.contains(arg.name)) {\n          contacts.createIndex(arg.name, arg.key, arg.options);\n        }\n      });\n\n      // Activity Feed Indexes\n      const activityFeedIndexes: IndexArgs[] = [\n        // Sorted by date\n        {\n          name: 'date',\n          key: ['date'],\n          options: { unique: false },\n        },\n        {\n          name: 'type_date',\n          key: ['type', 'date'],\n          options: { unique: false },\n        },\n      ];\n      const activityFeed = open.transaction!.objectStore(Stores.ActivityFeed);\n      activityFeedIndexes.forEach((arg) => {\n        if (!activityFeed.indexNames.contains(arg.name)) {\n          activityFeed.createIndex(arg.name, arg.key, arg.options);\n        }\n      });\n\n      // Calendar Event Indexes\n      const calendarEventIndexes: IndexArgs[] = [\n        {\n          name: 'starttime',\n          key: 'startTime',\n          options: { unique: false },\n        },\n      ];\n      const calendarEvent = open.transaction!.objectStore(Stores.CalendarEvents);\n      calendarEventIndexes.forEach((arg) => {\n        if (!calendarEvent.indexNames.contains(arg.name)) {\n          calendarEvent.createIndex(arg.name, arg.key, arg.options);\n        }\n      });\n\n      // Shared Thread Indexes\n      const sharedThreadIndexes: IndexArgs[] = [\n        {\n          name: 'thread',\n          key: 'thread',\n          options: { unique: false },\n        },\n      ];\n      const sharedThread = open.transaction!.objectStore(Stores.SharedThreads);\n      sharedThreadIndexes.forEach((arg) => {\n        if (!sharedThread.indexNames.contains(arg.name)) {\n          sharedThread.createIndex(arg.name, arg.key, arg.options);\n        }\n      });\n\n      // Message Bodies Index\n      const messageBodiesIndexes: IndexArgs[] = [\n        {\n          name: 'thread',\n          key: 'thread',\n          options: { unique: false },\n        },\n        {\n          name: 'updated',\n          key: 'updated',\n          options: { unique: false },\n        },\n      ];\n      const messageBody = open.transaction!.objectStore(Stores.MessageBodies);\n      messageBodiesIndexes.forEach((arg) => {\n        if (!messageBody.indexNames.contains(arg.name)) {\n          messageBody.createIndex(arg.name, arg.key, arg.options);\n        }\n      });\n    };\n  });\n}\n\n// helper to create a readwrite transaction with custom durability\n//   guarantees for browsers that support it\nfunction getReadWriteTransaction(store: Stores): Observable<IDBTransaction> {\n  switch (store) {\n    // Want to keep safety for Drafts and Commits\n    case Stores.Drafts:\n    case Stores.Commits:\n      return initDb().map(db => db.transaction(store, 'readwrite'));\n    default:\n      return initDb().map(\n        db => (db.transaction as any)(store, 'readwrite', { durability: 'relaxed' }),\n      );\n  }\n}\n\nfunction get(store: Stores, key: any): Observable<any> {\n  return initDb().flatMap((db) => {\n    return Observable.create((observer: Observer<any>) => {\n      const timer = performance.now();\n      const request = db.transaction(store, 'readonly').objectStore(store).get(key);\n      request.onsuccess = () => {\n        debugLog(store, timer, 'get', key);\n        observer.next(request.result);\n        observer.complete();\n      };\n      request.onerror = () => {\n        observer.error(request.error);\n      };\n    });\n  });\n}\n\nfunction bulkGet<T>(store: Stores, keys: any[]): Observable<T[]> {\n  return initDb().flatMap((db) => {\n    return Observable.create((observer: Observer<any>) => {\n      const timer = performance.now();\n      let completed = false;\n      const results: T[] = new Array(keys.length);\n\n      // Handle 0 items\n      if (results.length === 0) {\n        debugLog(store, timer, 'bulkget', keys);\n        observer.next(results);\n        observer.complete();\n        return;\n      }\n\n      // Fetch all keys\n      const transaction = db.transaction(store, 'readonly');\n      const objectStore = transaction.objectStore(store);\n\n      transaction.oncomplete = () => {\n        if (!completed) {\n          debugLog(store, timer, 'bulkget', keys);\n          observer.next(results);\n          observer.complete();\n          completed = true;\n        }\n      };\n\n      transaction.onerror = (e) => {\n        if ((e.target as any) && (e.target as any).error) {\n          observer.error((e.target as any).error);\n        } else {\n          observer.error(transaction.error);\n        }\n      };\n\n      transaction.onabort = (e) => {\n        if ((e.target as any) && (e.target as any).error) {\n          observer.error((e.target as any).error);\n        } else {\n          observer.error(transaction.error);\n        }\n      };\n\n      keys.forEach((key, i) => {\n        const request = objectStore.get(key);\n        request.onsuccess = () => {\n          results[i] = request.result;\n        };\n        request.onerror = () => {\n          // Send error and mark as completed\n          if (!completed) {\n            observer.error(request.error);\n          }\n\n          completed = true;\n\n          // Cancel remaining requests\n          try {\n            transaction.abort();\n            // tslint:disable-next-line: no-empty\n          } catch (e) {\n          }\n        };\n      });\n\n      return () => {\n        if (!completed) {\n          try {\n            transaction.abort();\n            // tslint:disable-next-line: no-empty\n          } catch (e) {\n          }\n        }\n      };\n    });\n  });\n}\n\nfunction save(store: Stores, object: any, key?: any): Observable<null> {\n  return getReadWriteTransaction(store).flatMap(txn =>\n    Observable.create((observer: Observer<null>) => {\n      const timer = performance.now();\n      const request = txn.objectStore(store).put(object, key);\n      request.onsuccess = () => {\n        debugLog(store, timer, 'save', object);\n        observer.next(null);\n        observer.complete();\n        return;\n      };\n      request.onerror = () => {\n        observer.error(request.error);\n        return;\n      };\n    }),\n  );\n}\n\nfunction deleteSingle(store: Stores, key: any): Observable<null> {\n  return getReadWriteTransaction(store).flatMap(txn =>\n    Observable.create((observer: Observer<null>) => {\n      const timer = performance.now();\n      const request = txn.objectStore(store).delete(key);\n      request.onsuccess = () => {\n        debugLog(store, timer, 'del', key);\n        observer.next(null);\n        observer.complete();\n        return;\n      };\n      request.onerror = () => {\n        observer.error(request.error);\n        return;\n      };\n    }),\n  );\n}\n\nfunction load(store: Stores, objects: any[]): Observable<any> {\n  if (objects.length === 0) {\n    debugLog(store, 0, 'load', objects);\n    return Observable.of(null);\n  }\n\n  return getReadWriteTransaction(store).flatMap(txn =>\n    Observable.create((observer: Observer<any>) => {\n      const timer = performance.now();\n\n      const s = txn.objectStore(store);\n      let completed = false;\n\n      txn.oncomplete = () => {\n        completed = true;\n        debugLog(store, timer, 'load', objects);\n        observer.next(null);\n        observer.complete();\n        return;\n      };\n      txn.onerror = (e) => {\n        if (txn.error == null) {\n          // Have to get error off of event since this is a bulk load\n          if (e.target && (e.target as any).error) {\n            observer.error((e.target as any).error);\n            return;\n          }\n\n          observer.error(new Error('programmer: null error in db load'));\n          return;\n        }\n\n        observer.error(txn.error);\n        return;\n      };\n\n      txn.onabort = (e) => {\n        if (e.target && (e.target as any).error) {\n          observer.error((e.target as any).error);\n        } else {\n          observer.error(txn.error);\n        }\n      };\n\n      objects.forEach(obj => s.put(obj));\n\n      return () => {\n        if (!completed) {\n          try {\n            txn.abort();\n            // tslint:disable-next-line: no-empty\n          } catch (e) {\n          }\n        }\n      };\n    }),\n  );\n}\n\nfunction deleteBatch(store: Stores, keys: any[]): Observable<any> {\n  if (keys.length === 0) {\n    debugLog(store, 0, 'delbatch', keys);\n    return Observable.of(null);\n  }\n\n  return getReadWriteTransaction(store).flatMap(txn =>\n    Observable.create((observer: Observer<any>) => {\n      const timer = performance.now();\n      const s = txn.objectStore(store);\n      let completed = false;\n\n      txn.oncomplete = () => {\n        completed = true;\n        debugLog(store, timer, 'delbatch', keys);\n        observer.next(null);\n        observer.complete();\n        return;\n      };\n      txn.onerror = () => {\n        observer.error(txn.error);\n        return;\n      };\n\n      txn.onabort = (e) => {\n        if (e.target && (e.target as any).error) {\n          observer.error((e.target as any).error);\n        } else {\n          observer.error(txn.error);\n        }\n      };\n\n      keys.forEach(key => s.delete(key));\n\n      return () => {\n        if (!completed) {\n          try {\n            txn.abort();\n            // tslint:disable-next-line: no-empty\n          } catch (e) {\n          }\n        }\n      };\n    }),\n  );\n}\n\nfunction deleteIndexRange(\n    store: Stores, index: string, range?: IDBKeyRange, limit?: number,\n): Observable<any> {\n  return listIndexKeys(store, index, range, limit).flatMap(keys => deleteBatch(store, keys));\n}\n\nfunction clear(store: Stores, ignoreCommits: boolean = false): Observable<any> {\n\n  // Add specialized handling to not delete commits or fileuploads that are in progress\n  if (ignoreCommits) {\n    switch (store) {\n      case Stores.FileUploads:\n      case Stores.Commits:\n        return list(\n          store,\n          (model: FileUploadMeta | Commit) =>\n            [CommitStatus.Pending, CommitStatus.Ready, CommitStatus.Processing]\n              .indexOf(model.status) === -1,\n        )\n        .flatMap(models => deleteBatch(store, models.map(model => model.id)));\n      default:\n        break;\n    }\n  }\n\n  return getReadWriteTransaction(store).flatMap(transaction =>\n    Observable.create((observer: Observer<null>) => {\n      const timer = performance.now();\n\n      const request = transaction.objectStore(store).clear();\n      request.onsuccess = () => {\n        debugLog(store, timer, 'clear');\n        observer.next(null);\n        observer.complete();\n        return;\n      };\n      request.onerror = () => {\n        observer.error(request.error);\n        return;\n      };\n    }),\n  );\n}\n\n// Loop through all models in a given store, optionally with a filter function\nfunction list<Model>(\n  store: Stores, filter?: (model: Model) => boolean,\n): Observable<Model[]> {\n  return initDb().flatMap((db) => {\n    return Observable.create((observer: Observer<Model[]>) => {\n      const timer = performance.now();\n      const txn = db.transaction(store, 'readonly');\n      const items: Model[] = [];\n      let completed = false;\n\n      txn.oncomplete = (event) => {\n        debugLog(store, timer, 'list', filter);\n        completed = true;\n        observer.next(items);\n        observer.complete();\n      };\n\n      txn.onerror = (e) => {\n        if (e.target && (e.target as any).error) {\n          observer.error((e.target as any).error);\n        } else {\n          observer.error(txn.error);\n        }\n      };\n\n      txn.onabort = (e) => {\n        if (e.target && (e.target as any).error) {\n          observer.error((e.target as any).error);\n        } else {\n          observer.error(txn.error);\n        }\n      };\n\n      const s = txn.objectStore(store).openCursor();\n\n      s.onsuccess = (event) => {\n        const cursor = event.target as any;\n        if (cursor && cursor.result) {\n          if (!filter || (filter && filter(cursor.result.value))) {\n            items.push(cursor.result.value);\n          }\n          cursor.result.continue();\n        }\n      };\n\n      s.onerror = (e: ErrorEvent) => {\n        observer.error(s.error);\n      };\n\n      return () => {\n        if (!completed) {\n          try {\n            txn.abort();\n          // tslint:disable-next-line: no-empty\n          } catch (e) {\n          }\n        }\n      };\n    });\n  });\n}\n\nfunction listRange<Model>(\n  store: Stores,\n  range: IDBKeyRange,\n): Observable<Model[]> {\n  return initDb().flatMap((db) => {\n    return Observable.create((observer: Observer<Model[]>) => {\n      const timer = performance.now();\n      const txn = db.transaction(store, 'readonly');\n      const items: Model[] = [];\n      let completed = false;\n\n      txn.oncomplete = (event) => {\n        debugLog(store, timer, 'listrange', range);\n        completed = true;\n        observer.next(items);\n        observer.complete();\n      };\n\n      txn.onerror = (e) => {\n        if (e.target && (e.target as any).error) {\n          observer.error((e.target as any).error);\n        } else {\n          observer.error(txn.error);\n        }\n      };\n\n      txn.onabort = (e) => {\n        if (e.target && (e.target as any).error) {\n          observer.error((e.target as any).error);\n        } else {\n          observer.error(txn.error);\n        }\n      };\n\n      const s = txn.objectStore(store).openCursor(range);\n\n      s.onsuccess = (event) => {\n        const cursor = event.target as any;\n        if (cursor && cursor.result) {\n          items.push(cursor.result.value);\n          cursor.result.continue();\n        }\n      };\n\n      s.onerror = (e: ErrorEvent) => {\n        observer.error(s.error);\n      };\n\n      return () => {\n        if (!completed) {\n          try {\n            txn.abort();\n            // tslint:disable-next-line: no-empty\n          } catch (e) {\n          }\n        }\n      };\n    });\n  });\n}\n\nfunction countIndex(store: Stores, index: string, range?: IDBKeyRange): Observable<number> {\n  return initDb().flatMap((db) => {\n    return Observable.create((observer: Observer<number>) => {\n      const timer = performance.now();\n      const txn = db.transaction(store, 'readonly');\n      let completed = false;\n      let count = 0;\n\n      txn.oncomplete = (event) => {\n        debugLog(store, timer, 'countIndex', { index, range, count });\n        completed = true;\n        observer.next(count);\n        observer.complete();\n      };\n\n      txn.onerror = (event: ErrorEvent) => {\n        if ((event.target as any) && (event.target as any).error) {\n          observer.error((event.target as any).error);\n        } else {\n          observer.error(txn.error);\n        }\n      };\n\n      // NOTE(SHIN): Adding abort handler to pass errors to mailcountbot\n      txn.onabort = (e) => {\n        if ((e.target as any) && (e.target as any).error) {\n          observer.error((e.target as any).error);\n        }\n      };\n\n      const s = txn.objectStore(store).index(index).count(range);\n      s.onsuccess = (event) => {\n        count = (event.target as any).result;\n      };\n\n      s.onerror = (e: ErrorEvent) => {\n        if ((e.target as any) && (e.target as any).error) {\n          observer.error((e.target as any).error);\n        } else {\n          observer.error(s.error);\n        }\n      };\n\n      return () => {\n        if (!completed) {\n          try {\n            txn.abort();\n          // tslint:disable-next-line: no-empty\n          } catch (e) {\n          }\n        }\n      };\n    });\n  });\n}\n\nfunction getAll(store: Stores): Observable<any> {\n  return initDb().flatMap((db) => {\n    return Observable.create((observer: Observer<any>) => {\n      const timer = performance.now();\n      const request = db.transaction(store, 'readonly').objectStore(store).getAll();\n      request.onsuccess = () => {\n        debugLog(store, timer, 'get-all-debug');\n        observer.next(request.result);\n        observer.complete();\n      };\n      request.onerror = () => {\n        observer.error(request.error);\n      };\n    });\n  });\n}\n\nfunction countAll(store: Stores): Observable<{[key: string]: number}> {\n  return initDb().flatMap((db) => {\n    return Observable.create((observer: Observer<{ [key: string]: number }>) => {\n      const timer = performance.now();\n      const txn = db.transaction(store, 'readonly');\n      let completed = false;\n      let count = 0;\n\n      txn.oncomplete = (event) => {\n        debugLog(store, timer, 'countIndex', { count });\n        completed = true;\n        observer.next({ [store]: count });\n        observer.complete();\n      };\n\n      txn.onerror = (event: ErrorEvent) => {\n        observer.error(txn.error);\n      };\n\n      txn.onabort = (e) => {\n        if (e.target && (e.target as any).error) {\n          observer.error((e.target as any).error);\n        } else {\n          observer.error(txn.error);\n        }\n      };\n\n      const s = txn.objectStore(store).count();\n      s.onsuccess = (event) => {\n        count = (event.target as any).result;\n      };\n\n      s.onerror = (e: ErrorEvent) => {\n        observer.error(e.error);\n      };\n\n      return () => {\n        if (!completed) {\n          try {\n            txn.abort();\n            // tslint:disable-next-line: no-empty\n          } catch (e) {\n          }\n        }\n      };\n    });\n  });\n}\n\nfunction listIndex<Model>(\n  store: Stores,\n  index: string,\n  range: IDBKeyRange|undefined,\n  desc: boolean,\n  limit?: number,\n  filter?: (model: Model) => boolean,\n): Observable<Model[]> {\n  return initDb().flatMap((db) => {\n    return Observable.create((observer: Observer<Model[]>) => {\n      const timer = performance.now();\n      const txn = db.transaction(store, 'readonly');\n      const items: Model[] = [];\n      let completed = false;\n      txn.oncomplete = (event) => {\n        debugLog(store, timer, 'listindex', { index, range, desc, limit });\n        completed = true;\n        observer.next(items);\n        observer.complete();\n      };\n\n      txn.onerror = (e: ErrorEvent) => {\n        if ((e.target as any) && (e.target as any).error) {\n          observer.error((e.target as any).error);\n        } else {\n          observer.error(txn.error);\n        }\n      };\n\n      // NOTE(SHIN): Adding abort handler to pass errors to mailcountbot\n      txn.onabort = (e) => {\n        if ((e.target as any) && (e.target as any).error) {\n          observer.error((e.target as any).error);\n        } else {\n          observer.error(txn.error);\n        }\n      };\n\n      const s = desc ?\n        txn.objectStore(store).index(index).openCursor(range, 'prev') :\n        txn.objectStore(store).index(index).openCursor(range);\n\n      let numItems = 0;\n      s.onsuccess = (event) => {\n        const cursor = event.target as any;\n        if (cursor && cursor.result) {\n          if (!filter || (filter && filter(cursor.result.value))) {\n            items.push(cursor.result.value);\n\n            // Limit the number of items fetched\n            numItems += 1;\n            if (limit && numItems >= limit) {\n              return;\n            }\n          }\n\n          // Otherwise keep fetching items\n          cursor.result.continue();\n        }\n      };\n\n      s.onerror = (e: ErrorEvent) => {\n        if ((e.target as any) && (e.target as any).error) {\n          observer.error((e.target as any).error);\n        } else {\n          observer.error(s.error);\n        }\n      };\n\n      return () => {\n        if (!completed) {\n          try {\n            txn.abort();\n          // tslint:disable-next-line: no-empty\n          } catch (e) {\n          }\n        }\n      };\n    });\n  });\n}\n\nfunction listIndexKeys(\n  store: Stores,\n  index: string,\n  range?: IDBKeyRange,\n  limit?: number,\n): Observable<string[]> {\n  return initDb().flatMap((db) => {\n    return Observable.create((observer: Observer<string[]>) => {\n      const timer = performance.now();\n      let completed = false;\n\n      const transaction = db.transaction(store, 'readonly');\n      const request = transaction.objectStore(store).index(index).getAllKeys(range, limit);\n\n      // NOTE(SHAHAN): Why do we use event listeners here?\n      request.addEventListener('success', () => {\n        completed = true;\n        debugLog(store, timer, 'listindexkeys', { index, range, limit, data: request.result });\n        observer.next(request.result as string[]);\n        observer.complete();\n      });\n\n      request.addEventListener('error', (e) => {\n        observer.error(e);\n      });\n\n      return () => {\n        if (!completed) {\n          try {\n            transaction.abort();\n            // tslint:disable-next-line: no-empty\n          } catch (e) {\n          }\n        }\n      };\n    });\n  });\n}\n\nexport function resetDb(ignoreCommits: boolean = false): Observable<any> {\n  switch (clearCacheMechanism) {\n    case ClearCacheMechanism.ElectronBridge:\n      if (!ignoreCommits) {\n        return Observable.of(window.PMElectronBridge!.clearCacheV2!());\n      }\n\n      return fetchStagedDrafts()\n        .flatMap(drafts => serializeFile(DRAFTS_RESTORE_FILENAME, drafts))\n        .flatMap(() => fetchRefreshCommits())\n        .flatMap(commits => serializeFile(COMMITS_RESTORE_FILENAME, commits))\n        .flatMap(() => Observable.of(window.PMElectronBridge!.clearCacheV2!()));\n\n    case ClearCacheMechanism.WorkerElectronBridge:\n      if (!ignoreCommits) {\n        return Observable.of(sendTriggerElectronClearCache());\n      }\n\n      return fetchStagedDrafts()\n        .flatMap(drafts => serializeFile(DRAFTS_RESTORE_FILENAME, drafts))\n        .flatMap(() => fetchRefreshCommits())\n        .flatMap(commits => serializeFile(COMMITS_RESTORE_FILENAME, commits))\n        .flatMap(() => Observable.of(sendTriggerElectronClearCache()));\n\n    default:\n      const clearAll = Object.keys(Stores).map(name => clear(Stores[name], ignoreCommits));\n      let searchDbClears: Array<Observable<any>> = [];\n      if (getSearchDbConfig().enabled) {\n        searchDbClears = searchDbClears.concat([\n          Observable.from(\n            getSearchDb().threads.clear(),\n          ),\n          Observable.from(\n            getSearchDb().bodies.clear(),\n          ),\n        ]);\n      }\n\n      const deleteAll = getSearchDbConfig().enabled &&\n        [...clearAll, ...searchDbClears] || [...clearAll];\n\n      return Observable.create((observer: Observer<any>) => {\n        const timer = performance.now();\n\n        Observable.from(deleteAll).concatAll().subscribe({\n          complete: () => {\n            debugLog('allstores' as any, timer, 'resetdb');\n            observer.next(null);\n            observer.complete();\n          },\n          error: e => observer.error(e),\n        });\n      });\n  }\n}\n\n// resetDbIfNeeded resets the db if needed based on the clearCacheStatus\nexport function resetDbIfNeeded(): Observable<null> {\n  return getCreateClearCacheStatus()\n    .flatMap((status) => {\n\n      // Clear cache already complete, can skip\n      if (status.hash === status.completedHash && status.counter === status.completedCounter) {\n        return Observable.of(null);\n      }\n\n      // Handle scenario when going from logged out to logged in case\n      if (status.completedHash === AUTH_TOKEN_NONE) {\n        status.completedHash = status.hash;\n        status.completedCounter = status.counter;\n        return saveClearCacheStatus(status);\n      }\n\n      return resetDb(status.ignoreCommits)\n        .flatMap(() => {\n          status.completedHash = status.hash;\n          status.completedCounter = status.counter;\n          return saveClearCacheStatus(status);\n        });\n    });\n}\n\nexport function startsWith(key: string): IDBKeyRange {\n  return IDBKeyRange.bound(key, key + '\\uffff', false, false);\n}\n\nexport default {\n  get,\n  getAll,\n  bulkGet,\n  save,\n  deleteSingle,\n  load,\n  deleteBatch,\n  deleteIndexRange,\n  clear,\n  countAll,\n  countIndex,\n  list,\n  listRange,\n  listIndex,\n  listIndexKeys,\n  startsWith,\n};\n"]}]}