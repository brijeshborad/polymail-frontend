{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Message/index.tsx","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Message/index.tsx","mtime":1675280254083},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JzsKaW1wb3J0IE1lc3NhZ2UgZnJvbSAnLi9NZXNzYWdlJzsKaW1wb3J0IHsgc2VsZWN0TWVzc2FnZUJvZGllcyB9IGZyb20gJ0BzcmMvZHVja3MvbWVzc2FnZUJvZGllcyc7CnZhciBtYXBTdGF0ZVRvUHJvcHMgPSBmdW5jdGlvbiAoc3RhdGUsIG93blByb3BzKSB7CiAgICB2YXIgbWVzc2FnZUlkID0gb3duUHJvcHMubWF0Y2ggJiYgb3duUHJvcHMubWF0Y2gucGFyYW1zLm1lc3NhZ2VJZDsKICAgIHJldHVybiB7CiAgICAgICAgdGhyZWFkOiBzdGF0ZS5zZWxlY3RlZFRocmVhZCwKICAgICAgICBtZXNzYWdlOiBzdGF0ZS5zZWxlY3RlZFRocmVhZAogICAgICAgICAgICAmJiBzdGF0ZS5zZWxlY3RlZFRocmVhZC5tZXNzYWdlcy5maW5kKGZ1bmN0aW9uIChtc2cpIHsgcmV0dXJuIG1zZy5pZCA9PT0gbWVzc2FnZUlkOyB9KSwKICAgICAgICBtZXNzYWdlQm9keTogc3RhdGUuc2VsZWN0ZWRUaHJlYWQKICAgICAgICAgICAgJiYgc2VsZWN0TWVzc2FnZUJvZGllcyhzdGF0ZSwgc3RhdGUuc2VsZWN0ZWRUaHJlYWQuaWQpCiAgICAgICAgICAgICAgICAuZmluZChmdW5jdGlvbiAoYm9keSkgeyByZXR1cm4gbWVzc2FnZUlkID09PSBib2R5LmlkOyB9KSwKICAgIH07Cn07CmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzKShNZXNzYWdlKTsK"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Message/index.tsx","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Message/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;AAGtC,OAAO,OAAuB,MAAM,WAAW,CAAC;AAEhD,OAAO,EAAE,mBAAmB,EAAE,MAAM,0BAA0B,CAAC;AAE/D,IAAM,eAAe,GAAG,UAAC,KAAiB,EAAE,QAAkC;IAC5E,IAAM,SAAS,GAAG,QAAQ,CAAC,KAAK,IAAI,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC;IAEpE,OAAO;QACL,MAAM,EAAE,KAAK,CAAC,cAAc;QAC5B,OAAO,EAAE,KAAK,CAAC,cAAc;eACxB,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,EAAE,KAAK,SAAS,EAApB,CAAoB,CAAC;QACpE,WAAW,EAAE,KAAK,CAAC,cAAc;eAC5B,mBAAmB,CAAC,KAAK,EAAE,KAAK,CAAC,cAAc,CAAC,EAAE,CAAC;iBACnD,IAAI,CAAC,UAAC,IAAiB,IAAK,OAAA,SAAS,KAAK,IAAI,CAAC,EAAE,EAArB,CAAqB,CAAC;KACxD,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,OAAO,CAAuB,eAAe,CAAC,CAAC,OAAO,CAAC,CAAC","sourcesContent":["import { connect } from 'react-redux';\nimport { StoreState, MessageBody } from '@src/types';\n\nimport Message, { StateProps } from './Message';\nimport { RouteComponentProps } from 'react-router';\nimport { selectMessageBodies } from '@src/ducks/messageBodies';\n\nconst mapStateToProps = (state: StoreState, ownProps: RouteComponentProps<any>): StateProps => {\n  const messageId = ownProps.match && ownProps.match.params.messageId;\n\n  return {\n    thread: state.selectedThread,\n    message: state.selectedThread\n      && state.selectedThread.messages.find(msg => msg.id === messageId),\n    messageBody: state.selectedThread\n      && selectMessageBodies(state, state.selectedThread.id)\n        .find((body: MessageBody) => messageId === body.id),\n  };\n};\n\nexport default connect<StateProps, null, {}>(mapStateToProps)(Message);\n"]}]}