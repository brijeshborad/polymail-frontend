{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/db.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/db.ts","mtime":1675280254055},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnOwppbXBvcnQgeyBEQl9DTEVBUiwgZGJDbGVhciB9IGZyb20gJ0BzcmMvZHVja3MvZGInOwppbXBvcnQgeyBBY3Rpb25TdGF0dXMsIH0gZnJvbSAnQHNyYy90eXBlcyc7CmltcG9ydCB7IGdldENsZWFyQ2FjaGVTdGF0dXMsIGluY3JlbWVudENsZWFyQ2FjaGVDb3VudGVyIH0gZnJvbSAnQHNyYy9saWIvY2FjaGUnOwppbXBvcnQgeyBBVVRIX1RPS0VOX05PTkUgfSBmcm9tICdAc3JjL2FwaS9iYXNlJzsKaW1wb3J0IHsgZ2V0Q2xlYXJDYWNoZU1lY2hhbmlzbSwgQ2xlYXJDYWNoZU1lY2hhbmlzbSB9IGZyb20gJ0BzcmMvbGliL2RiJzsKaW1wb3J0IHsgQ29uZmlybWF0aW9uUG9zaXRvbiwgdG9hc3RTZXQsIENvbmZpcm1hdGlvbkVycm9yIH0gZnJvbSAnQHNyYy9kdWNrcy90b2FzdHMnOwp2YXIgZGJDbGVhckhhbmRsaW5nID0gZnVuY3Rpb24gKGFjdGlvbiQpIHsKICAgIHJldHVybiBhY3Rpb24kLm9mVHlwZShEQl9DTEVBUikKICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChhY3Rpb24pIHsgcmV0dXJuIGFjdGlvbi5zdGF0dXMgPT09IEFjdGlvblN0YXR1cy5TdGFydDsgfSkKICAgICAgICAuZmxhdE1hcChmdW5jdGlvbiAoYWN0aW9uKSB7CiAgICAgICAgcmV0dXJuIGdldENsZWFyQ2FjaGVTdGF0dXMoKQogICAgICAgICAgICAuZmxhdE1hcChmdW5jdGlvbiAoc3RhdHVzKSB7CiAgICAgICAgICAgIC8vIEhhbmRsZSBjYXNlIG9mIG5vdCBoYXZpbmcgYW55IHN0YXR1cyBvciBjdXJyZW50bHkgbG9nZ2VkIG91dAogICAgICAgICAgICBpZiAoIXN0YXR1cyB8fCBzdGF0dXMuY29tcGxldGVkSGFzaCA9PT0gQVVUSF9UT0tFTl9OT05FKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS5vZihhY3Rpb24pLmZpbHRlcihmdW5jdGlvbiAoKSB7IHJldHVybiBmYWxzZTsgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8gRGVib3VuY2UgdGhlIGNhc2Ugd2hlcmUgd2UgYWxyZWFkeSBoYXZlIGEgY2xlYXIgY2FjaGUgaW4gcHJvZ3Jlc3MKICAgICAgICAgICAgaWYgKHN0YXR1cy5oYXNoICE9PSBzdGF0dXMuY29tcGxldGVkSGFzaCB8fCBzdGF0dXMuY291bnRlciAhPT0gc3RhdHVzLmNvbXBsZXRlZENvdW50ZXIpIHsKICAgICAgICAgICAgICAgIHN3aXRjaCAoZ2V0Q2xlYXJDYWNoZU1lY2hhbmlzbSgpKSB7CiAgICAgICAgICAgICAgICAgICAgY2FzZSBDbGVhckNhY2hlTWVjaGFuaXNtLkVsZWN0cm9uQnJpZGdlOgogICAgICAgICAgICAgICAgICAgICAgICAvLyBIYW5kbGUgYXMgc3VjY2VzcyBjYXNlIHRvIHJldHJpZ2dlciBjbGVhciBjYWNoZQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS5vZihkYkNsZWFyKG51bGwsIG51bGwpKTsKICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICAgICAgICAvLyBGaWx0ZXIgb3V0IGV2ZW50LCBhcyBjbGVhciBjYWNoZSBpcyBpbiBwcm9ncmVzcwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS5vZihhY3Rpb24pLmZpbHRlcihmdW5jdGlvbiAoKSB7IHJldHVybiBmYWxzZTsgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8gSW5jcmVhc2UgY291bnRlciBhbmQgcmV0dXJuCiAgICAgICAgICAgIHZhciBjbGVhckNhY2hlQ29weSA9ICdPbmUgc2Vjb25kIHdoaWxlIHdlIHJlc2V0IHRoZSBjYWNoZSEnOwogICAgICAgICAgICB2YXIgYWN0aW9ucyA9IFsKICAgICAgICAgICAgICAgIE9ic2VydmFibGUub2YoZGJDbGVhcihudWxsLCBudWxsKSksCiAgICAgICAgICAgICAgICBPYnNlcnZhYmxlLm9mKHRvYXN0U2V0KG5ldyBDb25maXJtYXRpb25FcnJvcihjbGVhckNhY2hlQ29weSwgdHJ1ZSwgQ29uZmlybWF0aW9uUG9zaXRvbi5Ub3BDZW50ZXIpKSksCiAgICAgICAgICAgIF07CiAgICAgICAgICAgIHJldHVybiBpbmNyZW1lbnRDbGVhckNhY2hlQ291bnRlcih0cnVlKQogICAgICAgICAgICAgICAgLmZsYXRNYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gT2JzZXJ2YWJsZS5tZXJnZS5hcHBseShPYnNlcnZhYmxlLCBhY3Rpb25zKTsgfSk7CiAgICAgICAgfSk7CiAgICB9KTsKfTsKZXhwb3J0IGRlZmF1bHQgWwogICAgZGJDbGVhckhhbmRsaW5nLApdOwo="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/db.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/db.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAElC,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM,eAAe,CAAC;AAClD,OAAO,EACe,YAAY,GACjC,MAAM,YAAY,CAAC;AACpB,OAAO,EAAE,mBAAmB,EAAE,0BAA0B,EAAE,MAAM,gBAAgB,CAAC;AACjF,OAAO,EAAE,eAAe,EAAE,MAAM,eAAe,CAAC;AAChD,OAAO,EAAE,sBAAsB,EAAE,mBAAmB,EAAE,MAAM,aAAa,CAAC;AAC1E,OAAO,EAAE,mBAAmB,EAAE,QAAQ,EAAE,iBAAiB,EAAE,MAAM,mBAAmB,CAAC;AAErF,IAAM,eAAe,GAA+C,UAAA,OAAO;IACzE,OAAA,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC;SACrB,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,MAAM,KAAK,YAAY,CAAC,KAAK,EAApC,CAAoC,CAAC;SACtD,OAAO,CAAC,UAAA,MAAM;QACb,OAAA,mBAAmB,EAAE;aAClB,OAAO,CAAC,UAAC,MAAM;YAEd,+DAA+D;YAC/D,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC,aAAa,KAAK,eAAe,EAAE;gBACvD,OAAO,UAAU,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,cAAM,OAAA,KAAK,EAAL,CAAK,CAAC,CAAC;aAClD;YAED,oEAAoE;YACpE,IAAI,MAAM,CAAC,IAAI,KAAK,MAAM,CAAC,aAAa,IAAI,MAAM,CAAC,OAAO,KAAK,MAAM,CAAC,gBAAgB,EAAE;gBACtF,QAAQ,sBAAsB,EAAE,EAAE;oBAChC,KAAK,mBAAmB,CAAC,cAAc;wBACrC,kDAAkD;wBAClD,OAAO,UAAU,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;oBAC5C;wBACE,kDAAkD;wBAClD,OAAO,UAAU,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,cAAM,OAAA,KAAK,EAAL,CAAK,CAAC,CAAC;iBACpD;aACF;YAED,8BAA8B;YAC9B,IAAM,cAAc,GAAG,sCAAsC,CAAC;YAC9D,IAAM,OAAO,GAAG;gBACd,UAAU,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBAClC,UAAU,CAAC,EAAE,CACX,QAAQ,CAAC,IAAI,iBAAiB,CAAC,cAAc,EAAE,IAAI,EAAE,mBAAmB,CAAC,SAAS,CAAC,CAAC,CACrF;aACF,CAAC;YACF,OAAO,0BAA0B,CAAC,IAAI,CAAC;iBACpC,OAAO,CAAC,cAAM,OAAA,UAAU,CAAC,KAAK,OAAhB,UAAU,EAAU,OAAO,GAA3B,CAA4B,CAAC,CAAC;QACjD,CAAC,CAAC;IA9BJ,CA8BI,CACL;AAlCH,CAkCG,CAAC;AAEN,eAAe;IACb,eAAe;CAChB,CAAC","sourcesContent":["import { Epic } from 'redux-observable';\nimport { Observable } from 'rxjs';\n\nimport { DB_CLEAR, dbClear } from '@src/ducks/db';\nimport {\n  StoreState, Action, ActionStatus,\n} from '@src/types';\nimport { getClearCacheStatus, incrementClearCacheCounter } from '@src/lib/cache';\nimport { AUTH_TOKEN_NONE } from '@src/api/base';\nimport { getClearCacheMechanism, ClearCacheMechanism } from '@src/lib/db';\nimport { ConfirmationPositon, toastSet, ConfirmationError } from '@src/ducks/toasts';\n\nconst dbClearHandling: Epic<Action<null|Error, null>, StoreState> = action$ =>\n  action$.ofType(DB_CLEAR)\n    .filter(action => action.status === ActionStatus.Start)\n    .flatMap(action =>\n      getClearCacheStatus()\n        .flatMap((status) => {\n\n          // Handle case of not having any status or currently logged out\n          if (!status || status.completedHash === AUTH_TOKEN_NONE) {\n            return Observable.of(action).filter(() => false);\n          }\n\n          // Debounce the case where we already have a clear cache in progress\n          if (status.hash !== status.completedHash || status.counter !== status.completedCounter) {\n            switch (getClearCacheMechanism()) {\n              case ClearCacheMechanism.ElectronBridge:\n                // Handle as success case to retrigger clear cache\n                return Observable.of(dbClear(null, null));\n              default:\n                // Filter out event, as clear cache is in progress\n                return Observable.of(action).filter(() => false);\n            }\n          }\n\n          // Increase counter and return\n          const clearCacheCopy = 'One second while we reset the cache!';\n          const actions = [\n            Observable.of(dbClear(null, null)),\n            Observable.of(\n              toastSet(new ConfirmationError(clearCacheCopy, true, ConfirmationPositon.TopCenter)),\n            ),\n          ];\n          return incrementClearCacheCounter(true)\n            .flatMap(() => Observable.merge(...actions));\n        }),\n    );\n\nexport default [\n  dbClearHandling,\n];\n"]}]}