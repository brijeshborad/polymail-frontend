{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/auth.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/auth.ts","mtime":1675280254061},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnOwppbXBvcnQgeyBkZWxldGVBdXRoQ29va2llLCBkZWxldGVURkFOZWVkZWRDb29raWUgfSBmcm9tICcuL2Nvb2tpZXMnOwppbXBvcnQgeyBzZXRUb2tlbiwgQVVUSF9UT0tFTl9OT05FLCBnZXRUb2tlbiB9IGZyb20gJ0BzcmMvYXBpL2Jhc2UnOwppbXBvcnQgeyBkYkNsZWFyIH0gZnJvbSAnQHNyYy9kdWNrcy9kYic7CmltcG9ydCB7IGZudjFhNjRoZXggfSBmcm9tICcuL2NyeXB0JzsKaW1wb3J0IHsgZ2V0Q2xlYXJDYWNoZVN0YXR1cywgc2F2ZUNsZWFyQ2FjaGVTdGF0dXMsIGRlZmF1bHRDbGVhckNhY2hlU3RhdHVzIH0gZnJvbSAnLi9jYWNoZSc7CmV4cG9ydCBmdW5jdGlvbiBjbGVhckF1dGhEYXRhKCkgewogICAgLy8gRXh0cmFjdCByZWRpcmVjdCBwbGF0Zm9ybSBpZiBleGlzdHMKICAgIHZhciByZWRpcmVjdFBsYXRmb3JtID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3JlZGlyZWN0UGxhdGZvcm0nKTsKICAgIHZhciBjb3Vwb24gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnY291cG9uJyk7CiAgICBsb2NhbFN0b3JhZ2UuY2xlYXIoKTsKICAgIGRlbGV0ZUF1dGhDb29raWUoKTsKICAgIGRlbGV0ZVRGQU5lZWRlZENvb2tpZSgpOwogICAgc2V0VG9rZW4oQVVUSF9UT0tFTl9OT05FKTsKICAgIC8vIGtlZXAgZXhpc3RpbmcgY291cG9ucwogICAgaWYgKGNvdXBvbikgewogICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdjb3Vwb24nLCBjb3Vwb24pOwogICAgfQogICAgLy8gU2V0IHJlZGlyZWN0IHBsYXRmb3JtIHNvIHdlIGtub3cgd2hlbiB0byBvcGVuIG5hdGl2ZSBhcHAKICAgIGlmIChyZWRpcmVjdFBsYXRmb3JtKSB7CiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3JlZGlyZWN0UGxhdGZvcm0nLCByZWRpcmVjdFBsYXRmb3JtKTsKICAgIH0KfQpleHBvcnQgZnVuY3Rpb24gY2xlYXJFdmVyeXRoaW5nKHN0b3JlKSB7CiAgICByZXR1cm4gT2JzZXJ2YWJsZS5vZihudWxsKQogICAgICAgIC5mbGF0TWFwKGZ1bmN0aW9uICgpIHsKICAgICAgICBjbGVhckF1dGhEYXRhKCk7CiAgICAgICAgcmV0dXJuIGdldENsZWFyQ2FjaGVTdGF0dXMoKTsKICAgIH0pCiAgICAgICAgLmZsYXRNYXAoZnVuY3Rpb24gKHN0YXR1cykgewogICAgICAgIC8vIEZpZ3VyZSBvdXQgaWYgbG9nZ2VkIG91dAogICAgICAgIHZhciB0b2tlbiA9IGdldFRva2VuKCk7CiAgICAgICAgdmFyIGhhc2ggPSBBVVRIX1RPS0VOX05PTkU7CiAgICAgICAgaWYgKHRva2VuICE9PSBBVVRIX1RPS0VOX05PTkUpIHsKICAgICAgICAgICAgaGFzaCA9IGZudjFhNjRoZXgodG9rZW4pOwogICAgICAgIH0KICAgICAgICAvLyBDcmVhdGUgYSBuZXcgQ2xlYXIgQ2FjaGUgU3RhdHVzIGlmIG5lZWRlZCwgbWFrZSBjdXJyZW50IHN0YXRlIGNvbXBsZXRlCiAgICAgICAgdmFyIG5ld1N0YXR1cyA9IGRlZmF1bHRDbGVhckNhY2hlU3RhdHVzKHN0YXR1cyk7CiAgICAgICAgLy8gU2F2ZSBuZXcgc3RhdHVzIGlmIGhhdmUgYSBuZXcgaGFzaAogICAgICAgIGlmIChuZXdTdGF0dXMuaGFzaCAhPT0gaGFzaCkgewogICAgICAgICAgICBuZXdTdGF0dXMuaGFzaCA9IGhhc2g7CiAgICAgICAgICAgIG5ld1N0YXR1cy5jb3VudGVyID0gMDsKICAgICAgICAgICAgbmV3U3RhdHVzLmlnbm9yZUNvbW1pdHMgPSBmYWxzZTsKICAgICAgICAgICAgcmV0dXJuIHNhdmVDbGVhckNhY2hlU3RhdHVzKG5ld1N0YXR1cyk7CiAgICAgICAgfQogICAgICAgIC8vIE5vdGhpbmcgdG8gY2hhbmdlIG90aGVyd2lzZQogICAgICAgIHJldHVybiBPYnNlcnZhYmxlLm9mKG51bGwpOwogICAgfSkKICAgICAgICAubWFwKGZ1bmN0aW9uICgpIHsKICAgICAgICAvLyBUcmlnZ2VyIGRiQ2xlYXIgc3VjY2VzcywgYXMgdGhpcyB0cmlnZ2VycyBBcHBFdmVudC5DbGVhckNhY2hlIHRvIHdvcmtlcgogICAgICAgIHN0b3JlLmRpc3BhdGNoKGRiQ2xlYXIobnVsbCwgbnVsbCkpOwogICAgICAgIHJldHVybiBudWxsOwogICAgfSk7Cn0K"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/auth.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/auth.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAClC,OAAO,EAAE,gBAAgB,EAAE,qBAAqB,EAAE,MAAM,WAAW,CAAC;AACpE,OAAO,EAAE,QAAQ,EAAE,eAAe,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AAEpE,OAAO,EAAE,OAAO,EAAE,MAAM,eAAe,CAAC;AAExC,OAAO,EAAE,UAAU,EAAE,MAAM,SAAS,CAAC;AACrC,OAAO,EAAE,mBAAmB,EAAE,oBAAoB,EAAE,uBAAuB,EAAE,MAAM,SAAS,CAAC;AAE7F,MAAM,UAAU,aAAa;IAC3B,sCAAsC;IACtC,IAAM,gBAAgB,GAAG,YAAY,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;IAClE,IAAM,MAAM,GAAG,YAAY,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IAC9C,YAAY,CAAC,KAAK,EAAE,CAAC;IACrB,gBAAgB,EAAE,CAAC;IACnB,qBAAqB,EAAE,CAAC;IACxB,QAAQ,CAAC,eAAe,CAAC,CAAC;IAE1B,wBAAwB;IACxB,IAAI,MAAM,EAAE;QACV,YAAY,CAAC,OAAO,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;KACxC;IACD,2DAA2D;IAC3D,IAAI,gBAAgB,EAAE;QACpB,YAAY,CAAC,OAAO,CAAC,kBAAkB,EAAE,gBAAgB,CAAC,CAAC;KAC5D;AACH,CAAC;AAED,MAAM,UAAU,eAAe,CAAC,KAAgC;IAC9D,OAAO,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC;SACvB,OAAO,CAAC;QACP,aAAa,EAAE,CAAC;QAChB,OAAO,mBAAmB,EAAE,CAAC;IAC/B,CAAC,CAAC;SACD,OAAO,CAAC,UAAC,MAAM;QACd,2BAA2B;QAC3B,IAAM,KAAK,GAAG,QAAQ,EAAE,CAAC;QACzB,IAAI,IAAI,GAAG,eAAe,CAAC;QAE3B,IAAI,KAAK,KAAK,eAAe,EAAE;YAC7B,IAAI,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;SAC1B;QAED,yEAAyE;QACzE,IAAM,SAAS,GAAqB,uBAAuB,CAAC,MAAM,CAAC,CAAC;QAEpE,qCAAqC;QACrC,IAAI,SAAS,CAAC,IAAI,KAAK,IAAI,EAAE;YAC3B,SAAS,CAAC,IAAI,GAAG,IAAI,CAAC;YACtB,SAAS,CAAC,OAAO,GAAG,CAAC,CAAC;YACtB,SAAS,CAAC,aAAa,GAAG,KAAK,CAAC;YAChC,OAAO,oBAAoB,CAAC,SAAS,CAAC,CAAC;SACxC;QAED,8BAA8B;QAC9B,OAAO,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC,CAAC;SACD,GAAG,CAAC;QACH,0EAA0E;QAC1E,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QACpC,OAAO,IAAI,CAAC;IACd,CAAC,CAAC,CAAC;AACP,CAAC","sourcesContent":["import { Observable } from 'rxjs';\nimport { deleteAuthCookie, deleteTFANeededCookie } from './cookies';\nimport { setToken, AUTH_TOKEN_NONE, getToken } from '@src/api/base';\nimport { MiddlewareAPI } from 'redux';\nimport { dbClear } from '@src/ducks/db';\nimport { StoreState, ClearCacheStatus } from '@src/types';\nimport { fnv1a64hex } from './crypt';\nimport { getClearCacheStatus, saveClearCacheStatus, defaultClearCacheStatus } from './cache';\n\nexport function clearAuthData() {\n  // Extract redirect platform if exists\n  const redirectPlatform = localStorage.getItem('redirectPlatform');\n  const coupon = localStorage.getItem('coupon');\n  localStorage.clear();\n  deleteAuthCookie();\n  deleteTFANeededCookie();\n  setToken(AUTH_TOKEN_NONE);\n\n  // keep existing coupons\n  if (coupon) {\n    localStorage.setItem('coupon', coupon);\n  }\n  // Set redirect platform so we know when to open native app\n  if (redirectPlatform) {\n    localStorage.setItem('redirectPlatform', redirectPlatform);\n  }\n}\n\nexport function clearEverything(store: MiddlewareAPI<StoreState>): Observable<null> {\n  return Observable.of(null)\n    .flatMap(() => {\n      clearAuthData();\n      return getClearCacheStatus();\n    })\n    .flatMap((status) => {\n      // Figure out if logged out\n      const token = getToken();\n      let hash = AUTH_TOKEN_NONE;\n\n      if (token !== AUTH_TOKEN_NONE) {\n        hash = fnv1a64hex(token);\n      }\n\n      // Create a new Clear Cache Status if needed, make current state complete\n      const newStatus: ClearCacheStatus = defaultClearCacheStatus(status);\n\n      // Save new status if have a new hash\n      if (newStatus.hash !== hash) {\n        newStatus.hash = hash;\n        newStatus.counter = 0;\n        newStatus.ignoreCommits = false;\n        return saveClearCacheStatus(newStatus);\n      }\n\n      // Nothing to change otherwise\n      return Observable.of(null);\n    })\n    .map(() => {\n      // Trigger dbClear success, as this triggers AppEvent.ClearCache to worker\n      store.dispatch(dbClear(null, null));\n      return null;\n    });\n}\n"]}]}