{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/components/Cells/CommentAttachmentCell/index.tsx","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/components/Cells/CommentAttachmentCell/index.tsx","mtime":1675280253991},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IENvbW1lbnRBdHRhY2htZW50Q2VsbCBmcm9tICcuL0NvbW1lbnRBdHRhY2htZW50Q2VsbCc7CmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7CmltcG9ydCB7IGZudjFhNjRoZXggfSBmcm9tICdAc3JjL2xpYi9jcnlwdCc7CnZhciBtYXBTdGF0ZVRvUHJvcHMgPSBmdW5jdGlvbiAoc3RhdGUsIG93blByb3BzKSB7CiAgICB2YXIgaWQgPSBvd25Qcm9wcy5hdHRhY2htZW50LmlkOwogICAgdmFyIGRvd25sb2FkSWQgPSBmbnYxYTY0aGV4KCItLSIgKyBpZCk7CiAgICByZXR1cm4gewogICAgICAgIHByb2dyZXNzOiBzdGF0ZS5hdHRhY2htZW50c0Rvd25sb2FkaW5nW2Rvd25sb2FkSWRdICYmCiAgICAgICAgICAgIHN0YXRlLmF0dGFjaG1lbnRzRG93bmxvYWRpbmdbZG93bmxvYWRJZF0ucHJvZ3Jlc3MsCiAgICB9Owp9OwpleHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcykoQ29tbWVudEF0dGFjaG1lbnRDZWxsKTsK"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/components/Cells/CommentAttachmentCell/index.tsx","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/components/Cells/CommentAttachmentCell/index.tsx"],"names":[],"mappings":"AAAA,OAAO,qBAA4C,MAAM,yBAAyB,CAAC;AACnF,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;AAEtC,OAAO,EAAE,UAAU,EAAE,MAAM,gBAAgB,CAAC;AAE5C,IAAM,eAAe,GAAG,UAAC,KAAiB,EAAE,QAAe;IACjD,IAAA,2BAAE,CAAyB;IACnC,IAAM,UAAU,GAAG,UAAU,CAAC,OAAK,EAAI,CAAC,CAAC;IACzC,OAAO;QACL,QAAQ,EAAE,KAAK,CAAC,sBAAsB,CAAC,UAAU,CAAC;YAChD,KAAK,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAAC,QAAQ;KACpD,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,OAAO,CAAwB,eAAe,CAAC,CAAC,qBAAqB,CAAC,CAAC","sourcesContent":["import CommentAttachmentCell, { Props, StateProps } from './CommentAttachmentCell';\nimport { connect } from 'react-redux';\nimport { StoreState } from '@src/types';\nimport { fnv1a64hex } from '@src/lib/crypt';\n\nconst mapStateToProps = (state: StoreState, ownProps: Props): StateProps => {\n  const { id } = ownProps.attachment;\n  const downloadId = fnv1a64hex(`--${id}`);\n  return {\n    progress: state.attachmentsDownloading[downloadId] &&\n      state.attachmentsDownloading[downloadId].progress,\n  };\n};\n\nexport default connect<StateProps, {}, Props>(mapStateToProps)(CommentAttachmentCell);\n"]}]}