{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/sync/SyncOverwatch.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/sync/SyncOverwatch.ts","mtime":1675280254125},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnOwppbXBvcnQgYnVzLCB7IGdldEJ1cywgQnVzRXZlbnROYW1lIH0gZnJvbSAnQHNyYy93b3JrZXIvYnVzJzsKaW1wb3J0IHsgc2VuZFdvcmtlclJlYWR5LCBzZW5kU2VydmVyQ2xlYXJDYWNoZVN0YXJ0ZWQgfSBmcm9tICdAc3JjL3dvcmtlci9icmlkZ2Uvd29ya2VyRXZlbnRzJzsKaW1wb3J0IHsgY2FwdHVyZUV4Y2VwdGlvbiB9IGZyb20gJ0BzZW50cnkvYnJvd3Nlcic7CmltcG9ydCB7IHJlc2V0RGJJZk5lZWRlZCB9IGZyb20gJ0BzcmMvbGliL2RiJzsKaW1wb3J0IHsgaW5jcmVtZW50Q2xlYXJDYWNoZUNvdW50ZXIgfSBmcm9tICdAc3JjL2xpYi9jYWNoZSc7Ci8vIFN5bmNPdmVyd2F0Y2ggbWFuYWdlcyBpbml0IGFuZCBpbmNyIHN5bmNlciB3b3JrZXJzLgp2YXIgU3luY092ZXJ3YXRjaCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHsKICAgIGZ1bmN0aW9uIFN5bmNPdmVyd2F0Y2goKSB7CiAgICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgICAvLyBEZXBlbmRlbmNpZXMKICAgICAgICB0aGlzLnN5bmNlcnMgPSBuZXcgTWFwKFtdKTsKICAgICAgICB0aGlzLmJ1cyA9IGdldEJ1cygpOwogICAgICAgIHRoaXMuYnVzLnN1YnNjcmliZSh7CiAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uIChldmVudCkgewogICAgICAgICAgICAgICAgX3RoaXMuaGFuZGxlQnVzRXZlbnQoZXZlbnQpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgIGNhcHR1cmVFeGNlcHRpb24oZSk7CiAgICAgICAgICAgIH0sCiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuOwogICAgfQogICAgLy8gQ2hlY2sgZXZlcnkgYGludGVydmFsYCBzZWNvbmRzLiBSdW4gYW55IHN5bmNlcnMgdGhhdCBoYXZlIG5vdCBiZWVuIGNvbXBsZXRlZAogICAgU3luY092ZXJ3YXRjaC5wcm90b3R5cGUucGVyc2lzdCA9IGZ1bmN0aW9uIChpbnRlcnZhbFNlY29uZHMpIHsKICAgICAgICBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGJ1cy50cmlnZ2VyU3luYyh1bmRlZmluZWQsIHRydWUpOwogICAgICAgIH0sIGludGVydmFsU2Vjb25kcyAqIDEwMDApOwogICAgfTsKICAgIC8vIEFkZCBuZXcgc3luY2VycyB0byBjbHVzdGVyLgogICAgU3luY092ZXJ3YXRjaC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHN5bmNlcikgewogICAgICAgIGlmICh0aGlzLnN5bmNlcnMuaGFzKHN5bmNlci53b3JrZXJJZCkpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICAvLyBPbmx5IHN0YXJ0IGxpc3RlbmluZyB0byBidXMgZXZlbnRzIGFmdGVyIHdlIHZlcmlmeSBhbiBleGlzdGluZwogICAgICAgIC8vIHN5bmNlciB3aXRoIHRoZSBzYW1lIGlkIGRvZXMgbm90IGFscmVhZHkgZXhpc3QuCiAgICAgICAgc3luY2VyLmluaXQoKTsKICAgICAgICB0aGlzLnN5bmNlcnMuc2V0KHN5bmNlci53b3JrZXJJZCwgc3luY2VyKTsKICAgICAgICByZXR1cm47CiAgICB9OwogICAgLy8gUmVtb3ZlIGEgc3luY2VyCiAgICBTeW5jT3ZlcndhdGNoLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAod29ya2VySWQpIHsKICAgICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICAgIHRoaXMuc3luY2Vycy5mb3JFYWNoKGZ1bmN0aW9uIChzeW5jZXIpIHsKICAgICAgICAgICAgaWYgKHN5bmNlci53b3JrZXJJZCA9PT0gd29ya2VySWQpIHsKICAgICAgICAgICAgICAgIHN5bmNlci5kZWluaXQoKTsKICAgICAgICAgICAgICAgIF90aGlzLnN5bmNlcnMuZGVsZXRlKHN5bmNlci53b3JrZXJJZCk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH07CiAgICAvLyBIYW5kbGUgZXZlbnRzIGZyb20gd29ya2VyIG1lc3NhZ2UgYnVzCiAgICBTeW5jT3ZlcndhdGNoLnByb3RvdHlwZS5oYW5kbGVCdXNFdmVudCA9IGZ1bmN0aW9uIChldmVudCkgewogICAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgICAgdmFyIGNsZWFycyA9IFtdOwogICAgICAgIHN3aXRjaCAoZXZlbnQubmFtZSkgewogICAgICAgICAgICBjYXNlIEJ1c0V2ZW50TmFtZS5IaXN0b3J5Q2xlYXJDYWNoZToKICAgICAgICAgICAgICAgIC8vIE5vdGlmeSBhcHAgdGhhdCBzZXJ2ZXIgc2lkZSBjbGVhciBjYWNoZSBpcyBoYXBwZW5pbmcKICAgICAgICAgICAgICAgIHNlbmRTZXJ2ZXJDbGVhckNhY2hlU3RhcnRlZCgpOwogICAgICAgICAgICAgICAgLy8gVHVybiBvZmYgc3luY2VycyBhbmQgZGVsZXRlIGZyb20gb3ZlcndhdGNoCiAgICAgICAgICAgICAgICB0aGlzLnN5bmNlcnMuZm9yRWFjaChmdW5jdGlvbiAoc3luY2VyKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHN5bmNlci5hY2NvdW50IHx8IHN5bmNlci50ZWFtKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFycy5wdXNoKHN5bmNlci5jbGVhckNhY2hlKGZhbHNlKS5tYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gc3luY2VyLmRlaW5pdCgpOyB9KSk7CiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnN5bmNlcnMuZGVsZXRlKHN5bmNlci53b3JrZXJJZCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBPYnNlcnZhYmxlLnppcC5hcHBseShPYnNlcnZhYmxlLCBjbGVhcnMpLmZsYXRNYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5jcmVtZW50Q2xlYXJDYWNoZUNvdW50ZXIodHJ1ZSk7IH0pCiAgICAgICAgICAgICAgICAgICAgLmZsYXRNYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzZXREYklmTmVlZGVkKCk7IH0pCiAgICAgICAgICAgICAgICAgICAgLnN1YnNjcmliZShmdW5jdGlvbiAoKSB7IHJldHVybiBzZW5kV29ya2VyUmVhZHkoKTsgfSk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSBCdXNFdmVudE5hbWUuVXBkYXRlVGVhbToKICAgICAgICAgICAgICAgIHRoaXMuc3luY2Vycy5mb3JFYWNoKGZ1bmN0aW9uIChzeW5jZXIpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoc3luY2VyLnRlYW0gJiYgc3luY2VyLnRlYW0gIT09IGV2ZW50LmRhdGEudGVhbSkgewogICAgICAgICAgICAgICAgICAgICAgICBzeW5jZXIuZGVpbml0KCk7CiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnN5bmNlcnMuZGVsZXRlKHN5bmNlci53b3JrZXJJZCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgIH07CiAgICByZXR1cm4gU3luY092ZXJ3YXRjaDsKfSgpKTsKZXhwb3J0IHsgU3luY092ZXJ3YXRjaCB9OwpleHBvcnQgZGVmYXVsdCBTeW5jT3ZlcndhdGNoOwo="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/sync/SyncOverwatch.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/sync/SyncOverwatch.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable, Subject } from 'rxjs';\nimport bus, { getBus, BusEvent, BusEventName } from '@src/worker/bus';\nimport { sendWorkerReady, sendServerClearCacheStarted } from '@src/worker/bridge/workerEvents';\nimport { captureException } from '@sentry/browser';\nimport { resetDbIfNeeded } from '@src/lib/db';\nimport { incrementClearCacheCounter } from '@src/lib/cache';\n\ninterface Syncer {\n  readonly workerId: string;\n  readonly account?: string;\n  readonly team?: string;\n\n  init(): void;\n  deinit(): void;\n\n  // Can use deleteItems=false, if going to resetDb right after anyways\n  clearCache(deleteItems: boolean): Observable<null>;\n}\n\n// SyncOverwatch manages init and incr syncer workers.\nexport class SyncOverwatch {\n\n  // Dependencies\n  syncers: Map<string, Syncer> = new Map([]);\n  private bus: Subject<BusEvent>;\n\n  constructor() {\n    this.bus = getBus();\n    this.bus.subscribe({\n      next: (event: BusEvent) => {\n        this.handleBusEvent(event);\n      },\n      error: (e: Error) => {\n        captureException(e);\n      },\n    });\n    return;\n  }\n\n  // Check every `interval` seconds. Run any syncers that have not been completed\n  persist(intervalSeconds: number) {\n    setInterval(\n      () => {\n        bus.triggerSync(undefined, true);\n      },\n      intervalSeconds * 1000,\n    );\n  }\n\n  // Add new syncers to cluster.\n  add(syncer: Syncer) {\n    if (this.syncers.has(syncer.workerId)) {\n      return;\n    }\n\n    // Only start listening to bus events after we verify an existing\n    // syncer with the same id does not already exist.\n    syncer.init();\n\n    this.syncers.set(syncer.workerId, syncer);\n    return;\n  }\n\n  // Remove a syncer\n  remove(workerId: string) {\n    this.syncers.forEach((syncer) => {\n      if (syncer.workerId === workerId) {\n        syncer.deinit();\n        this.syncers.delete(syncer.workerId);\n      }\n    });\n  }\n\n  // Handle events from worker message bus\n  private handleBusEvent(event: BusEvent) {\n    const clears: Array<Observable<void>> = [];\n    switch (event.name) {\n      case BusEventName.HistoryClearCache:\n\n        // Notify app that server side clear cache is happening\n        sendServerClearCacheStarted();\n\n        // Turn off syncers and delete from overwatch\n        this.syncers.forEach((syncer) => {\n          if (syncer.account || syncer.team) {\n            clears.push(syncer.clearCache(false).map(() => syncer.deinit()));\n            this.syncers.delete(syncer.workerId);\n          }\n        });\n\n        Observable.zip(...clears)\n          .flatMap(() => incrementClearCacheCounter(true))\n          .flatMap(() => resetDbIfNeeded())\n          .subscribe(() => sendWorkerReady());\n        break;\n\n      case BusEventName.UpdateTeam:\n        this.syncers.forEach((syncer) => {\n          if (syncer.team && syncer.team !== event.data.team) {\n            syncer.deinit();\n            this.syncers.delete(syncer.workerId);\n          }\n        });\n        break;\n\n      default:\n        break;\n    }\n  }\n}\n\nexport default SyncOverwatch;\n"]}]}