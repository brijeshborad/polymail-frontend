{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/activityFeed.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/activityFeed.ts","mtime":1675280253978},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnOwppbXBvcnQgeyBhcHBseUFjdGl2aXR5RGVmYXVsdHMgfSBmcm9tICdAc3JjL2xpYi9hY3Rpdml0eSc7CmltcG9ydCB7IGpzb25SZXF1ZXN0IH0gZnJvbSAnLi9iYXNlJzsKdmFyIEFjdGl2aXR5RmVlZENsaWVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHsKICAgIGZ1bmN0aW9uIEFjdGl2aXR5RmVlZENsaWVudCgpIHsKICAgIH0KICAgIEFjdGl2aXR5RmVlZENsaWVudC5wcm90b3R5cGUubGlzdCA9IGZ1bmN0aW9uIChmcm9tKSB7CiAgICAgICAgcmV0dXJuIGpzb25SZXF1ZXN0KHsKICAgICAgICAgICAgbWV0aG9kOiAnR0VUJywKICAgICAgICAgICAgcm91dGU6IGZyb20gPyAiL3YxL2FjdGl2aXRpZXM/ZnJvbT0iICsgZnJvbSA6ICIvdjEvYWN0aXZpdGllcyIsCiAgICAgICAgfSkKICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoYWN0aXZpdGllcykgeyByZXR1cm4gYWN0aXZpdGllcy5tYXAoZnVuY3Rpb24gKGFjdGl2aXR5KSB7IHJldHVybiBhcHBseUFjdGl2aXR5RGVmYXVsdHMoYWN0aXZpdHkpOyB9KTsgfSk7CiAgICB9OwogICAgQWN0aXZpdHlGZWVkQ2xpZW50LnByb3RvdHlwZS5saXN0SW5jciA9IGZ1bmN0aW9uICh0bykgewogICAgICAgIHJldHVybiBqc29uUmVxdWVzdCh7CiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsCiAgICAgICAgICAgIHJvdXRlOiB0byA/ICIvdjEvYWN0aXZpdGllcz90bz0iICsgdG8gOiAiL3YxL2FjdGl2aXRpZXMiLAogICAgICAgIH0pCiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGFjdGl2aXRpZXMpIHsgcmV0dXJuIGFjdGl2aXRpZXMubWFwKGZ1bmN0aW9uIChhY3Rpdml0eSkgeyByZXR1cm4gYXBwbHlBY3Rpdml0eURlZmF1bHRzKGFjdGl2aXR5KTsgfSk7IH0pOwogICAgfTsKICAgIHJldHVybiBBY3Rpdml0eUZlZWRDbGllbnQ7Cn0oKSk7CmV4cG9ydCB7IEFjdGl2aXR5RmVlZENsaWVudCB9OwpleHBvcnQgdmFyIG1vY2tBY3Rpdml0eUZlZWRDbGllbnQgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gewogICAgICAgIGxpc3Q6IGZ1bmN0aW9uIChmcm9tKSB7IHJldHVybiBPYnNlcnZhYmxlLm9mKFtdKTsgfSwKICAgICAgICBsaXN0SW5jcjogZnVuY3Rpb24gKHRvKSB7IHJldHVybiBPYnNlcnZhYmxlLm9mKFtdKTsgfSwKICAgIH07Cn07Cg=="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/activityFeed.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/activityFeed.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAClC,OAAO,EAAE,qBAAqB,EAAE,MAAM,mBAAmB,CAAC;AAC1D,OAAO,EAAE,WAAW,EAAE,MAAM,QAAQ,CAAC;AAOrC;IAAA;IAeA,CAAC;IAdC,iCAAI,GAAJ,UAAK,IAAa;QAChB,OAAO,WAAW,CAAC;YACjB,MAAM,EAAE,KAAK;YACb,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC,yBAAuB,IAAM,CAAC,CAAC,CAAC,gBAAgB;SAC/D,CAAC;aACD,GAAG,CAAC,UAAC,UAAsB,IAAK,OAAA,UAAU,CAAC,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,qBAAqB,CAAC,QAAQ,CAAC,EAA/B,CAA+B,CAAC,EAA3D,CAA2D,CAAC,CAAC;IAChG,CAAC;IACD,qCAAQ,GAAR,UAAS,EAAW;QAClB,OAAO,WAAW,CAAC;YACjB,MAAM,EAAE,KAAK;YACb,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,uBAAqB,EAAI,CAAC,CAAC,CAAC,gBAAgB;SACzD,CAAC;aACD,GAAG,CAAC,UAAC,UAAsB,IAAK,OAAA,UAAU,CAAC,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,qBAAqB,CAAC,QAAQ,CAAC,EAA/B,CAA+B,CAAC,EAA3D,CAA2D,CAAC,CAAC;IAChG,CAAC;IACH,yBAAC;AAAD,CAAC,AAfD,IAeC;;AAED,MAAM,CAAC,IAAM,sBAAsB,GAAG;IACpC,OAAO;QACL,IAAI,EAAE,UAAC,IAAa,IAAK,OAAA,UAAU,CAAC,EAAE,CAAC,EAAE,CAAC,EAAjB,CAAiB;QAC1C,QAAQ,EAAE,UAAC,EAAW,IAAK,OAAA,UAAU,CAAC,EAAE,CAAC,EAAE,CAAC,EAAjB,CAAiB;KAC7C,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { Activity } from '@src/types';\nimport { Observable } from 'rxjs';\nimport { applyActivityDefaults } from '@src/lib/activity';\nimport { jsonRequest } from './base';\n\nexport interface ActivityFeedAPI {\n  list(from?: string): Observable<Activity[]>;\n  listIncr(to?: string): Observable<Activity[]>;\n}\n\nexport class ActivityFeedClient implements ActivityFeedAPI {\n  list(from?: string): Observable<Activity[]> {\n    return jsonRequest({\n      method: 'GET',\n      route: from ? `/v1/activities?from=${from}` : `/v1/activities`,\n    })\n    .map((activities: Activity[]) => activities.map(activity => applyActivityDefaults(activity)));\n  }\n  listIncr(to?: string): Observable<Activity[]> {\n    return jsonRequest({\n      method: 'GET',\n      route: to ? `/v1/activities?to=${to}` : `/v1/activities`,\n    })\n    .map((activities: Activity[]) => activities.map(activity => applyActivityDefaults(activity)));\n  }\n}\n\nexport const mockActivityFeedClient = (): ActivityFeedAPI => {\n  return {\n    list: (from?: string) => Observable.of([]),\n    listIncr: (to?: string) => Observable.of([]),\n  };\n};\n"]}]}