{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Threads/components/ThreadList/components/InfiniteThreadList/InfiniteThreadList.tsx","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Threads/components/ThreadList/components/InfiniteThreadList/InfiniteThreadList.tsx","mtime":1675280254117},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Threads/components/ThreadList/components/InfiniteThreadList/InfiniteThreadList.tsx","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Threads/components/ThreadList/components/InfiniteThreadList/InfiniteThreadList.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport Infinite from 'react-infinite';\nimport { range, last, indexOf, cloneDeep } from 'lodash';\nimport { History, Location } from 'history';\nimport {\n  Thread,\n  ThreadBox,\n  Mailbox,\n  Commit,\n  Draft,\n  MailboxType,\n  KeyCode,\n  ThreadCommitMeta,\n  CommandControlType,\n  Swipe,\n  OnboardingType,\n} from '@src/types';\nimport { routeFromMailbox, isDraftBox } from '@src/lib/mailbox';\nimport { getHotkey, HotkeyAction, isPrimaryModifierKey } from '@src/lib/hotkeys';\n\nimport ThreadCell from './ThreadCell';\nimport { threadCellIdentifier } from './ThreadCell/ThreadCell';\nimport DraftCell from './DraftCell/DraftCell';\nimport EmptyCell from './EmptyCell/EmptyCell';\nimport ThreadsDataSource from './ThreadsDataSource';\nimport { threadDataSourceItem, draftDataSourceItem } from './ThreadsDataSourceItem';\nimport EmptySearchCell from './EmptySearchCell';\nimport ProviderSearchCell from './ProviderSearchCell';\nimport { isAnimated } from '@src/lib/commit';\nimport { OnboardingPatchMeta } from '@src/ducks/me';\nimport { getOnboardingActions } from '@src/lib/OnboardingDispatcher';\nimport { AmplitudeEvents, logAmplitudeEvent } from '@src/lib/amplitude-analytics';\n\nexport interface Props {\n  actions: ThreadBox[];\n  listHeight: number;\n  selectedIds: Map<string, boolean>;\n  threads: Thread[];\n  drafts: Draft[];\n  onThreadMove?: (commit: Commit) => void;\n  loading: boolean;\n}\n\nexport interface StateProps {\n  selectedMailbox?: Mailbox;\n  selectedDraft?: string;\n  selectedThread?: string;\n  history?: History;\n  location?: Location;\n  commandControlType?: CommandControlType;\n\n  lastSwipeId?: string;\n  selectedAccount?: string;\n  rsbOnboardingType?: OnboardingType;\n  cellHeight: number;\n}\n\nexport interface DispatchProps {\n  updateThread: (commit: ThreadCommitMeta) => void;\n  updateSelections: (selections: Map<string, boolean>) => void;\n  showCommandControl: (type: CommandControlType) => void;\n  setSwipeId: (id: string|null) => void;\n  refreshThreads: () => void;\n  updateOnboarding: (meta: OnboardingPatchMeta) => void;\n}\n\ninterface State {\n  commits: { [id: string]: Commit; };\n  resetCounter: { [id: string]: number };\n}\n\nexport enum Direction {\n  Up = 'up',\n  Down = 'down',\n}\n\nexport enum FillBehavior {\n  Fill = 'fill',\n  Deselect = 'deselect',\n  None = 'none',\n}\n\nconst PROVIDER_SEARCH_CELL_HEIGHT = 60;\n\nclass InfiniteThreadList extends React.PureComponent<Props & StateProps & DispatchProps, State> {\n  dataSource: ThreadsDataSource;\n  private list: HTMLDivElement;\n\n  constructor() {\n    super();\n    this.state = { commits: {}, resetCounter: {} };\n  }\n\n  // HACK(SHIN): Force a threadList refetch on mount since box could have been active\n  // but mailboxThreads not updated bc user may have left InfiniteThreadList page\n  componentDidMount() {\n    this.props.refreshThreads();\n  }\n\n  // Clear commits when mode changes\n  UNSAFE_componentWillReceiveProps(nextProps: Props & StateProps) {\n    if (nextProps.selectedMailbox !== this.props.selectedMailbox) {\n      this.setState({ commits: {} });\n    }\n  }\n\n  // Calculates scrollTop height\n  componentDidUpdate(oldProps: Props & StateProps) {\n    const { selectedThread, selectedDraft, lastSwipeId, cellHeight } = this.props;\n    const selectedId = selectedThread || selectedDraft || undefined;\n\n    // Handles resetting swipes\n    const { resetCounter } = this.state;\n    if (oldProps.commandControlType && !this.props.commandControlType) {\n      let newResetCounter = cloneDeep(resetCounter);\n\n      if (selectedId && oldProps.commandControlType && !this.props.commandControlType) {\n        const threadResetCounter = resetCounter[selectedId] || 0;\n        newResetCounter = { ...resetCounter, [selectedId]: threadResetCounter + 1 };\n        this.setState({ resetCounter: newResetCounter });\n      }\n\n      // Handle swipe reset\n      if (oldProps.lastSwipeId && !lastSwipeId) {\n        const swipeResetCounter = newResetCounter[oldProps.lastSwipeId] || 0;\n        newResetCounter = { ...newResetCounter, [oldProps.lastSwipeId]: swipeResetCounter + 1 };\n      }\n\n      this.setState({ resetCounter: newResetCounter });\n    }\n\n    if (oldProps.selectedIds !== this.props.selectedIds) {\n      const singleSelection = last(Array.from(this.props.selectedIds.keys()));\n      if (singleSelection) {\n\n        // Grab list element\n        const element = document.getElementsByClassName('list')[0];\n        if (element instanceof HTMLElement) {\n          const location = this.dataSource.getLocation(singleSelection);\n          const listHeight = this.list.offsetHeight;\n\n          // Calculate cell and list positions\n          const cellTop = cellHeight * (location);\n          const cellBottom = cellHeight + (cellHeight) * location;\n          const listTop = element.scrollTop;\n          const listBottom = element.scrollTop + listHeight;\n\n          // If outside of top range, then set scrollTop to cell top\n          if (cellTop < listTop) {\n            element.scrollTop = cellTop;\n            return;\n          }\n\n          // If bottom outside of list bottom range then reset scrollTop\n          if (cellBottom > listBottom) {\n            element.scrollTop = cellBottom - listHeight;\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  handleDataSourceRef = (ref: ThreadsDataSource) => {\n    this.dataSource = ref;\n  }\n\n  handleRef = (ref: HTMLDivElement) => {\n    this.list = ref;\n  }\n\n  handleCommit = (commit: Commit) => {\n    const commits = cloneDeep(this.state.commits);\n    const { selectedIds } = this.props;\n    const foundDomMatch = document.getElementById(threadCellIdentifier(commit.resourceId));\n    const isAnimatable = isAnimated(commit);\n    const inSelectedIds = selectedIds.get(commit.resourceId);\n\n    // Handler for we'll use the dataStore and infiniteThreadlist. What sets state for animation\n    // or for removing instantly from datasource\n    const dataHandler = () => {\n      // HACK(SHIN): HTML ID used to check if ThreadCell is rendered in DOM\n      // Use commit animation if rendered on doc. Otherwise immediately remove from Datasource\n      if (foundDomMatch) {\n        commits[commit.resourceId] = commit;\n        this.setState({ commits });\n      } else {\n        this.dataSource.remove(commit.resourceId);\n      }\n    };\n\n    // Handler for next state selection and undo\n    const stateHandler = () => {\n      if (!inSelectedIds) {\n        return;\n      }\n\n      this.handleNextSelect();\n\n      // Handle commit\n      if (this.props.onThreadMove) {\n        this.props.onThreadMove(commit);\n      }\n    };\n\n    // HACK(SHIN): We process the changes of how the next selection is made based off\n    // the backing store, so for instant animations, we want to update data then state\n    // Otherwise, we want to handle updates to state, then data (as state selection depends on data)\n    if (isAnimatable) {\n      dataHandler();\n      stateHandler();\n    } else {\n      stateHandler();\n      dataHandler();\n    }\n  }\n\n  // Determines fill behavior\n  calculateFillType = (current: number, direction: Direction, indexes: number[]) => {\n    const stepper = direction === Direction.Down ? 1 : -1;\n    const nextPosition = current + stepper;\n\n    // If next available, fill\n    if (indexOf(indexes, nextPosition) === -1) {\n      return FillBehavior.Fill;\n    }\n\n    // If at edge, then deselect\n    if (indexOf(indexes, current - stepper) === -1) {\n      return FillBehavior.Deselect;\n    }\n\n    return FillBehavior.None;\n  }\n\n  // Determines the next reference point for shift indexes\n  calculateNextEdge = (current: number, direction: Direction, indexes: number[]) => {\n    const stepper = direction === Direction.Down ? 1 : -1;\n    let edgeIndex = current + (stepper * 2);\n    let isEdge = indexOf(indexes, edgeIndex) === -1;\n    while (!isEdge) {\n      edgeIndex += stepper;\n      isEdge = indexOf(indexes, edgeIndex) === -1;\n    }\n\n    return edgeIndex - stepper;\n  }\n\n  // selectedIds calculates edge using last entry of selected Ids\n  handleShiftKeySelect = (current: number, direction: Direction, indexes: number[]) => {\n    const { updateSelections, selectedIds } = this.props;\n    const newMap = new Map(selectedIds);\n    const stepper = direction === Direction.Down ? 1 : -1;\n\n    const fillType = this.calculateFillType(current, direction, indexes);\n    switch (fillType) {\n      case FillBehavior.Fill:\n        const fillIndex = current + stepper;\n        const edge = this.calculateNextEdge(current, direction, indexes);\n\n        // Set next index in selected ids\n        newMap.set(this.dataSource.getItem(fillIndex).identifier, true);\n\n        // Reset edge\n        if (edge !== fillIndex) {\n          newMap.delete(this.dataSource.getItem(edge).identifier);\n          newMap.set(this.dataSource.getItem(edge).identifier, true);\n        }\n        break;\n      case FillBehavior.Deselect:\n        newMap.delete(this.dataSource.getItem(current).identifier);\n        break;\n      default:\n        const newEdge = this.calculateNextEdge(\n          current,\n          Direction.Down,\n          indexes,\n        );\n        newMap.delete(this.dataSource.getItem(newEdge).identifier);\n        newMap.set(this.dataSource.getItem(newEdge).identifier, true);\n    }\n\n    updateSelections(newMap);\n  }\n\n  selectIndexes = (fromIndex: number, toIndex: number) => {\n    const { selectedIds, updateSelections } = this.props;\n    const inclusiveToIndex = toIndex > fromIndex\n      ? toIndex + 1\n      : toIndex - 1;\n\n    const currentSelections = new Map(selectedIds);\n    const indexes = range(fromIndex, inclusiveToIndex);\n    const newSelections = indexes.reduce(\n      (newIds, index) => {\n\n        // Get items\n        const item = this.dataSource.getItem(index);\n        if (!item) {\n          return newIds;\n        }\n\n        // Remove if item is currently selected\n        if (currentSelections[item.identifier]) {\n          const removedSelection = new Map(newIds);\n          removedSelection.delete(item.identifier);\n          return removedSelection;\n        }\n\n        // Otherwise set to be selected\n        newIds.set(item.identifier, true);\n        return newIds;\n      },\n      currentSelections,\n    );\n\n    updateSelections(newSelections);\n  }\n\n  // Identifies next thread to select after item has been removed from mode\n  handleNextSelect = () => {\n    const {\n      selectedThread,\n      selectedDraft,\n      selectedMailbox,\n      history,\n      updateSelections,\n      selectedIds,\n      selectedAccount,\n    } = this.props;\n    const selectedId = selectedThread || selectedDraft;\n\n    if (selectedId && selectedMailbox && history) {\n      const indexes = Array.from(selectedIds.keys())\n        .map(key => this.dataSource.getLocation(key));\n      const lastSelectedIndex = last(indexes) || this.dataSource.getLocation(selectedId);\n\n      // Handles selecting next thread if action performed on that thread\n      const nextIndex = lastSelectedIndex + 1;\n      const nextItem = this.dataSource.getItem(nextIndex);\n      const previousItem = this.dataSource.getItem(lastSelectedIndex - 1);\n      const newSelections = new Map();\n\n      if (nextItem) {\n        history.push(routeFromMailbox(\n          selectedMailbox,\n          nextItem.resource.id,\n          selectedAccount,\n        ));\n        newSelections.set(nextItem.identifier, true);\n        updateSelections(newSelections);\n        return;\n      }\n\n      if (previousItem && !selectedIds.get(previousItem.identifier)) {\n        history.push(routeFromMailbox(\n          selectedMailbox,\n          previousItem.resource.id,\n          selectedAccount,\n        ));\n        newSelections.set(previousItem.identifier, true);\n        updateSelections(newSelections);\n        return;\n      }\n\n      updateSelections(newSelections);\n      history.push(routeFromMailbox(\n        selectedMailbox,\n        undefined,\n        selectedAccount,\n      ));\n    }\n  }\n\n  // Handles moving immediately\n  handleThreadMove = (thread: Thread, action: Swipe) => {\n    const { showCommandControl, setSwipeId } = this.props;\n    const { resetCounter } = this.state;\n    const actionValue = action.valueOf();\n\n    // Do not do anything when action is not set\n    if (!actionValue) {\n      return;\n    }\n\n    switch (actionValue) {\n      case Swipe.None:\n        const beforeNoneCounter = resetCounter[thread.id] || 0;\n        const afterNoneCounter = { ...resetCounter, [thread.id]: beforeNoneCounter + 1 };\n        this.setState({ resetCounter: afterNoneCounter });\n        return;\n      case ThreadBox.Later:\n        showCommandControl(CommandControlType.ReadLater);\n        setSwipeId(thread.id);\n        return;\n      case ThreadBox.List:\n        showCommandControl(CommandControlType.Label);\n        setSwipeId(thread.id);\n        return;\n      case Swipe.Star:\n        this.props.updateThread({\n          starred: !thread.starred,\n          singleResource: thread.id,\n        });\n        const beforeStarCounter = resetCounter[thread.id] || 0;\n        const afterStarCounter = { ...resetCounter, [thread.id]: beforeStarCounter + 1 };\n        this.setState({ resetCounter: afterStarCounter });\n        return;\n      case Swipe.Unread:\n        this.props.updateThread({\n          read: !thread.read,\n          singleResource: thread.id,\n        });\n        const beforeReadCounter = resetCounter[thread.id] || 0;\n        const afterReadCounter = { ...resetCounter, [thread.id]: beforeReadCounter + 1 };\n        this.setState({ resetCounter: afterReadCounter });\n        return;\n      default:\n        break;\n    }\n    this.props.updateThread({\n      box: actionValue as ThreadBox,\n      singleResource: thread.id,\n    });\n  }\n\n  handleAnimationComplete = (id: string) => {\n    const commits = { ...this.state.commits };\n    if (commits[id]) {\n      delete commits[id];\n      this.dataSource.remove(id);\n      this.setState({ commits });\n    }\n  }\n\n  handleThreadClick = (e: React.MouseEvent<HTMLElement>, thread: Thread)  => {\n    const {\n      history,\n      selectedMailbox,\n      selectedThread,\n      location,\n      updateSelections,\n      selectedIds,\n      selectedAccount,\n    } = this.props;\n    const currentSelections = new Map(selectedIds);\n\n    const primaryModifierKeySelected = isPrimaryModifierKey(e);\n\n    // Remove multiple selections if non-modified click\n    if (!(primaryModifierKeySelected || e.shiftKey)) {\n      const singleSelect = new Map();\n      singleSelect.set(thread.id, true);\n      updateSelections(singleSelect);\n    }\n\n    // Handle meta selection\n    if (selectedThread && primaryModifierKeySelected) {\n      const shouldSelect = currentSelections.get(thread.id) === undefined;\n      const newMap = new Map(selectedIds);\n      newMap.set(thread.id, shouldSelect);\n\n      // Remove selection\n      if (!shouldSelect) {\n        newMap.delete(thread.id);\n      }\n\n      updateSelections(newMap);\n\n      // If selections now empty, clear.\n      if (newMap.size === 0 && selectedMailbox && history) {\n        history.push(routeFromMailbox(selectedMailbox, undefined, selectedAccount));\n      }\n      return;\n    }\n\n    // Handle shift selection\n    if (selectedThread && e.shiftKey) {\n      const toIndex = this.dataSource.getLocation(thread.id);\n      const fromIndex = this.dataSource.getLocation(selectedThread);\n      this.selectIndexes(fromIndex, toIndex);\n    }\n\n    // Set selection by updating history\n    if (history && location && selectedMailbox) {\n      history.push(routeFromMailbox(selectedMailbox, thread.id, selectedAccount) + location.search);\n    }\n  }\n\n  renderThreadCell = (thread: Thread) => {\n    const { selectedIds, selectedThread } = this.props;\n    const { resetCounter } = this.state;\n\n    // Determine if item is selected\n    const isSelected = selectedIds.size > 0\n      ? selectedIds.get(thread.id) !== undefined\n      : selectedThread && selectedThread === thread.id || false;\n\n    // Pass in commit\n    const commit = this.state.commits[thread.id];\n\n    return (\n      <ThreadCell\n        thread={thread}\n        key={thread.id}\n        selected={isSelected}\n        onClick={this.handleThreadClick}\n        onThreadMove={this.handleThreadMove}\n        onAnimationComplete={this.handleAnimationComplete}\n        actionToPerform={commit}\n        resetCounter={resetCounter[thread.id]}\n      />\n    );\n  }\n\n  handleDraftClick = (e: React.MouseEvent<HTMLElement>, draft: Draft) => {\n    const { updateSelections, selectedDraft, selectedIds, history, selectedMailbox } = this.props;\n    const currentSelections = new Map(selectedIds);\n\n    const primaryModifier = isPrimaryModifierKey(e);\n    // Remove multiple selections if non-modified click\n    if (!(primaryModifier || e.shiftKey)) {\n      const singleSelect = new Map();\n      singleSelect.set(draft.id, true);\n      updateSelections(singleSelect);\n    }\n\n    // Handle meta selection\n    if (selectedDraft && primaryModifier) {\n      const shouldSelect = currentSelections.get(draft.id) === undefined;\n      const newMap = new Map(selectedIds);\n      newMap.set(draft.id, shouldSelect);\n\n      // Remove selection\n      if (!shouldSelect) {\n        newMap.delete(draft.id);\n      }\n\n      updateSelections(newMap);\n\n      // If selections now empty, clear.\n      if (newMap.size === 0 && selectedMailbox && history) {\n        history.push(routeFromMailbox(selectedMailbox, draft.id));\n      }\n      return;\n    }\n\n    // Handle shift selection\n    if (selectedDraft && e.shiftKey) {\n      const toIndex = this.dataSource.getLocation(draft.id);\n      const fromIndex = this.dataSource.getLocation(selectedDraft);\n      this.selectIndexes(fromIndex, toIndex);\n    }\n\n    // Set selection by updating history\n    if (history && location && selectedMailbox) {\n      history.push(routeFromMailbox(selectedMailbox, draft.id));\n    }\n  }\n\n  renderDraftCell = (draft: Draft) => {\n    const { selectedDraft, selectedIds } = this.props;\n\n    // Determine if item is selected\n    const isSelected = selectedIds.size > 0\n      ? selectedIds.get(draft.id) !== undefined\n      : selectedDraft && selectedDraft === draft.id || false;\n\n    return (\n      <DraftCell\n        draft={draft}\n        key={draft.id + draft.updated}\n        selected={isSelected}\n        onClick={this.handleDraftClick}\n      />\n    );\n  }\n\n  renderDraftCells = () => {\n    const { drafts } = this.props;\n    return drafts ?\n      drafts.map((draft: Draft) => this.renderDraftCell(draft)) : [];\n  }\n\n  // selectedIds calculates edge using last entry of selected Ids\n  handleKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {\n    const {\n      history,\n      selectedMailbox,\n      selectedThread,\n      selectedIds,\n      updateSelections,\n      selectedAccount,\n      selectedDraft,\n      rsbOnboardingType,\n      updateOnboarding,\n    } = this.props;\n    let handled = false;\n\n    if (document.activeElement && (document.activeElement.tagName === 'INPUT' ||\n      document.activeElement.tagName === 'TEXTAREA')) {\n      return;\n    }\n\n    // Check if primary modifier was selected\n    const primaryModifierKeySelected = isPrimaryModifierKey(e);\n\n    // Handles select all\n    if (primaryModifierKeySelected && e.keyCode === KeyCode.A) {\n      this.selectIndexes(0, this.dataSource.getLength());\n      handled = true;\n    }\n\n    const selectedId = selectedThread || selectedDraft;\n\n    const hotkey = getHotkey(e);\n    switch (hotkey && hotkey.name || e.keyCode) {\n      case KeyCode.Up:\n      case KeyCode.K:\n      case HotkeyAction.PreviousThread:\n        if (rsbOnboardingType === OnboardingType.NextThread) {\n          updateOnboarding({\n            skipped: false,\n            type: { steps: { [OnboardingType.NextThread]: true } },\n          });\n          logAmplitudeEvent(AmplitudeEvents.TourStepSix, { skipped: false, details: 'up' });\n        }\n        getOnboardingActions().next(OnboardingType.PreviousThread);\n\n        if (selectedMailbox) {\n          const indexes = Array.from(selectedIds.keys())\n            .map(key => this.dataSource.getLocation(key));\n          let lastSelectedIndex: string|number|undefined = last(indexes);\n          if (typeof lastSelectedIndex !== 'number' && selectedId) {\n            lastSelectedIndex = selectedThread &&\n              this.dataSource.getLocation(selectedId);\n          }\n          if (typeof lastSelectedIndex !== 'number') {\n            lastSelectedIndex = -1;\n          }\n          const previousIndex = lastSelectedIndex - 1;\n          const previousItem = this.dataSource.getItem(previousIndex);\n\n          // Do not move selection if no previous item\n          if (!previousItem) {\n            return;\n          }\n\n          // Remove selections on non-modified keypress\n          if (!e.shiftKey) {\n            const singleSelect = new Map();\n            singleSelect.set(previousItem.identifier, true);\n            updateSelections(singleSelect);\n          }\n\n          // Update selections\n          if (e.shiftKey && previousItem) {\n            this.handleShiftKeySelect(lastSelectedIndex, Direction.Up, indexes);\n          }\n\n          if (previousIndex > -1 && history) {\n            history.push(routeFromMailbox(\n              selectedMailbox,\n              previousItem.identifier,\n              selectedAccount,\n            ));\n          }\n\n          handled = true;\n        }\n        break;\n      case KeyCode.Down:\n      case KeyCode.J:\n      case HotkeyAction.NextThread:\n        if (rsbOnboardingType === OnboardingType.NextThread) {\n          updateOnboarding({\n            skipped: false,\n            type: { steps: { [OnboardingType.NextThread]: true } },\n          });\n          logAmplitudeEvent(AmplitudeEvents.TourStepSix, { skipped: false, details: 'down' });\n        }\n\n        getOnboardingActions().next(OnboardingType.NextThread);\n\n        if (selectedMailbox) {\n          const indexes = Array.from(selectedIds.keys())\n            .map(key => this.dataSource.getLocation(key));\n          let lastSelectedIndex: string | number | undefined = last(indexes);\n          if (typeof lastSelectedIndex !== 'number' && selectedId) {\n            lastSelectedIndex = selectedThread &&\n              this.dataSource.getLocation(selectedId);\n          }\n          if (typeof lastSelectedIndex !== 'number') {\n            lastSelectedIndex = -1;\n          }\n          const nextIndex = lastSelectedIndex + 1;\n          let nextItem = this.dataSource.getItem(nextIndex);\n\n          // Do not move selection if no previous item\n          if (!nextItem) {\n            if (lastSelectedIndex === -1 && this.dataSource.getLength() > 0) {\n              nextItem = this.dataSource.getItem(0);\n              if (!nextItem) {\n                return;\n              }\n            } else {\n              return;\n            }\n          }\n\n          // Remove selections on non-modified keypress\n          if (!e.shiftKey) {\n            const singleSelect = new Map();\n            singleSelect.set(nextItem.identifier, true);\n            updateSelections(singleSelect);\n          }\n\n          // Update selections\n          if (e.shiftKey && nextItem) {\n            this.handleShiftKeySelect(lastSelectedIndex, Direction.Down, indexes);\n          }\n\n          if (nextItem && history) {\n            history.push(routeFromMailbox(\n              selectedMailbox,\n              nextItem.identifier,\n              selectedAccount,\n            ));\n            handled = true;\n          }\n        }\n        break;\n      default:\n        break;\n    }\n\n    if (handled) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n  }\n\n  // Callback when datasource has updated to force rerender\n  handleForceUpdate = () => {\n    this.forceUpdate();\n  }\n\n  // Handles clearing out a commit on a successful undo\n  handleUndoCompletion = (t: Thread) => {\n    const { commits } = this.state;\n    if (commits[t.id]) {\n      delete commits[t.id];\n      this.setState({ commits });\n    }\n  }\n\n  renderEmptyCells = () => {\n    const numOfEmptyCells = 3;\n    const cells = [];\n\n    let i;\n    for (i = 0; i < numOfEmptyCells; i += 1) {\n      cells.push(<EmptyCell key={i} />);\n    }\n\n    return cells;\n  }\n\n  render() {\n    const { selectedMailbox, listHeight, threads, drafts, loading, cellHeight } = this.props;\n    const showDrafts = selectedMailbox && isDraftBox(selectedMailbox.type);\n    const mode = selectedMailbox || { type: MailboxType.Any };\n    const items = showDrafts\n      ? drafts.map(draft => draftDataSourceItem(draft))\n      : threads.map(thread => threadDataSourceItem(thread, mode));\n\n    const itemsEmpty = !!this.dataSource && !this.dataSource.getLength();\n    const isEmpty = !threads.length && itemsEmpty && selectedMailbox && !loading &&\n    !isDraftBox(selectedMailbox.type);\n    const isSearch = selectedMailbox && !!selectedMailbox.query;\n\n    // Adjust height of list when showing the provider search disclaimer\n    const showProviderDisclaimer = isSearch &&\n      selectedMailbox && !selectedMailbox.providerSearchComplete && !selectedMailbox.providerSearch;\n    let calculatedListHeight = listHeight;\n    if (showProviderDisclaimer) {\n      calculatedListHeight = calculatedListHeight - PROVIDER_SEARCH_CELL_HEIGHT;\n    }\n\n    return (\n      <div\n        className=\"infinite-thread-list\"\n        style={{ height: listHeight, overflow: 'hidden' }}\n        ref={this.handleRef}\n        tabIndex={-1}\n        onKeyDown={this.handleKeyDown}\n      >\n        {isEmpty && isSearch && selectedMailbox && selectedMailbox.providerSearchComplete &&\n          <EmptySearchCell\n            selectedMailbox={selectedMailbox}\n          />\n        }\n        {!loading && <ThreadsDataSource\n          ref={this.handleDataSourceRef}\n          onCommit={this.handleCommit}\n          mode={mode}\n          items={items}\n          onUpdate={this.handleForceUpdate}\n          onUndoComplete={this.handleUndoCompletion}\n        >\n          {dataSourceItems =>\n            <Infinite\n              className=\"list\"\n              elementHeight={cellHeight}\n              containerHeight={calculatedListHeight}\n              key=\"infinite\"\n              // TODO(SHAHAN): Re-enable infinite loading when we need it\n              // loadingSpinnerDelegate={<Loader />}\n              // onInfiniteLoad={this.handleInfiniteLoad}\n              // isInfiniteLoading={this.state.loading}\n              // infiniteLoadBeginEdgeOffset={50}\n            >\n              {\n                showDrafts\n                  ? dataSourceItems.map(item => this.renderDraftCell(item))\n                  : dataSourceItems.map(item => this.renderThreadCell(item))\n              }\n            </Infinite>\n          }\n        </ThreadsDataSource>}\n        {isEmpty && isSearch && selectedMailbox && selectedMailbox.providerSearchComplete &&\n          <EmptySearchCell\n            selectedMailbox={selectedMailbox}\n          />\n        }\n        {loading && this.renderEmptyCells()}\n        {!loading && !!showProviderDisclaimer && selectedMailbox &&\n          <ProviderSearchCell\n            query={selectedMailbox.query}\n            selectedMailbox={selectedMailbox}\n          />\n        }\n      </div>\n    );\n  }\n}\n\nexport default InfiniteThreadList;\n"]}]}