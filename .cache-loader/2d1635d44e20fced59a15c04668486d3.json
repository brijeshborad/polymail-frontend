{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/commandControl.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/commandControl.ts","mtime":1675280254054},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgQ29tbWFuZENvbnRyb2xUeXBlLCBBY3Rpb25TdGF0dXMsIH0gZnJvbSAnQHNyYy90eXBlcy9pbmRleCc7CmltcG9ydCB7IENPTU1BTkRfQ09OVFJPTF9JTkZFUiwgY29tbWFuZENvbnRyb2xTaG93LCBDT01NQU5EX0NPTlRST0xfU0hPVywgfSBmcm9tICdAc3JjL2R1Y2tzL2NvbW1hbmRDb250cm9sJzsKaW1wb3J0IHsgc2VsZWN0RHJhZnQsIHNlbGVjdERyYWZ0Rm9yVGhyZWFkIH0gZnJvbSAnQHNyYy9kdWNrcy9kcmFmdHMnOwppbXBvcnQgeyBvbmJvYXJkaW5nUGF0Y2ggfSBmcm9tICdAc3JjL2R1Y2tzL21lJzsKdmFyIGNvbW1hbmRDb250cm9sSW5mZXJFcGljID0gZnVuY3Rpb24gKGFjdGlvbiQsIHN0b3JlLCBkZXBzKSB7CiAgICByZXR1cm4gYWN0aW9uJC5vZlR5cGUoQ09NTUFORF9DT05UUk9MX0lORkVSKQogICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGFjdGlvbikgeyByZXR1cm4gYWN0aW9uLnN0YXR1cyA9PT0gQWN0aW9uU3RhdHVzLlN0YXJ0OyB9KQogICAgICAgIC5tYXAoZnVuY3Rpb24gKGFjdGlvbikgewogICAgICAgIHZhciBzdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7CiAgICAgICAgdmFyIGRyYWZ0ID0gc3RhdGUuc2VsZWN0ZWREcmFmdAogICAgICAgICAgICA/IHNlbGVjdERyYWZ0KHN0YXRlLCBzdGF0ZS5zZWxlY3RlZERyYWZ0KS5kYXRhCiAgICAgICAgICAgIDogc3RhdGUuc2VsZWN0ZWRUaHJlYWQgJiYgc2VsZWN0RHJhZnRGb3JUaHJlYWQoc3RhdGUsIHN0YXRlLnNlbGVjdGVkVGhyZWFkLmlkKS5kYXRhOwogICAgICAgIHZhciB0eXBlID0gISFkcmFmdAogICAgICAgICAgICA/IENvbW1hbmRDb250cm9sVHlwZS5EcmFmdAogICAgICAgICAgICA6IENvbW1hbmRDb250cm9sVHlwZS5UaHJlYWQ7CiAgICAgICAgcmV0dXJuIGNvbW1hbmRDb250cm9sU2hvdyh0eXBlKTsKICAgIH0pOwp9Owp2YXIgY29tbWFuZENvbnRyb2xPbmJvYXJkaW5nRXBpYyA9IGZ1bmN0aW9uIChhY3Rpb24kLCBzdG9yZSwgZGVwcykgewogICAgcmV0dXJuIGFjdGlvbiQub2ZUeXBlKENPTU1BTkRfQ09OVFJPTF9TSE9XKQogICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGFjdGlvbikgeyByZXR1cm4gYWN0aW9uLnN0YXR1cyA9PT0gQWN0aW9uU3RhdHVzLlN0YXJ0OyB9KQogICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKCkgeyByZXR1cm4gIXN0b3JlLmdldFN0YXRlKCkub25ib2FyZGluZy5jb21tYW5kQ2VudGVyOyB9KQogICAgICAgIC5tYXAoZnVuY3Rpb24gKGFjdGlvbikgeyByZXR1cm4gb25ib2FyZGluZ1BhdGNoKHsgc2tpcHBlZDogZmFsc2UsIHR5cGU6IHsgY29tbWFuZENlbnRlcjogdHJ1ZSB9IH0pOyB9KTsKfTsKZXhwb3J0IGRlZmF1bHQgWwogICAgY29tbWFuZENvbnRyb2xJbmZlckVwaWMsCiAgICBjb21tYW5kQ29udHJvbE9uYm9hcmRpbmdFcGljLApdOwo="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/commandControl.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/commandControl.ts"],"names":[],"mappings":"AACA,OAAO,EACL,kBAAkB,EAAsB,YAAY,GACrD,MAAM,kBAAkB,CAAC;AAC1B,OAAO,EACL,qBAAqB,EAAE,kBAAkB,EAAE,oBAAoB,GAChE,MAAM,2BAA2B,CAAC;AAEnC,OAAO,EAAE,WAAW,EAAE,oBAAoB,EAAE,MAAM,mBAAmB,CAAC;AACtE,OAAO,EAAE,eAAe,EAAuB,MAAM,eAAe,CAAC;AAErE,IAAM,uBAAuB,GAC7B,UAAC,OAAO,EAAE,KAAK,EAAE,IAAI;IACjB,OAAA,OAAO,CAAC,MAAM,CAAC,qBAAqB,CAAC;SAClC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,MAAM,KAAK,YAAY,CAAC,KAAK,EAApC,CAAoC,CAAC;SACtD,GAAG,CAAC,UAAC,MAAM;QACV,IAAM,KAAK,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;QAC/B,IAAM,KAAK,GAAG,KAAK,CAAC,aAAa;YAC/B,CAAC,CAAC,WAAW,CAAC,KAAK,EAAE,KAAK,CAAC,aAAa,CAAC,CAAC,IAAI;YAC9C,CAAC,CAAC,KAAK,CAAC,cAAc,IAAI,oBAAoB,CAAC,KAAK,EAAE,KAAK,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC;QAEtF,IAAM,IAAI,GAAuB,CAAC,CAAC,KAAK;YACtC,CAAC,CAAC,kBAAkB,CAAC,KAAK;YAC1B,CAAC,CAAC,kBAAkB,CAAC,MAAM,CAAC;QAC9B,OAAO,kBAAkB,CAAC,IAAI,CAAC,CAAC;IAClC,CAAC,CACF;AAbD,CAaC,CAAC;AAEN,IAAM,4BAA4B,GAE5B,UAAC,OAAO,EAAE,KAAK,EAAE,IAAI;IACvB,OAAA,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC;SACjC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,MAAM,KAAK,YAAY,CAAC,KAAK,EAApC,CAAoC,CAAC;SACtD,MAAM,CAAC,cAAM,OAAA,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,aAAa,EAA1C,CAA0C,CAAC;SACxD,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,eAAe,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE,EAAE,CAAC,EAAlE,CAAkE,CAClF;AAJD,CAIC,CAAC;AAEN,eAAe;IACb,uBAAuB;IACvB,4BAA4B;CAC7B,CAAC","sourcesContent":["import { Epic } from 'redux-observable';\nimport {\n  CommandControlType, Action, StoreState, ActionStatus, Onboarding,\n} from '@src/types/index';\nimport {\n  COMMAND_CONTROL_INFER, commandControlShow, COMMAND_CONTROL_SHOW,\n} from '@src/ducks/commandControl';\nimport { Deps } from '@src/lib/epic';\nimport { selectDraft, selectDraftForThread } from '@src/ducks/drafts';\nimport { onboardingPatch, OnboardingPatchMeta } from '@src/ducks/me';\n\nconst commandControlInferEpic: Epic<Action<CommandControlType|null, null|void>, StoreState, Deps> =\n(action$, store, deps) =>\n    action$.ofType(COMMAND_CONTROL_INFER)\n      .filter(action => action.status === ActionStatus.Start)\n      .map((action) => {\n        const state = store.getState();\n        const draft = state.selectedDraft\n          ? selectDraft(state, state.selectedDraft).data\n          : state.selectedThread && selectDraftForThread(state, state.selectedThread.id).data;\n\n        const type: CommandControlType = !!draft\n          ? CommandControlType.Draft\n          : CommandControlType.Thread;\n        return commandControlShow(type);\n      },\n    );\n\nconst commandControlOnboardingEpic: Epic<\n  Action<CommandControlType|OnboardingPatchMeta, Onboarding|CommandControlType>, StoreState, Deps\n  > = (action$, store, deps) =>\n    action$.ofType(COMMAND_CONTROL_SHOW)\n      .filter(action => action.status === ActionStatus.Start)\n      .filter(() => !store.getState().onboarding.commandCenter)\n      .map(action => onboardingPatch({ skipped: false, type: { commandCenter: true } }),\n    );\n\nexport default [\n  commandControlInferEpic,\n  commandControlOnboardingEpic,\n];\n"]}]}