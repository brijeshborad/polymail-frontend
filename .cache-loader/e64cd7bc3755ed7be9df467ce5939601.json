{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Sequences/index.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Sequences/index.ts","mtime":1675280254086},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JzsKaW1wb3J0IHsgd2l0aFJvdXRlciB9IGZyb20gJ3JlYWN0LXJvdXRlcic7CmltcG9ydCBTZXF1ZW5jZXMgZnJvbSAnLi9TZXF1ZW5jZXMnOwp2YXIgbWFwU3RhdGVUb1Byb3BzID0gZnVuY3Rpb24gKHN0YXRlLCBvd25Qcm9wcykgewogICAgdmFyIHBhdGggPSBvd25Qcm9wcy5sb2NhdGlvbiAmJiBvd25Qcm9wcy5sb2NhdGlvbi5wYXRobmFtZS50b0xvd2VyQ2FzZSgpOwogICAgdmFyIHNwbGl0ID0gcGF0aC5zcGxpdCgnLycpOwogICAgdmFyIHNlcXVlbmNlOwogICAgaWYgKHNwbGl0WzJdICYmIHN0YXRlLnNlcXVlbmNlc1tzcGxpdFsyXV0pIHsKICAgICAgICBzZXF1ZW5jZSA9IHN0YXRlLnNlcXVlbmNlc1tzcGxpdFsyXV0uZGF0YTsKICAgIH0KICAgIHZhciBzZWxlY3RlZFRpdGxlID0gJ1NlcXVlbmNlcyc7CiAgICBpZiAocGF0aCA9PT0gJy9zZXF1ZW5jZXMvY2FtcGFpZ25zJykgewogICAgICAgIHNlbGVjdGVkVGl0bGUgPSAnQ2FtcGFpZ25zJzsKICAgIH0KICAgIGVsc2UgaWYgKHBhdGggPT09ICcvc2VxdWVuY2VzL2FyY2hpdmUnIHx8IChzZXF1ZW5jZSAmJiBzZXF1ZW5jZS5hcmNoaXZlZCkpIHsKICAgICAgICBzZWxlY3RlZFRpdGxlID0gJ0FyY2hpdmUnOwogICAgfQogICAgcmV0dXJuIHsKICAgICAgICBzZXF1ZW5jZUNvdW50OiBzdGF0ZS5zZXF1ZW5jZUNvdW50LAogICAgICAgIGZlYXR1cmVzOiBzdGF0ZS5mZWF0dXJlcywKICAgICAgICBzZWxlY3RlZFRpdGxlOiBzZWxlY3RlZFRpdGxlLAogICAgfTsKfTsKdmFyIG1hcERpc3BhdGNoVG9Qcm9wcyA9IGZ1bmN0aW9uIChkaXNwYXRjaCkgeyByZXR1cm4gKHsKICAgIGRpc3BhdGNoQWN0aW9uOiBmdW5jdGlvbiAoYWN0aW9uKSB7IHJldHVybiBkaXNwYXRjaChhY3Rpb24pOyB9LAp9KTsgfTsKZXhwb3J0IGRlZmF1bHQgd2l0aFJvdXRlcihjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShTZXF1ZW5jZXMpKTsK"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Sequences/index.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Sequences/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAY,MAAM,aAAa,CAAC;AAChD,OAAO,EAAuB,UAAU,EAAE,MAAM,cAAc,CAAC;AAG/D,OAAO,SAAwC,MAAM,aAAa,CAAC;AAEnE,IAAM,eAAe,GAAG,UAAC,KAAiB,EAAE,QAAkC;IAC5E,IAAM,IAAI,GAAG,QAAQ,CAAC,QAAQ,IAAI,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;IAC3E,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAE9B,IAAI,QAAQ,CAAC;IACb,IAAI,KAAK,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;QACzC,QAAQ,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;KAC3C;IAED,IAAI,aAAa,GAAG,WAAW,CAAC;IAChC,IAAI,IAAI,KAAK,sBAAsB,EAAE;QACnC,aAAa,GAAG,WAAW,CAAC;KAC7B;SAAM,IAAI,IAAI,KAAK,oBAAoB,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,QAAQ,CAAC,EAAE;QAC3E,aAAa,GAAG,SAAS,CAAC;KAC3B;IAED,OAAO;QACL,aAAa,EAAE,KAAK,CAAC,aAAa;QAClC,QAAQ,EAAE,KAAK,CAAC,QAAQ;QACxB,aAAa,eAAA;KACd,CAAC;AACJ,CAAC,CAAC;AAEF,IAAM,kBAAkB,GAAG,UAAC,QAAuB,IAAoB,OAAA,CAAC;IACtE,cAAc,EAAE,UAAA,MAAM,IAAI,OAAA,QAAQ,CAAC,MAAM,CAAC,EAAhB,CAAgB;CAC3C,CAAC,EAFqE,CAErE,CAAC;AAEH,eAAe,UAAU,CACvB,OAAO,CAAgC,eAAe,EAAE,kBAAkB,CAAC,CAAC,SAAS,CAAC,CACvF,CAAC","sourcesContent":["import { connect, Dispatch } from 'react-redux';\nimport { RouteComponentProps, withRouter } from 'react-router';\nimport { StoreState } from '@src/types';\n\nimport Sequences, { StateProps, DispatchProps } from './Sequences';\n\nconst mapStateToProps = (state: StoreState, ownProps: RouteComponentProps<any>): StateProps => {\n  const path = ownProps.location && ownProps.location.pathname.toLowerCase();\n  const split = path.split('/');\n\n  let sequence;\n  if (split[2] && state.sequences[split[2]]) {\n    sequence = state.sequences[split[2]].data;\n  }\n\n  let selectedTitle = 'Sequences';\n  if (path === '/sequences/campaigns') {\n    selectedTitle = 'Campaigns';\n  } else if (path === '/sequences/archive' || (sequence && sequence.archived)) {\n    selectedTitle = 'Archive';\n  }\n\n  return {\n    sequenceCount: state.sequenceCount,\n    features: state.features,\n    selectedTitle,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>): DispatchProps => ({\n  dispatchAction: action => dispatch(action),\n});\n\nexport default withRouter(\n  connect<StateProps, DispatchProps, {}>(mapStateToProps, mapDispatchToProps)(Sequences),\n);\n"]}]}