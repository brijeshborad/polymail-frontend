{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/thread.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/thread.ts","mtime":1675280254069},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/thread.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/thread.ts"],"names":[],"mappings":"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","sourcesContent":["import moment from 'moment';\nimport { last, sortBy, findIndex, flatten, padStart } from 'lodash';\nimport { parseAddress } from './address';\nimport { ThreadBox, Thread, Message, Commit, Mailbox, MailboxType } from '@src/types';\nimport { Observable } from 'rxjs';\nimport Cache, { Stores } from './db';\nimport { tokenizeString, TokenizedThread } from './searchDb';\n\nexport const threadPlainStringValue = (thread: Thread): string => {\n  const subject = thread.subject;\n  const spacer = ' ';\n  const attachmentNames = thread.messages\n    .map(message => message.attachments.map(attachment => attachment.filename));\n  const participantsArray = thread.participants\n    .map(participant => participant.email + spacer + participant.fullName);\n  const snippetsArray = thread.messages.map(message => message.snippet);\n  const flattendParticipants = flatten(participantsArray);\n  const flattenedAttachmentNames = flatten(attachmentNames, true);\n  const flattenedSnippets = flatten(snippetsArray);\n\n  // Create string of subject, attachments, participants and snippets\n  const finalString = [\n    subject, flattenedAttachmentNames.join(' '), flattendParticipants, flattenedSnippets,\n  ].join(' ').toLowerCase();\n\n  return finalString.toLowerCase();\n};\n\n// Tokenize threads with attachments participants, subject, and snippet\nexport const tokenizeThreads = (threads: Thread[]): TokenizedThread[] => {\n  const updated = threads.map((thread) => {\n\n    const finalString = threadPlainStringValue(thread);\n    // Create tokens array for threads\n    const tokenizedArray = tokenizeString(finalString);\n    const tokenized: TokenizedThread = {\n      id: thread.id,\n      internal: thread.internal,\n      tokens: tokenizedArray,\n      hasAttachments: thread.hasAttachments ? 1 : undefined,\n      hasReminder: !!thread.waiting ? 1 : undefined,\n      isUnread: !thread.read ? 1 : undefined,\n      isOpened: !!thread.tracks && thread.tracked ? 1 : undefined,\n      isUnopened: !thread.tracks && thread.tracked ? 1 : undefined,\n      isReplied: thread.messages.length > 1 &&\n        thread.lastSent && thread.lastSent !== thread.internal ? 1 : undefined,\n      isUnreplied: thread.lastSent &&\n        moment(thread.lastSent).isSame(thread.internal) ? 1 : undefined,\n    };\n    return tokenized;\n  });\n  return updated;\n};\n\nexport function computeThread(thread: Thread, sharedThread?: string): Thread {\n  const computed: Thread = {\n    // ensure default properties are set\n    messages: [],\n\n    ...thread,\n\n    // reset computed values\n    read: true,\n    sent: false,\n    starred: false,\n    hasAttachments: false,\n    tracked: false,\n    tracks: 0,\n    participants: [],\n    participantEmails: [],\n    subject: '',\n    snippet: '',\n    sentSnippet: '',\n  };\n\n  // sort by internal date\n  computed.messages = sortBy(\n    // make sure default properties are set\n    computed.messages.map(message => ({\n      to: [],\n      cc: [],\n      bcc: [],\n      from: '',\n      subject: '(No Subject)',\n      snippet: '',\n      tracked: false,\n      tracks: 0,\n      sent: false,\n      read: false,\n      starred: false,\n      attachments: [],\n      hasAttachments: false,\n      ...message,\n    })),\n    ['internal'],\n  );\n\n  if (!(computed.internal instanceof Date) && (typeof computed.internal === 'string')) {\n    computed.internal = new Date(computed.internal);\n  }\n\n  if (!(computed.sort instanceof Date) && (typeof computed.sort === 'string')) {\n    computed.sort = new Date(computed.sort);\n  }\n\n  let lastSent: Message | undefined;\n  let addresses: string[] = [];\n\n  computed.messages.forEach((message) => {\n    if (!message.internal) {\n      message.internal = new Date('1970-01-01T00:00:00.000Z');\n    }\n\n    if (!(message.internal instanceof Date)) {\n      message.internal = new Date(message.internal);\n    }\n\n    if (!message.read) {\n      computed.read = false;\n    }\n\n    if (message.sent) {\n      computed.sent = true;\n      lastSent = message;\n    }\n\n    if (message.starred) {\n      computed.starred = true;\n    }\n\n    // Handle setting attachment url based off if shared thread fetch or not\n    message.attachments = message.attachments.map((att) => {\n      const threadsSection = !!sharedThread\n        ? '/v1/sharedThreads/' + encodeURIComponent(sharedThread)\n        : '/v2/threads/' + encodeURIComponent(thread.id);\n      return ({\n        ...att,\n        message: message.id,\n        thread: computed.id,\n        url: att.url && att.url !== '' ? att.url : process.env.API_URL +\n          threadsSection\n          + '/messages/' + encodeURIComponent(message.id)\n          + '/attachments/' + encodeURIComponent(att.id),\n        sharedThread,\n      });\n    });\n\n    if (message.attachments.filter(a => !a.inline).length > 0) {\n      message.hasAttachments = true;\n    }\n\n    if (message.hasAttachments) {\n      computed.hasAttachments = true;\n    }\n\n    if (computed.subject === '') {\n      computed.subject = message.subject;\n    }\n\n    addresses = [...addresses, ...message.to, ...message.cc, ...message.bcc];\n    if (message.from !== '') {\n      addresses.push(message.from);\n    }\n\n    if (message.replyTo) {\n      addresses.concat(message.replyTo);\n    } else {\n      message.replyTo = [];\n    }\n  });\n\n  // snippet\n  if (computed.messages.length > 0) {\n    const lastMessage = last(computed.messages)!;\n    computed.snippet = lastMessage.snippet;\n  }\n\n  // no subject\n  if (computed.subject === '') {\n    computed.subject = '(No Subject)';\n  }\n\n  // handle last sent message\n  if (lastSent) {\n    computed.sentSnippet = lastSent.snippet;\n    computed.tracked = lastSent.tracked;\n    computed.tracks = lastSent.tracks;\n    computed.lastSent = lastSent.internal;\n  }\n\n  // handle participants\n  const added: { [email: string]: boolean } = {};\n  addresses.forEach((address) => {\n    const parsed = parseAddress(address);\n    if (!added[parsed.email]) {\n      computed.participants.push(parsed);\n    }\n    added[parsed.email] = true;\n  });\n\n  if (computed.participants.length > 0) {\n    computed.participantEmails = computed.participants.map(\n      p => p.email.toLowerCase() + '|'\n        + padStart(moment(computed.internal).unix().toString(), 10, '0'),\n    );\n  }\n\n  // Handle index properties\n  computed.starredIndex = undefined;\n  if (computed.starred) {\n    computed.starredIndex = 1;\n  }\n\n  computed.waitingIndex = undefined;\n  if (computed.waiting && moment(computed.waiting.when).isAfter()) {\n    computed.waitingIndex = 1;\n  }\n\n  computed.listUnreadIndex = undefined;\n  if (!computed.read && computed.list) {\n    computed.listUnreadIndex = computed.list;\n  }\n\n  computed.inboxUnreadIndex = undefined;\n  if (computed.box === ThreadBox.Inbox) {\n    computed.inboxUnreadIndex = computed.read ? 0 : 1;\n  }\n\n  if (computed.when && !(computed.when instanceof Date)) {\n    computed.when = new Date(computed.when);\n  }\n\n  if (computed.waiting && computed.waiting.when && !(computed.waiting.when instanceof Date)) {\n    computed.waiting.when = new Date(computed.waiting.when);\n  }\n\n  return computed;\n}\n\nexport const patchedNoCompute = (thread: Thread, commit: Commit): Thread => {\n  const updated = { ...thread };\n\n  // Replace box if exists\n  if (commit.payload.box) {\n    updated.box = commit.payload.box;\n\n    // Set when date if provided\n    updated.when = commit.payload.when;\n    updated.list = commit.payload.list;\n  }\n\n  // Update read/starred if needed\n  if (commit.payload.messages) {\n    commit.payload.messages.forEach((message: Message) => {\n      const index = findIndex(updated.messages, { id: message.id });\n      if (index !== -1) {\n\n        if (message.read !== undefined) {\n          updated.messages[index].read = message.read;\n        }\n\n        if (message.starred !== undefined) {\n          updated.messages[index].starred = message.starred;\n        }\n      }\n    });\n  }\n\n  if (commit.payload.waiting !== undefined) {\n    updated.waiting = commit.payload.waiting === null ? undefined : commit.payload.waiting;\n  }\n\n  if (commit.payload.muted !== undefined) {\n    updated.muted = commit.payload.muted;\n  }\n\n  return updated;\n};\n\nexport const patched = (thread: Thread, commit: Commit): Thread => {\n  return computeThread(patchedNoCompute(thread, commit));\n};\n\n// Identifies if next thread matches the id of the old thread\nexport const matchesThread = (old: Thread, next: Thread) => {\n  if (old.id === next.id) {\n    return true;\n  }\n\n  if (next.messages.length === 1 && next.messages[0].rfcId === old.id) {\n    return true;\n  }\n\n  return false;\n};\n\n// mailboxThreadsPredicate applies mailbox filter on thread\nexport function mailboxThreadsPredicate(\n  mailbox: Mailbox,\n  thread: Thread,\n  ignoreFlags: boolean = false,\n): boolean {\n\n  if (mailbox.account && thread.account !== mailbox.account) {\n    return false;\n  }\n\n  if (mailbox.list && thread.list !== mailbox.list) {\n    return false;\n  }\n\n  if (mailbox.starred !== undefined && !thread.starred && !ignoreFlags) {\n    return false;\n  }\n\n  if (mailbox.followUp !== undefined && !thread.waiting) {\n    return false;\n  }\n\n  if (mailbox.sent !== undefined && !thread.sent && !ignoreFlags) {\n    return false;\n  }\n\n  if (mailbox.read !== undefined && mailbox.read !== thread.read && !ignoreFlags) {\n    return false;\n  }\n\n  // Handle mailbox filters\n  switch (mailbox.type) {\n    case MailboxType.SendLater:\n    case MailboxType.Drafts:\n    case MailboxType.Outbox:\n      return false;\n    case MailboxType.Archive:\n      return thread.box === ThreadBox.Archive;\n    case MailboxType.Inbox:\n      return thread.box === ThreadBox.Inbox;\n    case MailboxType.Later:\n      return thread.box === ThreadBox.Later;\n    case MailboxType.Spam:\n      return thread.box === ThreadBox.Spam;\n    case MailboxType.Trash:\n      return thread.box === ThreadBox.Trash;\n    case MailboxType.Any:\n      return true;\n    default:\n      return false;\n  }\n}\n\nconst descending = true;\nexport const THREAD_LIST_SIZE = 1000;\ntype ThreadFilter = (thread: Thread) => boolean;\n\nexport function listThreadsByBox(\n  box: ThreadBox, offset?: Date, filter?: ThreadFilter,\n): Observable<Thread[]> {\n  const lessThan = offset ? offset : Date();\n  return Cache.listIndex<Thread>(\n    Stores.Threads,\n    'box_sort',\n    IDBKeyRange.bound([box, new Date(0)], [box, lessThan]),\n    !(box === ThreadBox.Later),\n    THREAD_LIST_SIZE,\n    filter,\n  );\n}\n\nexport function listThreadsByAccountBox(\n  account: string, box: ThreadBox, offset?: Date, filter?: ThreadFilter,\n): Observable<Thread[]> {\n  const lessThan = offset ? offset : Date();\n  return Cache.listIndex<Thread>(\n    Stores.Threads,\n    'account_box_sort',\n    IDBKeyRange.bound([account, box, new Date(0)], [account, box, lessThan]),\n    !(box === ThreadBox.Later),\n    THREAD_LIST_SIZE,\n    filter,\n  );\n}\n\nexport function listThreadsSent(offset?: Date, filter?: ThreadFilter): Observable<Thread[]> {\n  const range = offset ? IDBKeyRange.upperBound([offset]) : undefined;\n\n  return Cache.listIndex<Thread>(\n    Stores.Threads,\n    'lastsent',\n    range,\n    descending,\n    THREAD_LIST_SIZE,\n    filter,\n  );\n}\n\nexport function listThreadsAccountSent(\n  account: string, offset?: Date, filter?: ThreadFilter,\n): Observable<Thread[]> {\n  const lessThan = offset ? offset : Date();\n  return Cache.listIndex<Thread>(\n    Stores.Threads,\n    'account_lastsent',\n    IDBKeyRange.bound([account, new Date(0)], [account, lessThan]),\n    descending,\n    THREAD_LIST_SIZE,\n    filter,\n  );\n}\n\nexport function listThreadsByList(\n  list: string, offset?: Date, filter?: ThreadFilter,\n): Observable<Thread[]> {\n  const lessThan = offset ? offset : Date();\n  return Cache.listIndex<Thread>(\n    Stores.Threads,\n    'list_internal',\n    IDBKeyRange.bound([list, new Date(0)], [list, lessThan]),\n    descending,\n    THREAD_LIST_SIZE,\n    filter,\n  );\n}\n\nexport function listThreadsByAccountList(\n  account: string, list: string, offset?: Date, filter?: ThreadFilter,\n): Observable<Thread[]> {\n  const lessThan = offset ? offset : Date();\n  return Cache.listIndex<Thread>(\n    Stores.Threads,\n    'account_list_internal',\n    IDBKeyRange.bound([account, list, new Date(0)], [account, list, lessThan]),\n    descending,\n    THREAD_LIST_SIZE,\n    filter,\n  );\n}\n\nexport function listThreadsByEmail(\n  email: string, limit: number|undefined, filter?: ThreadFilter,\n): Observable<Thread[]> {\n  const key = email.toLowerCase() + '|';\n\n  return Cache.listIndex<Thread>(\n    Stores.Threads,\n    'participantemails',\n    Cache.startsWith(key),\n    descending,\n    limit,\n    filter,\n  );\n}\n\nexport function listThreadIdsByEmail(email: string): Observable<string[]> {\n  const key = email.toLowerCase() + '|';\n  return Cache.listIndexKeys(\n    Stores.Threads,\n    'participantemails',\n    Cache.startsWith(key),\n  );\n}\n\nexport function countThreadsByEmail(email: string): Observable<number> {\n  const key = email.toLowerCase() + '|';\n  return Cache.countIndex(\n    Stores.Threads,\n    'participantemails',\n    Cache.startsWith(key),\n  );\n}\n\n// Warning: Only used for search\nexport function listAllThreadsByAccount(\n  account: string, limit: number, filter?: ThreadFilter,\n): Observable<Thread[]> {\n  return Cache.listIndex<Thread>(\n    Stores.Threads,\n    'account_internal',\n    IDBKeyRange.bound([account, new Date(0)], [account, Date()]),\n    descending,\n    limit,\n    filter,\n  );\n}\n\nexport function listThreadsStarred(filter?: ThreadFilter): Observable<Thread[]> {\n  return Cache.listIndex<Thread>(\n    Stores.Threads,\n    'starred_internal',\n    IDBKeyRange.bound([1, new Date(0)], [1, Date()]),\n    descending,\n    THREAD_LIST_SIZE,\n    filter,\n  );\n}\n\nexport function listThreadsAccountStarred(\n  account: string, filter?: ThreadFilter,\n): Observable<Thread[]> {\n  return Cache.listIndex<Thread>(\n    Stores.Threads,\n    'starred_account_internal',\n    IDBKeyRange.bound([1, account, new Date(0)], [1, account, Date()]),\n    descending,\n    THREAD_LIST_SIZE,\n    filter,\n  );\n}\n\nexport function listThreadsFollowUp(filter?: ThreadFilter): Observable<Thread[]> {\n  return Cache.listIndex<Thread>(\n    Stores.Threads,\n    'waiting',\n    IDBKeyRange.only(1),\n    descending,\n    THREAD_LIST_SIZE,\n    filter,\n  );\n}\n\nexport function isThreadInitSyncCompleted(accounts: string[]): Observable<boolean> {\n  if (accounts.length === 0) {\n    return Observable.of(true);\n  }\n  const checks = accounts.map(account =>\n    Cache.get(Stores.Workers, 'ThreadSync-' + account)\n      .map(state => !!(state && state.completed)));\n  return Observable.zip(...checks)\n    .map(statuses =>\n      (statuses.reduce((state, status) => state && status)));\n}\n\nexport const getFollowUpReminderDisplayString = (thread: Thread) => {\n  const now = new Date();\n  const followUp = thread.waiting && thread.waiting.when && thread.waiting.when > now ?\n    moment(thread.waiting.when).format(\n      now.getFullYear() === thread.waiting.when.getFullYear() ?\n        'ddd, MMM D [at] h:mm a' : 'ddd, MMM D YYYY [at] h:mm a',\n    ) : undefined;\n\n  return followUp;\n};\n"]}]}