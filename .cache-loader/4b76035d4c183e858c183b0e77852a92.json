{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker.ts","mtime":1675280254122},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker.ts"],"names":[],"mappings":"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","sourcesContent":["// Flags for Development\n// NOTE: Must be false when merging\nconst enableDbLogger = false; // output db op stats to console\nconst disableApiCorsOptimization = false; // disable CORS optimization for API requests\nconst realtimeTokenDebug = false; // Allow realtime token to be used locally\n\n// Polyfills\nimport 'whatwg-fetch';\n\n// Enable Sentry for production environments\nimport { init, setUser, captureException } from '@sentry/browser';\n\nif (process.env.NODE_ENV === 'production' && process.env.SENTRY_DSN !== '') {\n  init({\n    dsn: process.env.SENTRY_DSN,\n    release: process.env.SOURCE_VERSION,\n    environment: process.env.SENTRY_ENV,\n  });\n}\n\n// Imports\nimport { setToken, AUTH_TOKEN_NONE, isLoggedIn, disableCorsOptimization } from './api/base';\nimport {\n  initDb, resetDbIfNeeded, ClearCacheMechanism, enableUserDebug,\n  setClearCacheMechanism, setAllowReconnect, getClearCacheMechanism,\n  disableUserDebug, enableForceDebug,\n} from '@src/lib/db';\n\nif (disableApiCorsOptimization) {\n  disableCorsOptimization();\n}\n\n// Used to enable IndexedDB calls for debugging\nif (enableDbLogger) {\n  enableForceDebug();\n}\n\n// Identify if we want to enable realtime token debugging\nif (realtimeTokenDebug) {\n  enableRealtimeDebug();\n}\n\nimport ActivityFeedSync from './worker/sync/ActivityFeedSync';\nimport ActivityFeedIncrSync from './worker/sync/ActivityFeedIncrSync';\nimport SyncOverwatch from './worker/sync/SyncOverwatch';\nimport DraftSync from './worker/sync/DraftSync';\nimport DraftIncrSync from './worker/sync/DraftIncrSync';\nimport CalendarEventSync from './worker/sync/CalendarEventSync';\nimport ContactSync from './worker/sync/ContactSync';\nimport ContactGroupSync from './worker/sync/ContactGroupSync';\nimport ContactNoteSync from './worker/sync/ContactNoteSync';\nimport SharedThreadSync from './worker/sync/SharedThreadSync';\nimport TeamMemberSync from './worker/sync/TeamMemberSync';\nimport TemplateSync from './worker/sync/TemplateSync';\nimport TemplateIncrSync from './worker/sync/TemplateIncrSync';\nimport ThreadSync from './worker/sync/ThreadSync';\nimport Realtime, { enableRealtimeDebug } from './worker/Realtime';\nimport HistorySync from './worker/HistorySync';\nimport CommitSync, { resetCommitStatuses } from './worker/commit/CommitSync';\nimport MessageBodiesIncrSync from './worker/sync/MessageBodiesIncrSync';\nimport MessageBodiesSync from './worker/sync/MessageBodiesSync';\n\nimport Bridge from './worker/bridge/Bridge';\nimport { AppEvent, AppEventName } from './worker/bridge/appEvents';\nimport {\n  sendWorkerReady,\n  sendMeUpdated,\n  sendTeamUpdated,\n  sendNotification,\n  setConnections,\n  sendDraftUpdated,\n  sendDraftSent,\n  sendSharedThreadActivity,\n  sendRequestConfig,\n} from './worker/bridge/workerEvents';\nimport { Account, RealtimeEvent, AccountType, AccountStatus, List } from './types';\nimport bus from './worker/bus';\nimport { MailCountBot } from '@src/worker/mailCountBot';\nimport { FileUploadSync, resetFileUploadStatuses } from '@src/worker/commit/FileUploadSync';\nimport { saveBodies } from './lib/searchDb';\nimport { enableSearchDb } from './lib/device';\nimport { MaintenanceBot } from './worker/maintenanceBot';\nimport moment from 'moment';\nimport { recordLogWorker } from './lib/log_worker';\n\nconst overwatch = new SyncOverwatch();\n\nconst realtime = new Realtime();\nrealtime.persist(5);\n\nconst connections: MessagePort[] = [];\nlet currentTeam: string|undefined;\nlet activityFeedSyncEnabled = false;\nlet mailCountBot: MailCountBot|undefined;\n\nself.addEventListener('connect', (e: any) => {\n  const port = e.ports[0];\n\n  connections.push(port);\n  setConnections(connections);\n\n  initWorker();\n  port.start();\n});\n\ndeclare global {\n  var SharedWorkerGlobalScope: any;\n}\n\n// Detect SharedWorker\nlet sharedWorker = false;\ntry {\n  // HACK(SHAHAN): SharedWorkerGlobalScope should be available in sharedworker only\n  if (self instanceof SharedWorkerGlobalScope) {\n    sharedWorker = true;\n  }\n} catch (e) {\n  // SharedWorker not detected, must be a Worker\n}\n\n// Init Worker starts the bridge and waits for\nconst initWorker = () => {\n  // Don't start worker if not yet ready\n  // SharedWorker must setup connection to the web thread first\n  if (sharedWorker && !connections.length) {\n    return;\n  }\n\n  // Start bridge\n  // Handle app events\n  const bridge = new Bridge(sharedWorker ? connections : undefined);\n  bridge.subscribe({\n    next: (appEvent: AppEvent) => {\n      handleAppEvent(appEvent);\n    },\n  });\n\n  // Request config\n  sendRequestConfig();\n};\n\ninitWorker();\n\n// startWorker is called after init db happens\n// db is initialized by the Config appEvent\nlet workerReady = false;\nlet startWorkerCalled = false;\nconst startWorker = () => {\n  // Don't startWorker until ready\n  if (!workerReady) {\n    return;\n  }\n\n  // Prevent duplicate setup of worker\n  if (startWorkerCalled) {\n    return;\n  }\n\n  startWorkerCalled = true;\n\n  // Handle realtime events\n  realtime.subscribe((event: RealtimeEvent) => {\n    switch (event.name) {\n      case 'MeUpdated':\n        sendMeUpdated();\n        break;\n\n      case 'TeamUpdated':\n        sendTeamUpdated();\n        break;\n\n      case 'Notification':\n        sendNotification(event.data);\n        break;\n\n      case 'SharedThreadActivity':\n        sendSharedThreadActivity(event.data.activity);\n        break;\n\n      default:\n        break;\n    }\n  });\n\n  // Trigger backup sync every minute\n  overwatch.persist(60);\n\n  // Handle Mail Count Updates\n  mailCountBot = new MailCountBot();\n  mailCountBot.start();\n\n  // Handle maintenance\n  const maintenanceBot = new MaintenanceBot();\n  maintenanceBot.start();\n};\n\nlet tryDbResetRetries = 0;\n\nconst tryDbReset = () => {\n  initDb(true)\n    .subscribe({\n      next: () => {\n        tryDbResetRetries = 0;\n        setAllowReconnect(true);\n\n        // Restart worker to initiate background syncs\n        sendWorkerReady();\n      },\n      error: (initError) => {\n        captureException(initError);\n\n        // tslint:disable-next-line: no-console\n        console.error(initError);\n\n        if (tryDbResetRetries < 2) {\n          tryDbResetRetries += 1;\n          tryDbReset();\n        } else {\n          throw new Error('programmer: exhausted tryDbReset');\n        }\n      },\n    });\n};\n\n// Handle events sent from the app\nconst handleAppEvent = (e: AppEvent) => {\n  // Handle special events that work before the worker is ready\n  switch (e.name) {\n    case AppEventName.Config:\n      // Setup auth token, clear cache mechanism\n      setToken(e.data.token);\n      realtime.setToken(e.data.token);\n\n      if (e.data.electronBridgeClearCache) {\n        setClearCacheMechanism(ClearCacheMechanism.WorkerElectronBridge);\n      }\n\n      setAllowReconnect(e.data.allowReconnect);\n\n      // Handle initialization tasks and then start worker\n      initDb()\n        .flatMap(() => resetCommitStatuses())\n        .flatMap(() => resetFileUploadStatuses())\n        .subscribe({\n          complete: () => {\n            workerReady = true;\n            startWorker();\n            sendWorkerReady();\n          },\n          error: (initErr) => {\n            // tslint:disable-next-line: no-console\n            console.error(initErr);\n            captureException(initErr);\n          },\n        });\n\n      return;\n\n    case AppEventName.AllowDbReconnect:\n      if (!e.data.allowReconnect) {\n        currentTeam = undefined;\n        activityFeedSyncEnabled = false;\n        mailCountBot?.reset();\n\n        setAllowReconnect(false);\n\n        overwatch.syncers.forEach((_, key) => {\n          overwatch.remove(key);\n        });\n        return;\n      }\n\n      tryDbReset();\n      return;\n\n    default:\n      break;\n  }\n\n  // Handle regular events if worker is ready\n  if (!workerReady) {\n    return;\n  }\n\n  switch (e.name) {\n\n    case AppEventName.ListsUpdated:\n      // Sync account base resources\n      mailCountBot?.setLists(e.data.lists.map((l: List) => l.id));\n      return;\n\n    case AppEventName.SearchDbEnable:\n      if (e.data.config.enabled) {\n        enableSearchDb(e.data.config);\n        overwatch.add(new MessageBodiesSync());\n        overwatch.add(new MessageBodiesIncrSync());\n      }\n      break;\n\n    case AppEventName.AuthUpdated:\n      setToken(e.data.token);\n      realtime.setToken(e.data.token);\n\n      // Want to start workers after any db resets are complete\n      resetDbIfNeeded().subscribe({\n        next: () => {\n\n          // Don't want to do anything if not logged in\n          if (!isLoggedIn()) {\n            return;\n          }\n\n          // Syncers use AuthUpdated to clear errors\n          bus.clearErrors();\n\n          // Add Syncers\n          // check if user is not disabled\n          if (!e.data.disabled) {\n            overwatch.add(new HistorySync(realtime));\n            overwatch.add(new FileUploadSync());\n            overwatch.add(new CommitSync());\n            overwatch.add(new ContactSync());\n            overwatch.add(new ContactNoteSync());\n            overwatch.add(new DraftSync());\n            overwatch.add(new DraftIncrSync(realtime));\n            overwatch.add(new ContactGroupSync());\n            overwatch.add(new SharedThreadSync());\n            overwatch.add(new TemplateSync());\n            overwatch.add(new TemplateIncrSync(realtime));\n          }\n\n          // Trigger Sync\n          bus.triggerSync(undefined, true);\n        },\n        error: (resetErr) => {\n          // tslint:disable-next-line: no-console\n          console.error(resetErr);\n          captureException(resetErr);\n        },\n      });\n      break;\n\n    case AppEventName.AccountsUpdated:\n      // Sync account base resources\n      e.data.accounts\n        .filter((account: Account) =>\n          // don't want to sync aliases or accounts in deleting state\n          account.type !== AccountType.Alias && account.status !== AccountStatus.Deleting,\n        )\n        .forEach((account: Account) => {\n\n          // Calendars\n          if (account.type === AccountType.Microsoft || account.type === AccountType.Google) {\n            overwatch.add(new CalendarEventSync(account.id));\n          }\n\n          // Mail Sync\n          overwatch.add(new ThreadSync(account.id));\n\n          // Initial Mail Counts\n          bus.updateMailCount(account.id);\n        });\n      break;\n\n    case AppEventName.PreferencesUpdated:\n      // Update count preferences\n      mailCountBot?.updatePreferences(\n        e.data.preferences.leftSidebarCount, e.data.preferences.dockCount,\n      );\n\n      // Update mail counts when accounts are provided\n      if (e.data.accounts) {\n        e.data.accounts.forEach((account: Account) => bus.updateMailCount(account.id));\n      }\n      break;\n\n    case AppEventName.CommitSubmitted:\n      bus.triggerSync('CommitSync');\n      bus.triggerSync('FileUploadSync');\n      break;\n\n    case AppEventName.DraftUpdated:\n      const updatedDraft = e.data && e.data.draft;\n      if (updatedDraft) {\n        sendDraftUpdated(updatedDraft);\n      }\n      break;\n\n    case AppEventName.DraftSent:\n      const sentDraft = e.data && e.data.draft;\n      if (sentDraft) {\n        sendDraftSent({ ...e.data });\n      }\n      break;\n\n    case AppEventName.FileUploadSubmitted:\n      bus.triggerSync('FileUploadSync');\n      break;\n\n    case AppEventName.DraftUndoSent:\n      bus.cancelSync('CommitSync');\n      bus.triggerSync('CommitSync');\n      break;\n\n    case AppEventName.UndoMove:\n      if (e.data.box) {\n        bus.undoMove(e.data.box);\n      }\n      break;\n\n    case AppEventName.FeaturesUpdated:\n      // Handle turning activity feed sync on and off\n      if (e.data.features.activityFeed !== activityFeedSyncEnabled) {\n        if (e.data.features.activityFeed) {\n          overwatch.add(new ActivityFeedSync());\n          overwatch.add(new ActivityFeedIncrSync(realtime));\n          bus.triggerSync('ActivityFeedSync');\n          bus.triggerSync('ActivityFeedIncrSync');\n        } else {\n          overwatch.remove('ActivityFeedSync');\n          overwatch.remove('ActivityFeedIncrSync');\n        }\n\n        // update enabled state\n        activityFeedSyncEnabled = e.data.features.activityFeed;\n      }\n      break;\n\n    case AppEventName.ClearCache:\n      bus.cancelSync();\n\n      resetDbIfNeeded().subscribe({\n        next: () => {\n          // We only want to send worker ready for the default case,\n          // as when we are using electron based clear cache, we want\n          // to wait for the completion of IndexedDB folder deletion\n          if (getClearCacheMechanism() === ClearCacheMechanism.Default) {\n            sendWorkerReady();\n          }\n        },\n        error: (resetErr) => {\n          // tslint:disable-next-line: no-console\n          console.error(resetErr);\n          captureException(resetErr);\n        },\n      });\n      break;\n\n    case AppEventName.Logout:\n      setToken(AUTH_TOKEN_NONE);\n      realtime.setToken(AUTH_TOKEN_NONE);\n      currentTeam = undefined;\n      // Clear cache not needed here, as its handled on main thread\n      break;\n\n    case AppEventName.MailCountUpdated:\n      bus.updateMailCount(e.data.accountId);\n\n      // Handle notification of unread list change if unreadList was provided\n      if (e.data.unreadList) {\n        bus.updateListUnreadCount(e.data.accountId, e.data.unreadList);\n      }\n      break;\n\n    case AppEventName.MeUpdated:\n      setUser({\n        email: e.data.me.email,\n        id: e.data.me.id,\n      });\n\n      // Handle debug\n      if (e.data.me.debugUntil && moment(e.data.me.debugUntil).isAfter(moment())) {\n        enableUserDebug('WORKER', recordLogWorker);\n      } else {\n        disableUserDebug();\n      }\n\n      // Sync shared resources\n      const team = e.data.me.team;\n      if (currentTeam !== team) {\n        currentTeam = team;\n        bus.updateTeam(team);\n\n        overwatch.add(new TeamMemberSync(team));\n        overwatch.add(new ContactSync(team));\n        overwatch.add(new ContactGroupSync(team));\n        overwatch.add(new ContactNoteSync(team));\n        overwatch.add(new TemplateSync(team));\n        overwatch.add(new HistorySync(realtime, team));\n        overwatch.add(new TemplateIncrSync(realtime, team));\n\n        bus.triggerSync(undefined, true);\n      }\n      break;\n\n    case AppEventName.Online:\n      bus.clearErrors();\n      bus.triggerSync(undefined, true);\n      break;\n\n    case AppEventName.SaveMessageBodies:\n      const { bodies, threadId } = e.data;\n      if (!bodies && !threadId) {\n        break;\n      }\n\n      // Handle save of message bodies into separate database\n      saveBodies(bodies).subscribe({\n        error: (saveError) => {\n          captureException(saveError);\n          // tslint:disable-next-line:no-console\n          console.error(saveError);\n        },\n      });\n      break;\n\n    default:\n      const err = new Error(`unhandled event from Bridge ${e.name}`);\n      captureException(err);\n      // tslint:disable-next-line:no-console\n      console.error(err);\n  }\n};\n"]}]}