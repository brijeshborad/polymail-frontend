{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/css-loader/dist/cjs.js??ref--7-2!/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/sass-loader/dist/cjs.js??ref--7-3!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Settings/routes/Accounts/routes/AccountDetail/AccountDetail.scss","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Settings/routes/Accounts/routes/AccountDetail/AccountDetail.scss","mtime":1675280254094},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/styles/helpers.scss","mtime":1675280254121},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/styles/colors.scss","mtime":1675280254121},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/styles/typography.scss","mtime":1675280254121},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/styles/mixins.scss","mtime":1675280254121},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/css-loader/dist/cjs.js","mtime":1675365393897},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/sass-loader/dist/cjs.js","mtime":1675365391315}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}