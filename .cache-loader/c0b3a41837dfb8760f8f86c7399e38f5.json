{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/analytics.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/analytics.ts","mtime":1675280253979},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnOwppbXBvcnQgeyBibGFua1JlcXVlc3QsIGpzb25SZXF1ZXN0IH0gZnJvbSAnQHNyYy9hcGkvYmFzZSc7CmltcG9ydCB7IGNyZWF0ZVllYXJseVN1bW1hcnkgfSBmcm9tICdAc3JjL21vY2tzL2FuYWx5dGljcyc7CmV4cG9ydCB2YXIgUmVjb3JkVHJhY2tPczsKKGZ1bmN0aW9uIChSZWNvcmRUcmFja09zKSB7CiAgICBSZWNvcmRUcmFja09zWyJPU1giXSA9ICJvc3giOwogICAgUmVjb3JkVHJhY2tPc1siaU9TIl0gPSAiaW9zIjsKICAgIFJlY29yZFRyYWNrT3NbIldlYiJdID0gIndlYiI7CiAgICBSZWNvcmRUcmFja09zWyJNYWNPUyJdID0gIm1hY29zIjsKICAgIFJlY29yZFRyYWNrT3NbIldpbmRvd3MiXSA9ICJ3aW5kb3dzIjsKfSkoUmVjb3JkVHJhY2tPcyB8fCAoUmVjb3JkVHJhY2tPcyA9IHt9KSk7CmV4cG9ydCB2YXIgUmVjb3JkVHJhY2tEZXZpY2U7CihmdW5jdGlvbiAoUmVjb3JkVHJhY2tEZXZpY2UpIHsKICAgIFJlY29yZFRyYWNrRGV2aWNlWyJEZXNrdG9wIl0gPSAiZGVza3RvcCI7CiAgICBSZWNvcmRUcmFja0RldmljZVsiUGhvbmUiXSA9ICJwaG9uZSI7CiAgICBSZWNvcmRUcmFja0RldmljZVsiVGFibGV0Il0gPSAidGFibGV0IjsKfSkoUmVjb3JkVHJhY2tEZXZpY2UgfHwgKFJlY29yZFRyYWNrRGV2aWNlID0ge30pKTsKdmFyIEFuYWx5dGljc0NsaWVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHsKICAgIGZ1bmN0aW9uIEFuYWx5dGljc0NsaWVudCgpIHsKICAgIH0KICAgIEFuYWx5dGljc0NsaWVudC5wcm90b3R5cGUucmVjb3JkVHJhY2sgPSBmdW5jdGlvbiAodHJhY2spIHsKICAgICAgICByZXR1cm4gYmxhbmtSZXF1ZXN0KHsKICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsCiAgICAgICAgICAgIHJvdXRlOiAnL3YxL2FuYWx5dGljcy90cmFjaycsCiAgICAgICAgICAgIGJvZHk6IHRyYWNrLAogICAgICAgICAgICBkaXNhYmxlQ29yc09wdGltaXphdGlvbjogdHJ1ZSwKICAgICAgICB9KTsKICAgIH07CiAgICBBbmFseXRpY3NDbGllbnQucHJvdG90eXBlLmdldFllYXJseVN1bW1hcnkgPSBmdW5jdGlvbiAoeWVhcikgewogICAgICAgIHJldHVybiBqc29uUmVxdWVzdCh7CiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsCiAgICAgICAgICAgIHJvdXRlOiAiL3YxL2FuYWx5dGljcy95ZWFybHlTdW1tYXJ5LyIgKyB5ZWFyLAogICAgICAgICAgICBkaXNhYmxlQ29yc09wdGltaXphdGlvbjogdHJ1ZSwKICAgICAgICB9KTsKICAgIH07CiAgICBBbmFseXRpY3NDbGllbnQucHJvdG90eXBlLnJlYWRZZWFybHlTdW1tYXJ5ID0gZnVuY3Rpb24gKHllYXIpIHsKICAgICAgICByZXR1cm4ganNvblJlcXVlc3QoewogICAgICAgICAgICBtZXRob2Q6ICdQQVRDSCcsCiAgICAgICAgICAgIHJvdXRlOiAiL3YxL2FuYWx5dGljcy95ZWFybHlTdW1tYXJ5LyIgKyB5ZWFyLAogICAgICAgICAgICBib2R5OiB7CiAgICAgICAgICAgICAgICBzZWVuOiB0cnVlLAogICAgICAgICAgICB9LAogICAgICAgICAgICBkaXNhYmxlQ29yc09wdGltaXphdGlvbjogdHJ1ZSwKICAgICAgICB9KTsKICAgIH07CiAgICByZXR1cm4gQW5hbHl0aWNzQ2xpZW50Owp9KCkpOwpleHBvcnQgeyBBbmFseXRpY3NDbGllbnQgfTsKZXhwb3J0IGZ1bmN0aW9uIG1vY2tBbmFseXRpY3NDbGllbnQoKSB7CiAgICByZXR1cm4gewogICAgICAgIHJlY29yZFRyYWNrOiBmdW5jdGlvbiAodHJhY2spIHsgcmV0dXJuIE9ic2VydmFibGUub2YobnVsbCk7IH0sCiAgICAgICAgZ2V0WWVhcmx5U3VtbWFyeTogZnVuY3Rpb24gKCkgeyByZXR1cm4gT2JzZXJ2YWJsZS5vZihjcmVhdGVZZWFybHlTdW1tYXJ5KCkpOyB9LAogICAgICAgIHJlYWRZZWFybHlTdW1tYXJ5OiBmdW5jdGlvbiAoKSB7IHJldHVybiBPYnNlcnZhYmxlLm9mKGNyZWF0ZVllYXJseVN1bW1hcnkoeyBzZWVuOiB0cnVlIH0pKTsgfSwKICAgIH07Cn0K"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/analytics.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/analytics.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAClC,OAAO,EAAE,YAAY,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAC1D,OAAO,EAAE,mBAAmB,EAAE,MAAM,sBAAsB,CAAC;AAE3D,MAAM,CAAN,IAAkB,aAMjB;AAND,WAAkB,aAAa;IAC7B,4BAAW,CAAA;IACX,4BAAW,CAAA;IACX,4BAAW,CAAA;IACX,gCAAe,CAAA;IACf,oCAAmB,CAAA;AACrB,CAAC,EANiB,aAAa,KAAb,aAAa,QAM9B;AAED,MAAM,CAAN,IAAkB,iBAIjB;AAJD,WAAkB,iBAAiB;IACjC,wCAAmB,CAAA;IACnB,oCAAe,CAAA;IACf,sCAAiB,CAAA;AACnB,CAAC,EAJiB,iBAAiB,KAAjB,iBAAiB,QAIlC;AA0ED;IAAA;IA4BA,CAAC;IA3BC,qCAAW,GAAX,UAAY,KAAkB;QAC5B,OAAO,YAAY,CAAC;YAClB,MAAM,EAAE,MAAM;YACd,KAAK,EAAE,qBAAqB;YAC5B,IAAI,EAAE,KAAK;YACX,uBAAuB,EAAE,IAAI;SAC9B,CAAC,CAAC;IACL,CAAC;IAED,0CAAgB,GAAhB,UAAiB,IAAY;QAC3B,OAAO,WAAW,CAAC;YACjB,MAAM,EAAE,KAAK;YACb,KAAK,EAAE,iCAA+B,IAAM;YAC5C,uBAAuB,EAAE,IAAI;SAC9B,CAAC,CAAC;IACL,CAAC;IAED,2CAAiB,GAAjB,UAAkB,IAAY;QAC5B,OAAO,WAAW,CAAC;YACjB,MAAM,EAAE,OAAO;YACf,KAAK,EAAE,iCAA+B,IAAM;YAC5C,IAAI,EAAE;gBACJ,IAAI,EAAE,IAAI;aACX;YACD,uBAAuB,EAAE,IAAI;SAC9B,CAAC,CAAC;IACL,CAAC;IACH,sBAAC;AAAD,CAAC,AA5BD,IA4BC;;AAED,MAAM,UAAU,mBAAmB;IACjC,OAAO;QACL,WAAW,EAAE,UAAC,KAAkB,IAAK,OAAA,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,EAAnB,CAAmB;QACxD,gBAAgB,EAAE,cAAM,OAAA,UAAU,CAAC,EAAE,CAAC,mBAAmB,EAAE,CAAC,EAApC,CAAoC;QAC5D,iBAAiB,EAAE,cAAM,OAAA,UAAU,CAAC,EAAE,CAAC,mBAAmB,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,EAAlD,CAAkD;KAC5E,CAAC;AACJ,CAAC","sourcesContent":["import { Observable } from 'rxjs';\nimport { blankRequest, jsonRequest } from '@src/api/base';\nimport { createYearlySummary } from '@src/mocks/analytics';\n\nexport const enum RecordTrackOs {\n  OSX = 'osx', // use with OG Native Mac app only\n  iOS = 'ios',\n  Web = 'web',\n  MacOS = 'macos', // use with electron macos app\n  Windows = 'windows', // use with electron windows app\n}\n\nexport const enum RecordTrackDevice {\n  Desktop = 'desktop',\n  Phone = 'phone',\n  Tablet = 'tablet',\n}\n\nexport interface StatYearlySummary {\n  user: string;\n  year: number;\n  calendarInviteCreated: number;\n  commentPosted: number;\n  filterApplied: number;\n  filterCreated: number;\n  messageSent: number;\n  schedulingMeetingCreated: number;\n  sequenceMessageSent: number;\n  threadMuted: number;\n  threadRead: number;\n  threadShared: number;\n  undoSend: number;\n  unsubscribed: number;\n  archive: number;\n  later: number;\n  list: number;\n  readLater: number;\n  spam: number;\n  trash: number;\n  maxMonth: number;\n  maxMonthValue: number;\n  maxDow: number;\n  maxDowValue: number;\n  sentFollowUp: number;\n  sentTemplate: number;\n  sentLater: number;\n  laterFixed: number;\n  topExchanges: StatYearlySummaryTopExchange[];\n\n  seen: boolean;\n\n  // Percentiles\n  messageSentPercentile: number;\n  sendLaterCountPercentile: number;\n  sendFollowUpCountPercentile: number;\n  schedulingCountPercentile: number;\n  sendTemplateCountPercentile: number;\n  blockAppliedCountPercentile: number;\n  threadReadCountPercentile: number;\n  threadSharedCountPercentile: number;\n  readLaterCountPercentile: number;\n\n}\n\nexport interface StatYearlySummaryTopExchange {\n  email: string;\n  givenName: string;\n  familyName: string;\n  photoUrl: string;\n  sent: number;\n  received: number;\n  total: number;\n}\n\nexport interface RecordTrack {\n  name: string;\n  os: RecordTrackOs;\n  device: RecordTrackDevice;\n  properties?: {\n    [name: string]: any;\n  };\n  version: number;\n}\n\nexport interface AnalyticsAPI {\n  recordTrack(track: RecordTrack): Observable<null>;\n  getYearlySummary(year: number): Observable<StatYearlySummary>;\n  readYearlySummary(year: number): Observable<StatYearlySummary>;\n}\n\nexport class AnalyticsClient implements AnalyticsAPI {\n  recordTrack(track: RecordTrack) {\n    return blankRequest({\n      method: 'POST',\n      route: '/v1/analytics/track',\n      body: track,\n      disableCorsOptimization: true,\n    });\n  }\n\n  getYearlySummary(year: number): Observable<StatYearlySummary> {\n    return jsonRequest({\n      method: 'GET',\n      route: `/v1/analytics/yearlySummary/${year}`,\n      disableCorsOptimization: true,\n    });\n  }\n\n  readYearlySummary(year: number): Observable<StatYearlySummary> {\n    return jsonRequest({\n      method: 'PATCH',\n      route: `/v1/analytics/yearlySummary/${year}`,\n      body: {\n        seen: true,\n      },\n      disableCorsOptimization: true,\n    });\n  }\n}\n\nexport function mockAnalyticsClient(): AnalyticsAPI {\n  return {\n    recordTrack: (track: RecordTrack) => Observable.of(null),\n    getYearlySummary: () => Observable.of(createYearlySummary()),\n    readYearlySummary: () => Observable.of(createYearlySummary({ seen: true })),\n  };\n}\n"]}]}