{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/lists.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/lists.ts","mtime":1675280253980},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnOwppbXBvcnQgeyBMaXN0U3RhdHVzIH0gZnJvbSAnQHNyYy90eXBlcyc7CmltcG9ydCB7IGpzb25SZXF1ZXN0IH0gZnJvbSAnLi9iYXNlJzsKdmFyIExpc3RDbGllbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7CiAgICBmdW5jdGlvbiBMaXN0Q2xpZW50KCkgewogICAgfQogICAgTGlzdENsaWVudC5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24gKG5hbWUpIHsKICAgICAgICByZXR1cm4ganNvblJlcXVlc3QoewogICAgICAgICAgICBtZXRob2Q6ICdQT1NUJywKICAgICAgICAgICAgcm91dGU6ICIvdjEvbWUvbGlzdHMiLAogICAgICAgICAgICBib2R5OiB7CiAgICAgICAgICAgICAgICBpZDogJycsCiAgICAgICAgICAgICAgICBzdGF0dXM6IExpc3RTdGF0dXMuT2ssCiAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLAogICAgICAgICAgICB9LAogICAgICAgIH0pOwogICAgfTsKICAgIExpc3RDbGllbnQucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChsaXN0KSB7CiAgICAgICAgcmV0dXJuIGpzb25SZXF1ZXN0KHsKICAgICAgICAgICAgbWV0aG9kOiAnUEFUQ0gnLAogICAgICAgICAgICByb3V0ZTogIi92MS9tZS9saXN0cy8iICsgbGlzdC5pZCwKICAgICAgICAgICAgYm9keTogbGlzdCwKICAgICAgICB9KTsKICAgIH07CiAgICBMaXN0Q2xpZW50LnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAobGlzdCkgewogICAgICAgIHJldHVybiBqc29uUmVxdWVzdCh7CiAgICAgICAgICAgIG1ldGhvZDogJ0RFTEVURScsCiAgICAgICAgICAgIHJvdXRlOiAiL3YxL21lL2xpc3RzLyIgKyBsaXN0LAogICAgICAgIH0pOwogICAgfTsKICAgIHJldHVybiBMaXN0Q2xpZW50Owp9KCkpOwpleHBvcnQgeyBMaXN0Q2xpZW50IH07CmV4cG9ydCBmdW5jdGlvbiBtb2NrTGlzdENsaWVudCgpIHsKICAgIHJldHVybiB7CiAgICAgICAgY3JlYXRlOiBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gT2JzZXJ2YWJsZS5vZih7CiAgICAgICAgICAgIG5hbWU6IG5hbWUsCiAgICAgICAgICAgIGlkOiAnbW9jay1saXN0JywKICAgICAgICAgICAgc3RhdHVzOiBMaXN0U3RhdHVzLk9rLAogICAgICAgIH0pOyB9LAogICAgICAgIHVwZGF0ZTogZnVuY3Rpb24gKGxpc3QpIHsgcmV0dXJuIE9ic2VydmFibGUub2YobGlzdCk7IH0sCiAgICAgICAgZGVsZXRlOiBmdW5jdGlvbiAobGlzdCkgeyByZXR1cm4gT2JzZXJ2YWJsZS5vZihudWxsKTsgfSwKICAgIH07Cn0K"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/lists.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/lists.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAElC,OAAO,EAAQ,UAAU,EAAE,MAAM,YAAY,CAAC;AAC9C,OAAO,EAAE,WAAW,EAAE,MAAM,QAAQ,CAAC;AAYrC;IAAA;IA2BA,CAAC;IA1BC,2BAAM,GAAN,UAAO,IAAY;QACjB,OAAO,WAAW,CAAC;YACjB,MAAM,EAAE,MAAM;YACd,KAAK,EAAE,cAAc;YACrB,IAAI,EAAE;gBACJ,EAAE,EAAE,EAAE;gBACN,MAAM,EAAE,UAAU,CAAC,EAAE;gBACrB,IAAI,MAAA;aACL;SACF,CAAC,CAAC;IACL,CAAC;IAED,2BAAM,GAAN,UAAO,IAAU;QACf,OAAO,WAAW,CAAC;YACjB,MAAM,EAAE,OAAO;YACf,KAAK,EAAE,kBAAgB,IAAI,CAAC,EAAI;YAChC,IAAI,EAAE,IAAI;SACX,CAAC,CAAC;IACL,CAAC;IAED,2BAAM,GAAN,UAAO,IAAY;QACjB,OAAO,WAAW,CAAC;YACjB,MAAM,EAAE,QAAQ;YAChB,KAAK,EAAE,kBAAgB,IAAM;SAC9B,CAAC,CAAC;IACL,CAAC;IACH,iBAAC;AAAD,CAAC,AA3BD,IA2BC;;AAED,MAAM,UAAU,cAAc;IAC5B,OAAO;QACL,MAAM,EAAE,UAAC,IAAY,IAAK,OAAA,UAAU,CAAC,EAAE,CAAC;YACtC,IAAI,MAAA;YACJ,EAAE,EAAE,WAAW;YACf,MAAM,EAAE,UAAU,CAAC,EAAE;SACtB,CAAC,EAJwB,CAIxB;QACF,MAAM,EAAE,UAAC,IAAU,IAAK,OAAA,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,EAAnB,CAAmB;QAC3C,MAAM,EAAE,UAAC,IAAY,IAAK,OAAA,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,EAAnB,CAAmB;KAC9C,CAAC;AACJ,CAAC","sourcesContent":["import { Observable } from 'rxjs';\n\nimport { List, ListStatus } from '@src/types';\nimport { jsonRequest } from './base';\n\nexport interface ListAPI {\n  create(name: string): Observable<List>;\n  update(list: List): Observable<List>;\n  delete(list: string): Observable<null>;\n}\n\nexport interface ListBody {\n  lists: List;\n}\n\nexport class ListClient implements ListAPI {\n  create(name: string): Observable<List> {\n    return jsonRequest({\n      method: 'POST',\n      route: `/v1/me/lists`,\n      body: {\n        id: '',\n        status: ListStatus.Ok,\n        name,\n      },\n    });\n  }\n\n  update(list: List): Observable<List> {\n    return jsonRequest({\n      method: 'PATCH',\n      route: `/v1/me/lists/${list.id}`,\n      body: list,\n    });\n  }\n\n  delete(list: string): Observable<null> {\n    return jsonRequest({\n      method: 'DELETE',\n      route: `/v1/me/lists/${list}`,\n    });\n  }\n}\n\nexport function mockListClient(): ListAPI {\n  return {\n    create: (name: string) => Observable.of({\n      name,\n      id: 'mock-list',\n      status: ListStatus.Ok,\n    }),\n    update: (list: List) => Observable.of(list),\n    delete: (list: string) => Observable.of(null),\n  };\n}\n"]}]}