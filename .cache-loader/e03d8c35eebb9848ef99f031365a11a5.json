{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/types/scheduling.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/types/scheduling.ts","mtime":1675280254122},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZXhwb3J0IHZhciBDb25mZXJlbmNlVHlwZTsKKGZ1bmN0aW9uIChDb25mZXJlbmNlVHlwZSkgewogICAgQ29uZmVyZW5jZVR5cGVbIk5vbmUiXSA9ICJub25lIjsKICAgIENvbmZlcmVuY2VUeXBlWyJHb29nbGUiXSA9ICJnb29nbGUiOwogICAgQ29uZmVyZW5jZVR5cGVbIlpvb20iXSA9ICJ6b29tIjsKfSkoQ29uZmVyZW5jZVR5cGUgfHwgKENvbmZlcmVuY2VUeXBlID0ge30pKTsK"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/types/scheduling.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/types/scheduling.ts"],"names":[],"mappings":"AAgDA,MAAM,CAAN,IAAY,cAIX;AAJD,WAAY,cAAc;IACxB,+BAAa,CAAA;IACb,mCAAiB,CAAA;IACjB,+BAAa,CAAA;AACf,CAAC,EAJW,cAAc,KAAd,cAAc,QAIzB","sourcesContent":["import { CalendarEvent, Resource } from '@src/types';\n\nexport interface SchedulingState {\n  schedulings: {\n    [scheduling: string]: Scheduling,\n  };\n\n  // User Slug + Slug\n  schedulingPublics: {\n    [slugs: string]: Resource<SchedulingPublic>,\n  };\n\n  timeSlots: {\n    [date: string]: TimeSlot[],\n  };\n\n  timeSlotsLoading: boolean;\n  timeSlotsError?: Error;\n  createdEvent?: Resource<CalendarEvent>;\n}\n\nexport interface Scheduling extends SchedulingPublic {\n  id: string;\n  user: string;\n  rollingDays: number;\n  disabled: boolean;\n  calendar: string;\n  blockingCalendars: string[];\n  skipBlockingCalendars: boolean;\n  slug: string;\n  conferenceType: ConferenceType;\n}\n\nexport interface SchedulingPublic {\n  name: string;\n  durationMinutes: number;\n  paddingMinutes: number;\n  minimumNotice: number;\n  rollingDays: number;\n  eventName: string;\n  location: string;\n  notes: string;\n  timeWindows: TimeWindow[];\n  timeZone: string;\n  organizerName: string;\n  hideBranding: boolean;\n}\n\nexport enum ConferenceType {\n  None = 'none',\n  Google = 'google',\n  Zoom = 'zoom',\n}\n\nexport interface TimeSlot {\n  startTime: Date;\n  endTime: Date;\n  blocking: boolean;\n}\n\nexport interface TimeWindow {\n  dayOfWeek: number;\n  afterSecondsSinceMidnight: number;\n  beforeSecondsSinceMidnight: number;\n}\n"]}]}