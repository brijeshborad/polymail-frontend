{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/team.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/team.ts","mtime":1675280253981},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnOwppbXBvcnQgeyBUZWFtSW52aXRlU3RhdHVzIH0gZnJvbSAnQHNyYy90eXBlcyc7CmltcG9ydCB7IGpzb25SZXF1ZXN0IH0gZnJvbSAnLi9iYXNlJzsKaW1wb3J0IHsgY3JlYXRlVGVhbSwgY3JlYXRlVGVhbU1lbWJlciB9IGZyb20gJ0BzcmMvbW9ja3MvdGVhbXMnOwppbXBvcnQgeyBjcmVhdGVGZWF0dXJlcyB9IGZyb20gJ0BzcmMvbW9ja3MvZmVhdHVyZXMnOwppbXBvcnQgeyBjcmVhdGVNZSB9IGZyb20gJ0BzcmMvbW9ja3MvbWUnOwp2YXIgVGVhbUNsaWVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHsKICAgIGZ1bmN0aW9uIFRlYW1DbGllbnQoKSB7CiAgICB9CiAgICBUZWFtQ2xpZW50LnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIGpzb25SZXF1ZXN0KHsKICAgICAgICAgICAgbWV0aG9kOiAnR0VUJywKICAgICAgICAgICAgcm91dGU6ICIvdjEvdGVhbXMiLAogICAgICAgIH0pCiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGpzb24pIHsKICAgICAgICAgICAgaWYgKGpzb24ubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICB0ZWFtOiBqc29uWzBdLAogICAgICAgICAgICAgICAgICAgIGZlYXR1cmVzOiBqc29uWzBdLmZlYXR1cmVzLAogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RlYW0gbm90IGZvdW5kLicpOwogICAgICAgIH0pOwogICAgfTsKICAgIFRlYW1DbGllbnQucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChtZXRhKSB7CiAgICAgICAgcmV0dXJuIGpzb25SZXF1ZXN0KHsKICAgICAgICAgICAgbWV0aG9kOiAnUEFUQ0gnLAogICAgICAgICAgICByb3V0ZTogIi92MS90ZWFtcy8iICsgbWV0YS50ZWFtLAogICAgICAgICAgICBib2R5OiB7IG5hbWU6IG1ldGEubmFtZSB9LAogICAgICAgIH0pOwogICAgfTsKICAgIFRlYW1DbGllbnQucHJvdG90eXBlLnZhbGlkYXRlSW52aXRlID0gZnVuY3Rpb24gKG1ldGEpIHsKICAgICAgICByZXR1cm4ganNvblJlcXVlc3QoewogICAgICAgICAgICBtZXRob2Q6ICdQT1NUJywKICAgICAgICAgICAgcm91dGU6ICcvdjMvdGVhbXMvdmFsaWRhdGVJbnZpdGUnLAogICAgICAgICAgICBib2R5OiBtZXRhLAogICAgICAgICAgICBkaXNhYmxlQ29yc09wdGltaXphdGlvbjogdHJ1ZSwKICAgICAgICB9KTsKICAgIH07CiAgICBUZWFtQ2xpZW50LnByb3RvdHlwZS5hY2NlcHRJbnZpdGUgPSBmdW5jdGlvbiAobWV0YSkgewogICAgICAgIHJldHVybiBqc29uUmVxdWVzdCh7CiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLAogICAgICAgICAgICByb3V0ZTogJy92MS9tZS9hY2NlcHRUZWFtSW52aXRlJywKICAgICAgICAgICAgYm9keTogbWV0YSwKICAgICAgICB9KTsKICAgIH07CiAgICByZXR1cm4gVGVhbUNsaWVudDsKfSgpKTsKZXhwb3J0IHsgVGVhbUNsaWVudCB9OwpleHBvcnQgZnVuY3Rpb24gbW9ja1RlYW1DbGllbnQoKSB7CiAgICByZXR1cm4gewogICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gT2JzZXJ2YWJsZS5vZih7CiAgICAgICAgICAgIHRlYW06IGNyZWF0ZVRlYW0oKSwKICAgICAgICAgICAgZmVhdHVyZXM6IGNyZWF0ZUZlYXR1cmVzKCksCiAgICAgICAgfSk7IH0sCiAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiAoKSB7IHJldHVybiBPYnNlcnZhYmxlLm9mKGNyZWF0ZVRlYW0oKSk7IH0sCiAgICAgICAgdmFsaWRhdGVJbnZpdGU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE9ic2VydmFibGUub2YoewogICAgICAgICAgICB0ZWFtTmFtZTogY3JlYXRlVGVhbSgpLm5hbWUsCiAgICAgICAgICAgIHN0YXR1czogVGVhbUludml0ZVN0YXR1cy5QZW5kaW5nLAogICAgICAgICAgICBpbnZpdGVyOiBjcmVhdGVUZWFtTWVtYmVyKHt9KSwKICAgICAgICB9KTsgfSwKICAgICAgICBhY2NlcHRJbnZpdGU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE9ic2VydmFibGUub2YoewogICAgICAgICAgICBtZTogY3JlYXRlTWUoKSwKICAgICAgICAgICAgdGVhbTogY3JlYXRlVGVhbSgpLAogICAgICAgIH0pOyB9LAogICAgfTsKfQo="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/team.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/team.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAElC,OAAO,EAAkC,gBAAgB,EAAE,MAAM,YAAY,CAAC;AAE9E,OAAO,EAAE,WAAW,EAAE,MAAM,QAAQ,CAAC;AAErC,OAAO,EAAE,UAAU,EAAE,gBAAgB,EAAE,MAAM,kBAAkB,CAAC;AAChE,OAAO,EAAE,cAAc,EAAE,MAAM,qBAAqB,CAAC;AAErD,OAAO,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AAyBzC;IAAA;IAyCA,CAAC;IAxCC,wBAAG,GAAH;QACE,OAAO,WAAW,CAAC;YACjB,MAAM,EAAE,KAAK;YACb,KAAK,EAAE,WAAW;SACnB,CAAC;aACD,GAAG,CAAC,UAAC,IAAI;YACR,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;gBACnB,OAAO;oBACL,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;oBACb,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ;iBAC3B,CAAC;aACH;YAED,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC;IACD,2BAAM,GAAN,UAAO,IAAoB;QACzB,OAAO,WAAW,CAAC;YACjB,MAAM,EAAE,OAAO;YACf,KAAK,EAAE,eAAa,IAAI,CAAC,IAAM;YAC/B,IAAI,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE;SAC1B,CAAC,CAAC;IACL,CAAC;IAED,mCAAc,GAAd,UAAe,IAA4B;QACzC,OAAO,WAAW,CAAC;YACjB,MAAM,EAAE,MAAM;YACd,KAAK,EAAE,0BAA0B;YACjC,IAAI,EAAE,IAAI;YACV,uBAAuB,EAAE,IAAI;SAC9B,CAAC,CAAC;IACL,CAAC;IAED,iCAAY,GAAZ,UAAa,IAA4B;QACvC,OAAO,WAAW,CAAC;YACjB,MAAM,EAAE,MAAM;YACd,KAAK,EAAE,yBAAyB;YAChC,IAAI,EAAE,IAAI;SACX,CAAC,CAAC;IACL,CAAC;IACH,iBAAC;AAAD,CAAC,AAzCD,IAyCC;;AAED,MAAM,UAAU,cAAc;IAC5B,OAAO;QACL,GAAG,EAAE,cAAM,OAAA,UAAU,CAAC,EAAE,CAAC;YACvB,IAAI,EAAE,UAAU,EAAE;YAClB,QAAQ,EAAE,cAAc,EAAE;SAC3B,CAAC,EAHS,CAGT;QACF,MAAM,EAAE,cAAM,OAAA,UAAU,CAAC,EAAE,CAAC,UAAU,EAAE,CAAC,EAA3B,CAA2B;QACzC,cAAc,EAAE,cAAM,OAAA,UAAU,CAAC,EAAE,CAAC;YAClC,QAAQ,EAAE,UAAU,EAAE,CAAC,IAAI;YAC3B,MAAM,EAAE,gBAAgB,CAAC,OAAO;YAChC,OAAO,EAAE,gBAAgB,CAAC,EAAE,CAAC;SAC9B,CAAC,EAJoB,CAIpB;QACF,YAAY,EAAE,cAAM,OAAA,UAAU,CAAC,EAAE,CAAC;YAChC,EAAE,EAAE,QAAQ,EAAE;YACd,IAAI,EAAE,UAAU,EAAE;SACnB,CAAC,EAHkB,CAGlB;KACH,CAAC;AACJ,CAAC","sourcesContent":["import { Observable } from 'rxjs';\n\nimport { Team, Features, TeamMember, Me, TeamInviteStatus } from '@src/types';\n\nimport { jsonRequest } from './base';\nimport { TeamUpdateMeta } from '@src/ducks/team';\nimport { createTeam, createTeamMember } from '@src/mocks/teams';\nimport { createFeatures } from '@src/mocks/features';\nimport { TeamInviteValidateMeta } from '@src/ducks/teamMembers';\nimport { createMe } from '@src/mocks/me';\n\nexport interface TeamBody {\n  team: Team;\n  features: Features;\n}\n\nexport interface TeamInviteValidateResponse {\n  status: TeamInviteStatus;\n  teamName: string;\n  inviter?: TeamMember;\n}\n\nexport interface TeamInviteSuccessResponse {\n  me: Me;\n  team: Team;\n}\n\nexport interface TeamAPI {\n  get(): Observable<TeamBody>;\n  update(meta: TeamUpdateMeta): Observable<Team>;\n  validateInvite(meta: TeamInviteValidateMeta): Observable<TeamInviteValidateResponse>;\n  acceptInvite(meta: TeamInviteValidateMeta): Observable<TeamInviteSuccessResponse>;\n}\n\nexport class TeamClient implements TeamAPI {\n  get(): Observable<TeamBody> {\n    return jsonRequest({\n      method: 'GET',\n      route: `/v1/teams`,\n    })\n    .map((json) => {\n      if (json.length > 0) {\n        return {\n          team: json[0],\n          features: json[0].features,\n        };\n      }\n\n      throw new Error('Team not found.');\n    });\n  }\n  update(meta: TeamUpdateMeta): Observable<Team> {\n    return jsonRequest({\n      method: 'PATCH',\n      route: `/v1/teams/${meta.team}`,\n      body: { name: meta.name },\n    });\n  }\n\n  validateInvite(meta: TeamInviteValidateMeta): Observable<TeamInviteValidateResponse> {\n    return jsonRequest({\n      method: 'POST',\n      route: '/v3/teams/validateInvite',\n      body: meta,\n      disableCorsOptimization: true,\n    });\n  }\n\n  acceptInvite(meta: TeamInviteValidateMeta): Observable<TeamInviteSuccessResponse> {\n    return jsonRequest({\n      method: 'POST',\n      route: '/v1/me/acceptTeamInvite',\n      body: meta,\n    });\n  }\n}\n\nexport function mockTeamClient(): TeamAPI {\n  return {\n    get: () => Observable.of({\n      team: createTeam(),\n      features: createFeatures(),\n    }),\n    update: () => Observable.of(createTeam()),\n    validateInvite: () => Observable.of({\n      teamName: createTeam().name,\n      status: TeamInviteStatus.Pending,\n      inviter: createTeamMember({}),\n    }),\n    acceptInvite: () => Observable.of({\n      me: createMe(),\n      team: createTeam(),\n    }),\n  };\n}\n"]}]}