{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/lists.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/lists.ts","mtime":1675280254056},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnOwppbXBvcnQgeyBBY3Rpb25TdGF0dXMsIFRocmVhZEJveCwgfSBmcm9tICdAc3JjL3R5cGVzJzsKaW1wb3J0IHsgTElTVF9VUERBVEUsIGxpc3RVcGRhdGUsIExJU1RfQ1JFQVRFLCBsaXN0Q3JlYXRlLCBMSVNUX0RFTEVURSwgbGlzdERlbGV0ZSwgTElTVF9DUkVBVEVfTU9WRSwgfSBmcm9tICdAc3JjL2R1Y2tzL2xpc3RzJzsKaW1wb3J0IHsgdGhyZWFkQ29tbWl0c1N1Ym1pdCB9IGZyb20gJ0BzcmMvZHVja3MvdGhyZWFkcyc7CmltcG9ydCB7IHRvYXN0U2V0LCBDb25maXJtYXRpb25FcnJvciB9IGZyb20gJ0BzcmMvZHVja3MvdG9hc3RzJzsKdmFyIGxpc3RVcGRhdGVFcGljID0gZnVuY3Rpb24gKGFjdGlvbiQsIHN0b3JlLCBkZXBzKSB7CiAgICByZXR1cm4gYWN0aW9uJC5vZlR5cGUoTElTVF9VUERBVEUpCiAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoYWN0aW9uKSB7IHJldHVybiBhY3Rpb24uc3RhdHVzID09PSBBY3Rpb25TdGF0dXMuU3RhcnQ7IH0pCiAgICAgICAgLmZsYXRNYXAoZnVuY3Rpb24gKGFjdGlvbikgewogICAgICAgIHJldHVybiBkZXBzLmxpc3RzLnVwZGF0ZShhY3Rpb24ubWV0YSkKICAgICAgICAgICAgLmZsYXRNYXAoZnVuY3Rpb24gKGxpc3QpIHsKICAgICAgICAgICAgcmV0dXJuIE9ic2VydmFibGUubWVyZ2UoT2JzZXJ2YWJsZS5vZihsaXN0VXBkYXRlKGFjdGlvbi5tZXRhLCBsaXN0KSksIE9ic2VydmFibGUub2YodG9hc3RTZXQobmV3IENvbmZpcm1hdGlvbkVycm9yKGFjdGlvbi5tZXRhLm5hbWUgKyAiIGhhcyBiZWVuIHVwZGF0ZWQiLCB0cnVlKSkpKTsKICAgICAgICB9KQogICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgcmV0dXJuIE9ic2VydmFibGUubWVyZ2UoT2JzZXJ2YWJsZS5vZihsaXN0VXBkYXRlKGFjdGlvbi5tZXRhLCBlKSksIE9ic2VydmFibGUub2YodG9hc3RTZXQoZSkpKTsKICAgICAgICB9KTsKICAgIH0pOwp9OwovLyBUT0RPKFNISU4pOiBXaWxsIG5lZWQgdGVzdCBmb3IgY3JlYXRlIGFuZCBzZWxlY3Qgc2luY2Ugd2UgbG9zZSB0eXBlIHNhZmV0eQpleHBvcnQgdmFyIGxpc3RDcmVhdGVFcGljID0gZnVuY3Rpb24gKGFjdGlvbiQsIHN0b3JlLCBkZXBzKSB7CiAgICByZXR1cm4gYWN0aW9uJC5vZlR5cGUoTElTVF9DUkVBVEUpCiAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoYWN0aW9uKSB7IHJldHVybiBhY3Rpb24uc3RhdHVzID09PSBBY3Rpb25TdGF0dXMuU3RhcnQ7IH0pCiAgICAgICAgLmZsYXRNYXAoZnVuY3Rpb24gKGFjdGlvbikgewogICAgICAgIHJldHVybiBkZXBzLmxpc3RzLmNyZWF0ZShhY3Rpb24ubWV0YSkKICAgICAgICAgICAgLmZsYXRNYXAoZnVuY3Rpb24gKGxpc3QpIHsKICAgICAgICAgICAgcmV0dXJuIE9ic2VydmFibGUubWVyZ2UoT2JzZXJ2YWJsZS5vZihsaXN0Q3JlYXRlKGFjdGlvbi5tZXRhLCBsaXN0KSksIE9ic2VydmFibGUub2YodG9hc3RTZXQobmV3IENvbmZpcm1hdGlvbkVycm9yKGFjdGlvbi5tZXRhICsgIiBoYXMgYmVlbiBjcmVhdGVkIiwgdHJ1ZSkpKSk7CiAgICAgICAgfSkKICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIHJldHVybiBPYnNlcnZhYmxlLm1lcmdlKE9ic2VydmFibGUub2YobGlzdENyZWF0ZShhY3Rpb24ubWV0YSwgZSkpLCBPYnNlcnZhYmxlLm9mKHRvYXN0U2V0KGUpKSk7CiAgICAgICAgfSk7CiAgICB9KTsKfTsKLy8gVE9ETyhTSElOKTogV2lsbCBuZWVkIHRlc3QgZm9yIGNyZWF0ZSBhbmQgc2VsZWN0IHNpbmNlIHdlIGxvc2UgdHlwZSBzYWZldHkKZXhwb3J0IHZhciBsaXN0Q3JlYXRlTW92ZUVwaWMgPSBmdW5jdGlvbiAoYWN0aW9uJCwgc3RvcmUsIGRlcHMpIHsKICAgIHJldHVybiBhY3Rpb24kLm9mVHlwZShMSVNUX0NSRUFURV9NT1ZFKQogICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGFjdGlvbikgeyByZXR1cm4gYWN0aW9uLnN0YXR1cyA9PT0gQWN0aW9uU3RhdHVzLlN0YXJ0OyB9KQogICAgICAgIC5mbGF0TWFwKGZ1bmN0aW9uIChhY3Rpb24pIHsKICAgICAgICByZXR1cm4gZGVwcy5saXN0cy5jcmVhdGUoYWN0aW9uLm1ldGEpCiAgICAgICAgICAgIC5mbGF0TWFwKGZ1bmN0aW9uIChsaXN0KSB7CiAgICAgICAgICAgIC8vIFRPRE8oU0hJTik6IE9ic2VydmFibGUubWVyZ2UgZG9lcyBub3Qgd29yayBmb3IgYWN0aW9ucyBvZiBkaWZmZXJlbnQgdHlwZXMKICAgICAgICAgICAgdmFyIGFjdGlvbnMgPSBbCiAgICAgICAgICAgICAgICBsaXN0Q3JlYXRlKGFjdGlvbi5tZXRhLCBsaXN0KSwKICAgICAgICAgICAgXTsKICAgICAgICAgICAgLy8gQWRkIFRocmVhZENvbW1pdCB0byBhY3Rpb25zCiAgICAgICAgICAgIHZhciBjb21taXQgPSB7CiAgICAgICAgICAgICAgICBib3g6IFRocmVhZEJveC5MaXN0LAogICAgICAgICAgICAgICAgbGFiZWw6IGxpc3QuaWQsCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGFjdGlvbnMucHVzaCh0aHJlYWRDb21taXRzU3VibWl0KGNvbW1pdCkpOwogICAgICAgICAgICAvLyBNZXJnZSBhY3Rpb25zCiAgICAgICAgICAgIHJldHVybiBPYnNlcnZhYmxlLm1lcmdlLmFwcGx5KE9ic2VydmFibGUsIGFjdGlvbnMubWFwKGZ1bmN0aW9uIChlYWNoKSB7IHJldHVybiBPYnNlcnZhYmxlLm9mKGVhY2gpOyB9KSk7CiAgICAgICAgfSkKICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlKSB7IHJldHVybiBPYnNlcnZhYmxlLm9mKGxpc3RDcmVhdGUoYWN0aW9uLm1ldGEsIGUpKTsgfSk7CiAgICB9KTsKfTsKdmFyIGxpc3REZWxldGVFcGljID0gZnVuY3Rpb24gKGFjdGlvbiQsIHN0b3JlLCBkZXBzKSB7CiAgICByZXR1cm4gYWN0aW9uJC5vZlR5cGUoTElTVF9ERUxFVEUpCiAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoYWN0aW9uKSB7IHJldHVybiBhY3Rpb24uc3RhdHVzID09PSBBY3Rpb25TdGF0dXMuU3RhcnQ7IH0pCiAgICAgICAgLmZsYXRNYXAoZnVuY3Rpb24gKGFjdGlvbikgewogICAgICAgIHJldHVybiBkZXBzLmxpc3RzLmRlbGV0ZShhY3Rpb24ubWV0YS5pZCkKICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoKSB7IHJldHVybiBsaXN0RGVsZXRlKGFjdGlvbi5tZXRhLCBhY3Rpb24ubWV0YS5pZCk7IH0pCiAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgICAgICBpZiAoZS5jb2RlID09PSA0MDQpIHsKICAgICAgICAgICAgICAgIHJldHVybiBPYnNlcnZhYmxlLm9mKGxpc3REZWxldGUoYWN0aW9uLm1ldGEsIGFjdGlvbi5tZXRhLmlkKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIE9ic2VydmFibGUubWVyZ2UoT2JzZXJ2YWJsZS5vZihsaXN0RGVsZXRlKGFjdGlvbi5tZXRhLCBlKSksIE9ic2VydmFibGUub2YodG9hc3RTZXQoZSkpKTsKICAgICAgICB9KTsKICAgIH0pOwp9OwpleHBvcnQgZGVmYXVsdCBbCiAgICBsaXN0VXBkYXRlRXBpYywKICAgIGxpc3RDcmVhdGVFcGljLAogICAgbGlzdERlbGV0ZUVwaWMsCiAgICBsaXN0Q3JlYXRlTW92ZUVwaWMsCl07Cg=="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/lists.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/lists.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs';\nimport { Epic } from 'redux-observable';\nimport { Deps } from '@src/lib/epic';\n\nimport {\n  StoreState,\n  Action,\n  ActionStatus,\n  List,\n  ThreadCommitMeta,\n  ThreadBox,\n} from '@src/types';\n\nimport {\n  LIST_UPDATE, listUpdate,\n  LIST_CREATE, listCreate,\n  LIST_DELETE, listDelete,\n  LIST_CREATE_MOVE,\n} from '@src/ducks/lists';\n\nimport { threadCommitsSubmit } from '@src/ducks/threads';\nimport { toastSet, ConfirmationError } from '@src/ducks/toasts';\nimport { ApiError } from '@src/api/base';\n\nconst listUpdateEpic: Epic<Action<List|Error|undefined|null, List|null>, StoreState, Deps>\n= (action$, store, deps) =>\n action$.ofType(LIST_UPDATE)\n  .filter(action => action.status === ActionStatus.Start)\n  .flatMap((action: Action<List, List>) =>\n    deps.lists.update(action.meta)\n      .flatMap((list: List) =>\n        Observable.merge(\n          Observable.of(listUpdate(action.meta, list)),\n          Observable.of(\n            toastSet(new ConfirmationError(`${action.meta.name} has been updated`, true)),\n          ),\n        ),\n      )\n      .catch((e: Error) =>\n        Observable.merge(\n            Observable.of(listUpdate(action.meta, e)),\n            Observable.of(toastSet(e)),\n        )),\n  );\n\n// TODO(SHIN): Will need test for create and select since we lose type safety\nexport const listCreateEpic: Epic<Action<string|Error|null, List|null>, StoreState, Deps>\n= (action$, store, deps) =>\n action$.ofType(LIST_CREATE)\n  .filter(action => action.status === ActionStatus.Start)\n  .flatMap((action: Action<string, List>) =>\n    deps.lists.create(action.meta)\n      .flatMap(list =>\n        Observable.merge(\n          Observable.of(listCreate(action.meta, list)),\n          Observable.of(toastSet(new ConfirmationError(`${action.meta} has been created`, true))),\n        ),\n      )\n      .catch((e: Error) =>\n        Observable.merge(\n          Observable.of(listCreate(action.meta, e)),\n          Observable.of(toastSet(e)),\n        )),\n  );\n\n// TODO(SHIN): Will need test for create and select since we lose type safety\nexport const listCreateMoveEpic: Epic<Action<any, any>, StoreState, Deps>\n= (action$, store, deps) =>\n action$.ofType(LIST_CREATE_MOVE)\n  .filter(action => action.status === ActionStatus.Start)\n  .flatMap(action =>\n    deps.lists.create(action.meta)\n      .flatMap((list) => {\n\n        // TODO(SHIN): Observable.merge does not work for actions of different types\n        const actions: Array<Action<any, any>> = [\n          listCreate(action.meta, list),\n        ];\n\n        // Add ThreadCommit to actions\n        const commit: ThreadCommitMeta = {\n          box: ThreadBox.List,\n          label: list.id,\n        };\n        actions.push(threadCommitsSubmit(commit));\n\n        // Merge actions\n        return Observable.merge(...actions.map(each => Observable.of(each)));\n      })\n      .catch(e => Observable.of(listCreate(action.meta, e))),\n  );\n\nconst listDeleteEpic: Epic<Action<List|Error|null, string|null>, StoreState, Deps>\n= (action$, store, deps) =>\n action$.ofType(LIST_DELETE)\n  .filter(action => action.status === ActionStatus.Start)\n  .flatMap((action: Action<List, null>) =>\n    deps.lists.delete(action.meta.id)\n      .map(() => listDelete(action.meta, action.meta.id))\n      .catch((e: Error) => {\n        if ((e as ApiError).code === 404) {\n          return Observable.of(listDelete(action.meta, action.meta.id));\n        }\n\n        return Observable.merge(\n          Observable.of(listDelete(action.meta, e)),\n          Observable.of(toastSet(e)),\n        );\n      }),\n    );\n\nexport default [\n  listUpdateEpic,\n  listCreateEpic,\n  listDeleteEpic,\n  listCreateMoveEpic,\n];\n"]}]}