{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Mentions/components/SharedThreadList/index.tsx","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Mentions/components/SharedThreadList/index.tsx","mtime":1675280254082},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JzsKaW1wb3J0IHsgUmVzb3VyY2VTdGF0dXMsIH0gZnJvbSAnQHNyYy90eXBlcyc7CmltcG9ydCBTaGFyZWRUaHJlYWRMaXN0IGZyb20gJy4vU2hhcmVkVGhyZWFkTGlzdCc7CmltcG9ydCB7IHNlbGVjdFNoYXJlZFRocmVhZHMsIHNoYXJlZFRocmVhZEZpbHRlciwgc2hhcmVkVGhyZWFkU2VsZWN0LCBzaGFyZWRUaHJlYWRVcGRhdGUsIHNlbGVjdFVzZXJTaGFyZWRUaHJlYWRzLCBzaGFyZWRUaHJlYWRVc2VyRmlsdGVyLCB9IGZyb20gJ0BzcmMvZHVja3Mvc2hhcmVkVGhyZWFkcyc7CmltcG9ydCB7IHRocmVhZExpc3RXaWR0aFNldCB9IGZyb20gJ0BzcmMvZHVja3MvdGhyZWFkcyc7CmltcG9ydCB7IHNpemUgfSBmcm9tICdsb2Rhc2gnOwppbXBvcnQgeyBTaGFyZWRUaHJlYWRzTW9kZSwgU2hhcmVkVGhyZWFkRmlsdGVyTW9kZSwgfSBmcm9tICdAc3JjL3R5cGVzL3NoYXJlZFRocmVhZHMnOwppbXBvcnQgeyBvbmJvYXJkaW5nUGF0Y2ggfSBmcm9tICdAc3JjL2R1Y2tzL21lJzsKdmFyIG1hcFN0YXRlVG9Qcm9wcyA9IGZ1bmN0aW9uIChzdGF0ZSwgcHJvcHMpIHsKICAgIHZhciBkZWZhdWx0RmlsdGVyID0geyBtb2RlOiBTaGFyZWRUaHJlYWRGaWx0ZXJNb2RlLk5ldyB9OwogICAgdmFyIGRlZmF1bHRVc2VyU2hhcmVkVGhyZWFkc0ZpbHRlciA9IHsgbW9kZTogU2hhcmVkVGhyZWFkRmlsdGVyTW9kZS5OZXcgfTsKICAgIHZhciBzdGFuZGFyZFNoYXJlZFRocmVhZHNGaWx0ZXIgPSBzdGF0ZS5zaGFyZWRUaHJlYWRGaWx0ZXIgfHwgZGVmYXVsdEZpbHRlcjsKICAgIHZhciB1c2VyU2hhcmVkVGhyZWFkc0ZpbHRlciA9IHN0YXRlLnNoYXJlZFRocmVhZFVzZXJGaWx0ZXIgfHwgZGVmYXVsdFVzZXJTaGFyZWRUaHJlYWRzRmlsdGVyOwogICAgdmFyIHNoYXJlZFRocmVhZHMgPSBwcm9wcy5tb2RlID09PSBTaGFyZWRUaHJlYWRzTW9kZS5Vc2VyCiAgICAgICAgPyBzZWxlY3RVc2VyU2hhcmVkVGhyZWFkcyhzdGF0ZSwgdXNlclNoYXJlZFRocmVhZHNGaWx0ZXIpCiAgICAgICAgOiBzZWxlY3RTaGFyZWRUaHJlYWRzKHN0YXRlLCBzdGFuZGFyZFNoYXJlZFRocmVhZHNGaWx0ZXIpOwogICAgcmV0dXJuIHsKICAgICAgICBzaGFyZWRUaHJlYWRzOiBzaGFyZWRUaHJlYWRzLAogICAgICAgIHRocmVhZHM6IHN0YXRlLnRocmVhZHMsCiAgICAgICAgbWU6IHN0YXRlLm1lLmRhdGEsCiAgICAgICAgd2lkdGg6IHN0YXRlLnRocmVhZExpc3RXaWR0aCwKICAgICAgICBzZWxlY3RlZFNoYXJlZFRocmVhZDogc3RhdGUuc2VsZWN0ZWRTaGFyZWRUaHJlYWQsCiAgICAgICAgdGVhbU1lbWJlcnM6IHN0YXRlLnRlYW1NZW1iZXJzLAogICAgICAgIGZpbHRlcjogcHJvcHMubW9kZSA9PT0gU2hhcmVkVGhyZWFkc01vZGUuVXNlcgogICAgICAgICAgICA/IHVzZXJTaGFyZWRUaHJlYWRzRmlsdGVyIDogc3RhbmRhcmRTaGFyZWRUaHJlYWRzRmlsdGVyLAogICAgICAgIHNoYXJlZFRocmVhZHNGZXRjaGVkOiBzdGF0ZS5zaGFyZWRUaHJlYWRzU3RhdHVzID09PSBSZXNvdXJjZVN0YXR1cy5PayB8fCBmYWxzZSwKICAgICAgICBpc0VtcHR5OiAhc2l6ZShzdGF0ZS5zaGFyZWRUaHJlYWRzKSwKICAgICAgICBvbmJvYXJkaW5nOiBzdGF0ZS5vbmJvYXJkaW5nLAogICAgICAgIGhvdGtleUFjdGlvbnM6IHN0YXRlLmhvdGtleUFjdGlvbnMsCiAgICB9Owp9Owp2YXIgbWFwRGlzcGF0Y2hUb1Byb3BzID0gZnVuY3Rpb24gKGRpc3BhdGNoKSB7IHJldHVybiAoewogICAgc2V0V2lkdGg6IGZ1bmN0aW9uICh3aWR0aCkgeyByZXR1cm4gZGlzcGF0Y2godGhyZWFkTGlzdFdpZHRoU2V0KHdpZHRoKSk7IH0sCiAgICBmaWx0ZXJTaGFyZWRUaHJlYWRzOiBmdW5jdGlvbiAoZmlsdGVyKSB7IHJldHVybiBkaXNwYXRjaChzaGFyZWRUaHJlYWRGaWx0ZXIoZmlsdGVyKSk7IH0sCiAgICBmaWx0ZXJVc2VyU2hhcmVkVGhyZWFkczogZnVuY3Rpb24gKGZpbHRlcikgeyByZXR1cm4gZGlzcGF0Y2goc2hhcmVkVGhyZWFkVXNlckZpbHRlcihmaWx0ZXIpKTsgfSwKICAgIHNlbGVjdFNoYXJlZFRocmVhZDogZnVuY3Rpb24gKGlkKSB7IHJldHVybiBkaXNwYXRjaChzaGFyZWRUaHJlYWRTZWxlY3QoaWQpKTsgfSwKICAgIHVwZGF0ZVNoYXJlZFRocmVhZDogZnVuY3Rpb24gKHMpIHsgcmV0dXJuIGRpc3BhdGNoKHNoYXJlZFRocmVhZFVwZGF0ZShzKSk7IH0sCiAgICB1cGRhdGVPbmJvYXJkaW5nOiBmdW5jdGlvbiAobSkgeyByZXR1cm4gZGlzcGF0Y2gob25ib2FyZGluZ1BhdGNoKG0pKTsgfSwKfSk7IH07CmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMpKFNoYXJlZFRocmVhZExpc3QpOwo="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Mentions/components/SharedThreadList/index.tsx","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Mentions/components/SharedThreadList/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import { connect, Dispatch } from 'react-redux';\nimport {\n  StoreState, ResourceStatus,\n} from '@src/types';\nimport SharedThreadList, { StateProps, OwnProps, DispatchProps } from './SharedThreadList';\nimport {\n  selectSharedThreads,\n  sharedThreadFilter,\n  sharedThreadSelect,\n  sharedThreadUpdate,\n  selectUserSharedThreads,\n  sharedThreadUserFilter,\n} from '@src/ducks/sharedThreads';\nimport { threadListWidthSet } from '@src/ducks/threads';\nimport { size } from 'lodash';\nimport {\n  SharedThreadFilter,\n  SharedThreadsMode,\n  SharedThreadFilterMode,\n} from '@src/types/sharedThreads';\nimport { onboardingPatch } from '@src/ducks/me';\n\nconst mapStateToProps = (state: StoreState, props: OwnProps): StateProps => {\n  const defaultFilter: SharedThreadFilter = { mode: SharedThreadFilterMode.New };\n  const defaultUserSharedThreadsFilter: SharedThreadFilter = { mode: SharedThreadFilterMode.New };\n\n  const standardSharedThreadsFilter = state.sharedThreadFilter || defaultFilter;\n  const userSharedThreadsFilter = state.sharedThreadUserFilter || defaultUserSharedThreadsFilter;\n\n  const sharedThreads = props.mode === SharedThreadsMode.User\n    ? selectUserSharedThreads(state, userSharedThreadsFilter)\n    : selectSharedThreads(state, standardSharedThreadsFilter);\n\n  return {\n    sharedThreads,\n    threads: state.threads,\n    me: state.me.data,\n    width: state.threadListWidth,\n    selectedSharedThread: state.selectedSharedThread,\n    teamMembers: state.teamMembers,\n    filter: props.mode === SharedThreadsMode.User\n      ? userSharedThreadsFilter : standardSharedThreadsFilter\n    ,\n    sharedThreadsFetched: state.sharedThreadsStatus === ResourceStatus.Ok || false,\n    isEmpty: !size(state.sharedThreads),\n    onboarding: state.onboarding,\n    hotkeyActions: state.hotkeyActions,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<StoreState>): DispatchProps => ({\n  setWidth: width => dispatch(threadListWidthSet(width)),\n  filterSharedThreads: filter => dispatch(sharedThreadFilter(filter)),\n  filterUserSharedThreads: filter => dispatch(sharedThreadUserFilter(filter)),\n  selectSharedThread: id => dispatch(sharedThreadSelect(id)),\n  updateSharedThread: s => dispatch(sharedThreadUpdate(s)),\n  updateOnboarding: m => dispatch(onboardingPatch(m)),\n});\n\nexport default connect<StateProps, DispatchProps>(\n  mapStateToProps, mapDispatchToProps,\n)(SharedThreadList);\n"]}]}