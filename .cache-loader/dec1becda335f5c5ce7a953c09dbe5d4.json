{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/integrations.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/integrations.ts","mtime":1675280253980},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnOwppbXBvcnQgeyBqc29uUmVxdWVzdCwgYmxhbmtSZXF1ZXN0IH0gZnJvbSAnLi9iYXNlJzsKaW1wb3J0IHsgY3JlYXRlSW50ZWdyYXRpb24gfSBmcm9tICdAc3JjL21vY2tzL2ludGVncmF0aW9ucyc7CnZhciBJbnRlZ3JhdGlvbkNsaWVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHsKICAgIGZ1bmN0aW9uIEludGVncmF0aW9uQ2xpZW50KCkgewogICAgfQogICAgSW50ZWdyYXRpb25DbGllbnQucHJvdG90eXBlLmxpc3QgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIGpzb25SZXF1ZXN0KHsKICAgICAgICAgICAgbWV0aG9kOiAnR0VUJywKICAgICAgICAgICAgcm91dGU6ICIvdjEvaW50ZWdyYXRpb25zIiwKICAgICAgICB9KTsKICAgIH07CiAgICBJbnRlZ3JhdGlvbkNsaWVudC5wcm90b3R5cGUubG9naW4gPSBmdW5jdGlvbiAodGVhbUlkLCB0eXBlLCByZWRpcmVjdFVybCwgc2hvd1BhZ2UsIHJlYXV0aCkgewogICAgICAgIHJldHVybiBqc29uUmVxdWVzdCh7CiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLAogICAgICAgICAgICByb3V0ZTogcmVhdXRoID8gIi92MS9pbnRlZ3JhdGlvbnMvcmVhdXRob3JpemUiIDogIi92MS9pbnRlZ3JhdGlvbnMvbG9naW4iLAogICAgICAgICAgICBib2R5OiB7CiAgICAgICAgICAgICAgICB0eXBlOiB0eXBlLAogICAgICAgICAgICAgICAgdGVhbTogdGVhbUlkLAogICAgICAgICAgICAgICAgcmVkaXJlY3RVcmw6IHJlZGlyZWN0VXJsLAogICAgICAgICAgICAgICAgc2hvd1BhZ2U6IHNob3dQYWdlLAogICAgICAgICAgICB9LAogICAgICAgIH0pCiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHBheWxvYWQpIHsgcmV0dXJuIHBheWxvYWQudXJsOyB9KTsKICAgIH07CiAgICBJbnRlZ3JhdGlvbkNsaWVudC5wcm90b3R5cGUubG9nb3V0U2xhY2sgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIGJsYW5rUmVxdWVzdCh7CiAgICAgICAgICAgIG1ldGhvZDogJ0RFTEVURScsCiAgICAgICAgICAgIHJvdXRlOiAiL3YxL2ludGVncmF0aW9ucy9zbGFjayIsCiAgICAgICAgfSk7CiAgICB9OwogICAgSW50ZWdyYXRpb25DbGllbnQucHJvdG90eXBlLmxvZ291dEFzYW5hID0gZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBibGFua1JlcXVlc3QoewogICAgICAgICAgICBtZXRob2Q6ICdERUxFVEUnLAogICAgICAgICAgICByb3V0ZTogJy92MS9pbnRlZ3JhdGlvbnMvYXNhbmEnLAogICAgICAgIH0pOwogICAgfTsKICAgIEludGVncmF0aW9uQ2xpZW50LnByb3RvdHlwZS51cGRhdGVBc2FuYSA9IGZ1bmN0aW9uIChhc2FuYVdvcmtzcGFjZSkgewogICAgICAgIHJldHVybiBibGFua1JlcXVlc3QoewogICAgICAgICAgICBtZXRob2Q6ICdQQVRDSCcsCiAgICAgICAgICAgIHJvdXRlOiAiL3YxL2ludGVncmF0aW9ucy9hc2FuYSIsCiAgICAgICAgICAgIGJvZHk6IHsKICAgICAgICAgICAgICAgIGFzYW5hV29ya3NwYWNlOiBhc2FuYVdvcmtzcGFjZSwKICAgICAgICAgICAgfSwKICAgICAgICB9KTsKICAgIH07CiAgICBJbnRlZ3JhdGlvbkNsaWVudC5wcm90b3R5cGUubG9nb3V0Wm9vbSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gYmxhbmtSZXF1ZXN0KHsKICAgICAgICAgICAgbWV0aG9kOiAnREVMRVRFJywKICAgICAgICAgICAgcm91dGU6ICcvdjEvaW50ZWdyYXRpb25zL3pvb20nLAogICAgICAgIH0pOwogICAgfTsKICAgIEludGVncmF0aW9uQ2xpZW50LnByb3RvdHlwZS5sb2dvdXRIdWJzcG90ID0gZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBibGFua1JlcXVlc3QoewogICAgICAgICAgICBtZXRob2Q6ICdERUxFVEUnLAogICAgICAgICAgICByb3V0ZTogJy92MS9pbnRlZ3JhdGlvbnMvaHVic3BvdCcsCiAgICAgICAgfSk7CiAgICB9OwogICAgcmV0dXJuIEludGVncmF0aW9uQ2xpZW50Owp9KCkpOwpleHBvcnQgeyBJbnRlZ3JhdGlvbkNsaWVudCB9OwpleHBvcnQgZnVuY3Rpb24gbW9ja0ludGVncmF0aW9uQ2xpZW50KCkgewogICAgcmV0dXJuIHsKICAgICAgICBsaXN0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBPYnNlcnZhYmxlLm9mKFtjcmVhdGVJbnRlZ3JhdGlvbigpXSk7IH0sCiAgICAgICAgbG9naW46IGZ1bmN0aW9uICh0ZWFtSWQsIHR5cGUsIHJlZGlyZWN0VXJsKSB7CiAgICAgICAgICAgIHJldHVybiBPYnNlcnZhYmxlLm9mKCdodHRwczovL2xvZ2luLycgKyB0eXBlICsgJy8nICsgdGVhbUlkKTsKICAgICAgICB9LAogICAgICAgIGxvZ291dFNsYWNrOiBmdW5jdGlvbiAoKSB7IHJldHVybiBPYnNlcnZhYmxlLm9mKG51bGwpOyB9LAogICAgICAgIGxvZ291dEFzYW5hOiBmdW5jdGlvbiAoKSB7IHJldHVybiBPYnNlcnZhYmxlLm9mKG51bGwpOyB9LAogICAgICAgIHVwZGF0ZUFzYW5hOiBmdW5jdGlvbiAoKSB7IHJldHVybiBPYnNlcnZhYmxlLm9mKG51bGwpOyB9LAogICAgICAgIGxvZ291dFpvb206IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE9ic2VydmFibGUub2YobnVsbCk7IH0sCiAgICAgICAgbG9nb3V0SHVic3BvdDogZnVuY3Rpb24gKCkgeyByZXR1cm4gT2JzZXJ2YWJsZS5vZihudWxsKTsgfSwKICAgIH07Cn0K"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/integrations.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/integrations.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAGlC,OAAO,EAAE,WAAW,EAAE,YAAY,EAAE,MAAM,QAAQ,CAAC;AACnD,OAAO,EAAE,iBAAiB,EAAE,MAAM,yBAAyB,CAAC;AAc5D;IAAA;IA2DA,CAAC;IA1DC,gCAAI,GAAJ;QACE,OAAO,WAAW,CAAC;YACjB,MAAM,EAAE,KAAK;YACb,KAAK,EAAE,kBAAkB;SAC1B,CAAC,CAAC;IACL,CAAC;IAED,iCAAK,GAAL,UACE,MAAc,EAAE,IAAqB,EAAE,WAAmB,EAAE,QAAiB,EAAE,MAAgB;QAE/F,OAAO,WAAW,CAAC;YACjB,MAAM,EAAE,MAAM;YACd,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,8BAA8B,CAAC,CAAC,CAAC,wBAAwB;YACzE,IAAI,EAAE;gBACJ,IAAI,MAAA;gBACJ,IAAI,EAAE,MAAM;gBACZ,WAAW,aAAA;gBACX,QAAQ,UAAA;aACT;SACF,CAAC;aACD,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,GAAG,EAAX,CAAW,CAAC,CAAC;IAC/B,CAAC;IAED,uCAAW,GAAX;QACE,OAAO,YAAY,CAAC;YAClB,MAAM,EAAE,QAAQ;YAChB,KAAK,EAAE,wBAAwB;SAChC,CAAC,CAAC;IACL,CAAC;IAED,uCAAW,GAAX;QACE,OAAO,YAAY,CAAC;YAClB,MAAM,EAAE,QAAQ;YAChB,KAAK,EAAE,wBAAwB;SAChC,CAAC,CAAC;IACL,CAAC;IAED,uCAAW,GAAX,UAAY,cAAsB;QAChC,OAAO,YAAY,CAAC;YAClB,MAAM,EAAE,OAAO;YACf,KAAK,EAAE,wBAAwB;YAC/B,IAAI,EAAE;gBACJ,cAAc,gBAAA;aACf;SACF,CAAC,CAAC;IACL,CAAC;IACD,sCAAU,GAAV;QACE,OAAO,YAAY,CAAC;YAClB,MAAM,EAAE,QAAQ;YAChB,KAAK,EAAE,uBAAuB;SAC/B,CAAC,CAAC;IACL,CAAC;IACD,yCAAa,GAAb;QACE,OAAO,YAAY,CAAC;YAClB,MAAM,EAAE,QAAQ;YAChB,KAAK,EAAE,0BAA0B;SAClC,CAAC,CAAC;IACL,CAAC;IACH,wBAAC;AAAD,CAAC,AA3DD,IA2DC;;AAED,MAAM,UAAU,qBAAqB;IACnC,OAAO;QACL,IAAI,EAAE,cAAM,OAAA,UAAU,CAAC,EAAE,CAAC,CAAC,iBAAiB,EAAE,CAAC,CAAC,EAApC,CAAoC;QAChD,KAAK,EAAE,UAAC,MAAM,EAAE,IAAI,EAAE,WAAW;YAC/B,OAAA,UAAU,CAAC,EAAE,CAAC,gBAAgB,GAAG,IAAI,GAAG,GAAG,GAAG,MAAM,CAAC;QAArD,CAAqD;QACvD,WAAW,EAAE,cAAM,OAAA,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,EAAnB,CAAmB;QACtC,WAAW,EAAE,cAAM,OAAA,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,EAAnB,CAAmB;QACtC,WAAW,EAAE,cAAM,OAAA,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,EAAnB,CAAmB;QACtC,UAAU,EAAE,cAAM,OAAA,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,EAAnB,CAAmB;QACrC,aAAa,EAAE,cAAM,OAAA,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,EAAnB,CAAmB;KACzC,CAAC;AACJ,CAAC","sourcesContent":["import { Observable } from 'rxjs';\n\nimport { Integration, IntegrationType } from '@src/types';\nimport { jsonRequest, blankRequest } from './base';\nimport { createIntegration } from '@src/mocks/integrations';\n\nexport interface IntegrationAPI {\n  list(): Observable<Integration[]>;\n  login(\n    teamId: string, type: IntegrationType, redirectUrl: string, showPage: boolean, reauth?: boolean,\n  ): Observable<string>;\n  logoutSlack(): Observable<null>;\n  logoutAsana(): Observable<null>;\n  logoutZoom(): Observable<null>;\n  logoutHubspot(): Observable<null>;\n  updateAsana(workspace: string): Observable<null>;\n}\n\nexport class IntegrationClient implements IntegrationAPI {\n  list(): Observable<Integration[]> {\n    return jsonRequest({\n      method: 'GET',\n      route: `/v1/integrations`,\n    });\n  }\n\n  login(\n    teamId: string, type: IntegrationType, redirectUrl: string, showPage: boolean, reauth?: boolean,\n  ): Observable<string> {\n    return jsonRequest({\n      method: 'POST',\n      route: reauth ? `/v1/integrations/reauthorize` : `/v1/integrations/login`,\n      body: {\n        type,\n        team: teamId,\n        redirectUrl,\n        showPage,\n      },\n    })\n    .map(payload => payload.url);\n  }\n\n  logoutSlack(): Observable<null> {\n    return blankRequest({\n      method: 'DELETE',\n      route: `/v1/integrations/slack`,\n    });\n  }\n\n  logoutAsana(): Observable<null> {\n    return blankRequest({\n      method: 'DELETE',\n      route: '/v1/integrations/asana',\n    });\n  }\n\n  updateAsana(asanaWorkspace: string): Observable<null> {\n    return blankRequest({\n      method: 'PATCH',\n      route: `/v1/integrations/asana`,\n      body: {\n        asanaWorkspace,\n      },\n    });\n  }\n  logoutZoom(): Observable<null> {\n    return blankRequest({\n      method: 'DELETE',\n      route: '/v1/integrations/zoom',\n    });\n  }\n  logoutHubspot(): Observable<null> {\n    return blankRequest({\n      method: 'DELETE',\n      route: '/v1/integrations/hubspot',\n    });\n  }\n}\n\nexport function mockIntegrationClient(): IntegrationAPI {\n  return {\n    list: () => Observable.of([createIntegration()]),\n    login: (teamId, type, redirectUrl) =>\n      Observable.of('https://login/' + type + '/' + teamId),\n    logoutSlack: () => Observable.of(null),\n    logoutAsana: () => Observable.of(null),\n    updateAsana: () => Observable.of(null),\n    logoutZoom: () => Observable.of(null),\n    logoutHubspot: () => Observable.of(null),\n  };\n}\n"]}]}