{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/HistorySync.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/HistorySync.ts","mtime":1675280254123},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/HistorySync.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/HistorySync.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable, Subject, Observer, Subscription } from 'rxjs';\nimport Cache, { Stores } from '@src/lib/db';\nimport { patchedNoCompute, computeThread } from '@src/lib/thread';\nimport { cacheDeleteMessageBodies } from '@src/lib/models/messageBodies';\nimport { Combiner, rateLimiter } from '@src/lib/rx';\nimport { applyHistoryDefaults } from '@src/lib/history';\nimport { History, HistoryObject, RealtimeEvent, Commit, CommitStatus } from '@src/types';\nimport { HistoryAPI, HistoryClient } from '@src/api/histories';\nimport { Backoff } from './Backoff';\nimport { ApiError } from '@src/api/base';\nimport {\n  sendThreadUpdated,\n  sendThreadDeleted,\n  sendDraftDeleted,\n  sendIncrementalSyncStarted,\n  sendIncrementalSyncFinished,\n  sendTeamMemberUpdated,\n  sendSharedThreadDeleted,\n  sendSharedThreadUpdated,\n  sendFilterDeleted,\n  sendFilterUpdated,\n  sendMeUpdated,\n  sendCalendarsSynced,\n} from '@src/worker/bridge/workerEvents';\nimport bus, { getBus, BusEvent, BusEventName } from '@src/worker/bus';\nimport { captureException } from '@sentry/browser';\nimport { compact } from 'lodash';\nimport { saveThreadsToSearchDb, getSearchDb } from '@src/lib/searchDb';\n\nexport class HistorySync {\n  // State\n  readonly workerId: string;\n  team?: string;\n  isRunning: boolean;\n  backoff: Backoff;\n  private cancelSignal: Subject<null>;\n  private ratelimit: number;\n  private retrigger: boolean;\n  private retriggerId: string|undefined;\n\n  // Dependencies\n  private events: Observable<RealtimeEvent>;\n  private api: HistoryAPI;\n  private bus: Subject<BusEvent>;\n  private realtimeSub: Subscription;\n  private busSub: Subscription;\n\n  constructor(\n    events: Observable<RealtimeEvent>,\n    team?: string,\n    api: HistoryAPI = new HistoryClient(),\n  ) {\n    this.isRunning = false;\n    this.team = team;\n    this.cancelSignal = new Subject<null>();\n    this.ratelimit = 333; // in milliseconds\n    this.workerId = 'HistorySync';\n    if (team) {\n      this.workerId = 'HistorySync-' + team;\n    }\n    this.backoff = new Backoff(this.workerId);\n\n    this.events = events;\n    this.api = api;\n    this.bus = getBus();\n    this.retrigger = false;\n  }\n\n  init() {\n    // Listen for realtime events\n    if (!this.realtimeSub) {\n      this.realtimeSub = this.events\n        .filter((event) => {\n          if (event.name !== 'HistoryUpdated') {\n            return false;\n          }\n          if (this.team && this.team !== event.data.team) {\n            return false;\n          }\n          return true;\n        })\n        .subscribe((event) => {\n          if (this.isRunning) {\n            this.retrigger = true;\n            if (!this.retriggerId || Number(this.retriggerId) > Number(event.data.id)) {\n              this.retriggerId = event.data.id;\n            }\n            return;\n          }\n\n          this.run(event.data.id).subscribe();\n        });\n    }\n\n    // Listen for bus events\n    if (!this.busSub) {\n      this.busSub = this.bus.subscribe({\n        next: (event: BusEvent) => {\n          this.handleBusEvent(event);\n        },\n        error: (e: Error) => {\n          captureException(e);\n        },\n      });\n    }\n  }\n\n  deinit() {\n    if (this.realtimeSub) {\n      this.realtimeSub.unsubscribe();\n    }\n    if (this.busSub) {\n      this.busSub.unsubscribe();\n    }\n  }\n\n  persist(intervalSeconds: number) {\n    setInterval(\n      () => {\n        this.run().subscribe();\n      },\n      intervalSeconds * 1000,\n    );\n  }\n\n  // deleteItems does not apply to HistorySync as it does not\n  // handle any cache items directly\n  clearCache(deleteItems: boolean): Observable<null> {\n    if (this.isRunning) {\n      this.cancelSignal.next(null);\n    }\n    return Cache.deleteSingle(Stores.Workers, this.workerId);\n  }\n\n  getState(): Observable<string | undefined> {\n    return Cache.get(Stores.Workers, this.workerId).map(\n      state => (state ? state.offset : undefined),\n    );\n  }\n\n  saveState(newOffset: string): Observable<any> {\n    return Cache.save(Stores.Workers, {\n      worker: this.workerId,\n      offset: newOffset,\n    });\n  }\n\n  run(id?: string): Observable<null> {\n    return Observable.create((runner: Observer<null>) => {\n      if (!this.backoff.isReady()) {\n        runner.next(null);\n        runner.complete();\n        return;\n      }\n      if (this.isRunning) {\n        runner.next(null);\n        runner.complete();\n        return;\n      }\n      this.isRunning = true;\n      sendIncrementalSyncStarted();\n\n      const limiter = rateLimiter<History[]>(this.ratelimit);\n\n      this.getState().subscribe({\n        next: (offset) => {\n          // TODO(Jeff): Replace this with int64 library to do this comparison\n          // If id is lower than offset, replaced offset with id.\n          let adjustedOffset = offset;\n\n          // TODO(SHAHAN): Investigate if we want to fix this\n          if (!offset && !id && Number(id) < Number(adjustedOffset)) {\n            adjustedOffset = id;\n          }\n\n          let initialId = offset === undefined;\n\n          const combiner = new Combiner<History[]>();\n          combiner.takeUntil(this.cancelSignal).subscribe({\n            next: (histories) => {\n              if (histories.length === 0) {\n                sendIncrementalSyncFinished();\n                combiner.complete();\n                return;\n              }\n\n              // Checkpoint offset before reversal\n              const newOffset = histories[0].id;\n\n              // Merge histories\n              const merged = mergeHistories(histories);\n\n              const results: Array<Observable<null>> = [];\n\n              // NOTE(SHAHAN): Want to prevent clear cache loop when fetching the intial id\n              if (initialId && histories[0].object === HistoryObject.All && histories[0].clear === 'all') {\n                // Don't process any returned data for the initial HistoryId fetch\n                // Since that fetch is only needed to get a good HistoryId\n                initialId = false;\n                results.push(Observable.of(null));\n              } else {\n                merged.forEach((history) => {\n                  switch (history.object) {\n                    case HistoryObject.Calendar:\n                      results.push(this.handleCalendars(history));\n                      break;\n\n                    case HistoryObject.CalendarEvent:\n                      results.push(this.handleCalendarEvents(history));\n                      break;\n\n                    case HistoryObject.Contact:\n                      results.push(this.handleContacts(history));\n                      break;\n\n                    case HistoryObject.ContactGroup:\n                      results.push(this.handleContactGroups(history));\n                      break;\n\n                    case HistoryObject.ContactNote:\n                      results.push(this.handleContactNotes(history));\n                      break;\n\n                    case HistoryObject.Draft:\n                      results.push(this.handleDrafts(history));\n                      break;\n\n                    case HistoryObject.Filter:\n                      results.push(this.handleFilters(history));\n                      break;\n\n                    case HistoryObject.MessageBody:\n                      results.push(this.handleMessageBodies(history));\n                      break;\n\n                    case HistoryObject.SharedThread:\n                      results.push(this.handleSharedThreads(history));\n                      break;\n\n                    case HistoryObject.TeamMember:\n                      results.push(this.handleTeamMembers(history));\n                      break;\n\n                    case HistoryObject.Template:\n                      results.push(this.handleTemplates(history));\n                      break;\n\n                    case HistoryObject.Thread:\n                      results.push(this.handleThreads(history));\n                      break;\n\n                    case HistoryObject.All:\n                      if (history.clear === 'all') {\n                        bus.historyClearCache();\n                      }\n                      break;\n\n                    default:\n                      break;\n                  }\n                });\n              }\n\n              // Resolve and recursively call upon completion\n              Observable.zip(...results)\n                .subscribe({\n                  error: (e) => {\n                    combiner.error(e);\n                  },\n                  complete: () => {\n                    this.saveState(newOffset).subscribe({\n                      error: (e) => {\n                        combiner.error(e);\n                      },\n                      complete: () => {\n                        combiner.run(limiter(this.fetchNextPage(newOffset)));\n                      },\n                    });\n                  },\n                });\n            },\n            error: (e: Error) => {\n              this.isRunning = false;\n              sendIncrementalSyncFinished();\n\n              // Clear cache with 400\n              if ((e as ApiError).code === 400) {\n                bus.historyClearCache();\n              }\n\n              // Handle 401 error, we send a MeUpdated event to main thread\n              // The meFetch epic then correctly handles the neccessary steps\n              // to mark the user as logged out and trigger a clear cache\n              if ((e as ApiError).code === 401) {\n                sendMeUpdated();\n              }\n\n              // Otherwise set error and backoff\n              this.backoff.setError(e);\n              runner.next(null);\n              runner.complete();\n            },\n            complete: () => {\n              this.isRunning = false;\n              sendIncrementalSyncFinished();\n              runner.next(null);\n              runner.complete();\n\n              // Handle retrigger\n              if (this.retrigger) {\n                this.retrigger = false;\n                bus.triggerSync(this.workerId);\n              }\n            },\n          });\n\n          // Buffer initial fetch to alleviate archive bounce issue\n          combiner.run(\n            Observable.of(null)\n              .delay(500)\n              .flatMap(() => this.fetchNextPage(adjustedOffset)),\n          );\n        },\n        error: (e: Error) => {\n          this.isRunning = false;\n          this.backoff.setError(e);\n          runner.next(null);\n          runner.complete();\n        },\n      });\n    });\n  }\n\n  private handleCalendars(history: History): Observable<null> {\n    if (history.clear === 'all') {\n      // HACK(SHIN): Call clear for Calendar Events since Calendars is associated\n      // and cleared from CalendarEventSync. If not pointed to CalendarEventSync,\n      // this request will stall HistorySync\n      return bus.clearResourceRequest(Stores.CalendarEvents, this.team);\n    }\n    if (history.deleted && history.deleted.length > 0) {\n      return Cache\n        .deleteBatch(Stores.Calendars, history.deleted)\n        .do(() => sendCalendarsSynced());\n    }\n    if (history.calendars && history.calendars.length > 0) {\n      return Cache\n        .load(Stores.Calendars, history.calendars)\n        .do(() => sendCalendarsSynced());\n    }\n    return Observable.of(null);\n  }\n\n  private handleCalendarEvents(history: History): Observable<null> {\n    if (history.clear === 'all') {\n      return bus.clearResourceRequest(Stores.CalendarEvents, this.team);\n    }\n    if (history.deleted && history.deleted.length > 0) {\n      return Cache\n        .deleteBatch(Stores.CalendarEvents, history.deleted)\n        .do(() => sendCalendarsSynced());\n    }\n    if (history.calendarEvents && history.calendarEvents.length > 0) {\n      return Cache\n        .load(Stores.CalendarEvents, history.calendarEvents)\n        .do(() => sendCalendarsSynced());\n    }\n    return Observable.of(null);\n  }\n\n  private handleContacts(history: History): Observable<null> {\n    if (history.clear === 'all') {\n      return bus.clearResourceRequest(Stores.Contacts, this.team);\n    }\n    if (history.deleted && history.deleted.length > 0) {\n      return Cache.deleteBatch(Stores.Contacts, history.deleted);\n    }\n    if (history.contacts && history.contacts.length > 0) {\n      return Cache.load(Stores.Contacts, history.contacts);\n    }\n    return Observable.of(null);\n  }\n\n  private handleContactGroups(history: History): Observable<null> {\n    if (history.clear === 'all') {\n      return bus.clearResourceRequest(Stores.ContactGroups, this.team);\n    }\n    if (history.deleted && history.deleted.length > 0) {\n      return Cache.deleteBatch(Stores.ContactGroups, history.deleted);\n    }\n    if (history.contactGroups && history.contactGroups.length > 0) {\n      return Cache.load(Stores.ContactGroups, history.contactGroups);\n    }\n    return Observable.of(null);\n  }\n\n  private handleContactNotes(history: History): Observable<null> {\n    if (history.clear === 'all') {\n      return bus.clearResourceRequest(Stores.ContactNotes, this.team);\n    }\n    if (history.deleted && history.deleted.length > 0) {\n      return Cache.deleteBatch(Stores.ContactNotes, history.deleted);\n    }\n    if (history.contactNotes && history.contactNotes.length > 0) {\n      return Cache.load(Stores.ContactNotes, history.contactNotes);\n    }\n    return Observable.of(null);\n  }\n\n  private handleDrafts(history: History): Observable<null> {\n    if (history.clear === 'all') {\n      return bus.clearResourceRequest(Stores.Drafts, this.team);\n    }\n    if (history.deleted && history.deleted.length > 0) {\n      return Cache.deleteBatch(Stores.Drafts, history.deleted).flatMap(() => {\n        history.deleted.forEach(id => sendDraftDeleted(id));\n        return Observable.of(null);\n      });\n    }\n    return Observable.of(null);\n  }\n\n  private handleFilters(history: History): Observable<null> {\n    if (history.deleted && history.deleted.length > 0) {\n      history.deleted.forEach(id => sendFilterDeleted(id));\n    }\n\n    if (history.filters && history.filters.length > 0) {\n      history.filters.forEach(filter => sendFilterUpdated(filter));\n    }\n    return Observable.of(null);\n  }\n\n  private handleMessageBodies(history: History): Observable<null> {\n    if (history.clear === 'all') {\n      return Cache.clear(Stores.MessageBodies);\n    }\n    if (history.deleted && history.deleted.length > 0) {\n      return Cache.deleteBatch(Stores.MessageBodies, history.deleted);\n    }\n    return Observable.of(null);\n  }\n\n  private handleSharedThreads(history: History): Observable<null> {\n    if (history.clear === 'all') {\n      return bus.clearResourceRequest(Stores.SharedThreads, this.team);\n    }\n    if (history.deleted && history.deleted.length > 0) {\n      return Cache.deleteBatch(Stores.SharedThreads, history.deleted)\n        .flatMap(() => {\n          history.deleted.forEach(id => sendSharedThreadDeleted(id));\n          return Observable.of(null);\n        });\n    }\n    if (history.sharedThreads && history.sharedThreads.length > 0) {\n      return Cache.load(Stores.SharedThreads, history.sharedThreads)\n        .flatMap(() => {\n          history.sharedThreads.forEach(sharedThread => sendSharedThreadUpdated(sharedThread));\n          return Observable.of(null);\n        });\n    }\n    return Observable.of(null);\n  }\n\n  private handleTeamMembers(history: History): Observable<null> {\n    if (history.clear === 'all') {\n      return bus.clearResourceRequest(Stores.TeamMembers, this.team)\n        .do(() => sendTeamMemberUpdated());\n    }\n    if (history.deleted && history.deleted.length > 0) {\n      return Cache.deleteBatch(Stores.TeamMembers, history.deleted)\n        .do(() => sendTeamMemberUpdated());\n    }\n    if (history.teamMembers && history.teamMembers.length > 0) {\n      return Cache.load(Stores.TeamMembers, history.teamMembers)\n        .do(() => sendTeamMemberUpdated());\n    }\n    return Observable.of(null);\n  }\n\n  private handleTemplates(history: History): Observable<null> {\n    if (history.clear === 'all') {\n      return bus.clearResourceRequest(Stores.Templates, this.team);\n    }\n    if (history.deleted && history.deleted.length > 0) {\n      return Cache.deleteBatch(Stores.Templates, history.deleted);\n    }\n    return Observable.of(null);\n  }\n\n  private handleThreads(history: History): Observable<null> {\n    if (history.clear === 'all') {\n      return bus.clearResourceRequest(Stores.Threads, this.team);\n    }\n\n    if (history.deleted && history.deleted.length > 0) {\n      // Clear message bodies cache and delete threads\n      return Observable.zip(...history.deleted.map(id => cacheDeleteMessageBodies(id)))\n        .flatMap(() => Cache.deleteBatch(Stores.Threads, history.deleted))\n        // Deletes Polymail threads\n        .flatMap(() => Observable.from(\n          getSearchDb().threads.where('id').anyOf(history.deleted).delete(),\n        ))\n        .map(() => {\n          history.deleted.forEach(id => sendThreadDeleted(id));\n          // TODO(Shahan): Should call bus.updateMailCount\n          // once we figure out how to get the account id\n          // for the thread here.\n          return null;\n        });\n    }\n    if (history.threads && history.threads.length > 0) {\n      // Get unresolved thread commits\n      return listUnresolvedCommits(HistoryObject.Thread).flatMap((unresolvedCommits) => {\n        return Observable.zip(\n          ...history.threads.map((thread) => {\n            // Get commits for this thread id\n            const commits = unresolvedCommits.filter(commit => commit.resourceId === thread.id);\n\n            // Patch commits\n            let patchedThread = thread;\n            let deleted = false;\n            commits.forEach((commit) => {\n              if (commit.method === 'PATCH') {\n                patchedThread = patchedNoCompute(patchedThread, commit);\n              }\n              if (commit.method === 'DELETE') {\n                deleted = true;\n              }\n            });\n\n            // Don't save if we find a delete commit\n            if (deleted) {\n              return Observable.of(null);\n            }\n\n            // Save patched & computed thread to cache and emit out\n            patchedThread = computeThread(patchedThread);\n\n            // Update MailCountBot to reset empty list hash if unread and in list\n            if (patchedThread.list && !patchedThread.read) {\n              bus.updateListUnreadCount(patchedThread.account, patchedThread.list);\n            }\n\n            return Observable.of(patchedThread);\n          }),\n        )\n        .flatMap((threads) => {\n          // Bulk Save threads into polymailDb\n          const compacted = compact(threads);\n\n          // Bulk save threads\n          return Cache.load(Stores.Threads, compacted)\n            .flatMap(() => saveThreadsToSearchDb(compacted))\n            .flatMap(() => {\n              compacted.forEach((patchedThread) => {\n                sendThreadUpdated(patchedThread);\n                bus.updateMailCount(patchedThread.account);\n              });\n              return Observable.of(null);\n            });\n        })\n        .map(() => null);\n      });\n    }\n    return Observable.of(null);\n  }\n\n  private fetchNextPage(offset?: string): Observable<History[]> {\n    // NOTE(SHAHAN): Can't no longer turn off retrigger here in case retriggerId\n    // is older then offset. Other race conditions exist too with retrigger.\n    if (this.team) {\n      return this.api.listByTeam(this.team, offset);\n    }\n    return this.api.list(offset);\n  }\n\n  private handleBusEvent(event: BusEvent) {\n    switch (event.name) {\n      case BusEventName.ClearErrors:\n        this.backoff.clearErrors();\n        break;\n\n      case BusEventName.CancelSync:\n        if (event.data.workerId && event.data.workerId !== this.workerId) {\n          break;\n        }\n        this.cancelSignal.next(null);\n        return;\n\n      case BusEventName.TriggerSync:\n        if (event.data.workerId && event.data.workerId !== this.workerId) {\n          break;\n        }\n        if (this.isRunning) {\n          this.retrigger = true;\n          return;\n        }\n        this.run(this.retriggerId).subscribe();\n        this.retriggerId = undefined;\n        break;\n\n      case BusEventName.HistoryClearCache:\n        this.clearCache(false).subscribe();\n        break;\n\n      default:\n        break;\n    }\n  }\n}\n\n// mergeHistories takes in histories in reverse chronological order.\nexport const mergeHistories = (histories: History[]): History[] => {\n  // Keep track of clear cache events (key is HistoryObect)\n  const clearAllMap: Map<string, boolean> = new Map([]);\n\n  // Keep track of all update and deletion events (key is HistoryObject)\n  const mergedMap: Map<string, History> = new Map([]);\n\n  // Keep track of all seen update and deletions (key is HistoryObect + resourceIdd)\n  const seen: Map<string, boolean> = new Map([]);\n  histories.forEach((history) => {\n    const clearAll = clearAllMap.get(history.object) ? true : false;\n    if (clearAll) {\n      return;\n    }\n    if (history.clear === 'all') {\n      clearAllMap.set(history.object, true);\n    }\n\n    let existing = mergedMap.get(history.object);\n    if (!existing) {\n      existing = applyHistoryDefaults({ id: '', object: history.object });\n    }\n    mergedMap.set(history.object, mergeHistory(seen, existing, history));\n  });\n\n  // Resolve clear caches first\n  const mergedHistories: History[] = [];\n  clearAllMap.forEach((_, object) => {\n    const historyObject = object as HistoryObject;\n    mergedHistories.push(applyHistoryDefaults({ id: '', object: historyObject, clear: 'all' }));\n  });\n\n  // Then append histories for each resource\n  // NOTE(Jeff): Need to split deletion and update histories because\n  // history handler function expect only one or the other array, never both.\n  mergedMap.forEach((history) => {\n    if (history.deleted.length > 0) {\n      mergedHistories.push(\n        applyHistoryDefaults({\n          id: '',\n          object: history.object,\n          deleted: history.deleted,\n        }),\n      );\n      mergedHistories.push({ ...history, deleted: [] });\n    } else {\n      mergedHistories.push(history);\n    }\n  });\n  return mergedHistories;\n};\n\nconst mergeHistory = (seen: Map<string, boolean>, existing: History, history: History): History => {\n  const merged = { ...existing };\n\n  // Accumulated deletion ids\n  history.deleted.forEach((id) => {\n    const key = history.object + id;\n    if (seen.has(key)) {\n      return;\n    }\n    merged.deleted.push(id);\n    seen.set(key, true);\n  });\n\n  // Handle specific object types\n  switch (history.object) {\n    case HistoryObject.Contact:\n      history.contacts.forEach((model) => {\n        const key = history.object + model.id;\n        if (seen.has(key)) {\n          return;\n        }\n        merged.contacts.push(model);\n        seen.set(key, true);\n      });\n      break;\n\n    case HistoryObject.ContactGroup:\n      history.contactGroups.forEach((model) => {\n        const key = history.object + model.id;\n        if (seen.has(key)) {\n          return;\n        }\n        merged.contactGroups.push(model);\n        seen.set(key, true);\n      });\n      break;\n\n    case HistoryObject.ContactNote:\n      history.contactNotes.forEach((model) => {\n        const key = history.object + model.id;\n        if (seen.has(key)) {\n          return;\n        }\n        merged.contactNotes.push(model);\n        seen.set(key, true);\n      });\n      break;\n\n    case HistoryObject.TeamMember:\n      history.teamMembers.forEach((model) => {\n        const key = history.object + model.id;\n        if (seen.has(key)) {\n          return;\n        }\n        merged.teamMembers.push(model);\n        seen.set(key, true);\n      });\n      break;\n\n    case HistoryObject.SharedThread:\n      history.sharedThreads.forEach((model) => {\n        const key = history.object + model.id;\n        if (seen.has(key)) {\n          return;\n        }\n        merged.sharedThreads.push(model);\n        seen.set(key, true);\n      });\n      break;\n\n    case HistoryObject.Thread:\n      history.threads.forEach((model) => {\n        const key = history.object + model.id;\n        if (seen.has(key)) {\n          return;\n        }\n        merged.threads.push(model);\n        seen.set(key, true);\n      });\n      break;\n\n    case HistoryObject.Filter:\n      history.filters.forEach((model) => {\n        const key = history.object + model.id;\n        if (seen.has(key)) {\n          return;\n        }\n        merged.filters.push(model);\n        seen.set(key, true);\n      });\n      break;\n\n    case HistoryObject.Calendar:\n      history.calendars.forEach((model) => {\n        const key = history.object + model.id;\n        if (seen.has(key)) {\n          return;\n        }\n        merged.calendars.push(model);\n        seen.set(key, true);\n      });\n      break;\n\n    case HistoryObject.CalendarEvent:\n      history.calendarEvents.forEach((model) => {\n        const key = history.object + model.id;\n        if (seen.has(key)) {\n          return;\n        }\n        merged.calendarEvents.push(model);\n        seen.set(key, true);\n      });\n      break;\n\n    default:\n      break;\n  }\n  return merged;\n};\n\nfunction listUnresolvedCommits(resource: HistoryObject): Observable<Commit[]> {\n  return Cache.list<Commit>(Stores.Commits, (commit) => {\n    if (commit.resource !== resource) {\n      return false;\n    }\n    if (commit.status !== CommitStatus.Ready && commit.status !== CommitStatus.Processing) {\n      return false;\n    }\n    return true;\n  });\n}\n\nexport default HistorySync;\n"]}]}