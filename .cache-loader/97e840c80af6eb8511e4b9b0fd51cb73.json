{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/templates.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/templates.ts","mtime":1675280254053},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nLCBfaCwgX2osIF9rOwppbXBvcnQgeyBjcmVhdGUgfSBmcm9tICdAc3JjL2xpYi9yZWR1eCc7CmltcG9ydCB1cGRhdGUgZnJvbSAnaW1tdXRhYmlsaXR5LWhlbHBlcic7CmltcG9ydCB7IGtleUJ5IH0gZnJvbSAnbG9kYXNoJzsKaW1wb3J0IHsgcmVzb3VyY2VPaywgcmVzb3VyY2VGYWlsZWQgfSBmcm9tICdAc3JjL2xpYi9yZXNvdXJjZSc7CmZ1bmN0aW9uIGNyZWF0ZU1ldGFOZXN0aW5nKHN0YXRlLCByZXNvdXJjZSkgewogICAgdmFyIF9hOwogICAgaWYgKHN0YXRlLmF0dGFjaG1lbnRNZXRhc1tyZXNvdXJjZV0pIHsKICAgICAgICByZXR1cm4gc3RhdGU7CiAgICB9CiAgICByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgYXR0YWNobWVudE1ldGFzOiAoX2EgPSB7fSwKICAgICAgICAgICAgX2FbcmVzb3VyY2VdID0gewogICAgICAgICAgICAgICAgJHNldDoge30sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIF9hKSwKICAgIH0pOwp9CmV4cG9ydCB2YXIgVEVNUExBVEVfRkVUQ0ggPSAoX2EgPSBjcmVhdGUoJ1RFTVBMQVRFX0ZFVENIJywgewogICAgc3VjY2VzczogZnVuY3Rpb24gKHN0YXRlLCBtZXRhLCBwYXlsb2FkKSB7CiAgICAgICAgdmFyIF9hOwogICAgICAgIHJldHVybiB1cGRhdGUoc3RhdGUsIHsKICAgICAgICAgICAgdGVtcGxhdGVzOiAoX2EgPSB7fSwKICAgICAgICAgICAgICAgIF9hW21ldGFdID0gewogICAgICAgICAgICAgICAgICAgICRzZXQ6IHBheWxvYWQsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgX2EpLAogICAgICAgIH0pOwogICAgfSwKfSksIF9hLnR5cGUpLCB0ZW1wbGF0ZUZldGNoID0gX2EuYWN0aW9uLCB0ZW1wbGF0ZUZldGNoUmVkdWNlciA9IF9hLnJlZHVjZXI7CmV4cG9ydCB2YXIgVEVNUExBVEVfTElTVCA9IChfYiA9IGNyZWF0ZSgnVEVNUExBVEVfTElTVCcsIHsKICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChzdGF0ZSwgbWV0YSwgcGF5bG9hZCkgewogICAgICAgIHZhciB0ZW1wbGF0ZXMgPSBrZXlCeShwYXlsb2FkLCBmdW5jdGlvbiAodGVtcGxhdGUpIHsgcmV0dXJuIHRlbXBsYXRlLmlkOyB9KTsKICAgICAgICByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgICAgIHRlbXBsYXRlczogeyAkc2V0OiB0ZW1wbGF0ZXMgfSwKICAgICAgICB9KTsKICAgIH0sCn0pLCBfYi50eXBlKSwgdGVtcGxhdGVMaXN0ID0gX2IuYWN0aW9uLCB0ZW1wbGF0ZUxpc3RSZWR1Y2VyID0gX2IucmVkdWNlcjsKZXhwb3J0IHZhciBURU1QTEFURV9DUkVBVEUgPSAoX2MgPSBjcmVhdGUoJ1RFTVBMQVRFX0NSRUFURScsIHsKICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChzdGF0ZSwgbWV0YSwgcGF5bG9hZCkgewogICAgICAgIHZhciBfYTsKICAgICAgICByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgICAgIHRlbXBsYXRlczogKF9hID0ge30sCiAgICAgICAgICAgICAgICBfYVtwYXlsb2FkLmlkXSA9IHsKICAgICAgICAgICAgICAgICAgICAkc2V0OiBwYXlsb2FkLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIF9hKSwKICAgICAgICB9KTsKICAgIH0sCn0pLCBfYy50eXBlKSwgdGVtcGxhdGVDcmVhdGUgPSBfYy5hY3Rpb24sIHRlbXBsYXRlQ3JlYXRlUmVkdWNlciA9IF9jLnJlZHVjZXI7CmV4cG9ydCB2YXIgVEVNUExBVEVfQ09OVkVSVCA9IChfZCA9IGNyZWF0ZSgnVEVNUExBVEVfQ09OVkVSVCcsIHt9KSwgX2QudHlwZSksIHRlbXBsYXRlQ29udmVydCA9IF9kLmFjdGlvbiwgdGVtcGxhdGVDb252ZXJ0UmVkdWNlciA9IF9kLnJlZHVjZXI7CmV4cG9ydCB2YXIgVEVNUExBVEVfVVBEQVRFID0gKF9lID0gY3JlYXRlKCdURU1QTEFURV9VUERBVEUnLCB7CiAgICBzdGFydDogZnVuY3Rpb24gKHN0YXRlLCBtZXRhKSB7CiAgICAgICAgdmFyIF9hOwogICAgICAgIHJldHVybiB1cGRhdGUoc3RhdGUsIHsKICAgICAgICAgICAgdGVtcGxhdGVzOiAoX2EgPSB7fSwKICAgICAgICAgICAgICAgIF9hW21ldGEuaWRdID0geyAkc2V0OiBtZXRhIH0sCiAgICAgICAgICAgICAgICBfYSksCiAgICAgICAgfSk7CiAgICB9LAp9KSwgX2UudHlwZSksIHRlbXBsYXRlVXBkYXRlID0gX2UuYWN0aW9uLCB0ZW1wbGF0ZVVwZGF0ZVJlZHVjZXIgPSBfZS5yZWR1Y2VyOwpleHBvcnQgdmFyIFRFTVBMQVRFX1NIQVJFID0gKF9mID0gY3JlYXRlKCdURU1QTEFURV9TSEFSRScsIHsKICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChzdGF0ZSwgbWV0YSwgcGF5bG9hZCkgewogICAgICAgIHZhciBfYTsKICAgICAgICByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgICAgIHRlbXBsYXRlczogKF9hID0ge30sCiAgICAgICAgICAgICAgICBfYVttZXRhLnRlbXBsYXRlSWRdID0gewogICAgICAgICAgICAgICAgICAgIHRlYW06IHsKICAgICAgICAgICAgICAgICAgICAgICAgJHNldDogcGF5bG9hZC50ZWFtLAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgdXBkYXRlZDogewogICAgICAgICAgICAgICAgICAgICAgICAkc2V0OiBwYXlsb2FkLnVwZGF0ZWQsCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBfYSksCiAgICAgICAgfSk7CiAgICB9LAp9KSwgX2YudHlwZSksIHRlbXBsYXRlU2hhcmUgPSBfZi5hY3Rpb24sIHRlbXBsYXRlU2hhcmVSZWR1Y2VyID0gX2YucmVkdWNlcjsKZXhwb3J0IHZhciBURU1QTEFURV9ERUxFVEUgPSAoX2cgPSBjcmVhdGUoJ1RFTVBMQVRFX0RFTEVURScsIHsKICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChzdGF0ZSwgbWV0YSwgcGF5bG9hZCkgewogICAgICAgIHJldHVybiB1cGRhdGUoc3RhdGUsIHsKICAgICAgICAgICAgdGVtcGxhdGVzOiB7CiAgICAgICAgICAgICAgICAkdW5zZXQ6IFtwYXlsb2FkICYmIHBheWxvYWQgfHwgbWV0YS5pZF0sCiAgICAgICAgICAgIH0sCiAgICAgICAgfSk7CiAgICB9LAp9KSwgX2cudHlwZSksIHRlbXBsYXRlRGVsZXRlID0gX2cuYWN0aW9uLCB0ZW1wbGF0ZURlbGV0ZVJlZHVjZXIgPSBfZy5yZWR1Y2VyOwpleHBvcnQgdmFyIFRFTVBMQVRFX0FUVEFDSE1FTlRfQUREID0gKF9oID0gY3JlYXRlKCdURU1QTEFURV9BVFRBQ0hNRU5UX0FERCcsIHsKICAgIHN0YXJ0OiBmdW5jdGlvbiAoc3RhdGUsIG1ldGEpIHsKICAgICAgICB2YXIgX2EsIF9iOwogICAgICAgIHJldHVybiB1cGRhdGUoY3JlYXRlTWV0YU5lc3Rpbmcoc3RhdGUsIG1ldGEucmVzb3VyY2VJZCksIHsKICAgICAgICAgICAgYXR0YWNobWVudE1ldGFzOiAoX2EgPSB7fSwgX2FbbWV0YS5yZXNvdXJjZUlkXSA9IHsgJG1lcmdlOiAoX2IgPSB7fSwgX2JbbWV0YS5hdHRhY2htZW50XSA9IHJlc291cmNlT2sobWV0YSksIF9iKSB9LCBfYSksCiAgICAgICAgfSk7CiAgICB9LAogICAgc3VjY2VzczogZnVuY3Rpb24gKHN0YXRlLCBtZXRhLCBwYXlsb2FkKSB7CiAgICAgICAgdmFyIF9hLCBfYjsKICAgICAgICByZXR1cm4gdXBkYXRlKGNyZWF0ZU1ldGFOZXN0aW5nKHN0YXRlLCBtZXRhLnJlc291cmNlSWQpLCB7CiAgICAgICAgICAgIHRlbXBsYXRlczogKF9hID0ge30sCiAgICAgICAgICAgICAgICBfYVttZXRhLnJlc291cmNlSWRdID0geyBhdHRhY2htZW50czogeyAkcHVzaDogW3BheWxvYWRdIH0sCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgX2EpLAogICAgICAgICAgICBhdHRhY2htZW50TWV0YXM6IChfYiA9IHt9LCBfYlttZXRhLnJlc291cmNlSWRdID0geyAkdW5zZXQ6IFttZXRhLmF0dGFjaG1lbnRdIH0sIF9iKSwKICAgICAgICB9KTsKICAgIH0sCiAgICBmYWlsdXJlOiBmdW5jdGlvbiAoc3RhdGUsIG1ldGEsIGVycm9yKSB7CiAgICAgICAgdmFyIF9hLCBfYjsKICAgICAgICByZXR1cm4gdXBkYXRlKGNyZWF0ZU1ldGFOZXN0aW5nKHN0YXRlLCBtZXRhLnJlc291cmNlSWQpLCB7CiAgICAgICAgICAgIGF0dGFjaG1lbnRNZXRhczogKF9hID0ge30sCiAgICAgICAgICAgICAgICBfYVttZXRhLnJlc291cmNlSWRdID0gKF9iID0ge30sCiAgICAgICAgICAgICAgICAgICAgX2JbbWV0YS5hdHRhY2htZW50XSA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgJHNldDogcmVzb3VyY2VGYWlsZWQoZXJyb3IsIG1ldGEpLAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgX2IpLAogICAgICAgICAgICAgICAgX2EpLAogICAgICAgIH0pOwogICAgfSwKfSksIF9oLnR5cGUpLCB0ZW1wbGF0ZUF0dGFjaG1lbnRBZGQgPSBfaC5hY3Rpb24sIHRlbXBsYXRlQXR0YWNobWVudEFkZFJlZHVjZXIgPSBfaC5yZWR1Y2VyOwpleHBvcnQgdmFyIFRFTVBMQVRFX0FUVEFDSE1FTlRfQ09OVkVSVCA9IChfaiA9IGNyZWF0ZSgnVEVNUExBVEVfQVRUQUNITUVOVF9DT05WRVJUJywge30pLCBfai50eXBlKSwgdGVtcGxhdGVBdHRhY2htZW50Q29udmVydCA9IF9qLmFjdGlvbiwgdGVtcGxhdGVBdHRhY2htZW50Q29udmVydFJlZHVjZXIgPSBfai5yZWR1Y2VyOwpleHBvcnQgdmFyIFRFTVBMQVRFX0FUVEFDSE1FTlRfUkVNT1ZFID0gKF9rID0gY3JlYXRlKCdURU1QTEFURV9BVFRBQ0hNRU5UX1JFTU9WRScsIHsKICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChzdGF0ZSwgbWV0YSwgcGF5bG9hZCkgewogICAgICAgIHZhciBfYSwgX2I7CiAgICAgICAgdmFyIHRlbXBsYXRlID0gc2VsZWN0VGVtcGxhdGUoc3RhdGUsIG1ldGEucmVzb3VyY2VJZCk7CiAgICAgICAgaWYgKCF0ZW1wbGF0ZSkgewogICAgICAgICAgICByZXR1cm4gc3RhdGU7CiAgICAgICAgfQogICAgICAgIC8vIEZpbHRlciBhdHRhY2htZW50cwogICAgICAgIHZhciBuZXdBdHRhY2htZW50cyA9IHRlbXBsYXRlLmF0dGFjaG1lbnRzLmZpbHRlcihmdW5jdGlvbiAoYXR0YWNobWVudCkgewogICAgICAgICAgICByZXR1cm4gYXR0YWNobWVudC5pZCAhPT0gbWV0YS5hdHRhY2htZW50OwogICAgICAgIH0pOwogICAgICAgIHJldHVybiB1cGRhdGUoY3JlYXRlTWV0YU5lc3Rpbmcoc3RhdGUsIG1ldGEucmVzb3VyY2VJZCksIHsKICAgICAgICAgICAgdGVtcGxhdGVzOiAoX2EgPSB7fSwgX2FbbWV0YS5yZXNvdXJjZUlkXSA9IHsgYXR0YWNobWVudHM6IHsgJHNldDogbmV3QXR0YWNobWVudHMgfSB9LCBfYSksCiAgICAgICAgICAgIGF0dGFjaG1lbnRNZXRhczogKF9iID0ge30sIF9iW21ldGEucmVzb3VyY2VJZF0gPSB7ICR1bnNldDogW21ldGEuYXR0YWNobWVudF0gfSwgX2IpLAogICAgICAgIH0pOwogICAgfSwKfSksIF9rLnR5cGUpLCB0ZW1wbGF0ZUF0dGFjaG1lbnRSZW1vdmUgPSBfay5hY3Rpb24sIHRlbXBsYXRlQXR0YWNobWVudFJlbW92ZVJlZHVjZXIgPSBfay5yZWR1Y2VyOwpleHBvcnQgZGVmYXVsdCBbCiAgICB0ZW1wbGF0ZUF0dGFjaG1lbnRBZGRSZWR1Y2VyLAogICAgdGVtcGxhdGVBdHRhY2htZW50UmVtb3ZlUmVkdWNlciwKICAgIHRlbXBsYXRlRmV0Y2hSZWR1Y2VyLAogICAgdGVtcGxhdGVMaXN0UmVkdWNlciwKICAgIHRlbXBsYXRlQ3JlYXRlUmVkdWNlciwKICAgIHRlbXBsYXRlVXBkYXRlUmVkdWNlciwKICAgIHRlbXBsYXRlRGVsZXRlUmVkdWNlciwKICAgIHRlbXBsYXRlU2hhcmVSZWR1Y2VyLAogICAgdGVtcGxhdGVDb252ZXJ0UmVkdWNlciwKICAgIHRlbXBsYXRlQXR0YWNobWVudENvbnZlcnRSZWR1Y2VyLApdOwovLyBSZXR1cm5zIGFsbCB0ZW1wbGF0ZXMKZXhwb3J0IGZ1bmN0aW9uIHNlbGVjdFRlbXBsYXRlcyhzdGF0ZSkgewogICAgcmV0dXJuIE9iamVjdAogICAgICAgIC5rZXlzKHN0YXRlLnRlbXBsYXRlcykKICAgICAgICAucmVkdWNlKGZ1bmN0aW9uICh0ZW1wbGF0ZXMsIGtleSkgeyByZXR1cm4gdGVtcGxhdGVzLmNvbmNhdChbc3RhdGUudGVtcGxhdGVzW2tleV1dKTsgfSwgW10pOwp9CmV4cG9ydCBmdW5jdGlvbiBzZWxlY3RUZW1wbGF0ZShzdGF0ZSwgdGVtcGxhdGVJZCkgewogICAgcmV0dXJuIHN0YXRlLnRlbXBsYXRlc1t0ZW1wbGF0ZUlkXTsKfQo="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/templates.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/templates.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;AACxC,OAAO,MAAM,MAAM,qBAAqB,CAAC;AAEzC,OAAO,EAAE,KAAK,EAAE,MAAM,QAAQ,CAAC;AAC/B,OAAO,EAAE,UAAU,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AAE/D,SAAS,iBAAiB,CAAC,KAAiB,EAAE,QAAgB;;IAC5D,IAAI,KAAK,CAAC,eAAe,CAAC,QAAQ,CAAC,EAAE;QACnC,OAAO,KAAK,CAAC;KACd;IAED,OAAO,MAAM,CAAC,KAAK,EAAE;QACnB,eAAe;YACb,GAAC,QAAQ,IAAG;gBACV,IAAI,EAAE,EAAE;aACT;eACF;KACF,CAAC,CAAC;AACL,CAAC;AAED,MAAM,CACJ,IAAA;;;;;;;;;;;YAAoB,EACpB,yBAAqB,EACrB,iCAA6B,CAW5B;AAEH,MAAM,CACJ,IAAA;;;;;;;YAAmB,EACnB,wBAAoB,EACpB,gCAA4B,CAY3B;AAEH,MAAM,CACJ,IAAA;;;;;;;;;;;YAAqB,EACrB,0BAAsB,EACtB,kCAA8B,CAU7B;AAEH,MAAM,CACJ,IAAA,iEAAsB,EACtB,2BAAuB,EACvB,mCAA+B,CACsB;AAEvD,MAAM,CACJ,IAAA;;;;;;;;;YAAqB,EACrB,0BAAsB,EACtB,kCAA8B,CAQ7B;AAOH,MAAM,CACJ,IAAA;;;;;;;;;;;;;;;;YAAoB,EACpB,yBAAqB,EACrB,iCAA6B,CAe5B;AAEH,MAAM,CACJ,IAAA;;;;;;;;YAAqB,EACrB,0BAAsB,EACtB,kCAA8B,CAS7B;AAEH,MAAM,CACJ,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAA6B,EAC7B,iCAA6B,EAC7B,yCAAqC,CA2BpC;AAOH,MAAM,CACJ,IAAA,uFAAiC,EACjC,qCAAiC,EACjC,6CAAyC,CAExC;AAEH,MAAM,CACJ,IAAA;;;;;;;;;;;;;;;;YAAgC,EAChC,oCAAgC,EAChC,4CAAwC,CAkBvC;AAEH,eAAe;IACb,4BAA4B;IAC5B,+BAA+B;IAC/B,oBAAoB;IACpB,mBAAmB;IACnB,qBAAqB;IACrB,qBAAqB;IACrB,qBAAqB;IACrB,oBAAoB;IACpB,sBAAsB;IACtB,gCAAgC;CACjC,CAAC;AAEF,wBAAwB;AACxB,MAAM,UAAU,eAAe,CAAC,KAAiB;IAC/C,OAAO,MAAM;SACV,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;SACrB,MAAM,CACL,UAAC,SAAS,EAAE,GAAG,IAAK,OAAA,SAAS,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAxC,CAAwC,EAC5D,EAAgB,CACnB,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,cAAc,CAAC,KAAiB,EAAE,UAAkB;IAClE,OAAO,KAAK,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;AACrC,CAAC","sourcesContent":["import { create } from '@src/lib/redux';\nimport update from 'immutability-helper';\nimport { StoreState, Template, AttachmentMeta, Attachment } from '@src/types';\nimport { keyBy } from 'lodash';\nimport { resourceOk, resourceFailed } from '@src/lib/resource';\n\nfunction createMetaNesting(state: StoreState, resource: string): StoreState {\n  if (state.attachmentMetas[resource]) {\n    return state;\n  }\n\n  return update(state, {\n    attachmentMetas: {\n      [resource]: {\n        $set: {},\n      },\n    },\n  });\n}\n\nexport const {\n  type: TEMPLATE_FETCH,\n  action: templateFetch,\n  reducer: templateFetchReducer,\n} = create<string, string>('TEMPLATE_FETCH', {\n  success: (state, meta, payload) => {\n    return update(state, {\n      templates: {\n        [meta]: {\n          $set: payload,\n        },\n      },\n    });\n  },\n});\n\nexport const {\n  type: TEMPLATE_LIST,\n  action: templateList,\n  reducer: templateListReducer,\n} = create<string, Template[]>('TEMPLATE_LIST', {\n  success: (state, meta, payload) => {\n    const templates = keyBy(\n      payload,\n      template => template.id,\n    );\n\n    return update(state, {\n      templates: { $set: templates },\n    });\n  },\n});\n\nexport const {\n  type: TEMPLATE_CREATE,\n  action: templateCreate,\n  reducer: templateCreateReducer,\n} = create<Template, Template>('TEMPLATE_CREATE', {\n  success: (state, meta, payload) =>\n    update(state, {\n      templates: {\n        [payload.id]: {\n          $set: payload,\n        },\n      },\n    }),\n});\n\nexport const {\n  type: TEMPLATE_CONVERT,\n  action: templateConvert,\n  reducer: templateConvertReducer,\n} = create<Template, Template>('TEMPLATE_CONVERT', {});\n\nexport const {\n  type: TEMPLATE_UPDATE,\n  action: templateUpdate,\n  reducer: templateUpdateReducer,\n} = create<Template, Template>('TEMPLATE_UPDATE', {\n  start: (state, meta) =>\n    update(state, {\n      templates: {\n        [meta.id]: { $set: meta },\n      },\n    }),\n});\n\nexport interface TemplateShareMeta {\n  templateId: string;\n  teamId: string;\n}\n\nexport const {\n  type: TEMPLATE_SHARE,\n  action: templateShare,\n  reducer: templateShareReducer,\n} = create<TemplateShareMeta, Template>('TEMPLATE_SHARE', {\n  success: (state, meta, payload) =>\n    update(state, {\n      templates: {\n        [meta.templateId]: {\n          team: {\n            $set: payload.team,\n          },\n          updated: {\n            $set: payload.updated,\n          },\n        },\n      },\n    }),\n});\n\nexport const {\n  type: TEMPLATE_DELETE,\n  action: templateDelete,\n  reducer: templateDeleteReducer,\n} = create<Template, string>('TEMPLATE_DELETE', {\n  success: (state, meta, payload) => {\n    return update(state, {\n      templates: {\n        $unset: [payload && payload || meta.id],\n      },\n    });\n  },\n});\n\nexport const {\n  type: TEMPLATE_ATTACHMENT_ADD,\n  action: templateAttachmentAdd,\n  reducer: templateAttachmentAddReducer,\n} = create<AttachmentMeta, Attachment>('TEMPLATE_ATTACHMENT_ADD', {\n  start: (state, meta) => {\n    return update(createMetaNesting(state, meta.resourceId), {\n      attachmentMetas: { [meta.resourceId]: { $merge: { [meta.attachment]: resourceOk(meta) } } },\n    });\n  },\n  success: (state, meta, payload) => {\n    return update(createMetaNesting(state, meta.resourceId), {\n      templates: {\n        [meta.resourceId]: { attachments: { $push: [payload] },\n        },\n      },\n      attachmentMetas: { [meta.resourceId]: { $unset: [meta.attachment] } },\n    });\n  },\n  failure: (state, meta, error) => {\n    return update(createMetaNesting(state, meta.resourceId), {\n      attachmentMetas: {\n        [meta.resourceId]: {\n          [meta.attachment]: {\n            $set: resourceFailed(error, meta),\n          },\n        },\n      },\n    });\n  },\n});\n\nexport interface TemplateAttachmentConversionMeta {\n  attachments: Attachment[];\n  template: string;\n}\n\nexport const {\n  type: TEMPLATE_ATTACHMENT_CONVERT,\n  action: templateAttachmentConvert,\n  reducer: templateAttachmentConvertReducer,\n} = create<TemplateAttachmentConversionMeta, Attachment[]>('TEMPLATE_ATTACHMENT_CONVERT', {\n});\n\nexport const {\n  type: TEMPLATE_ATTACHMENT_REMOVE,\n  action: templateAttachmentRemove,\n  reducer: templateAttachmentRemoveReducer,\n} = create<AttachmentMeta, null>('TEMPLATE_ATTACHMENT_REMOVE', {\n  success: (state, meta, payload) => {\n    const template = selectTemplate(state, meta.resourceId);\n    if (!template) {\n      return state;\n    }\n\n    // Filter attachments\n    const newAttachments = template.attachments.filter((attachment: Attachment) =>\n      attachment.id !== meta.attachment,\n    );\n\n    return update(createMetaNesting(state, meta.resourceId), {\n      templates: { [meta.resourceId]: { attachments: { $set: newAttachments } } },\n      attachmentMetas: { [meta.resourceId]: { $unset: [meta.attachment] } },\n    });\n  },\n});\n\nexport default [\n  templateAttachmentAddReducer,\n  templateAttachmentRemoveReducer,\n  templateFetchReducer,\n  templateListReducer,\n  templateCreateReducer,\n  templateUpdateReducer,\n  templateDeleteReducer,\n  templateShareReducer,\n  templateConvertReducer,\n  templateAttachmentConvertReducer,\n];\n\n// Returns all templates\nexport function selectTemplates(state: StoreState) {\n  return Object\n    .keys(state.templates)\n    .reduce(\n      (templates, key) => templates.concat([state.templates[key]]),\n      [] as Template[],\n  );\n}\n\nexport function selectTemplate(state: StoreState, templateId: string): Template | undefined {\n  return state.templates[templateId];\n}\n"]}]}