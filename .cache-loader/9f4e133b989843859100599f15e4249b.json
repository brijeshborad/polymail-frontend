{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/sync/ThreadSync.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/sync/ThreadSync.ts","mtime":1675280254126},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkgewogICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikgewogICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwKICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fAogICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTsKICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTsKICAgIH07CiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHsKICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpOwogICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfQogICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTsKICAgIH07Cn0pKCk7CmltcG9ydCBDYWNoZSwgeyBTdG9yZXMgfSBmcm9tICdAc3JjL2xpYi9kYic7CmltcG9ydCB7IFRocmVhZEJveCB9IGZyb20gJ0BzcmMvdHlwZXMnOwppbXBvcnQgeyBUaHJlYWRDbGllbnQgfSBmcm9tICdAc3JjL2FwaS90aHJlYWRzJzsKaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnOwppbXBvcnQgeyBBUElTeW5jIH0gZnJvbSAnLi9BUElTeW5jJzsKaW1wb3J0IHsgc2VuZFRocmVhZHNSZWZyZXNoZWQsIHNlbmRUaHJlYWRVcGRhdGVkLCB9IGZyb20gJ0BzcmMvd29ya2VyL2JyaWRnZS93b3JrZXJFdmVudHMnOwppbXBvcnQgYnVzIGZyb20gJ0BzcmMvd29ya2VyL2J1cyc7CmltcG9ydCB7IHNhdmVUaHJlYWRzVG9TZWFyY2hEYiB9IGZyb20gJ0BzcmMvbGliL3NlYXJjaERiJzsKaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnOwpleHBvcnQgdmFyIGxpc3RUaHJlYWRzQnlBY2NvdW50UGFnZVNpemUgPSA1MDsKdmFyIFRocmVhZFN5bmMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7CiAgICBfX2V4dGVuZHMoVGhyZWFkU3luYywgX3N1cGVyKTsKICAgIC8vIC0gYXBwIGJyaWRnZSBpbnRlcmZhY2UKICAgIGZ1bmN0aW9uIFRocmVhZFN5bmMoYWNjb3VudCwgYXBpKSB7CiAgICAgICAgaWYgKGFwaSA9PT0gdm9pZCAwKSB7IGFwaSA9IG5ldyBUaHJlYWRDbGllbnQoKTsgfQogICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsICdUaHJlYWRTeW5jLScgKyBhY2NvdW50LCBTdG9yZXMuVGhyZWFkcywgZmFsc2UpIHx8IHRoaXM7CiAgICAgICAgX3RoaXMubGFzdFJlZnJlc2ggPSBuZXcgRGF0ZSgpOwogICAgICAgIF90aGlzLmFjY291bnQgPSBhY2NvdW50OwogICAgICAgIF90aGlzLmFwaSA9IGFwaTsKICAgICAgICBfdGhpcy5yZWZyZXNoQ291bnRlciA9IDA7CiAgICAgICAgX3RoaXMucmVmcmVzaFRocmVzaG9sZCA9IDIwMDA7CiAgICAgICAgcmV0dXJuIF90aGlzOwogICAgfQogICAgVGhyZWFkU3luYy5wcm90b3R5cGUuc2F2ZUNhY2hlID0gZnVuY3Rpb24gKHRocmVhZHMpIHsKICAgICAgICByZXR1cm4gQ2FjaGUubG9hZChTdG9yZXMuVGhyZWFkcywgdGhyZWFkcykKICAgICAgICAgICAgLmZsYXRNYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gc2F2ZVRocmVhZHNUb1NlYXJjaERiKHRocmVhZHMpOyB9KQogICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKCkgeyByZXR1cm4gT2JzZXJ2YWJsZS5vZihudWxsKTsgfSk7CiAgICB9OwogICAgVGhyZWFkU3luYy5wcm90b3R5cGUuZmV0Y2hOZXh0UGFnZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gdGhpcy5hcGkubGlzdCh0aGlzLmFjY291bnQsIGxpc3RUaHJlYWRzQnlBY2NvdW50UGFnZVNpemUsIHRoaXMub2Zmc2V0KTsKICAgIH07CiAgICBUaHJlYWRTeW5jLnByb3RvdHlwZS5uZXh0UGFnZU9mZnNldCA9IGZ1bmN0aW9uIChtb2RlbHMpIHsKICAgICAgICByZXR1cm4gbW9kZWxzW21vZGVscy5sZW5ndGggLSAxXS5pZDsKICAgIH07CiAgICBUaHJlYWRTeW5jLnByb3RvdHlwZS5pc0NvbXBsZXRlZCA9IGZ1bmN0aW9uIChtb2RlbHMpIHsKICAgICAgICByZXR1cm4gbW9kZWxzLmxlbmd0aCA8IGxpc3RUaHJlYWRzQnlBY2NvdW50UGFnZVNpemU7CiAgICB9OwogICAgLy8gRmlsbCBpbmJveCBmaXJzdAogICAgVGhyZWFkU3luYy5wcm90b3R5cGUuYmVmb3JlRmlyc3QgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgICByZXR1cm4gdGhpcy5hcGkubGlzdEluYm94KHRoaXMuYWNjb3VudCkKICAgICAgICAgICAgLmZsYXRNYXAoZnVuY3Rpb24gKHRocmVhZHMpIHsKICAgICAgICAgICAgcmV0dXJuIF90aGlzLnNhdmVDYWNoZSh0aHJlYWRzKQogICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB0aHJlYWRzLmZvckVhY2goZnVuY3Rpb24gKHRocmVhZCkgeyByZXR1cm4gc2VuZFRocmVhZFVwZGF0ZWQodGhyZWFkKTsgfSk7CiAgICAgICAgICAgICAgICBidXMudXBkYXRlTWFpbENvdW50KF90aGlzLmFjY291bnQpOwogICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgfTsKICAgIFRocmVhZFN5bmMucHJvdG90eXBlLm9uU2F2ZSA9IGZ1bmN0aW9uIChtb2RlbHMpIHsKICAgICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICAgIC8vIE5vdGlmeSBtYWlsQ291bnRCb3QgdG8gcmVzZXQgbGlzdHMKICAgICAgICBtb2RlbHMuZm9yRWFjaChmdW5jdGlvbiAodCkgewogICAgICAgICAgICBpZiAodC5saXN0ICYmICF0LnJlYWQpIHsKICAgICAgICAgICAgICAgIGJ1cy51cGRhdGVMaXN0VW5yZWFkQ291bnQodC5hY2NvdW50LCB0Lmxpc3QpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgaWYgKHQuc3RhcnJlZCB8fCB0LmJveCA9PT0gVGhyZWFkQm94LkluYm94IHx8IHQuYm94ID09PSBUaHJlYWRCb3guTGF0ZXIgfHwgdC53YWl0aW5nSW5kZXgpIHsKICAgICAgICAgICAgICAgIC8vIE9ubHkgbmVlZCB0byByZWZyZXNoIGNvdW50cyB3aGVuIGluYm94LCBzdGFycmVkLAogICAgICAgICAgICAgICAgLy8gICBsYXRlciBib3gsIG9yIHRocmVhZHMgd2l0aCBwZW5kaW5nIEZVUiBhcmUgc3luY2VkCiAgICAgICAgICAgICAgICBfdGhpcy5yZWZyZXNoQ291bnRlciArPSAxOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgLy8gUmVmcmVzaCBtYWlsYm94IGNvdW50cyBpZiBpdHMgYmVlbiBvdmVyIGEgbWludXRlCiAgICAgICAgdmFyIHNob3VsZFJlZnJlc2ggPSB0aGlzLnJlZnJlc2hDb3VudGVyID4gMCAmJiBtb21lbnQoKS5kaWZmKHRoaXMubGFzdFJlZnJlc2gsICdzZWNvbmQnKSA+IDYwOwogICAgICAgIGlmICh0aGlzLnJlZnJlc2hDb3VudGVyID49IHRoaXMucmVmcmVzaFRocmVzaG9sZCB8fCBzaG91bGRSZWZyZXNoKSB7CiAgICAgICAgICAgIHRoaXMubGFzdFJlZnJlc2ggPSBuZXcgRGF0ZSgpOwogICAgICAgICAgICBzZW5kVGhyZWFkc1JlZnJlc2hlZCh0aGlzLmFjY291bnQpOwogICAgICAgICAgICBidXMudXBkYXRlTWFpbENvdW50KHRoaXMuYWNjb3VudCk7CiAgICAgICAgICAgIHRoaXMucmVmcmVzaENvdW50ZXIgPSAwOwogICAgICAgIH0KICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS5vZihudWxsKTsKICAgIH07CiAgICBUaHJlYWRTeW5jLnByb3RvdHlwZS5vbkNvbXBsZXRlID0gZnVuY3Rpb24gKCkgewogICAgICAgIC8vIFJlZnJlc2ggY291bnQgYXQgZW5kIG9mIG1haWwgc3luYwogICAgICAgIHNlbmRUaHJlYWRzUmVmcmVzaGVkKHRoaXMuYWNjb3VudCk7CiAgICAgICAgYnVzLnVwZGF0ZU1haWxDb3VudCh0aGlzLmFjY291bnQpOwogICAgICAgIHJldHVybiBPYnNlcnZhYmxlLm9mKG51bGwpOwogICAgfTsKICAgIHJldHVybiBUaHJlYWRTeW5jOwp9KEFQSVN5bmMpKTsKZXhwb3J0IHsgVGhyZWFkU3luYyB9OwpleHBvcnQgZGVmYXVsdCBUaHJlYWRTeW5jOwo="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/sync/ThreadSync.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/sync/ThreadSync.ts"],"names":[],"mappings":"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","sourcesContent":["import Cache, { Stores } from '@src/lib/db';\nimport { Thread, ThreadBox } from '@src/types';\nimport { ThreadAPI, ThreadClient } from '@src/api/threads';\nimport { Observable } from 'rxjs';\nimport { APISync } from './APISync';\nimport {\n  sendThreadsRefreshed, sendThreadUpdated,\n} from '@src/worker/bridge/workerEvents';\nimport bus from '@src/worker/bus';\nimport { saveThreadsToSearchDb } from '@src/lib/searchDb';\nimport moment from 'moment';\n\nexport const listThreadsByAccountPageSize = 50;\n\nexport class ThreadSync extends APISync<Thread> {\n\n  // State\n  account: string;\n  private refreshCounter: number;\n  private refreshThreshold: number;\n  private lastRefresh: Date = new Date();\n\n  // Dependencies\n  private api: ThreadAPI;\n  // - app bridge interface\n\n  constructor(\n    account: string,\n    api: ThreadAPI = new ThreadClient(),\n  ) {\n    super('ThreadSync-' + account, Stores.Threads, false);\n    this.account = account;\n    this.api = api;\n    this.refreshCounter = 0;\n    this.refreshThreshold = 2000;\n  }\n\n  protected saveCache(threads: Thread[]): Observable<any> {\n    return Cache.load(Stores.Threads, threads)\n      .flatMap(() => saveThreadsToSearchDb(threads))\n      .catch(() => Observable.of(null));\n  }\n\n  protected fetchNextPage(): Observable<Thread[]> {\n    return this.api.list(this.account, listThreadsByAccountPageSize, this.offset);\n  }\n\n  protected nextPageOffset(models: Thread[]): string {\n    return models[models.length - 1].id;\n  }\n\n  protected isCompleted(models: Thread[]): boolean {\n    return models.length < listThreadsByAccountPageSize;\n  }\n\n  // Fill inbox first\n  protected beforeFirst(): Observable<null> {\n    return this.api.listInbox(this.account)\n      .flatMap(threads =>\n        this.saveCache(threads)\n          .map(() => {\n            threads.forEach(thread => sendThreadUpdated(thread));\n            bus.updateMailCount(this.account);\n            return null;\n          }),\n      );\n  }\n\n  protected onSave(models: Thread[]): Observable<null> {\n    // Notify mailCountBot to reset lists\n    models.forEach((t) => {\n      if (t.list && !t.read) {\n        bus.updateListUnreadCount(t.account, t.list);\n      } else if (\n        t.starred || t.box === ThreadBox.Inbox || t.box === ThreadBox.Later || t.waitingIndex\n      ) {\n        // Only need to refresh counts when inbox, starred,\n        //   later box, or threads with pending FUR are synced\n        this.refreshCounter += 1;\n      }\n    });\n\n    // Refresh mailbox counts if its been over a minute\n    const shouldRefresh = this.refreshCounter > 0 && moment().diff(this.lastRefresh, 'second') > 60;\n\n    if (this.refreshCounter >= this.refreshThreshold || shouldRefresh) {\n      this.lastRefresh = new Date();\n      sendThreadsRefreshed(this.account);\n      bus.updateMailCount(this.account);\n      this.refreshCounter = 0;\n    }\n    return Observable.of(null);\n  }\n\n  protected onComplete(): Observable<null> {\n    // Refresh count at end of mail sync\n    sendThreadsRefreshed(this.account);\n    bus.updateMailCount(this.account);\n    return Observable.of(null);\n  }\n}\n\nexport default ThreadSync;\n"]}]}