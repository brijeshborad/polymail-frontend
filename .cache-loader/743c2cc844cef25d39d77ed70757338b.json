{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/components/RightSidebar/components/Calendar/index.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/components/RightSidebar/components/Calendar/index.ts","mtime":1675280254027},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JzsKaW1wb3J0IHsgQ29tbWFuZENvbnRyb2xUeXBlIH0gZnJvbSAnQHNyYy90eXBlcyc7CmltcG9ydCBDYWxlbmRhciBmcm9tICcuL0NhbGVuZGFyJzsKaW1wb3J0IHsgY2FsZW5kYXJMaXN0LCBjYWxlbmRhckhpZGVUb2dnbGUsIENhbGVuZGFyTGlzdFRyaWdnZXIsIHNlbGVjdFdyaXRhYmxlQ2FsZW5kYXJzLCBjYWxlbmRhckV2ZW50TGlzdCwgfSBmcm9tICdAc3JjL2R1Y2tzL2NhbGVuZGFycyc7CmltcG9ydCB7IGNvbW1hbmRDb250cm9sU2hvdyB9IGZyb20gJ0BzcmMvZHVja3MvY29tbWFuZENvbnRyb2wnOwp2YXIgbWFwU3RhdGVUb1Byb3BzID0gZnVuY3Rpb24gKHN0YXRlKSB7CiAgICByZXR1cm4gewogICAgICAgIHNlbGVjdGVkVGhyZWFkOiBzdGF0ZS5zZWxlY3RlZFRocmVhZCwKICAgICAgICAvLyBOT1RFKFNIQUhBTik6IERpc2FibGluZyBhY2NvdW50IGZpbHRlcmluZywgYXMgdGhpcyBjYXVzZXMgY2FsZW5kYXJzIHRvIGdldCBmaWx0ZXJlZCwKICAgICAgICAvLyAgd2hpY2ggaXMgYSBiZWhhdmlvciB3ZSBkb24ndCB3YW50LgogICAgICAgIC8vIGFjY291bnQ6IHN0YXRlLm1haWxib3guYWNjb3VudCwKICAgICAgICBjYWxlbmRhcnM6IHNlbGVjdFdyaXRhYmxlQ2FsZW5kYXJzKHN0YXRlKSwKICAgICAgICBjYWxlbmRhckV2ZW50czogc3RhdGUuY2FsZW5kYXJFdmVudHMucnNiLAogICAgICAgIHByb3Bvc2VkQ2FsZW5kYXJFdmVudDogc3RhdGUuc2VsZWN0ZWRDYWxlbmRhckV2ZW50LAogICAgfTsKfTsKdmFyIG1hcERpc3BhdGNoVG9Qcm9wcyA9IGZ1bmN0aW9uIChkaXNwYXRjaCkgeyByZXR1cm4gKHsKICAgIGxpc3RDYWxlbmRhcnM6IGZ1bmN0aW9uIChhY2NvdW50KSB7IHJldHVybiBkaXNwYXRjaChjYWxlbmRhckxpc3QoeyB0eXBlOiBDYWxlbmRhckxpc3RUcmlnZ2VyLkNsaWVudEluY2x1ZGluZ0V2ZW50cywgYWNjb3VudDogYWNjb3VudCB9KSk7IH0sCiAgICB0b2dnbGVDYWxlbmRhckhpZGU6IGZ1bmN0aW9uIChjYWxlbmRhcikgeyByZXR1cm4gZGlzcGF0Y2goY2FsZW5kYXJIaWRlVG9nZ2xlKGNhbGVuZGFyKSk7IH0sCiAgICBvcGVuQ2FsZW5kYXI6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRpc3BhdGNoKGNvbW1hbmRDb250cm9sU2hvdyhDb21tYW5kQ29udHJvbFR5cGUuQ2FsZW5kYXIpKTsgfSwKICAgIGxpc3RDYWxlbmRhckV2ZW50czogZnVuY3Rpb24gKHJhbmdlKSB7IHJldHVybiBkaXNwYXRjaChjYWxlbmRhckV2ZW50TGlzdChyYW5nZSkpOyB9LAp9KTsgfTsKZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcykoQ2FsZW5kYXIpOwo="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/components/RightSidebar/components/Calendar/index.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/components/RightSidebar/components/Calendar/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;AAEtC,OAAO,EAAE,kBAAkB,EAAc,MAAM,YAAY,CAAC;AAC5D,OAAO,QAAuC,MAAM,YAAY,CAAC;AAEjE,OAAO,EACL,YAAY,EAAE,kBAAkB,EAAE,mBAAmB,EACrD,uBAAuB,EAA0B,iBAAiB,GACnE,MAAM,sBAAsB,CAAC;AAC9B,OAAO,EAAE,kBAAkB,EAAE,MAAM,2BAA2B,CAAC;AAE/D,IAAM,eAAe,GAAG,UAAC,KAAiB;IACxC,OAAO;QACL,cAAc,EAAE,KAAK,CAAC,cAAc;QACpC,uFAAuF;QACvF,sCAAsC;QACtC,kCAAkC;QAClC,SAAS,EAAE,uBAAuB,CAAC,KAAK,CAAC;QACzC,cAAc,EAAE,KAAK,CAAC,cAAc,CAAC,GAAG;QACxC,qBAAqB,EAAE,KAAK,CAAC,qBAAqB;KACnD,CAAC;AACJ,CAAC,CAAC;AAEF,IAAM,kBAAkB,GAAG,UAAC,QAA8B,IAAoB,OAAA,CAAC;IAC7E,aAAa,EAAE,UAAC,OAAgB,IAAK,OAAA,QAAQ,CAC3C,YAAY,CAAC,EAAE,IAAI,EAAE,mBAAmB,CAAC,qBAAqB,EAAE,OAAO,SAAA,EAAE,CAAC,CAC3E,EAFoC,CAEpC;IACD,kBAAkB,EAAE,UAAC,QAAgB,IAAK,OAAA,QAAQ,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC,EAAtC,CAAsC;IAChF,YAAY,EAAE,cAAM,OAAA,QAAQ,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC,EAAzD,CAAyD;IAC7E,kBAAkB,EAAE,UAAC,KAA6B,IAAK,OAAA,QAAQ,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,EAAlC,CAAkC;CAC1F,CAAC,EAP4E,CAO5E,CAAC;AAEH,eAAe,OAAO,CAA4B,eAAe,EAAE,kBAAkB,CAAC,CACpF,QAAQ,CACT,CAAC","sourcesContent":["import { connect } from 'react-redux';\n\nimport { CommandControlType, StoreState } from '@src/types';\nimport Calendar, { StateProps, DispatchProps } from './Calendar';\nimport { Dispatch } from 'redux';\nimport {\n  calendarList, calendarHideToggle, CalendarListTrigger,\n  selectWritableCalendars, CalendarEventRangeMeta, calendarEventList,\n} from '@src/ducks/calendars';\nimport { commandControlShow } from '@src/ducks/commandControl';\n\nconst mapStateToProps = (state: StoreState): StateProps => {\n  return {\n    selectedThread: state.selectedThread,\n    // NOTE(SHAHAN): Disabling account filtering, as this causes calendars to get filtered,\n    //  which is a behavior we don't want.\n    // account: state.mailbox.account,\n    calendars: selectWritableCalendars(state),\n    calendarEvents: state.calendarEvents.rsb,\n    proposedCalendarEvent: state.selectedCalendarEvent,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<StoreState>): DispatchProps => ({\n  listCalendars: (account?: string) => dispatch(\n    calendarList({ type: CalendarListTrigger.ClientIncludingEvents, account }),\n  ),\n  toggleCalendarHide: (calendar: string) => dispatch(calendarHideToggle(calendar)),\n  openCalendar: () => dispatch(commandControlShow(CommandControlType.Calendar)),\n  listCalendarEvents: (range: CalendarEventRangeMeta) => dispatch(calendarEventList(range)),\n});\n\nexport default connect<StateProps, DispatchProps>(mapStateToProps, mapDispatchToProps)(\n  Calendar,\n);\n"]}]}