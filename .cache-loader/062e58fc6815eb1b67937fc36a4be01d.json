{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/bridge/middleware.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/bridge/middleware.ts","mtime":1675280254123},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgQVVUSF9MT0dJTiwgQVVUSF9MT0dPVVQsIEFVVEhfVEZBX0NPREVfVkFMSURBVEUsIEFVVEhfTE9HT1VUX0FMTCB9IGZyb20gJ0BzcmMvZHVja3MvYXV0aCc7CmltcG9ydCB7IE1FX0ZFVENILCBQUkVGRVJFTkNFU19VUERBVEUgfSBmcm9tICdAc3JjL2R1Y2tzL21lJzsKaW1wb3J0IHsgQWN0aW9uU3RhdHVzIH0gZnJvbSAnQHNyYy90eXBlcyc7CmltcG9ydCB7IFRIUkVBRF9VUERBVEUsIFRIUkVBRF9NT1ZFX1VORE8sIFRIUkVBRF9DT01NSVRTX1NVQk1JVCB9IGZyb20gJ0BzcmMvZHVja3MvdGhyZWFkcyc7CmltcG9ydCB7IERCX0NMRUFSLCBEQl9DTEVBUklOR19DQUNIRSB9IGZyb20gJ0BzcmMvZHVja3MvZGInOwppbXBvcnQgeyBzZW5kQWNjb3VudHNVcGRhdGVkLCBzZW5kQXV0aFVwZGF0ZWQsIHNlbmRDbGVhckNhY2hlLCBzZW5kQ29tbWl0U3VibWl0dGVkLCBzZW5kRmVhdHVyZXNVcGRhdGVkLCBzZW5kTWVVcGRhdGVkLCBzZW5kTG9nb3V0LCBzZW5kVW5kb01vdmUsIHNlbmRNYWlsQ291bnRVcGRhdGVkLCBzZW5kRmlsZVVwbG9hZFN1Ym1pdHRlZCwgc2VuZFdvcmtlckRyYWZ0VXBkYXRlZCwgc2VuZFdvcmtlckRyYWZ0U2VuZCwgc2VuZE1lc3NhZ2VCb2RpZXNTYXZlLCBzZW5kRHJhZnRVbmRvU2VudCwgc2VuZE9ubGluZSwgc2VuZEFsbG93RGJSZWNvbm5lY3QsIHNlbmRMaXN0c1VwZGF0ZWQsIHNlbmRQcmVmZXJlbmNlc1VwZGF0ZWQsIH0gZnJvbSAnLi9hcHBFdmVudHMnOwppbXBvcnQgeyBEUkFGVF9DUkVBVEUsIEFUVEFDSE1FTlRfTUVUQV9DUkVBVEUsIERSQUZUX1VQREFURV9CUk9BRENBU1QsIERSQUZUX1VQREFURSwgRFJBRlRfU0VORF9CUk9BRENBU1QsIERSQUZUX1NFTkRfVU5ETywgRFJBRlRfU0VORF9OT1csIH0gZnJvbSAnQHNyYy9kdWNrcy9kcmFmdHMnOwppbXBvcnQgeyBURUFNX0ZFVENIIH0gZnJvbSAnQHNyYy9kdWNrcy90ZWFtJzsKaW1wb3J0IHsgVG9rZW5UeXBlIH0gZnJvbSAnQHNyYy9hcGkvYXV0aCc7CmltcG9ydCB7IE1FU1NBR0VfQk9ESUVTX0ZFVENIIH0gZnJvbSAnQHNyYy9kdWNrcy9tZXNzYWdlQm9kaWVzJzsKaW1wb3J0IHsgT05MSU5FX1NFVCB9IGZyb20gJ0BzcmMvZHVja3MvYXBwJzsKLy8gY3JlYXRlQnJpZGdlTWlkZGxld2FyZSBpcyBhIHJlZHV4IG1pZGRsZXdhcmUgdGhhdCB0YWtlcyByZWR1eCBhY3Rpb25zLAovLyAgIGFuZCBzZW5kcyB0aGVtIG92ZXIgdGhlIGJyaWRnZSB0byB0aGUgd29ya2VyCmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVCcmlkZ2VNaWRkbGV3YXJlKHdvcmtlcikgewogICAgcmV0dXJuIGZ1bmN0aW9uIChhcGkpIHsKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHsKICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHsKICAgICAgICAgICAgICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHsKICAgICAgICAgICAgICAgICAgICAvLyBTZW5kIFRva2VuIHN0cmluZyB2YWx1ZSB0byBhdXRoVXBkYXRlZAogICAgICAgICAgICAgICAgICAgIGNhc2UgQVVUSF9URkFfQ09ERV9WQUxJREFURToKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGlvbi5zdGF0dXMgPT09IEFjdGlvblN0YXR1cy5TdWNjZXNzICYmIGFjdGlvbi5wYXlsb2FkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5kQXV0aFVwZGF0ZWQod29ya2VyLCBhY3Rpb24ucGF5bG9hZC50b2tlbik7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgLy8gT25seSBzZW5kIHRva2VuIGFzIEFwcCBFdmVudCB0byB3b3JrZXIgd2hlbiB0b2tlbiB0eXBlIGlzIG5vdCBiYXNpYwogICAgICAgICAgICAgICAgICAgIGNhc2UgQVVUSF9MT0dJTjoKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRmYU5lZWRlZCA9IGFjdGlvbi5wYXlsb2FkICYmIGFjdGlvbi5wYXlsb2FkLnR5cGUgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbi5wYXlsb2FkLnR5cGUgPT09IFRva2VuVHlwZS5CYXNpYzsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRva2VuID0gYWN0aW9uLnBheWxvYWQgJiYgYWN0aW9uLnBheWxvYWQudG9rZW47CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhY3Rpb24uc3RhdHVzID09PSBBY3Rpb25TdGF0dXMuU3VjY2VzcyAmJiAhdGZhTmVlZGVkICYmICEhdG9rZW4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRBdXRoVXBkYXRlZCh3b3JrZXIsIHRva2VuKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICBjYXNlIERCX0NMRUFSOgogICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgc3RhcnQgZXZlbnQgdXBkYXRlcyB0aGUgQ2xlYXJDYWNoZVN0YXR1cywgc28gd2Ugb25seQogICAgICAgICAgICAgICAgICAgICAgICAvLyB3YW50IHRvIHRyYW5zbWl0IHRoZSBzdWNjZXNzIGV2ZW50IHRvIHRoZSB3b3JrZXIKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGlvbi5zdGF0dXMgPT09IEFjdGlvblN0YXR1cy5TdWNjZXNzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5kQ2xlYXJDYWNoZSh3b3JrZXIpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIGNhc2UgREJfQ0xFQVJJTkdfQ0FDSEU6CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhY3Rpb24ubWV0YSA9PT0gdHJ1ZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VuZEFsbG93RGJSZWNvbm5lY3Qod29ya2VyLCBmYWxzZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5kQWxsb3dEYlJlY29ubmVjdCh3b3JrZXIsIHRydWUpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIGNhc2UgTUVfRkVUQ0g6CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhY3Rpb24uc3RhdHVzID09PSBBY3Rpb25TdGF0dXMuU3VjY2VzcykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VuZEFjY291bnRzVXBkYXRlZCh3b3JrZXIsIGFjdGlvbi5wYXlsb2FkLmFjY291bnRzKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRNZVVwZGF0ZWQod29ya2VyLCBhY3Rpb24ucGF5bG9hZC5tZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5kTGlzdHNVcGRhdGVkKHdvcmtlciwgYWN0aW9uLnBheWxvYWQubGlzdHMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VuZFByZWZlcmVuY2VzVXBkYXRlZCh3b3JrZXIsIGFjdGlvbi5wYXlsb2FkLnByZWZlcmVuY2VzKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICBjYXNlIFBSRUZFUkVOQ0VTX1VQREFURToKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGlvbi5zdGF0dXMgPT09IEFjdGlvblN0YXR1cy5TdWNjZXNzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5kUHJlZmVyZW5jZXNVcGRhdGVkKHdvcmtlciwgYWN0aW9uLnBheWxvYWQucHJlZmVyZW5jZXMsIGFjdGlvbi5wYXlsb2FkLmFjY291bnRzKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICBjYXNlIFRFQU1fRkVUQ0g6CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhY3Rpb24uc3RhdHVzID09PSBBY3Rpb25TdGF0dXMuU3VjY2VzcykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VuZEZlYXR1cmVzVXBkYXRlZCh3b3JrZXIsIGFjdGlvbi5wYXlsb2FkLmZlYXR1cmVzKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICBjYXNlIE9OTElORV9TRVQ6IC8vIFN0YXJ0IENvbW1pdFN5bmMgb24gb25saW5lIGV2ZW50CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhY3Rpb24uc3RhdHVzID09PSBBY3Rpb25TdGF0dXMuU3RhcnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRPbmxpbmUod29ya2VyKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICBjYXNlIFRIUkVBRF9DT01NSVRTX1NVQk1JVDoKICAgICAgICAgICAgICAgICAgICBjYXNlIERSQUZUX0NSRUFURToKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGlvbi5zdGF0dXMgPT09IEFjdGlvblN0YXR1cy5TdWNjZXNzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5kQ29tbWl0U3VibWl0dGVkKHdvcmtlcik7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgY2FzZSBBVFRBQ0hNRU5UX01FVEFfQ1JFQVRFOgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aW9uLnN0YXR1cyA9PT0gQWN0aW9uU3RhdHVzLlN1Y2Nlc3MpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRGaWxlVXBsb2FkU3VibWl0dGVkKHdvcmtlcik7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgY2FzZSBEUkFGVF9TRU5EX1VORE86CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhY3Rpb24uc3RhdHVzID09PSBBY3Rpb25TdGF0dXMuU3RhcnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbmREcmFmdFVuZG9TZW50KHdvcmtlciwgYWN0aW9uLm1ldGEpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIGNhc2UgRFJBRlRfVVBEQVRFOgogICAgICAgICAgICAgICAgICAgIGNhc2UgRFJBRlRfU0VORF9OT1c6CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhY3Rpb24uc3RhdHVzID09PSBBY3Rpb25TdGF0dXMuU3RhcnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRDb21taXRTdWJtaXR0ZWQod29ya2VyKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICBjYXNlIERSQUZUX1VQREFURV9CUk9BRENBU1Q6CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhY3Rpb24uc3RhdHVzID09PSBBY3Rpb25TdGF0dXMuU3RhcnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRXb3JrZXJEcmFmdFVwZGF0ZWQod29ya2VyLCBhY3Rpb24ubWV0YSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgY2FzZSBEUkFGVF9TRU5EX0JST0FEQ0FTVDoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGlvbi5zdGF0dXMgPT09IEFjdGlvblN0YXR1cy5TdGFydCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VuZFdvcmtlckRyYWZ0U2VuZCh3b3JrZXIsIGFjdGlvbi5tZXRhKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRDb21taXRTdWJtaXR0ZWQod29ya2VyKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICBjYXNlIFRIUkVBRF9VUERBVEU6CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhY3Rpb24uc3RhdHVzID09PSBBY3Rpb25TdGF0dXMuU3VjY2VzcykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVucmVhZExpc3QgPSAoISFhY3Rpb24ucGF5bG9hZC5saXN0ICYmICFhY3Rpb24ucGF5bG9hZC5yZWFkKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gYWN0aW9uLnBheWxvYWQubGlzdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VuZE1haWxDb3VudFVwZGF0ZWQod29ya2VyLCBhY3Rpb24ucGF5bG9hZC5hY2NvdW50LCB1bnJlYWRMaXN0KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICBjYXNlIFRIUkVBRF9NT1ZFX1VORE86CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhY3Rpb24uc3RhdHVzID09PSBBY3Rpb25TdGF0dXMuU3RhcnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRVbmRvTW92ZSh3b3JrZXIsIGFjdGlvbi5tZXRhKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICBjYXNlIEFVVEhfTE9HT1VUX0FMTDoKICAgICAgICAgICAgICAgICAgICBjYXNlIEFVVEhfTE9HT1VUOgogICAgICAgICAgICAgICAgICAgICAgICBzZW5kTG9nb3V0KHdvcmtlcik7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIGNhc2UgTUVTU0FHRV9CT0RJRVNfRkVUQ0g6CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhY3Rpb24uc3RhdHVzID09PSBBY3Rpb25TdGF0dXMuU3VjY2VzcyAmJiBhY3Rpb24ucGF5bG9hZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJvZGllcyA9IGFjdGlvbi5wYXlsb2FkOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRocmVhZElkID0gYWN0aW9uLm1ldGE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5kTWVzc2FnZUJvZGllc1NhdmUod29ya2VyLCBib2RpZXMsIHRocmVhZElkKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBuZXh0KGFjdGlvbik7CiAgICAgICAgICAgIH07CiAgICAgICAgfTsKICAgIH07Cn0K"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/bridge/middleware.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/bridge/middleware.ts"],"names":[],"mappings":"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","sourcesContent":["import { Dispatch, Middleware, MiddlewareAPI } from 'redux';\nimport { AUTH_LOGIN, AUTH_LOGOUT, AUTH_TFA_CODE_VALIDATE, AUTH_LOGOUT_ALL } from '@src/ducks/auth';\nimport { ME_FETCH, PREFERENCES_UPDATE } from '@src/ducks/me';\nimport { StoreState, ActionStatus, MessageBody } from '@src/types';\nimport { THREAD_UPDATE, THREAD_MOVE_UNDO, THREAD_COMMITS_SUBMIT } from '@src/ducks/threads';\nimport { DB_CLEAR, DB_CLEARING_CACHE } from '@src/ducks/db';\n\nimport {\n  sendAccountsUpdated,\n  sendAuthUpdated,\n  sendClearCache,\n  sendCommitSubmitted,\n  sendFeaturesUpdated,\n  sendMeUpdated,\n  sendLogout,\n  sendUndoMove,\n  sendMailCountUpdated,\n  sendFileUploadSubmitted,\n  sendWorkerDraftUpdated,\n  sendWorkerDraftSend,\n  sendMessageBodiesSave,\n  sendDraftUndoSent,\n  sendOnline,\n  sendAllowDbReconnect,\n  sendListsUpdated,\n  sendPreferencesUpdated,\n} from './appEvents';\nimport {\n  DRAFT_CREATE,\n  ATTACHMENT_META_CREATE,\n  DRAFT_UPDATE_BROADCAST,\n  DRAFT_UPDATE,\n  DRAFT_SEND_BROADCAST,\n  DRAFT_SEND_UNDO,\n  DRAFT_SEND_NOW,\n} from '@src/ducks/drafts';\nimport { TEAM_FETCH } from '@src/ducks/team';\nimport { TokenType } from '@src/api/auth';\nimport { MESSAGE_BODIES_FETCH } from '@src/ducks/messageBodies';\nimport { ONLINE_SET } from '@src/ducks/app';\n\n// createBridgeMiddleware is a redux middleware that takes redux actions,\n//   and sends them over the bridge to the worker\nexport function createBridgeMiddleware(worker: Worker|SharedWorker.SharedWorker): Middleware {\n  return (api: MiddlewareAPI<any>) =>\n    (next: Dispatch<StoreState>) =>\n      (action: any): any => {\n        switch (action.type) {\n          // Send Token string value to authUpdated\n          case AUTH_TFA_CODE_VALIDATE:\n            if (action.status === ActionStatus.Success && action.payload) {\n              sendAuthUpdated(worker, action.payload.token);\n            }\n            break;\n          // Only send token as App Event to worker when token type is not basic\n          case AUTH_LOGIN:\n            const tfaNeeded = action.payload && action.payload.type &&\n              action.payload.type === TokenType.Basic;\n            const token = action.payload && action.payload.token;\n            if (action.status === ActionStatus.Success && !tfaNeeded && !!token) {\n              sendAuthUpdated(worker, token);\n            }\n            break;\n\n          case DB_CLEAR:\n            // The start event updates the ClearCacheStatus, so we only\n            // want to transmit the success event to the worker\n            if (action.status === ActionStatus.Success) {\n              sendClearCache(worker);\n            }\n            break;\n\n          case DB_CLEARING_CACHE:\n            if (action.meta === true) {\n              sendAllowDbReconnect(worker, false);\n            } else {\n              sendAllowDbReconnect(worker, true);\n            }\n            break;\n\n          case ME_FETCH:\n            if (action.status === ActionStatus.Success) {\n              sendAccountsUpdated(worker, action.payload.accounts);\n              sendMeUpdated(worker, action.payload.me);\n              sendListsUpdated(worker, action.payload.lists);\n              sendPreferencesUpdated(worker, action.payload.preferences);\n            }\n            break;\n\n          case PREFERENCES_UPDATE:\n            if (action.status === ActionStatus.Success) {\n              sendPreferencesUpdated(worker, action.payload.preferences, action.payload.accounts);\n            }\n            break;\n\n          case TEAM_FETCH:\n            if (action.status === ActionStatus.Success) {\n              sendFeaturesUpdated(worker, action.payload.features);\n            }\n            break;\n\n          case ONLINE_SET: // Start CommitSync on online event\n            if (action.status === ActionStatus.Start) {\n              sendOnline(worker);\n            }\n            break;\n\n          case THREAD_COMMITS_SUBMIT:\n          case DRAFT_CREATE:\n            if (action.status === ActionStatus.Success) {\n              sendCommitSubmitted(worker);\n            }\n            break;\n\n          case ATTACHMENT_META_CREATE:\n            if (action.status === ActionStatus.Success) {\n              sendFileUploadSubmitted(worker);\n            }\n            break;\n\n          case DRAFT_SEND_UNDO:\n            if (action.status === ActionStatus.Start) {\n              sendDraftUndoSent(worker, action.meta);\n            }\n            break;\n\n          case DRAFT_UPDATE:\n          case DRAFT_SEND_NOW:\n            if (action.status === ActionStatus.Start) {\n              sendCommitSubmitted(worker);\n            }\n            break;\n\n          case DRAFT_UPDATE_BROADCAST:\n            if (action.status === ActionStatus.Start) {\n              sendWorkerDraftUpdated(worker, action.meta);\n            }\n            break;\n\n          case DRAFT_SEND_BROADCAST:\n            if (action.status === ActionStatus.Start) {\n              sendWorkerDraftSend(worker, action.meta);\n              sendCommitSubmitted(worker);\n            }\n            break;\n\n          case THREAD_UPDATE:\n            if (action.status === ActionStatus.Success) {\n              const unreadList = (!!action.payload.list && !action.payload.read)\n                ? action.payload.list\n                : undefined;\n              sendMailCountUpdated(worker, action.payload.account, unreadList);\n            }\n            break;\n\n          case THREAD_MOVE_UNDO:\n            if (action.status === ActionStatus.Start) {\n              sendUndoMove(worker, action.meta);\n            }\n            break;\n\n          case AUTH_LOGOUT_ALL:\n          case AUTH_LOGOUT:\n            sendLogout(worker);\n            break;\n\n          case MESSAGE_BODIES_FETCH:\n            if (action.status === ActionStatus.Success && action.payload) {\n              const bodies: MessageBody[] = action.payload;\n              const threadId: string = action.meta;\n              sendMessageBodiesSave(worker, bodies, threadId);\n            }\n            break;\n\n          default:\n            break;\n        }\n\n        return next(action);\n      };\n}\n"]}]}