{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/maintenanceBot.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/maintenanceBot.ts","mtime":1675280254124},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY2FwdHVyZUV4Y2VwdGlvbiB9IGZyb20gJ0BzZW50cnkvYnJvd3Nlcic7CmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJzsKaW1wb3J0IHsgZXZpY3RFeHBpcmVkU2VhcmNoQ2FjaGUsIGxpbWl0U2VhcmNoQ2FjaGVTaXplIH0gZnJvbSAnQHNyYy9saWIvc2VhcmNoRGInOwppbXBvcnQgeyBldmljdEV4cGlyZWRNZXNzYWdlQm9kaWVzIH0gZnJvbSAnQHNyYy9saWIvbW9kZWxzL21lc3NhZ2VCb2RpZXMnOwp2YXIgTUlOSU1VTV9NRVNTQUdFX0JPRElFUyA9IDEwMDA7IC8vIFRhcmdldCAxMDAgbWVnYWJ5dGVzCnZhciBNQVhJTVVNX01FU1NBR0VfQk9ESUVTID0gODAwMDsgLy8gVGFyZ2V0IDgwMCBtZWdhYnl0ZXMKdmFyIEFWRVJBR0VfQllURVNfUEVSX01FU1NBR0VfQk9EWSA9IDEwMDAwMDsgLy8gMTAwIGtpbG9ieXRlcywgdGhpcyBpcyBhIGNvbnNlcnZhdGl2ZSBlc3RpbWF0ZQp2YXIgTUFYX1VTRURfUEVSQ0VOVEFHRSA9IDAuNjsgLy8gIFZhbHVlIGJldHdlZW4gMCBhbmQgMQp2YXIgTWFpbnRlbmFuY2VCb3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7CiAgICBmdW5jdGlvbiBNYWludGVuYW5jZUJvdCgpIHsKICAgICAgICB0aGlzLnJ1bm5pbmcgPSBmYWxzZTsKICAgIH0KICAgIE1haW50ZW5hbmNlQm90LnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICAgIC8vIFRyaWdnZXIgZmlyc3QgcnVuIGluIDE1IHNlY29uZHMsIGluIGNhc2UgYSB1c2VyIGNsb3NlcyB3aW5kb3dzIGZhaXJseSBxdWlja2x5CiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IF90aGlzLnJ1bigpOyB9LCAxNTAwMCk7CiAgICAgICAgLy8gVHJpZ2dlciBldmVyeSAxNSBtaW51dGVzCiAgICAgICAgT2JzZXJ2YWJsZS5pbnRlcnZhbCg5MDAwMDApCiAgICAgICAgICAgIC5zdWJzY3JpYmUoewogICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBpZiAoIV90aGlzLnJ1bm5pbmcpIHsKICAgICAgICAgICAgICAgICAgICBfdGhpcy5ydW4oKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICBjYXB0dXJlRXhjZXB0aW9uKGUpOwogICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWNvbnNvbGUKICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7CiAgICAgICAgICAgIH0sCiAgICAgICAgfSk7CiAgICB9OwogICAgLy8gRXhwaXJlIHNlYXJjaCBib2RpZXMgaWYgdXRpbGl6YXRpb24gaXMgaGlnaGVyIHRoYW4gNzAlCiAgICBNYWludGVuYW5jZUJvdC5wcm90b3R5cGUuZG9NYWludGVuYW5jZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS5mcm9tKG5hdmlnYXRvci5zdG9yYWdlICYmIG5hdmlnYXRvci5zdG9yYWdlLmVzdGltYXRlID8KICAgICAgICAgICAgbmF2aWdhdG9yLnN0b3JhZ2UuZXN0aW1hdGUoKSA6IE9ic2VydmFibGUub2YoeyBxdW90YTogMSwgdXNhZ2U6IDEgfSkpCiAgICAgICAgICAgIC5mbGF0TWFwKGZ1bmN0aW9uIChzZSkgewogICAgICAgICAgICB2YXIgcXVvdGEgPSBzZS5xdW90YSwgdXNhZ2UgPSBzZS51c2FnZTsKICAgICAgICAgICAgdmFyIGNvdW50ID0gTUlOSU1VTV9NRVNTQUdFX0JPRElFUzsKICAgICAgICAgICAgaWYgKHNlICYmIHF1b3RhICYmIHVzYWdlKSB7CiAgICAgICAgICAgICAgICB2YXIgcGVyY2VudFVzZWQgPSB1c2FnZSAvIHF1b3RhOwogICAgICAgICAgICAgICAgaWYgKHBlcmNlbnRVc2VkIDwgTUFYX1VTRURfUEVSQ0VOVEFHRSkgewogICAgICAgICAgICAgICAgICAgIGNvdW50ID0gTWF0aC5taW4oTWF0aC5tYXgoMSwgTWF0aC5jZWlsKChxdW90YSAtIHVzYWdlKSAvIEFWRVJBR0VfQllURVNfUEVSX01FU1NBR0VfQk9EWSkpLCBNQVhJTVVNX01FU1NBR0VfQk9ESUVTKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gZXZpY3RFeHBpcmVkU2VhcmNoQ2FjaGUoKQogICAgICAgICAgICAgICAgLmZsYXRNYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gbGltaXRTZWFyY2hDYWNoZVNpemUoY291bnQpOyB9KQogICAgICAgICAgICAgICAgLmZsYXRNYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gZXZpY3RFeHBpcmVkTWVzc2FnZUJvZGllcygpOyB9KTsKICAgICAgICB9KTsKICAgIH07CiAgICBNYWludGVuYW5jZUJvdC5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgICAgaWYgKHRoaXMucnVubmluZykgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIHRoaXMuZG9NYWludGVuYW5jZSgpLnN1YnNjcmliZSh7CiAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIF90aGlzLnJ1bm5pbmcgPSBmYWxzZTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICBfdGhpcy5ydW5uaW5nID0gZmFsc2U7CiAgICAgICAgICAgICAgICBjYXB0dXJlRXhjZXB0aW9uKGUpOwogICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWNvbnNvbGUKICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7CiAgICAgICAgICAgICAgICBfdGhpcy5ydW4oKTsKICAgICAgICAgICAgfSwKICAgICAgICB9KTsKICAgIH07CiAgICByZXR1cm4gTWFpbnRlbmFuY2VCb3Q7Cn0oKSk7CmV4cG9ydCB7IE1haW50ZW5hbmNlQm90IH07Cg=="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/maintenanceBot.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/maintenanceBot.ts"],"names":[],"mappings":"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","sourcesContent":["import { captureException } from '@sentry/browser';\nimport { Observable } from 'rxjs';\nimport { evictExpiredSearchCache, limitSearchCacheSize } from '@src/lib/searchDb';\nimport { evictExpiredMessageBodies } from '@src/lib/models/messageBodies';\n\nconst MINIMUM_MESSAGE_BODIES = 1000; // Target 100 megabytes\nconst MAXIMUM_MESSAGE_BODIES = 8000; // Target 800 megabytes\nconst AVERAGE_BYTES_PER_MESSAGE_BODY = 100000; // 100 kilobytes, this is a conservative estimate\nconst MAX_USED_PERCENTAGE = 0.6; //  Value between 0 and 1\n\nexport class MaintenanceBot {\n  private running = false;\n\n  start() {\n    // Trigger first run in 15 seconds, in case a user closes windows fairly quickly\n    setTimeout(() => { this.run(); }, 15000);\n\n    // Trigger every 15 minutes\n    Observable.interval(900000)\n      .subscribe({\n        next: () => {\n          if (!this.running) {\n            this.run();\n          }\n        },\n        error: (e) => {\n          captureException(e);\n          // tslint:disable-next-line:no-console\n          console.error(e);\n        },\n      });\n  }\n\n  // Expire search bodies if utilization is higher than 70%\n  private doMaintenance(): Observable<null> {\n    return Observable.from(\n      navigator.storage && navigator.storage.estimate ?\n        navigator.storage.estimate() : Observable.of({ quota: 1, usage: 1 }),\n    )\n    .flatMap((se) => {\n      const { quota, usage } = se;\n\n      let count = MINIMUM_MESSAGE_BODIES;\n\n      if (se && quota && usage) {\n        const percentUsed = usage / quota;\n\n        if (percentUsed < MAX_USED_PERCENTAGE) {\n          count = Math.min(\n            Math.max(1, Math.ceil((quota - usage) / AVERAGE_BYTES_PER_MESSAGE_BODY)),\n            MAXIMUM_MESSAGE_BODIES,\n          );\n        }\n      }\n\n      return evictExpiredSearchCache()\n        .flatMap(() => limitSearchCacheSize(count))\n        .flatMap(() => evictExpiredMessageBodies());\n    });\n  }\n\n  private run() {\n    if (this.running) {\n      return;\n    }\n\n    this.doMaintenance().subscribe({\n      next: () => {\n        this.running = false;\n      },\n      error: (e) => {\n        this.running = false;\n        captureException(e);\n        // tslint:disable-next-line:no-console\n        console.error(e);\n        this.run();\n      },\n    });\n  }\n}\n"]}]}