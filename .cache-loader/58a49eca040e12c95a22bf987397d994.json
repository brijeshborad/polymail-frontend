{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/sync/DraftIncrSync.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/sync/DraftIncrSync.ts","mtime":1675280254125},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkgewogICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikgewogICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwKICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fAogICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTsKICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTsKICAgIH07CiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHsKICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpOwogICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfQogICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTsKICAgIH07Cn0pKCk7CmltcG9ydCBDYWNoZSwgeyBTdG9yZXMgfSBmcm9tICdAc3JjL2xpYi9kYic7CmltcG9ydCB7IERyYWZ0U3RhdHVzIH0gZnJvbSAnQHNyYy90eXBlcyc7CmltcG9ydCB7IERyYWZ0Q2xpZW50IH0gZnJvbSAnQHNyYy9hcGkvZHJhZnRzJzsKaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnOwppbXBvcnQgeyBBUElTeW5jIH0gZnJvbSAnLi9BUElTeW5jJzsKaW1wb3J0IHsgc2VuZERyYWZ0VXBkYXRlZCwgc2VuZERyYWZ0U2VudCB9IGZyb20gJ0BzcmMvd29ya2VyL2JyaWRnZS93b3JrZXJFdmVudHMnOwppbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7CmltcG9ydCB7IGZpbmRJbmRleCwgY29tcGFjdCB9IGZyb20gJ2xvZGFzaCc7CmltcG9ydCB7IGlzRHJhZnRTZW5kaW5nLCBwYXRjaGVkRHJhZnQgfSBmcm9tICdAc3JjL2xpYi9kcmFmdCc7CnZhciBEcmFmdEluY3JTeW5jID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikgewogICAgX19leHRlbmRzKERyYWZ0SW5jclN5bmMsIF9zdXBlcik7CiAgICAvLyAtIGFwcCBicmlkZ2UgaW50ZXJmYWNlCiAgICBmdW5jdGlvbiBEcmFmdEluY3JTeW5jKGV2ZW50cywgYXBpKSB7CiAgICAgICAgaWYgKGFwaSA9PT0gdm9pZCAwKSB7IGFwaSA9IG5ldyBEcmFmdENsaWVudCgpOyB9CiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgJ0RyYWZ0SW5jclN5bmMnLCBTdG9yZXMuRHJhZnRzLCB0cnVlKSB8fCB0aGlzOwogICAgICAgIC8vIFJldHVybnMgYSBsaXN0IG9mIGRyYWZ0cyB0byBzYXZlIHdpdGggYSBtZXJnZSBwb2xpY3kgYXBwbGllZAogICAgICAgIF90aGlzLmZpbHRlclBhZ2UgPSBmdW5jdGlvbiAobW9kZWxzKSB7CiAgICAgICAgICAgIHZhciBtb2RlbElkcyA9IG1vZGVscy5tYXAoZnVuY3Rpb24gKG1vZGVsKSB7IHJldHVybiBtb2RlbC5pZDsgfSk7CiAgICAgICAgICAgIHJldHVybiBDYWNoZS5saXN0KFN0b3Jlcy5EcmFmdHMsIChmdW5jdGlvbiAobW9kZWwpIHsgcmV0dXJuIG1vZGVsSWRzLmluZGV4T2YobW9kZWwuaWQpICE9PSAtMTsgfSkpCiAgICAgICAgICAgICAgICAuZmxhdE1hcChmdW5jdGlvbiAoZm91bmRNb2RlbHMpIHsKICAgICAgICAgICAgICAgIHZhciBmaWx0ZXJlZE1vZGVscyA9IG1vZGVscy5tYXAoZnVuY3Rpb24gKGRyYWZ0KSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGNhY2hlTWF0Y2hJZCA9IGZpbmRJbmRleChmb3VuZE1vZGVscywgeyBpZDogZHJhZnQuaWQgfSk7CiAgICAgICAgICAgICAgICAgICAgLy8gSWYgbm90IGluIGNhY2hlIHNhdmUKICAgICAgICAgICAgICAgICAgICBpZiAoY2FjaGVNYXRjaElkID09PSAtMSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZHJhZnQ7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIC8vIEVtaXQgYSBkcmFmdCBzZW5kIHN1Y2Nlc3Mgd2hlbiBzZW50IGZyb20gZXh0ZXJuYWwgc291cmNlIGFuZCB2ZXJzaW9uIGlzIGhpZ2hlcgogICAgICAgICAgICAgICAgICAgIHZhciBjYWNoZU1hdGNoID0gZm91bmRNb2RlbHNbY2FjaGVNYXRjaElkXTsKICAgICAgICAgICAgICAgICAgICAvLyBEbyBub3QgcHJvY2VzcyBhbnkgZHJhZnRzIHRoYXQgaGF2ZSBhbiBvdXQgb2YgZGF0ZSB2ZXJzaW9uCiAgICAgICAgICAgICAgICAgICAgaWYgKGNhY2hlTWF0Y2gudmVyc2lvbiA+IGRyYWZ0LnZlcnNpb24pIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgLy8gU2VuZCBkcmFmdCBzZW50IGlmIHdlIHJlY2VpdmVkIGEgaGlnaGVyIHZlcnNpb24gc2VuZCBhbmQgZHJhZnQgdmVyc2lvbiBpcyBoaWdoZXIKICAgICAgICAgICAgICAgICAgICBpZiAoZHJhZnQudmVyc2lvbiA+IGNhY2hlTWF0Y2gudmVyc2lvbiAmJiBkcmFmdC5zdGF0dXMgPT09IERyYWZ0U3RhdHVzLlNlbmRpbmcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2VuZERyYWZ0U2VudCh7IGRyYWZ0OiBkcmFmdCwgdG9nZ2xlQXJjaGl2ZTogZmFsc2UgfSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIC8vIEFsd2F5cyBvdmVyd3JpdGUgYW5kIHNhdmUgaW50byBpbmRleGVkZGIgaWYgdmVyc2lvbiBpcyBncmVhdGVyCiAgICAgICAgICAgICAgICAgICAgaWYgKGRyYWZ0LnZlcnNpb24gPiBjYWNoZU1hdGNoLnZlcnNpb24pIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRyYWZ0OwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAvLyBQYXRjaCBkcmFmdCB3aGVuIGluIHNlbmRpbmcgc3RhdGUKICAgICAgICAgICAgICAgICAgICBpZiAoaXNEcmFmdFNlbmRpbmcoY2FjaGVNYXRjaCkgJiYgZHJhZnQuc3RhdHVzID09PSBEcmFmdFN0YXR1cy5EcmFmdCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGF0Y2hlZERyYWZ0KGRyYWZ0LCBjYWNoZU1hdGNoKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhY2hlTWF0Y2gudXBkYXRlZC5nZXRUaW1lKCkgKyAyMDAwIDw9IGRyYWZ0LnVwZGF0ZWQuZ2V0VGltZSgpCiAgICAgICAgICAgICAgICAgICAgICAgID8gZHJhZnQKICAgICAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHJldHVybiBPYnNlcnZhYmxlLm9mKGNvbXBhY3QoZmlsdGVyZWRNb2RlbHMpKTsKICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZSkgeyByZXR1cm4gT2JzZXJ2YWJsZS5vZihtb2RlbHMpOyB9KTsKICAgICAgICB9OwogICAgICAgIF90aGlzLmFwaSA9IGFwaTsKICAgICAgICBfdGhpcy5ldmVudHMgPSBldmVudHM7CiAgICAgICAgcmV0dXJuIF90aGlzOwogICAgfQogICAgRHJhZnRJbmNyU3luYy5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICAgIF9zdXBlci5wcm90b3R5cGUuaW5pdC5jYWxsKHRoaXMpOwogICAgICAgIHRoaXMuZXZlbnRzCiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGV2ZW50KSB7IHJldHVybiBldmVudC5uYW1lID09PSAnRHJhZnRVcGRhdGVkJzsgfSkKICAgICAgICAgICAgLnN1YnNjcmliZShmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICAgICAgX3RoaXMucnVuKCkuc3Vic2NyaWJlKCk7CiAgICAgICAgfSk7CiAgICB9OwogICAgRHJhZnRJbmNyU3luYy5wcm90b3R5cGUuZmV0Y2hOZXh0UGFnZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gdGhpcy5hcGkubGlzdEluY3IodGhpcy5vZmZzZXQpOwogICAgfTsKICAgIERyYWZ0SW5jclN5bmMucHJvdG90eXBlLm5leHRQYWdlT2Zmc2V0ID0gZnVuY3Rpb24gKG1vZGVscykgewogICAgICAgIHJldHVybiBtb21lbnQobW9kZWxzWzBdLnVwZGF0ZWQpLnRvSVNPU3RyaW5nKCk7CiAgICB9OwogICAgRHJhZnRJbmNyU3luYy5wcm90b3R5cGUub25TYXZlID0gZnVuY3Rpb24gKGRyYWZ0cykgewogICAgICAgIGRyYWZ0cy5mb3JFYWNoKGZ1bmN0aW9uIChkcmFmdCkgeyByZXR1cm4gc2VuZERyYWZ0VXBkYXRlZChkcmFmdCk7IH0pOwogICAgICAgIHJldHVybiBPYnNlcnZhYmxlLm9mKG51bGwpOwogICAgfTsKICAgIHJldHVybiBEcmFmdEluY3JTeW5jOwp9KEFQSVN5bmMpKTsKZXhwb3J0IHsgRHJhZnRJbmNyU3luYyB9OwpleHBvcnQgZGVmYXVsdCBEcmFmdEluY3JTeW5jOwo="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/sync/DraftIncrSync.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/sync/DraftIncrSync.ts"],"names":[],"mappings":"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","sourcesContent":["import Cache, { Stores } from '@src/lib/db';\nimport { Draft, RealtimeEvent, DraftStatus } from '@src/types';\nimport { DraftAPI, DraftClient } from '@src/api/drafts';\nimport { Observable } from 'rxjs';\nimport { APISync } from './APISync';\nimport { sendDraftUpdated, sendDraftSent } from '@src/worker/bridge/workerEvents';\nimport moment from 'moment';\nimport { findIndex, compact } from 'lodash';\nimport { isDraftSending, patchedDraft } from '@src/lib/draft';\n\nexport class DraftIncrSync extends APISync<Draft> {\n\n  // State\n\n  // Dependencies\n  private events: Observable<RealtimeEvent>;\n  private api: DraftAPI;\n  // - app bridge interface\n\n  constructor(\n    events: Observable<RealtimeEvent>,\n    api: DraftAPI = new DraftClient(),\n  ) {\n    super('DraftIncrSync', Stores.Drafts, true);\n    this.api = api;\n    this.events = events;\n  }\n\n  init() {\n    super.init();\n    this.events\n      .filter(event => event.name === 'DraftUpdated')\n      .subscribe((event) => {\n        this.run().subscribe();\n      });\n  }\n\n  // Returns a list of drafts to save with a merge policy applied\n  filterPage = (models: Draft[]): Observable<Draft[]> => {\n    const modelIds = models.map(model => model.id);\n    return Cache.list(Stores.Drafts, ((model: Draft) => modelIds.indexOf(model.id) !== -1))\n      .flatMap((foundModels: Draft[]) => {\n        const filteredModels: Array<Draft|undefined> = models.map((draft: Draft) => {\n          const cacheMatchId = findIndex(foundModels, { id: draft.id });\n          // If not in cache save\n          if (cacheMatchId === -1) {\n            return draft;\n          }\n\n          // Emit a draft send success when sent from external source and version is higher\n          const cacheMatch = foundModels[cacheMatchId];\n\n          // Do not process any drafts that have an out of date version\n          if (cacheMatch.version > draft.version) {\n            return undefined;\n          }\n\n          // Send draft sent if we received a higher version send and draft version is higher\n          if (draft.version > cacheMatch.version && draft.status === DraftStatus.Sending) {\n            sendDraftSent({ draft, toggleArchive: false });\n          }\n\n          // Always overwrite and save into indexeddb if version is greater\n          if (draft.version > cacheMatch.version) {\n            return draft;\n          }\n\n          // Patch draft when in sending state\n          if (isDraftSending(cacheMatch) && draft.status === DraftStatus.Draft) {\n            return patchedDraft(draft, cacheMatch);\n          }\n\n          return cacheMatch.updated.getTime() + 2000 <= draft.updated.getTime()\n            ? draft\n            : undefined;\n        });\n\n        return Observable.of(compact(filteredModels));\n      })\n      .catch(e => Observable.of(models));\n  }\n\n  protected fetchNextPage(): Observable<Draft[]> {\n    return this.api.listIncr(this.offset);\n  }\n\n  protected nextPageOffset(models: Draft[]): string {\n    return moment(models[0].updated).toISOString();\n  }\n\n  protected onSave(drafts: Draft[]): Observable<null> {\n    drafts.forEach(draft => sendDraftUpdated(draft));\n    return Observable.of(null);\n  }\n}\n\nexport default DraftIncrSync;\n"]}]}