{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/sharedThreads.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/sharedThreads.ts","mtime":1675280254052},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/sharedThreads.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/sharedThreads.ts"],"names":[],"mappings":";AAAA,OAAO,MAAM,MAAM,qBAAqB,CAAC;AACzC,OAAO,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;AACxC,OAAO,MAAM,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAY,cAAc,EAAiC,MAAM,YAAY,CAAC;AACrF,OAAO,EAEL,wBAAwB,EAIxB,sBAAsB,GAEvB,MAAM,0BAA0B,CAAC;AAClC,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AACtD,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AACnD,OAAO,EAAE,UAAU,EAAE,cAAc,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AAChF,OAAO,EAAE,OAAO,EAAE,MAAM,gBAAgB,CAAC;AAEzC,OAAO,EAAE,cAAc,EAAE,MAAM,YAAY,CAAC;AAkB5C,MAAM,CACJ,IAAA;;;;;;;;;;;YAA+B,EAC/B,kCAA8B,EAC9B,0CAAsC,CASrC;AAOH,MAAM,CACJ,IAAA;;;;;;;;;;;YAA+B,EAC/B,kCAA8B,EAC9B,0CAAsC,CASrC;AAEH,MAAM,CACJ,IAAA;;;;;;;;;;;YAA0B,EAC1B,8BAA0B,EAC1B,sCAAkC,CASjC;AAEH,2EAA2E;AAC3E,MAAM,CACJ,IAAA,6FAAoC,EACpC,sCAAkC,EAClC,8CAA0C,CAC0B;AAEtE,MAAM,CACJ,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAA0B,EAC1B,8BAA0B,EAC1B,sCAAkC,CAqCjC;AAEH,MAAM,CACJ,IAAA;;;;;;YAA0B,EAC1B,8BAA0B,EAC1B,sCAAkC,CAMjC;AAEH,MAAM,CACJ,IAAA;;;;;;;;;YAA0B,EAC1B,8BAA0B,EAC1B,sCAAkC,CAQjC;AAEH,MAAM,CACJ,IAAA;;;;;;;;;;;YAAwB,EACxB,4BAAwB,EACxB,oCAAgC,CAc/B;AAEH,MAAM,CACJ,IAAA,yFAAkC,EAClC,qCAAiC,EACjC,6CAAyC,CACoB;AAE/D,MAAM,CACJ,IAAA;;;;;;YAA+B,EAC/B,kCAA8B,EAC9B,0CAAsC,CAMrC;AAEH,MAAM,CACJ,IAAA;;;;;;YAA0B,EAC1B,8BAA0B,EAC1B,sCAAkC,CAMjC;AAEH,MAAM,CACJ,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAAmC,EACnC,qCAAiC,EACjC,6CAAyC,CAmCxC;AAeH,MAAM,CACJ,IAAA,+FAAqC,EACrC,uCAAmC,EACnC,+CAA2C,CACiD;AAO9F,MAAM,CAAC,IAAM,aAAa,GAAG,IAAI,GAAG,CAAC,CAAC;AACtC,MAAM,CAAC,IAAM,GAAG,GAAG,CAAC,CAAC,CAAC,aAAa;AAEnC,MAAM,CACJ,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAAmC,EACnC,sCAAkC,EAClC,8CAA0C,CA0CvC;AAEL,MAAM,CACJ,IAAA;;;;;;;;;;YAAkC,EAClC,qCAAiC,EACjC,6CAAyC,CAUxC;AAEH,MAAM,CAAC,IAAM,uBAAuB,GAClC,cAAc,CAEZ;IACE,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,aAAa,EAAnB,CAAmB;IAC5B,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,EAAE,CAAC,IAAI,EAAb,CAAa;CACvB,EACD,UACE,aAAuD,EACvD,EAAkB,EAClB,CAAqB;IAErB,IAAM,WAAW,GAAG,CAAC,CAAC,IAAI,KAAK,sBAAsB,CAAC,OAAO,CAAC;IAC9D,IAAM,YAAY,GAAG,CAAC,CAAC,IAAI,KAAK,sBAAsB,CAAC,QAAQ,CAAC;IAChE,IAAM,OAAO,GAAG,CAAC,CAAC,IAAI,KAAK,sBAAsB,CAAC,GAAG,CAAC;IAEtD,OAAO,OAAO,CACZ,MAAM,CACJ,aAAa,EACb,UAAC,QAAQ;QACP,IAAI,OAAO,GAAG,QAAQ,CAAC,MAAM,KAAK,cAAc,CAAC,EAAE,CAAC;QACpD,IAAI,OAAO,IAAI,QAAQ,CAAC,IAAI,EAAE;YAC5B,IAAM,SAAS,GAAG,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,QAAQ,CAAC,IAAI,CAAC,IAAI,IAAI,KAAK,CAAC;YAC9D,OAAO,GAAG,SAAS,CAAC;SACrB;QACD,IAAM,UAAU,GAAG,CAAC,CAAC,QAAQ,CAAC,IAAI,IAAI,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC;QAE7D,IAAI,WAAW,IAAI,EAAE,IAAI,OAAO,EAAE;YAChC,OAAO,GAAG,OAAO,IAAI,UAAU,CAAC;SACjC;QAED,iCAAiC;QACjC,IAAI,YAAY,IAAI,OAAO,IAAI,QAAQ,CAAC,IAAI,EAAE;YAC5C,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;SAC1C;QAED,qCAAqC;QACrC,IAAI,CAAC,CAAC,KAAK,IAAI,OAAO,IAAI,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE;YACzC,IAAM,eAAe,GAAG,CAAC,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC;YAC9C,IAAM,aAAa,GAAG,QAAQ,CAAC,IAAI,IAAI,QAAQ,CAAC,IAAI,CAAC,OAAO,IAAI,EAAE,CAAC;YACnE,IAAM,aAAa,GAAG,QAAQ,CAAC,IAAI,IAAI,QAAQ,CAAC,IAAI,CAAC,OAAO,IAAI,EAAE,CAAC;YACnE,IAAM,kBAAkB,GAAG,QAAQ,CAAC,IAAI,IAAI,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACjF,IAAM,gBAAgB,GAAG,aAAa,GAAG,aAAa,GAAG,kBAAkB,CAAC;YAC5E,OAAO,GAAG,CAAC,CAAC,gBAAgB,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;YAEvD,OAAO,OAAO,CAAC;SAChB;QAED,sBAAsB;QACtB,IAAI,CAAC,OAAO,IAAI,CAAC,WAAW,IAAI,UAAU,EAAE;YAC1C,OAAO,GAAG,KAAK,CAAC;SACjB;QAED,OAAO,OAAO,CAAC;IACjB,CAAC,CACF,CAAC,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAK,EAAd,CAAc,CAAC,EACjC,CAAC,MAAM,CAAC,EACR,CAAC,MAAM,CAAC,CACT,CAAC;AACJ,CAAC,EACD,UACE,aAAuD,EACvD,EAAkB,EAClB,CAAqB;IAErB,OAAO,OAAO,CAAC,UAAQ,CAAC,CAAC,IAAI,UAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAE,CAAC,CAAC;AAC7D,CAAC,EACD,CAAC,eAAe,CAAC,CAChB,CAAC;AAEN,+EAA+E;AAC/E,MAAM,CAAC,IAAM,mBAAmB,GAC9B,cAAc,CAEZ;IACE,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,aAAa,EAAnB,CAAmB;IAC5B,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,EAAE,CAAC,IAAI,EAAb,CAAa;CACvB,EACD,UACE,aAAuD,EACvD,EAAkB,EAClB,CAAqB;IAErB,IAAM,WAAW,GAAG,CAAC,CAAC,IAAI,KAAK,sBAAsB,CAAC,OAAO,CAAC;IAC9D,IAAM,UAAU,GAAG,CAAC,CAAC,IAAI,KAAK,sBAAsB,CAAC,MAAM,CAAC;IAC5D,OAAO,OAAO,CACZ,MAAM,CACJ,aAAa,EACb,UAAC,QAAQ;QACP,IAAI,OAAO,GAAG,QAAQ,CAAC,MAAM,KAAK,cAAc,CAAC,EAAE,CAAC;QACpD,IAAM,UAAU,GAAG,CAAC,CAAC,QAAQ,CAAC,IAAI,IAAI,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC;QAE7D,2DAA2D;QAC3D,IAAI,CAAC,CAAC,EAAE,EAAE;YACR,IAAM,cAAc,GAAG,CAAC,CAAC,QAAQ,CAAC,IAAI;gBACpC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS;gBACzB,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,KAAK,EAAE,CAAC,EAAE,EAAX,CAAW,CAAC,CAAC;YACnD,IAAM,YAAY,GAAG,QAAQ,CAAC,IAAI,IAAI,QAAQ,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,CAAC;YACtE,IAAM,iBAAiB,GAAG,QAAQ,CAAC,IAAI,IAAI,QAAQ,CAAC,IAAI,CAAC,iBAAiB,IAAI,CAAC,CAAC;YAChF,IAAM,YAAY,GAAG,CAAC,CAAC,QAAQ,CAAC,IAAI,IAAI,QAAQ,CAAC,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,EAAE;gBAClE,CAAC,YAAY,GAAG,iBAAiB,CAAC,GAAG,CAAC,CAAC;YACzC,OAAO,GAAG,OAAO,IAAI,CAAC,cAAc,IAAI,YAAY,CAAC,CAAC;SACvD;aAAM,IAAI,CAAC,EAAE,EAAE;YACd,OAAO,GAAG,KAAK,CAAC;SACjB;QAED,IAAI,WAAW,IAAI,EAAE,EAAE;YACrB,OAAO,GAAG,OAAO,IAAI,UAAU,CAAC;SACjC;QAED,qCAAqC;QACrC,IAAI,CAAC,CAAC,KAAK,IAAI,OAAO,IAAI,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE;YACzC,IAAM,eAAe,GAAG,CAAC,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC;YAC9C,IAAM,aAAa,GAAG,QAAQ,CAAC,IAAI,IAAI,QAAQ,CAAC,IAAI,CAAC,OAAO,IAAI,EAAE,CAAC;YACnE,IAAM,aAAa,GAAG,QAAQ,CAAC,IAAI,IAAI,QAAQ,CAAC,IAAI,CAAC,OAAO,IAAI,EAAE,CAAC;YACnE,IAAM,kBAAkB,GAAG,QAAQ,CAAC,IAAI,IAAI,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACjF,IAAM,gBAAgB,GAAG,aAAa,GAAG,aAAa,GAAG,kBAAkB,CAAC;YAC5E,OAAO,GAAG,CAAC,CAAC,gBAAgB,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;YAEvD,OAAO,OAAO,CAAC;SAChB;QAED,0CAA0C;QAC1C,IAAI,WAAW,EAAE;YACf,OAAO,OAAO,CAAC;SAChB;QAED,IAAI,UAAU,EAAE;YACd,OAAO,GAAG,OAAO,IAAI,CAAC,CAAC,QAAQ,CAAC,IAAI;gBAClC,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;SACvB;QAED,IAAI,CAAC,WAAW,IAAI,UAAU,EAAE;YAC9B,OAAO,GAAG,KAAK,CAAC;SACjB;QAED,OAAO,OAAO,CAAC;IACjB,CAAC,CACF,CAAC,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAK,EAAd,CAAc,CAAC,EACjC,CAAC,MAAM,CAAC,EACR,CAAC,MAAM,CAAC,CACT,CAAC;AACJ,CAAC,EACD,UACE,aAAuD,EACvD,EAAkB,EAClB,CAAqB;IAErB,OAAA,OAAO,CAAI,CAAC,CAAC,IAAI,UAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAE,CAAC;AAA9C,CAA8C,EAChD,CAAC,eAAe,CAAC,CAClB,CAAC;AAEJ,MAAM,CAAC,IAAM,kBAAkB,GAC7B,cAAc,CACZ,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,aAAa,EAAnB,CAAmB,CAAC,EAC9B,UAAC,aAAuD,EAAE,EAAU;IAClE,IAAI,EAAE,IAAI,aAAa,CAAC,EAAE,CAAC,IAAI,aAAa,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE;QACrD,OAAO,aAAa,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC;KAC/B;IAED,OAAO,SAAS,CAAC;AACnB,CAAC,EACD,UAAC,aAAuD,EAAE,EAAU,IAAK,OAAA,OAAO,CAAC,EAAE,CAAC,EAAX,CAAW,EACpF,CAAC,eAAe,CAAC,CAClB,CAAC;AAEJ,MAAM,CAAC,IAAM,0BAA0B,GACrC,cAAc,CACZ,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,aAAa,EAAnB,CAAmB,CAAC,EAC9B,UAAC,aAAuD,EAAE,MAAc;IACtE,IAAI,MAAM,EAAE;QACV,IAAM,OAAO,GAAG,MAAM,CAAC,aAAa,EAAE,UAAA,EAAE,IAAI,OAAA,CAAC,CAAC,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,CAAC,MAAM,KAAK,MAAM,EAAtC,CAAsC,CAAC,CAAC;QACpF,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC;KACrD;IAED,OAAO,SAAS,CAAC;AACnB,CAAC,EACD,UAAC,aAAuD,EAAE,MAAc,IAAK,OAAA,OAAO,CAAC,MAAM,CAAC,EAAf,CAAe,EAC5F,CAAC,eAAe,CAAC,CAClB,CAAC;AAEJ,eAAe;IACb,yBAAyB;IACzB,iCAAiC;IACjC,yBAAyB;IACzB,yBAAyB;IACzB,yBAAyB;IACzB,uBAAuB;IACvB,yBAAyB;IACzB,gCAAgC;IAChC,iCAAiC;IACjC,gCAAgC;IAChC,6BAA6B;IAC7B,6BAA6B;IAC7B,6BAA6B;CAC9B,CAAC","sourcesContent":["import update from 'immutability-helper';\nimport { create } from '@src/lib/redux';\nimport moment from 'moment';\nimport { Resource, ResourceStatus, Thread, Me, Attachment, Draft } from '@src/types';\nimport {\n  SharedThread,\n  SharedThreadActivityType,\n  SharedThreadActivity,\n  Comment,\n  SharedThreadFilter,\n  SharedThreadFilterMode,\n  SharedThreadPermission,\n} from '@src/types/sharedThreads';\nimport { orderBy, filter, keyBy, last } from 'lodash';\nimport { createSelector } from '@src/lib/selector';\nimport { resourceOk, resourceFailed, resourceLoading } from '@src/lib/resource';\nimport { fnv1a32 } from '@src/lib/crypt';\nimport { AsanaTask } from '@src/types/asana';\nimport { selectComments } from './comments';\n\nexport interface PendingComment {\n  rfcId: string;\n  body: string;\n  attachments: Attachment[];\n}\n\nexport interface SharedThreadCreateMeta {\n  comments?: PendingComment[];\n  permissions: SharedThreadPermission;\n\n  // Either one of thread or draft has to be specified\n  thread?: string;\n  draft?: string;\n  message?: string;\n}\n\nexport const {\n  type: SHARED_THREAD_DRAFTS_LIST,\n  action: sharedThreadDraftsList,\n  reducer: sharedThreadDraftsListReducer,\n} = create<string, Draft>('SHARED_THREAD_DRAFTS_LIST', {\n  success: (state, meta, payload) => update(state, {\n    sharedThreadDrafts: {\n      [meta]: {\n        $set: payload,\n      },\n    },\n  }),\n});\n\nexport interface SharedThreadDraftFetchMeta {\n  draft: string;\n  sharedThread: string;\n}\n\nexport const {\n  type: SHARED_THREAD_DRAFT_FETCH,\n  action: sharedThreadDraftFetch,\n  reducer: sharedThreadDraftFetchReducer,\n} = create<SharedThreadDraftFetchMeta, Draft>('SHARED_THREAD_DRAFT_FETCH', {\n  success: (state, meta, payload) => update(state, {\n    sharedThreadDrafts: {\n      [meta.sharedThread]: {\n        $set: payload,\n      },\n    },\n  }),\n});\n\nexport const {\n  type: SHARED_THREAD_CREATE,\n  action: sharedThreadCreate,\n  reducer: sharedThreadCreateReducer,\n} = create<SharedThreadCreateMeta, SharedThread>('SHARED_THREAD_CREATE', {\n  success: (state, meta, payload) => update(state, {\n    sharedThreads: {\n      [payload.id]: {\n        $set: resourceOk(payload),\n      },\n    },\n  }),\n});\n\n// Selects a Shared Thread Resource through a corresponding user thread id.\nexport const {\n  type: SHARED_THREAD_SELECT_BY_THREAD,\n  action: sharedThreadSelectByThread,\n  reducer: sharedThreadSelectByThreadReducer,\n} = create<string, string|null>('SHARED_THREAD_SELECT_BY_THREAD', {});\n\nexport const {\n  type: SHARED_THREAD_SELECT,\n  action: sharedThreadSelect,\n  reducer: sharedThreadSelectReducer,\n} = create<string|null, SharedThread>('SHARED_THREAD_SELECT', {\n  start: (state, meta) => {\n    return update(state, {\n      selectedSharedThread: { $set: meta === null ? undefined : meta },\n    });\n  },\n\n  success: (state, meta, payload) => {\n    if (!meta) {\n      return state;\n    }\n\n    // Identify if cached draft should be removed if the permission has changed\n    const draftEnabled = !!payload.drafts?.length;\n    return update(state, {\n      sharedThreads: {\n        [payload.id]: { $set: resourceOk(payload) },\n      },\n      sharedThreadDrafts: {\n        [payload.id]: { $set: draftEnabled ? state.sharedThreadDrafts[payload.id] : undefined },\n      },\n    });\n  },\n  failure: (state, meta, error) => {\n    if (!meta) {\n      return state;\n    }\n\n    return update(state, {\n      sharedThreads: {\n        [meta]: {\n          $set: resourceFailed(error),\n        },\n      },\n    });\n  },\n});\n\nexport const {\n  type: SHARED_THREAD_DELETE,\n  action: sharedThreadDelete,\n  reducer: sharedThreadDeleteReducer,\n} = create<string, null>('SHARED_THREAD_DELETE', {\n  success: (state, meta, payload) =>\n    update(state, {\n      sharedThreads: { $unset: [meta] },\n    }),\n});\n\nexport const {\n  type: SHARED_THREAD_UPDATE,\n  action: sharedThreadUpdate,\n  reducer: sharedThreadUpdateReducer,\n} = create<SharedThread, SharedThread>('SHARED_THREAD_UPDATE', {\n  success: (state, meta, payload) =>\n    update(state, {\n      sharedThreads: {\n        [payload.id]: { $set: resourceOk(payload) },\n      },\n    }),\n});\n\nexport const {\n  type: SHARED_THREAD_LIST,\n  action: sharedThreadList,\n  reducer: sharedThreadListReducer,\n} = create<null, SharedThread[]>('SHARED_THREAD_LIST', {\n  success: (state, meta, payload) =>\n    update(state, {\n      sharedThreads: {\n        $merge: keyBy(\n          payload.map(st => resourceOk(st)),\n          st => st.data!.id,\n        ),\n      },\n      sharedThreadsStatus: {\n        $set: ResourceStatus.Ok,\n      },\n    }),\n});\n\nexport const {\n  type: SHARED_THREAD_ORIGINAL_FETCH,\n  action: sharedThreadOriginalFetch,\n  reducer: sharedThreadOriginalFetchReducer,\n} = create<string, Thread>('SHARED_THREAD_ORIGINAL_FETCH', {});\n\nexport const {\n  type: SHARED_THREAD_USER_FILTER,\n  action: sharedThreadUserFilter,\n  reducer: sharedThreadUserFilterReducer,\n} = create<SharedThreadFilter, null>('SHARED_THREAD_USER_FILTER', {\n  start: (state, meta) =>\n    update(state, {\n      sharedThreadUserFilter: { $set: meta },\n    }),\n});\n\nexport const {\n  type: SHARED_THREAD_FILTER,\n  action: sharedThreadFilter,\n  reducer: sharedThreadFilterReducer,\n} = create<SharedThreadFilter, null>('SHARED_THREAD_FILTER', {\n  start: (state, meta) =>\n    update(state, {\n      sharedThreadFilter: { $set: meta },\n    }),\n});\n\nexport const {\n  type: SHARED_THREAD_ASANA_TASK_LIST,\n  action: sharedThreadAsanaTaskList,\n  reducer: sharedThreadAsanaTaskListReducer,\n} = create<string, AsanaTask[]>('SHARED_THREAD_ASANA_TASK_LIST', {\n  setup: (state, meta) => {\n    if (state.asana && state.asana.tasks[meta]) {\n      return state;\n    }\n\n    return update(state, {\n      asana: {\n        tasks: {\n          $set: { [meta]: resourceLoading() },\n        },\n      },\n    });\n  },\n  start: (state, meta) => {\n    return update(state, {\n      asana: {\n        tasks: {\n          [meta]: {\n            status: { $set: ResourceStatus.Loading },\n          },\n        },\n      },\n    });\n  },\n  success: (state, meta, payload) => {\n    return update(state, {\n      asana: {\n        tasks: {\n          [meta]: { $set: resourceOk(payload) },\n        },\n      },\n    });\n  },\n});\n\nexport interface SharedThreadAsanaTaskCreateBody {\n  name: string;\n  notes?: string;\n  projects?: string[];\n  assignee?: string;\n  dueOn?: string; // format example: 2012-03-26\n}\n\nexport interface SharedThreadAsanaTaskCreateMeta {\n  sharedThread: string;\n  task: SharedThreadAsanaTaskCreateBody;\n}\n\nexport const {\n  type: SHARED_THREAD_ASANA_TASK_CREATE,\n  action: sharedThreadAsanaTaskCreate,\n  reducer: sharedThreadAsanaTaskCreateReducer,\n} = create<SharedThreadAsanaTaskCreateMeta, AsanaTask>('SHARED_THREAD_ASANA_TASK_CREATE', {});\n\nexport interface SharedThreadActivityCreateMeta {\n  sharedThread: string;\n  type: SharedThreadActivityType;\n}\n\nexport const PING_INTERVAL = 1000 * 5;\nexport const TTL = 8; // in seconds\n\nexport const {\n  type: SHARED_THREAD_ACTIVITY_CREATE,\n  action: sharedThreadActivityCreate,\n  reducer: sharedThreadActivityCreateReducer,\n} = create<SharedThreadActivityCreateMeta, SharedThreadActivity|null>(\n  'SHARED_THREAD_ACTIVITY_CREATE', {\n    success: (state, meta, payload) => {\n      if (payload === null ||\n        payload.sharedThread !== state.selectedSharedThread ||\n        moment(payload.timestamp).isBefore(moment().subtract(TTL, 'seconds'))) {\n        return state;\n      }\n\n      // check if last comment was recent and by this commenter\n      if (payload.type === SharedThreadActivityType.Comment) {\n        const comments = selectComments(state, payload.sharedThread);\n        const lastComment: Comment | undefined = last(comments);\n        if (lastComment && lastComment.user === payload.userId\n          && moment(lastComment.created).isAfter(moment().subtract(TTL, 'seconds'))) {\n          return state;\n        }\n      }\n\n      // Activity check\n      const isOwner = state.me.data && state.me.data.id === payload.userId;\n      const isReply = payload.type === SharedThreadActivityType.Reply;\n      if (isOwner && !isReply) {\n        return state;\n      }\n\n      switch (payload.type) {\n        case SharedThreadActivityType.Comment:\n        case SharedThreadActivityType.View:\n        case SharedThreadActivityType.Reply:\n          return update(state, {\n            sharedThreadActivity: {\n              [payload.type]: {\n                [payload.userId]: { $set: payload },\n              },\n            },\n          });\n        default:\n          return state;\n      }\n    },\n  });\n\nexport const {\n  type: SHARED_THREAD_ACTIVITY_CLEAR,\n  action: sharedThreadActivityClear,\n  reducer: sharedThreadActivityClearReducer,\n} = create<null, null>('SHARED_THREAD_ACTIVITY_CLEAR', {\n  start: (state, meta) =>\n    update(state, {\n      sharedThreadActivity: {\n        comment: { $set: {} },\n        view: { $set: {} },\n        reply: { $set: {} },\n      },\n    }),\n});\n\nexport const selectUserSharedThreads =\n  createSelector<\n    SharedThreadFilter, { [id: string]: Resource<SharedThread> }|Me|undefined, SharedThread[]>(\n    [\n      state => state.sharedThreads,\n      state => state.me.data,\n    ],\n    (\n      sharedThreads: { [id: string]: Resource<SharedThread> },\n      me: Me | undefined,\n      f: SharedThreadFilter,\n    ) => {\n      const archiveOnly = f.mode === SharedThreadFilterMode.Archive;\n      const commentsOnly = f.mode === SharedThreadFilterMode.Comments;\n      const showAll = f.mode === SharedThreadFilterMode.All;\n\n      return orderBy(\n        filter(\n          sharedThreads,\n          (resource) => {\n            let matched = resource.status === ResourceStatus.Ok;\n            if (matched && resource.data) {\n              const userMatch = me && me.id === resource.data.user || false;\n              matched = userMatch;\n            }\n            const isArchived = !!resource.data && resource.data.archived;\n\n            if (archiveOnly && me && matched) {\n              matched = matched && isArchived;\n            }\n\n            // Handle Comments Only selection\n            if (commentsOnly && matched && resource.data) {\n              matched = resource.data.commentCount > 0;\n            }\n\n            // disregard unread filter for search\n            if (f.query && matched && !!resource.data) {\n              const queryLowerCased = f.query.toLowerCase();\n              const subjectString = resource.data && resource.data.subject || '';\n              const snippetString = resource.data && resource.data.snippet || '';\n              const participantsString = resource.data && resource.data.participants.join(' ');\n              const fullSearchString = subjectString + snippetString + participantsString;\n              matched = !!fullSearchString.includes(queryLowerCased);\n\n              return matched;\n            }\n\n            // Archive only filter\n            if (!showAll && !archiveOnly && isArchived) {\n              matched = false;\n            }\n\n            return matched;\n          },\n        ).map(resource => resource.data!),\n        ['sort'],\n        ['desc'],\n      );\n    },\n    (\n      sharedThreads: { [id: string]: Resource<SharedThread> },\n      me: Me | undefined,\n      f: SharedThreadFilter,\n    ) => {\n      return fnv1a32(`user-${f.mode}-${f.query ? f.query : ''}`);\n    },\n    ['sharedThreads'],\n    );\n\n// TODO(SHIN): Really slow performance since user shared threads always brought\nexport const selectSharedThreads =\n  createSelector<\n    SharedThreadFilter, { [id: string]: Resource<SharedThread> } | Me | undefined, SharedThread[]>(\n    [\n      state => state.sharedThreads,\n      state => state.me.data,\n    ],\n    (\n      sharedThreads: { [id: string]: Resource<SharedThread> },\n      me: Me | undefined,\n      f: SharedThreadFilter,\n    ) => {\n      const archiveOnly = f.mode === SharedThreadFilterMode.Archive;\n      const unreadOnly = f.mode === SharedThreadFilterMode.Unread;\n      return orderBy(\n        filter(\n          sharedThreads,\n          (resource) => {\n            let matched = resource.status === ResourceStatus.Ok;\n            const isArchived = !!resource.data && resource.data.archived;\n\n            // Set mentioned when you are the owner and anyone comments\n            if (!!me) {\n              const mentionedMatch = !!resource.data &&\n                !!resource.data.mentioned &&\n                !!resource.data.mentioned.find(m => m === me.id);\n              const commentCount = resource.data && resource.data.commentCount || 0;\n              const ownerCommentCount = resource.data && resource.data.ownerCommentCount || 0;\n              const commentMatch = !!resource.data && resource.data.user === me.id &&\n                (commentCount - ownerCommentCount) > 0;\n              matched = matched && (mentionedMatch || commentMatch);\n            } else if (!me) {\n              matched = false;\n            }\n\n            if (archiveOnly && me) {\n              matched = matched && isArchived;\n            }\n\n            // disregard unread filter for search\n            if (f.query && matched && !!resource.data) {\n              const queryLowerCased = f.query.toLowerCase();\n              const subjectString = resource.data && resource.data.subject || '';\n              const snippetString = resource.data && resource.data.snippet || '';\n              const participantsString = resource.data && resource.data.participants.join(' ');\n              const fullSearchString = subjectString + snippetString + participantsString;\n              matched = !!fullSearchString.includes(queryLowerCased);\n\n              return matched;\n            }\n\n            // disregard unread filter for archiveOnly\n            if (archiveOnly) {\n              return matched;\n            }\n\n            if (unreadOnly) {\n              matched = matched && !!resource.data &&\n                !resource.data.read;\n            }\n\n            if (!archiveOnly && isArchived) {\n              matched = false;\n            }\n\n            return matched;\n          },\n        ).map(resource => resource.data!),\n        ['sort'],\n        ['desc'],\n      );\n    },\n    (\n      sharedThreads: { [id: string]: Resource<SharedThread> },\n      me: Me | undefined,\n      f: SharedThreadFilter,\n    ) =>\n      fnv1a32(`${f.mode}-${f.query ? f.query : ''}`),\n    ['sharedThreads'],\n  );\n\nexport const selectSharedThread =\n  createSelector<string, { [id: string]: Resource<SharedThread> }, SharedThread|undefined>(\n    [state => state.sharedThreads],\n    (sharedThreads: { [id: string]: Resource<SharedThread> }, id: string) => {\n      if (id && sharedThreads[id] && sharedThreads[id].data) {\n        return sharedThreads[id].data;\n      }\n\n      return undefined;\n    },\n    (sharedThreads: { [id: string]: Resource<SharedThread> }, id: string) => fnv1a32(id),\n    ['sharedThreads'],\n  );\n\nexport const selectSharedThreadByThread =\n  createSelector<string, { [id: string]: Resource<SharedThread> }, SharedThread|undefined>(\n    [state => state.sharedThreads],\n    (sharedThreads: { [id: string]: Resource<SharedThread> }, thread: string) => {\n      if (thread) {\n        const matched = filter(sharedThreads, st => !!st.data && st.data.thread === thread);\n        return matched.length ? matched[0].data : undefined;\n      }\n\n      return undefined;\n    },\n    (sharedThreads: { [id: string]: Resource<SharedThread> }, thread: string) => fnv1a32(thread),\n    ['sharedThreads'],\n  );\n\nexport default [\n  sharedThreadCreateReducer,\n  sharedThreadSelectByThreadReducer,\n  sharedThreadSelectReducer,\n  sharedThreadDeleteReducer,\n  sharedThreadUpdateReducer,\n  sharedThreadListReducer,\n  sharedThreadFilterReducer,\n  sharedThreadAsanaTaskListReducer,\n  sharedThreadActivityCreateReducer,\n  sharedThreadActivityClearReducer,\n  sharedThreadUserFilterReducer,\n  sharedThreadDraftFetchReducer,\n  sharedThreadDraftsListReducer,\n];\n"]}]}