{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/threads.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/threads.ts","mtime":1675280253981},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnOwppbXBvcnQgeyBqc29uUmVxdWVzdCB9IGZyb20gJy4vYmFzZSc7CmltcG9ydCB7IGNvbXB1dGVUaHJlYWQgfSBmcm9tICdAc3JjL2xpYi90aHJlYWQnOwppbXBvcnQgeyBjcmVhdGVUaHJlYWQgfSBmcm9tICdAc3JjL21vY2tzL3RocmVhZHMnOwppbXBvcnQgeyBjcmVhdGVNZXNzYWdlQm9kaWVzIH0gZnJvbSAnQHNyYy9tb2Nrcy9tZXNzYWdlQm9kaWVzJzsKaW1wb3J0IHsgY29tcHV0ZU1lc3NhZ2VCb2R5IH0gZnJvbSAnQHNyYy9saWIvbW9kZWxzL21lc3NhZ2VCb2RpZXMnOwpleHBvcnQgZnVuY3Rpb24gdXBkYXRlQmF0Y2goY29tbWl0cykgewogICAgcmV0dXJuIGpzb25SZXF1ZXN0KHsKICAgICAgICBtZXRob2Q6ICdQT1NUJywKICAgICAgICByb3V0ZTogIi92Mi9iYXRjaCIsCiAgICAgICAgYm9keTogeyByZXF1ZXN0czogY29tbWl0cyB9LAogICAgfSk7Cn0KdmFyIFRocmVhZENsaWVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHsKICAgIGZ1bmN0aW9uIFRocmVhZENsaWVudCgpIHsKICAgIH0KICAgIFRocmVhZENsaWVudC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGlkKSB7CiAgICAgICAgcmV0dXJuIGpzb25SZXF1ZXN0KHsKICAgICAgICAgICAgbWV0aG9kOiAnR0VUJywKICAgICAgICAgICAgcm91dGU6ICIvdjIvdGhyZWFkcy8iICsgZW5jb2RlVVJJQ29tcG9uZW50KGlkKSwKICAgICAgICB9KQogICAgICAgICAgICAubWFwKGZ1bmN0aW9uICh0aHJlYWQpIHsgcmV0dXJuIGNvbXB1dGVUaHJlYWQodGhyZWFkKTsgfSk7CiAgICB9OwogICAgVGhyZWFkQ2xpZW50LnByb3RvdHlwZS5nZXRNZXNzYWdlQm9kaWVzID0gZnVuY3Rpb24gKGlkKSB7CiAgICAgICAgcmV0dXJuIGpzb25SZXF1ZXN0KHsKICAgICAgICAgICAgbWV0aG9kOiAnR0VUJywKICAgICAgICAgICAgcm91dGU6ICIvdjIvdGhyZWFkcy8iICsgZW5jb2RlVVJJQ29tcG9uZW50KGlkKSArICIvbWVzc2FnZUJvZGllcyIsCiAgICAgICAgfSkubWFwKGZ1bmN0aW9uIChib2RpZXMpIHsgcmV0dXJuIGJvZGllcy5tYXAoZnVuY3Rpb24gKGIpIHsgcmV0dXJuIGNvbXB1dGVNZXNzYWdlQm9keShiKTsgfSk7IH0pOwogICAgfTsKICAgIFRocmVhZENsaWVudC5wcm90b3R5cGUubGlzdCA9IGZ1bmN0aW9uIChhY2NvdW50LCBsaW1pdCwgaWQpIHsKICAgICAgICByZXR1cm4ganNvblJlcXVlc3QoewogICAgICAgICAgICBtZXRob2Q6ICdHRVQnLAogICAgICAgICAgICByb3V0ZTogaWQKICAgICAgICAgICAgICAgID8gIi92Mi90aHJlYWRzP2FjY291bnQ9IiArIGFjY291bnQgKyAiJmxpbWl0PSIgKyBsaW1pdCArICImaWQ9IiArIGVuY29kZVVSSUNvbXBvbmVudChpZCkKICAgICAgICAgICAgICAgIDogIi92Mi90aHJlYWRzP2FjY291bnQ9IiArIGFjY291bnQgKyAiJmxpbWl0PSIgKyBsaW1pdCwKICAgICAgICB9KQogICAgICAgICAgICAubWFwKGZ1bmN0aW9uICh0aHJlYWRzKSB7IHJldHVybiB0aHJlYWRzLm1hcChmdW5jdGlvbiAodGhyZWFkKSB7IHJldHVybiBjb21wdXRlVGhyZWFkKHRocmVhZCk7IH0pOyB9KTsKICAgIH07CiAgICBUaHJlYWRDbGllbnQucHJvdG90eXBlLmxpc3RJbmJveCA9IGZ1bmN0aW9uIChhY2NvdW50KSB7CiAgICAgICAgcmV0dXJuIGpzb25SZXF1ZXN0KHsKICAgICAgICAgICAgbWV0aG9kOiAnR0VUJywKICAgICAgICAgICAgcm91dGU6ICIvdjIvdGhyZWFkcz9hY2NvdW50PSIgKyBhY2NvdW50ICsgIiZib3g9aW5ib3giLAogICAgICAgIH0pCiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHRocmVhZHMpIHsgcmV0dXJuIHRocmVhZHMubWFwKGZ1bmN0aW9uICh0aHJlYWQpIHsgcmV0dXJuIGNvbXB1dGVUaHJlYWQodGhyZWFkKTsgfSk7IH0pOwogICAgfTsKICAgIFRocmVhZENsaWVudC5wcm90b3R5cGUuc2VhcmNoID0gZnVuY3Rpb24gKHF1ZXJ5LCBhY2NvdW50KSB7CiAgICAgICAgcmV0dXJuIGpzb25SZXF1ZXN0KHsKICAgICAgICAgICAgbWV0aG9kOiAnR0VUJywKICAgICAgICAgICAgcm91dGU6IGFjY291bnQKICAgICAgICAgICAgICAgID8gIi92Mi90aHJlYWRzP2FjY291bnQ9IiArIGFjY291bnQgKyAiJnE9IiArIGVuY29kZVVSSUNvbXBvbmVudChxdWVyeSkKICAgICAgICAgICAgICAgIDogIi92Mi90aHJlYWRzP3E9IiArIGVuY29kZVVSSUNvbXBvbmVudChxdWVyeSksCiAgICAgICAgfSkKICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAodGhyZWFkcykgeyByZXR1cm4gdGhyZWFkcy5tYXAoZnVuY3Rpb24gKHRocmVhZCkgeyByZXR1cm4gY29tcHV0ZVRocmVhZCh0aHJlYWQpOyB9KTsgfSk7CiAgICB9OwogICAgVGhyZWFkQ2xpZW50LnByb3RvdHlwZS5kaXNhYmxlVHJhY2sgPSBmdW5jdGlvbiAodGhyZWFkKSB7CiAgICAgICAgcmV0dXJuIGpzb25SZXF1ZXN0KHsKICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsCiAgICAgICAgICAgIHJvdXRlOiAiL3YyL3RocmVhZHMvIiArIGVuY29kZVVSSUNvbXBvbmVudCh0aHJlYWQpICsgIi9kaXNhYmxlVHJhY2tzIiwKICAgICAgICB9KS5tYXAoZnVuY3Rpb24gKHQpIHsgcmV0dXJuIGNvbXB1dGVUaHJlYWQodCk7IH0pOwogICAgfTsKICAgIHJldHVybiBUaHJlYWRDbGllbnQ7Cn0oKSk7CmV4cG9ydCB7IFRocmVhZENsaWVudCB9OwpleHBvcnQgZnVuY3Rpb24gbW9ja1RocmVhZENsaWVudCgpIHsKICAgIHJldHVybiB7CiAgICAgICAgZ2V0TWVzc2FnZUJvZGllczogZnVuY3Rpb24gKGlkKSB7CiAgICAgICAgICAgIHJldHVybiBPYnNlcnZhYmxlLm9mKGNyZWF0ZU1lc3NhZ2VCb2RpZXMoY3JlYXRlVGhyZWFkKCkpKTsKICAgICAgICB9LAogICAgICAgIGdldDogZnVuY3Rpb24gKGlkKSB7CiAgICAgICAgICAgIHJldHVybiBPYnNlcnZhYmxlLm9mKGNyZWF0ZVRocmVhZCh7IGlkOiBpZCB9KSk7CiAgICAgICAgfSwKICAgICAgICBsaXN0OiBmdW5jdGlvbiAoYWNjb3VudCwgbGltaXQsIGlkKSB7CiAgICAgICAgICAgIHJldHVybiBPYnNlcnZhYmxlLm9mKFtjcmVhdGVUaHJlYWQoKV0pOwogICAgICAgIH0sCiAgICAgICAgbGlzdEluYm94OiBmdW5jdGlvbiAoYWNjb3VudCkgewogICAgICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS5vZihbY3JlYXRlVGhyZWFkKCldKTsKICAgICAgICB9LAogICAgICAgIHNlYXJjaDogZnVuY3Rpb24gKHF1ZXJ5LCBhY2NvdW50KSB7CiAgICAgICAgICAgIHJldHVybiBPYnNlcnZhYmxlLm9mKFtjcmVhdGVUaHJlYWQoKV0pOwogICAgICAgIH0sCiAgICAgICAgZGlzYWJsZVRyYWNrOiBmdW5jdGlvbiAodGhyZWFkKSB7CiAgICAgICAgICAgIHJldHVybiBPYnNlcnZhYmxlLm9mKGNyZWF0ZVRocmVhZCgpKTsKICAgICAgICB9LAogICAgfTsKfQpleHBvcnQgdmFyIG9yaWdpbmFsTWVzc2FnZVVybCA9IGZ1bmN0aW9uICh0aHJlYWRJZCwgbWVzc2FnZUlkKSB7CiAgICByZXR1cm4gcHJvY2Vzcy5lbnYuQVBJX1VSTAogICAgICAgICsgJy92Mi90aHJlYWRzLycgKyBlbmNvZGVVUklDb21wb25lbnQodGhyZWFkSWQpCiAgICAgICAgKyAnL21lc3NhZ2VzLycgKyBlbmNvZGVVUklDb21wb25lbnQobWVzc2FnZUlkKQogICAgICAgICsgJy9yYXcnOwp9Owo="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/threads.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/threads.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs';\n\nimport { Thread, MessageBody, Commit } from '@src/types';\n\nimport { jsonRequest } from './base';\n\nimport { computeThread } from '@src/lib/thread';\n\nimport { createThread } from '@src/mocks/threads';\n\nimport { createMessageBodies } from '@src/mocks/messageBodies';\nimport { computeMessageBody } from '@src/lib/models/messageBodies';\n\nexport function updateBatch(commits: Commit[]): Observable<[Thread]> {\n  return jsonRequest({\n    method: 'POST',\n    route: `/v2/batch`,\n    body: { requests: commits },\n  });\n}\n\nexport interface ThreadAPI {\n  get(id: string): Observable<Thread>;\n  getMessageBodies(id: string): Observable<MessageBody[]>;\n  list(account: string, limit: number, id?: string): Observable<Thread[]>;\n  listInbox(account: string): Observable<Thread[]>;\n  search(query: string, account?: string): Observable<Thread[]>;\n  disableTrack(thread: string): Observable<Thread>;\n}\n\nexport class ThreadClient implements ThreadAPI {\n  get(id: string): Observable<Thread> {\n    return jsonRequest({\n      method: 'GET',\n      route: `/v2/threads/${encodeURIComponent(id)}`,\n    })\n    .map((thread: Thread) => computeThread(thread));\n  }\n\n  getMessageBodies(id: string): Observable<MessageBody[]> {\n    return jsonRequest({\n      method: 'GET',\n      route: `/v2/threads/${encodeURIComponent(id)}/messageBodies`,\n    }).map(bodies => bodies.map((b: MessageBody) => computeMessageBody(b)));\n  }\n\n  list(account: string, limit: number, id?: string): Observable<Thread[]> {\n    return jsonRequest({\n      method: 'GET',\n      route: id\n        ? `/v2/threads?account=${account}&limit=${limit}&id=${encodeURIComponent(id)}`\n        : `/v2/threads?account=${account}&limit=${limit}`,\n    })\n    .map(threads => threads.map((thread: Thread) => computeThread(thread)));\n  }\n\n  listInbox(account: string): Observable<Thread[]> {\n    return jsonRequest({\n      method: 'GET',\n      route: `/v2/threads?account=${account}&box=inbox`,\n    })\n    .map(threads => threads.map((thread: Thread) => computeThread(thread)));\n  }\n\n  search(query: string, account?: string): Observable<Thread[]> {\n    return jsonRequest({\n      method: 'GET',\n      route: account\n        ? `/v2/threads?account=${account}&q=${encodeURIComponent(query)}`\n        : `/v2/threads?q=${encodeURIComponent(query)}`,\n    })\n    .map(threads => threads.map((thread: Thread) => computeThread(thread)));\n  }\n\n  disableTrack(thread: string): Observable<Thread> {\n    return jsonRequest({\n      method: 'POST',\n      route: `/v2/threads/${encodeURIComponent(thread)}/disableTracks`,\n    }).map(t => computeThread(t));\n  }\n}\n\nexport function mockThreadClient(): ThreadAPI {\n  return {\n    getMessageBodies: (id: string): Observable<MessageBody[]> => {\n      return Observable.of(createMessageBodies(createThread()));\n    },\n    get: (id: string) => {\n      return Observable.of(createThread({ id }));\n    },\n    list: (account: string, limit: number, id?: string): Observable<Thread[]> => {\n      return Observable.of([createThread()]);\n    },\n    listInbox: (account: string): Observable<Thread[]> => {\n      return Observable.of([createThread()]);\n    },\n    search: (query: string, account?: string): Observable<Thread[]> => {\n      return Observable.of([createThread()]);\n    },\n    disableTrack(thread: string): Observable<Thread> {\n      return Observable.of(createThread());\n    },\n  };\n}\n\nexport const originalMessageUrl = (threadId: string, messageId: string): string =>\n  process.env.API_URL!\n    + '/v2/threads/' + encodeURIComponent(threadId)\n    + '/messages/' + encodeURIComponent(messageId)\n    + '/raw';\n"]}]}