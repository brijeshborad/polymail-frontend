{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/files.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/files.ts","mtime":1675280254064},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnOwovLyBpc0RpcmVjdG9yeSBpcyBhIGhlbHBlciBtZXRob2QgdGhhdCBpZGVudGlmaWVzIGlmIGEgdXNlciBpcyBkcmFnZ2luZyBpbiBhIGRpcmVjdG9yeQpleHBvcnQgdmFyIEJsb2JFcnJvclR5cGU7CihmdW5jdGlvbiAoQmxvYkVycm9yVHlwZSkgewogICAgQmxvYkVycm9yVHlwZVsiRGlyZWN0b3J5Il0gPSAiZGlyZWN0b3J5IjsKICAgIEJsb2JFcnJvclR5cGVbIkVtcHR5RmlsZSJdID0gImVtcHR5RmlsZSI7Cn0pKEJsb2JFcnJvclR5cGUgfHwgKEJsb2JFcnJvclR5cGUgPSB7fSkpOwpleHBvcnQgdmFyIHVwbG9hZEVycm9yTWVzc2FnZSA9IGZ1bmN0aW9uIChiKSB7CiAgICBpZiAoIWIuZXJyb3IpIHsKICAgICAgICByZXR1cm4gJyc7CiAgICB9CiAgICBzd2l0Y2ggKGIuZXJyb3IpIHsKICAgICAgICBjYXNlIEJsb2JFcnJvclR5cGUuRGlyZWN0b3J5OgogICAgICAgICAgICByZXR1cm4gIldlIGNvdWxkIG5vdCB1cGxvYWQgXCIiICsgYi5maWxlbmFtZSArICJcIiBiZWNhdXNlIGl0IGlzIGEgZm9sZGVyIG9yIHBhY2thZ2UuIFBsZWFzZSBjb21wcmVzcyB0aGUgZm9sZGVyIG9yIHBhY2thZ2UgYXMgYSB6aXAgZmlsZSBhbmQgdHJ5IGFnYWluLiI7CiAgICAgICAgY2FzZSBCbG9iRXJyb3JUeXBlLkVtcHR5RmlsZToKICAgICAgICAgICAgcmV0dXJuICJXZSBjb3VsZCBub3QgdXBsb2FkIFwiIiArIGIuZmlsZW5hbWUgKyAiXCIgYmVjYXVzZSBpdCBpcyBhbiBlbXB0eSBmaWxlLiBQbGVhc2UgY29tcHJlc3MgdGhlIGZpbGUgYXMgYSB6aXAgZmlsZSBhbmQgdHJ5IGFnYWluLiI7CiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgcmV0dXJuICcnOwogICAgfQp9OwpleHBvcnQgdmFyIGNoZWNrRmlsZVZhbGlkaXR5ID0gZnVuY3Rpb24gKGYpIHsKICAgIHJldHVybiBPYnNlcnZhYmxlLmNyZWF0ZShmdW5jdGlvbiAob2JzZXJ2ZXIpIHsKICAgICAgICBpZiAoZi5zaXplIDw9IDApIHsKICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dCh7IGZpbGVuYW1lOiBmLm5hbWUsIGVycm9yOiBCbG9iRXJyb3JUeXBlLkVtcHR5RmlsZSB9KTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICAvLyBJbml0aWFsaXplIGZpbGUgcmVhZGVyIGFuZCBjaGVjayB0byBzZWUgaWYgZmlsZSBjYW4gYmUgcmVhZAogICAgICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpOwogICAgICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoeyBmaWxlbmFtZTogZi5uYW1lIH0pOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfTsKICAgICAgICByZWFkZXIub25lcnJvciA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoeyBmaWxlbmFtZTogZi5uYW1lLCBlcnJvcjogQmxvYkVycm9yVHlwZS5EaXJlY3RvcnkgfSk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9OwogICAgICAgIHJlYWRlci5yZWFkQXNUZXh0KGYuc2xpY2UoMCwgNSkpOwogICAgfSk7Cn07Cg=="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/files.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/files.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAc,MAAM,MAAM,CAAC;AAG9C,sFAAsF;AAEtF,MAAM,CAAN,IAAY,aAGX;AAHD,WAAY,aAAa;IACvB,wCAAuB,CAAA;IACvB,wCAAuB,CAAA;AACzB,CAAC,EAHW,aAAa,KAAb,aAAa,QAGxB;AAMD,MAAM,CAAC,IAAM,kBAAkB,GAAG,UAAC,CAAiB;IAClD,IAAI,CAAC,CAAC,CAAC,KAAK,EAAE;QACZ,OAAO,EAAE,CAAC;KACX;IACD,QAAQ,CAAC,CAAC,KAAK,EAAE;QACf,KAAK,aAAa,CAAC,SAAS;YAC1B,OAAO,2BAAwB,CAAC,CAAC,QAAQ,6GAAyG,CAAC;QACrJ,KAAK,aAAa,CAAC,SAAS;YAC1B,OAAO,2BAAwB,CAAC,CAAC,QAAQ,0FAAsF,CAAC;QAClI;YACE,OAAO,EAAE,CAAC;KACb;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,IAAM,iBAAiB,GAAG,UAAC,CAAY;IAC5C,OAAO,UAAU,CAAC,MAAM,CAAC,UAAC,QAAoC;QAC5D,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,EAAE;YACf,QAAQ,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,aAAa,CAAC,SAAS,EAAE,CAAC,CAAC;YACpE,OAAO;SACR;QAED,8DAA8D;QAC9D,IAAM,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;QAChC,MAAM,CAAC,MAAM,GAAG;YACd,QAAQ,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;YACpC,OAAO;QACT,CAAC,CAAC;QAEF,MAAM,CAAC,OAAO,GAAG,UAAC,CAAC;YACjB,QAAQ,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,aAAa,CAAC,SAAS,EAAE,CAAC,CAAC;YACpE,OAAO;QACT,CAAC,CAAC;QAEF,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACnC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC","sourcesContent":["import { Observable, Subscriber } from 'rxjs';\nimport { ImageFile } from 'react-dropzone';\n\n// isDirectory is a helper method that identifies if a user is dragging in a directory\n\nexport enum BlobErrorType {\n  Directory = 'directory',\n  EmptyFile = 'emptyFile',\n}\nexport interface BlobDescriptor {\n  filename: string;\n  error?: BlobErrorType;\n}\n\nexport const uploadErrorMessage = (b: BlobDescriptor): string => {\n  if (!b.error) {\n    return '';\n  }\n  switch (b.error) {\n    case BlobErrorType.Directory:\n      return `We could not upload \"${b.filename}\" because it is a folder or package. Please compress the folder or package as a zip file and try again.`;\n    case BlobErrorType.EmptyFile:\n      return `We could not upload \"${b.filename}\" because it is an empty file. Please compress the file as a zip file and try again.`;\n    default:\n      return '';\n  }\n};\n\nexport const checkFileValidity = (f: ImageFile): Observable<BlobDescriptor> => {\n  return Observable.create((observer: Subscriber<BlobDescriptor>) => {\n    if (f.size <= 0) {\n      observer.next({ filename: f.name, error: BlobErrorType.EmptyFile });\n      return;\n    }\n\n    // Initialize file reader and check to see if file can be read\n    const reader = new FileReader();\n    reader.onload = () => {\n      observer.next({ filename: f.name });\n      return;\n    };\n\n    reader.onerror = (e) => {\n      observer.next({ filename: f.name, error: BlobErrorType.Directory });\n      return;\n    };\n\n    reader.readAsText(f.slice(0, 5));\n  });\n};\n"]}]}