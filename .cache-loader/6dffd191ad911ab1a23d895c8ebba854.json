{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Settings/routes/Security/index.tsx","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Settings/routes/Security/index.tsx","mtime":1675280254110},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JzsKaW1wb3J0IFNlY3VyaXR5IGZyb20gJy4vU2VjdXJpdHknOwppbXBvcnQgeyBhdXRoTG9nb3V0QWxsLCBhdXRoUGFzc3dvcmRSZXNldCwgfSBmcm9tICdAc3JjL2R1Y2tzL2F1dGgnOwppbXBvcnQgeyBhY2NvdW50RGVsZXRlTWUsIHNlbGVjdEFjY291bnRzIH0gZnJvbSAnQHNyYy9kdWNrcy9hY2NvdW50cyc7CmltcG9ydCB7IHNlbGVjdE1lLCBtZVVwZGF0ZSwgbWVUZmFTZXQsIG1lVGZhVW5zZXQsIG1lVGZhVmVyaWZ5LCBzZWxlY3RVc2VySXNBZG1pbiB9IGZyb20gJ0BzcmMvZHVja3MvbWUnOwppbXBvcnQgeyBsZWZ0U2lkZWJhckNvbGxhcHNlIH0gZnJvbSAnQHNyYy9kdWNrcy9sZWZ0U2lkZWJhcic7CmltcG9ydCB7IHRvYXN0U2V0IH0gZnJvbSAnQHNyYy9kdWNrcy90b2FzdHMnOwp2YXIgbWFwU3RhdGVUb1Byb3BzID0gZnVuY3Rpb24gKHN0YXRlKSB7CiAgICByZXR1cm4gewogICAgICAgIG1lOiBzZWxlY3RNZShzdGF0ZSksCiAgICAgICAgYWNjb3VudHM6IHNlbGVjdEFjY291bnRzKHN0YXRlKSwKICAgICAgICB0ZmFQYXNzd29yZENvbmZpcm1lZDogc3RhdGUudGZhUGFzc3dvcmRDb25maXJtZWQsCiAgICAgICAgaXNNb2JpbGU6IHN0YXRlLmlzTW9iaWxlLAogICAgICAgIGNvbGxhcHNlZE1vYmlsZTogc3RhdGUubGVmdFNpZGViYXIuY29sbGFwc2VkLAogICAgICAgIGlzVGVhbUFkbWluOiBzZWxlY3RVc2VySXNBZG1pbihzdGF0ZSksCiAgICAgICAgdGVhbU1lbWJlcnM6IHN0YXRlLnRlYW1NZW1iZXJzLAogICAgICAgIHRlYW06IHN0YXRlLnRlYW0uZGF0YSwKICAgIH07Cn07CnZhciBtYXBEaXNwYXRjaFRvUHJvcHMgPSBmdW5jdGlvbiAoZGlzcGF0Y2gpIHsgcmV0dXJuICh7CiAgICBsb2dvdXRBbGw6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRpc3BhdGNoKGF1dGhMb2dvdXRBbGwobnVsbCkpOyB9LAogICAgcmVzZXRQYXNzd29yZDogZnVuY3Rpb24gKGVtYWlsKSB7IHJldHVybiBkaXNwYXRjaChhdXRoUGFzc3dvcmRSZXNldChlbWFpbCkpOyB9LAogICAgdXBkYXRlTWU6IGZ1bmN0aW9uICh1cGRhdGVkKSB7IHJldHVybiBkaXNwYXRjaChtZVVwZGF0ZSh1cGRhdGVkKSk7IH0sCiAgICBzZXRUZmE6IGZ1bmN0aW9uIChtZXRhKSB7IHJldHVybiBkaXNwYXRjaChtZVRmYVNldChtZXRhKSk7IH0sCiAgICB1bnNldFRmYTogZnVuY3Rpb24gKHBhc3N3b3JkKSB7IHJldHVybiBkaXNwYXRjaChtZVRmYVVuc2V0KHBhc3N3b3JkKSk7IH0sCiAgICB2YWxpZGF0ZVRmYUNvZGU6IGZ1bmN0aW9uIChjb2RlKSB7IHJldHVybiBkaXNwYXRjaChtZVRmYVZlcmlmeShjb2RlKSk7IH0sCiAgICBjb2xsYXBzZUxzYjogZnVuY3Rpb24gKGNvbGxhcHNlKSB7IHJldHVybiBkaXNwYXRjaChsZWZ0U2lkZWJhckNvbGxhcHNlKGNvbGxhcHNlKSk7IH0sCiAgICBkZWxldGVNZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGlzcGF0Y2goYWNjb3VudERlbGV0ZU1lKG51bGwpKTsgfSwKICAgIHNldFRvYXN0OiBmdW5jdGlvbiAobWVzc2FnZSkgeyByZXR1cm4gZGlzcGF0Y2godG9hc3RTZXQobWVzc2FnZSkpOyB9LAp9KTsgfTsKZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcykoU2VjdXJpdHkpOwo="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Settings/routes/Security/index.tsx","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Settings/routes/Security/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAY,MAAM,aAAa,CAAC;AAEhD,OAAO,QAAuC,MAAM,YAAY,CAAC;AACjE,OAAO,EACL,aAAa,EAAE,iBAAiB,GACjC,MAAM,iBAAiB,CAAC;AACzB,OAAO,EAAE,eAAe,EAAE,cAAc,EAAE,MAAM,qBAAqB,CAAC;AAEtE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,UAAU,EAAE,WAAW,EAAE,iBAAiB,EAAE,MAAM,eAAe,CAAC;AACzG,OAAO,EAAE,mBAAmB,EAAE,MAAM,wBAAwB,CAAC;AAC7D,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAE7C,IAAM,eAAe,GAAG,UAAC,KAAiB;IACxC,OAAO;QACL,EAAE,EAAE,QAAQ,CAAC,KAAK,CAAC;QACnB,QAAQ,EAAE,cAAc,CAAC,KAAK,CAAC;QAC/B,oBAAoB,EAAE,KAAK,CAAC,oBAAoB;QAChD,QAAQ,EAAE,KAAK,CAAC,QAAQ;QACxB,eAAe,EAAE,KAAK,CAAC,WAAW,CAAC,SAAS;QAC5C,WAAW,EAAE,iBAAiB,CAAC,KAAK,CAAC;QACrC,WAAW,EAAE,KAAK,CAAC,WAAW;QAC9B,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI;KACtB,CAAC;AACJ,CAAC,CAAC;AAEF,IAAM,kBAAkB,GAAG,UAAC,QAAuB,IAAoB,OAAA,CAAC;IACtE,SAAS,EAAE,cAAM,OAAA,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,EAA7B,CAA6B;IAC9C,aAAa,EAAE,UAAC,KAAa,IAAK,OAAA,QAAQ,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,EAAlC,CAAkC;IACpE,QAAQ,EAAE,UAAA,OAAO,IAAI,OAAA,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,EAA3B,CAA2B;IAChD,MAAM,EAAE,UAAA,IAAI,IAAI,OAAA,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAxB,CAAwB;IACxC,QAAQ,EAAE,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,EAA9B,CAA8B;IACpD,eAAe,EAAE,UAAA,IAAI,IAAI,OAAA,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,EAA3B,CAA2B;IACpD,WAAW,EAAE,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC,EAAvC,CAAuC;IAChE,QAAQ,EAAE,cAAM,OAAA,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,EAA/B,CAA+B;IAC/C,QAAQ,EAAE,UAAA,OAAO,IAAI,OAAA,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,EAA3B,CAA2B;CACjD,CAAC,EAVqE,CAUrE,CAAC;AAEH,eAAe,OAAO,CAAC,eAAe,EAAE,kBAAkB,CAAC,CAAC,QAAQ,CAAC,CAAC","sourcesContent":["import { connect, Dispatch } from 'react-redux';\n\nimport Security, { DispatchProps, StateProps } from './Security';\nimport {\n  authLogoutAll, authPasswordReset,\n} from '@src/ducks/auth';\nimport { accountDeleteMe, selectAccounts } from '@src/ducks/accounts';\nimport { StoreState } from '@src/types';\nimport { selectMe, meUpdate, meTfaSet, meTfaUnset, meTfaVerify, selectUserIsAdmin } from '@src/ducks/me';\nimport { leftSidebarCollapse } from '@src/ducks/leftSidebar';\nimport { toastSet } from '@src/ducks/toasts';\n\nconst mapStateToProps = (state: StoreState): StateProps => {\n  return {\n    me: selectMe(state),\n    accounts: selectAccounts(state),\n    tfaPasswordConfirmed: state.tfaPasswordConfirmed,\n    isMobile: state.isMobile,\n    collapsedMobile: state.leftSidebar.collapsed,\n    isTeamAdmin: selectUserIsAdmin(state),\n    teamMembers: state.teamMembers,\n    team: state.team.data,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>): DispatchProps => ({\n  logoutAll: () => dispatch(authLogoutAll(null)),\n  resetPassword: (email: string) => dispatch(authPasswordReset(email)),\n  updateMe: updated => dispatch(meUpdate(updated)),\n  setTfa: meta => dispatch(meTfaSet(meta)),\n  unsetTfa: password => dispatch(meTfaUnset(password)),\n  validateTfaCode: code => dispatch(meTfaVerify(code)),\n  collapseLsb: collapse => dispatch(leftSidebarCollapse(collapse)),\n  deleteMe: () => dispatch(accountDeleteMe(null)),\n  setToast: message => dispatch(toastSet(message)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Security);\n"]}]}