{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/search.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/search.ts","mtime":1675280254068},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/search.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/search.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Mailbox,\n  QueryParams,\n  Thread,\n  ThreadBox,\n  List,\n  MailboxType,\n} from '@src/types';\nimport Cache, { Stores } from '@src/lib/db';\nimport { ThreadAPI } from '@src/api/threads';\nimport {\n  computeThread,\n  listThreadsSent,\n  listThreadsAccountSent,\n  listThreadsByBox,\n  listThreadsByAccountBox,\n  listThreadsByList,\n  listThreadsByAccountList,\n  listThreadsByEmail,\n  listThreadsAccountStarred,\n  listAllThreadsByAccount,\n  THREAD_LIST_SIZE,\n } from '@src/lib/thread';\nimport { Observable } from 'rxjs';\nimport { orderBy, keyBy } from 'lodash';\nimport moment from 'moment';\n\nconst isWhitespace = (c: string): boolean => {\n  return c === ' ' || c === '\\t' || c === '\\r' || c === '\\n';\n};\n\nconst emailRegex = new RegExp(`\\\\S+@\\\\S+\\\\.\\\\S+`, 'gi');\nexport const isEmail = (t: string): boolean  => {\n  return !!t.match(emailRegex);\n};\n\nconst dateRegex = new RegExp('(\\\\d{2}-\\\\d{2}-(\\\\d{4}|\\\\d{2}))|(\\\\d{4}/\\\\d{2}/\\\\d{2})', 'gi');\nconst isDate = (t: string): boolean => {\n  return !!t.match(dateRegex);\n};\n\nexport const queryParamsTextValue = (params: QueryParams) => {\n  return params.text && params.text.join(' ') || '';\n};\n\nconst removeQuotes = (s: string): string => {\n  let removed = s;\n  if (removed.startsWith('\"') && removed.endsWith('\"')) {\n    removed = removed.slice(1);\n    removed = removed.slice(0, -1);\n  }\n  return removed;\n};\n\nexport const parseQueryParams = (s: string, lists: List[]): QueryParams => {\n  const params: QueryParams = {};\n  const tokens = tokenize(s).map(t => t.toLowerCase());\n\n  // Identify if we can use preix matching\n  tokens.forEach((t) => {\n    if (t.startsWith('\"')) {\n      params.quoted = true;\n    }\n\n    if (t.startsWith('with:') && isEmail(t)) {\n      if (!params.with) {\n        params.with = [];\n      }\n      params.with.push(t.slice(5));\n      return;\n    }\n\n    if (t.startsWith('from:') && isEmail(t)) {\n      params.from = t.slice(5);\n      return;\n    }\n\n    if (t.startsWith('to:') && isEmail(t)) {\n      if (!params.to) {\n        params.to = [];\n      }\n      params.to.push(t.slice(3));\n      return;\n    }\n\n    if (t.startsWith('before:') && isDate(t)) {\n      const m = moment(t.slice(7), ['MM-DD-YY', 'MM-DD-YYYY', 'YYYY/MM/DD']);\n      if (m.isValid()) {\n        params.before = m.startOf('day').toDate();\n        return;\n      }\n    }\n    if (t.startsWith('after:') && isDate(t)) {\n      const m = moment(t.slice(6), ['MM-DD-YY', 'MM-DD-YYYY', 'YYYY/MM/DD']);\n      if (m.isValid()) {\n        params.after = m.startOf('day').toDate();\n        return;\n      }\n    }\n\n    // TOOD(SHN): Use prefix matching for in: items\n    if (t.startsWith('in:')) {\n      let location = t.slice(3);\n      switch (location) {\n        case 'inbox':\n          params.box = ThreadBox.Inbox;\n          return;\n        case 'archive':\n          params.box = ThreadBox.Archive;\n          return;\n        case 'trash':\n          params.box = ThreadBox.Trash;\n          return;\n        case 'spam':\n          params.box = ThreadBox.Spam;\n          return;\n        case 'later':\n          params.box = ThreadBox.Later;\n          return;\n        default:\n          location = removeQuotes(location);\n          const listDict = keyBy(lists, (list => list.name.toLowerCase()));\n          const l = listDict[location.toLowerCase()];\n          if (!!l) {\n            params.box = ThreadBox.List;\n            params.list = l.id;\n            return;\n          }\n      }\n    }\n\n    // TODO(SHIN): Use prefix matching for is: items\n    if (t === 'is:starred') {\n      params.isStarred = true;\n      return;\n    }\n    if (t === 'is:read') {\n      params.isRead = true;\n      params.isUnread = false;\n      return;\n    }\n    if (t === 'is:unread') {\n      params.isUnread = true;\n      params.isRead = false;\n      return;\n    }\n    if (t === 'is:opened') {\n      params.isOpened = true;\n      params.isUnopened = false;\n      params.sent = true;\n      return;\n    }\n    if (t === 'is:unopened') {\n      params.isUnopened = true;\n      params.isOpened = false;\n      params.sent = true;\n      return;\n    }\n    if (t === 'is:replied') {\n      params.isReplied = true;\n      params.isUnreplied = false;\n      params.sent = true;\n      return;\n    }\n    if (t === 'is:unreplied') {\n      params.isUnreplied = true;\n      params.isReplied = false;\n      params.sent = true;\n      return;\n    }\n    if (t === 'has:attachment') {\n      params.hasAttachment = true;\n      return;\n    }\n    if (t === 'has:followup') {\n      params.hasFollowUp = true;\n      return;\n    }\n\n    // Aggregate search query\n    if (!params.text) {\n      params.text = [];\n    }\n    params.text.push(removeQuotes(t.toLowerCase()));\n  });\n  return params;\n};\n\nexport const tokenize = (input: string): string[] => {\n  const s = input.trim();\n\n  let inQuote = false;\n  let start;\n\n  const tokens: string[] = [];\n\n  // tslint:disable-next-line\n  for (let i = 0; i < s.length; i++) {\n    const c = s[i];\n\n    // If in quote, continue until we find another quote\n    if (inQuote) {\n      if (c === '\"') {\n        inQuote = false;\n      }\n    }\n\n    // If not in quote start on the first non-whitespace character\n    if (!isWhitespace(c) && start === undefined) {\n      start = i;\n    }\n\n    // If this is the last character or the next chracter is a white space\n    // then append the current set to tokens.\n    const isLastChar = (i === s.length - 1);\n    if (start !== undefined && (isLastChar || (!inQuote && isWhitespace(s[i + 1])))) {\n      const token = s.substr(start, i - start + 1);\n      tokens.push(token);\n      start = undefined;\n      continue;\n    }\n\n    if (!isWhitespace(c) && !inQuote && c === '\\\"') {\n      inQuote = true;\n    }\n\n    // If whitespace just contine...\n  }\n\n  return tokens;\n};\n\n// threadsSearchFilter should be applies after both local and provider search queries.\nexport const threadSearchFilter = (mailbox: Mailbox, thread: Thread): boolean => {\n\n  // Account filter\n  if (mailbox.account && thread.account !== mailbox.account) {\n    return false;\n  }\n\n  const p = mailbox.queryParams;\n  if (!p) {\n    return true;\n  }\n\n  // Box filter\n  if (p.box && thread.box !== p.box) {\n    return false;\n  }\n\n  // List filter\n  if (p.list && thread.box === ThreadBox.List && thread.list !== p.list) {\n    return false;\n  }\n\n  // After filter\n  if (p.after && thread.internal < p.after) {\n    return false;\n  }\n\n  // Before filter\n  if (p.before && thread.internal > p.before) {\n    return false;\n  }\n\n  // With filter\n  if (p.with) {\n    for (const email of p.with) {\n      let found = false;\n      for (const participant of thread.participantEmails) {\n        if (participant.startsWith(email)) {\n          found = true;\n        }\n      }\n      if (!found) {\n        return false;\n      }\n    }\n  }\n\n  // From filter\n  // Check if this email exists in the `from` field of any message\n  if (p.from) {\n    let found = false;\n    for (const message of thread.messages) {\n      if (message.from.includes(p.from)) {\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n      return false;\n    }\n  }\n\n  // To filter\n  // Check if all these emails exists in the to field of any message.\n  if (p.to) {\n    for (const email of p.to) {\n      let found = false;\n      for (const message of thread.messages) {\n        for (const to of message.to) {\n          if (to.includes(email)) {\n            found = true;\n            break;\n          }\n        }\n        if (found) {\n          break;\n        }\n      }\n      if (!found) {\n        return false;\n      }\n    }\n  }\n\n  // Starred filter\n  if (p.isStarred && !thread.starred) {\n    return false;\n  }\n\n  // Read filter\n  if (p.isRead && !thread.read) {\n    return false;\n  }\n\n  // Unread filter\n  if (p.isUnread && thread.read) {\n    return false;\n  }\n\n  // Opened filter\n  if (p.isOpened) {\n    if (!thread.lastSent) {\n      return false;\n    }\n    for (let i = thread.messages.length - 1; i >= 0; i -= 1) {\n      const m = thread.messages[i];\n      if (m.sent) {\n        if (!m.tracked || m.tracks === 0) {\n          return false;\n        }\n        break;\n      }\n    }\n  }\n\n  // Unopened filter\n  if (p.isUnopened) {\n    if (!thread.lastSent) {\n      return false;\n    }\n    for (let i = thread.messages.length - 1; i >= 0; i -= 1) {\n      const m = thread.messages[i];\n      if (m.sent) {\n        if (!m.tracked || m.tracks > 0) {\n          return false;\n        }\n        break;\n      }\n    }\n  }\n\n  const lastMessage = thread.messages[thread.messages.length - 1];\n\n  // Replied filter\n  if (p.isReplied && (!thread.lastSent || lastMessage.sent)) {\n    return false;\n  }\n\n  // Unreplied filter\n  if (p.isUnreplied && !lastMessage.sent) {\n    return false;\n  }\n\n  // Attachment filter\n  if (p.hasAttachment && !thread.hasAttachments) {\n    return false;\n  }\n\n  // Followup filter\n  if (p.hasFollowUp && !thread.waiting) {\n    return false;\n  }\n\n  return true;\n};\n\n// localThreadSearchPredicate is used to filter threads when we're running local search.\nexport const localThreadSearchPredicate = (mailbox: Mailbox, thread: Thread): boolean => {\n  const p = mailbox.queryParams;\n  if (!p) {\n    return true;\n  }\n\n  // Apply search filters\n  if (!threadSearchFilter(mailbox, thread)) {\n    return false;\n  }\n\n  // Query subject, snippet and participants.\n  // Make sure all text params match somewhere in the thread.\n  if (p.text) {\n\n    let allMatched = true;\n    for (const q of p.text) {\n\n      // match subject\n      // TODO: Need to sanitize q\n      if (thread.subject.toLowerCase().search(q) >= 0) {\n        continue;\n      }\n\n      // match snippet\n      let snippetMatched = false;\n      for (const message of thread.messages) {\n        // TODO: Need to sanitize q\n        if (message.snippet.toLowerCase().search(q) >= 0) {\n          snippetMatched = true;\n          break;\n        }\n      }\n      if (snippetMatched) {\n        continue;\n      }\n\n      // match participants\n      let participantMatched = false;\n      for (const participant of thread.participants) {\n        // TODO: Need to sanitize q\n        if (participant.email.toLowerCase().search(q) >= 0) {\n          participantMatched = true;\n          break;\n        }\n        // TODO: Need to sanitize q\n        if (participant.fullName.toLowerCase().search(q) >= 0) {\n          participantMatched = true;\n          break;\n        }\n      }\n      if (participantMatched) {\n        continue;\n      }\n      allMatched = false;\n    }\n    if (!allMatched) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n// TODO(SHIN): Cacche provider thread search results\nexport const providerThreadSearch = (api: ThreadAPI, mailbox: Mailbox): Observable<Thread[]> => {\n  if (!mailbox.query) {\n    return Observable.of([]);\n  }\n\n  return api.search(mailbox.query, mailbox.account)\n    .map(threads => threads.filter(thread => threadSearchFilter(mailbox, thread)))\n    .flatMap(threads => Cache.load(Stores.Threads, threads).map(() => threads));\n};\n\nexport const localThreadSearch = (mailbox: Mailbox): Observable<Thread[]> => {\n  const params = mailbox.queryParams;\n  const account = mailbox.account;\n\n  // Do not allow old provider searches for IMAP accounts\n  if (!account) {\n    return Observable.throw(\n      new Error('programmer: localThreadSearch only supports account based search'),\n    );\n  }\n\n  // // Default to full scan\n  // let results = Cache.list<Thread>(\n  //   Stores.Threads,\n  //   thread => localThreadSearchPredicate(mailbox, thread),\n  // );\n\n  // Fetch all threads from the account\n  let results = listAllThreadsByAccount(\n    account,\n    50,\n    thread => localThreadSearchPredicate(mailbox, thread),\n  );\n\n  // Use optimized query if possible\n  if (params && params.isStarred) {\n    // If `starred` filter use star index\n    results = listThreadsAccountStarred(\n      account,\n      thread => localThreadSearchPredicate(mailbox, thread),\n    );\n  } else if (params && params.with && params.with.length > 0) {\n    // If `with` filter use email index\n    results = listThreadsByEmail(\n      params.with[0],\n      THREAD_LIST_SIZE,\n      thread => localThreadSearchPredicate(mailbox, thread),\n    );\n  } else if (params && params.sent && mailbox.account) {\n    // If `account` and `sent` filter use account sent index\n    results = listThreadsAccountSent(\n      mailbox.account,\n      undefined,\n      thread => localThreadSearchPredicate(mailbox, thread),\n    );\n  } else if (params && params.box === ThreadBox.List && params.list && mailbox.account) {\n    // If `account` and `list` filter use account list index\n    results = listThreadsByAccountList(\n      mailbox.account,\n      params.list,\n      undefined,\n      thread => localThreadSearchPredicate(mailbox, thread),\n    );\n  } else if (params && params.box && mailbox.account) {\n    // If `account` and `box` filter use account box index\n    results = listThreadsByAccountBox(\n      mailbox.account,\n      params.box,\n      undefined,\n      thread => localThreadSearchPredicate(mailbox, thread),\n    );\n  } else if (params && params.sent) {\n    // If `sent` filter use account sent index\n    results = listThreadsSent(\n      undefined,\n      thread => localThreadSearchPredicate(mailbox, thread),\n    );\n  } else if (params && params.box === ThreadBox.List && params.list) {\n    // If `list` filter use list index\n    results = listThreadsByList(\n      params.list,\n      undefined,\n      thread => localThreadSearchPredicate(mailbox, thread),\n    );\n  } else if (params && params.box) {\n    // If `box` filter use box index\n    results = listThreadsByBox(\n      params.box,\n      undefined,\n      thread => localThreadSearchPredicate(mailbox, thread),\n    );\n  } else if (mailbox.account) {\n    // If `account` filter use account box index w/ range for box\n    results = listAllThreadsByAccount(\n      mailbox.account,\n      50,\n      thread => localThreadSearchPredicate(mailbox, thread),\n    );\n  }\n  return results.map(threads =>\n    orderBy(threads.map(thread => computeThread(thread)), t => t.internal, 'desc'));\n};\n\nconst DEFAULT_TEXT_SEARCH_OPTIONS = [\n  'in:', 'is:', 'has:', 'with:', 'from:', 'to:', 'before:', 'after:',\n];\nconst DEFAULT_IS_SEARCH_OPTIONS = [\n  'read',\n  'unread',\n  'replied',\n  'unreplied',\n  'opened',\n  'unopened',\n  'starred',\n];\nconst DEFAULT_HAS_SEARCH_OPTIONS = [\n  'reminder',\n  'attachment',\n];\nconst DEFAULT_BOX_SEARCH_OPTIONS = [\n  ThreadBox.Inbox,\n  ThreadBox.Archive,\n  ThreadBox.Trash,\n  ThreadBox.Spam,\n  MailboxType.Later,\n];\n\nexport const getDefaultOptions = (component: string, isOptions?: boolean) => {\n  switch (component) {\n    case 'text':\n      return DEFAULT_TEXT_SEARCH_OPTIONS;\n    case 'modifier':\n      return isOptions ? DEFAULT_IS_SEARCH_OPTIONS : DEFAULT_HAS_SEARCH_OPTIONS;\n    case 'box':\n      return DEFAULT_BOX_SEARCH_OPTIONS;\n    default:\n      return;\n  }\n};\n"]}]}