{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Login/components/UserProfile/index.tsx","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Login/components/UserProfile/index.tsx","mtime":1675280254081},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IFVzZXJQcm9maWxlIGZyb20gJy4vVXNlclByb2ZpbGUnOwppbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnOwppbXBvcnQgeyB0ZWFtVXBkYXRlIH0gZnJvbSAnQHNyYy9kdWNrcy90ZWFtJzsKaW1wb3J0IHsgbWVVcGRhdGUsIG1lUGhvdG9VcGRhdGUsIG1lU2lnblVwSW5mb1VwZGF0ZSB9IGZyb20gJ0BzcmMvZHVja3MvbWUnOwppbXBvcnQgeyB0b2FzdFNldCB9IGZyb20gJ0BzcmMvZHVja3MvdG9hc3RzJzsKdmFyIG1hcFN0YXRlVG9Qcm9wcyA9IGZ1bmN0aW9uIChzdGF0ZSkgewogICAgcmV0dXJuIHsKICAgICAgICBsb2FkaW5nOiAhc3RhdGUubWUuZGF0YSB8fCAhc3RhdGUudGVhbS5kYXRhLAogICAgICAgIG1lOiBzdGF0ZS5tZS5kYXRhLAogICAgICAgIHRlYW06IHN0YXRlLnRlYW0uZGF0YSwKICAgICAgICBjb25uZWN0UHJvdmlkZXI6IHN0YXRlLmFjY291bnRzLmxlbmd0aCA9PT0gMCwKICAgICAgICB1bnN1YnNjcmliZXI6IHN0YXRlLnVuc3Vic2NyaWJlclNpZ251cCwKICAgIH07Cn07CnZhciBtYXBEaXNwYXRjaFRvUHJvcHMgPSBmdW5jdGlvbiAoZGlzcGF0Y2gpIHsgcmV0dXJuICh7CiAgICB1cGRhdGVNZTogZnVuY3Rpb24gKG1lKSB7IHJldHVybiBkaXNwYXRjaChtZVVwZGF0ZShtZSkpOyB9LAogICAgdXBkYXRlVGVhbTogZnVuY3Rpb24gKHRlYW0pIHsgcmV0dXJuIGRpc3BhdGNoKHRlYW1VcGRhdGUodGVhbSkpOyB9LAogICAgc2V0VG9hc3Q6IGZ1bmN0aW9uIChlKSB7IHJldHVybiBkaXNwYXRjaCh0b2FzdFNldChlKSk7IH0sCiAgICB1cGRhdGVNZVBob3RvOiBmdW5jdGlvbiAoZmlsZSkgeyByZXR1cm4gZGlzcGF0Y2gobWVQaG90b1VwZGF0ZShmaWxlKSk7IH0sCiAgICB1cGRhdGVNZVNpZ25VcEluZm86IGZ1bmN0aW9uIChtZXRhKSB7IHJldHVybiBkaXNwYXRjaChtZVNpZ25VcEluZm9VcGRhdGUobWV0YSkpOyB9LAp9KTsgfTsKZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcykoVXNlclByb2ZpbGUpOwo="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Login/components/UserProfile/index.tsx","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Login/components/UserProfile/index.tsx"],"names":[],"mappings":"AAAA,OAAO,WAA0C,MAAM,eAAe,CAAC;AACvE,OAAO,EAAE,OAAO,EAAY,MAAM,aAAa,CAAC;AAGhD,OAAO,EAAkB,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAC7D,OAAO,EAAE,QAAQ,EAAE,aAAa,EAAE,kBAAkB,EAAE,MAAM,eAAe,CAAC;AAC5E,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAE7C,IAAM,eAAe,GAAG,UAAC,KAAiB;IACxC,OAAO;QACL,OAAO,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI;QAC3C,EAAE,EAAE,KAAK,CAAC,EAAE,CAAC,IAAI;QACjB,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI;QACrB,eAAe,EAAE,KAAK,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC;QAC5C,YAAY,EAAE,KAAK,CAAC,kBAAkB;KACvC,CAAC;AACJ,CAAC,CAAC;AAEF,IAAM,kBAAkB,GAAG,UAAC,QAAuB,IAAoB,OAAA,CAAC;IACtE,QAAQ,EAAE,UAAC,EAAM,IAAK,OAAA,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,EAAtB,CAAsB;IAC5C,UAAU,EAAG,UAAC,IAAoB,IAAK,OAAA,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,EAA1B,CAA0B;IACjE,QAAQ,EAAE,UAAC,CAAQ,IAAK,OAAA,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAArB,CAAqB;IAC7C,aAAa,EAAE,UAAA,IAAI,IAAI,OAAA,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,EAA7B,CAA6B;IACpD,kBAAkB,EAAE,UAAA,IAAI,IAAI,OAAA,QAAQ,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,EAAlC,CAAkC;CAC/D,CAAC,EANqE,CAMrE,CAAC;AAEH,eAAe,OAAO,CAAC,eAAe,EAAE,kBAAkB,CAAC,CAAC,WAAW,CAAC,CAAC","sourcesContent":["import UserProfile, { StateProps, DispatchProps } from './UserProfile';\nimport { connect, Dispatch } from 'react-redux';\n\nimport { StoreState, Me } from '@src/types';\nimport { TeamUpdateMeta, teamUpdate } from '@src/ducks/team';\nimport { meUpdate, mePhotoUpdate, meSignUpInfoUpdate } from '@src/ducks/me';\nimport { toastSet } from '@src/ducks/toasts';\n\nconst mapStateToProps = (state: StoreState): StateProps => {\n  return {\n    loading: !state.me.data || !state.team.data,\n    me: state.me.data,\n    team: state.team.data,\n    connectProvider: state.accounts.length === 0,\n    unsubscriber: state.unsubscriberSignup,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>): DispatchProps => ({\n  updateMe: (me: Me) => dispatch(meUpdate(me)),\n  updateTeam : (team: TeamUpdateMeta) => dispatch(teamUpdate(team)),\n  setToast: (e: Error) => dispatch(toastSet(e)),\n  updateMePhoto: file => dispatch(mePhotoUpdate(file)),\n  updateMeSignUpInfo: meta => dispatch(meSignUpInfoUpdate(meta)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserProfile);\n"]}]}