{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/calendars.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/calendars.ts","mtime":1675280254047},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkgewogICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHsKICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHsKICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTsKICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKQogICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07CiAgICAgICAgfQogICAgICAgIHJldHVybiB0OwogICAgfTsKICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9Owp2YXIgX2EsIF9iLCBfYywgX2QsIF9lOwppbXBvcnQgeyBjcmVhdGUgfSBmcm9tICdAc3JjL2xpYi9yZWR1eCc7CmltcG9ydCB1cGRhdGUgZnJvbSAnaW1tdXRhYmlsaXR5LWhlbHBlcic7CmltcG9ydCB7IGNyZWF0ZVNlbGVjdG9yIH0gZnJvbSAncmVzZWxlY3QnOwppbXBvcnQgeyBmbGF0dGVuIH0gZnJvbSAnbG9kYXNoJzsKZXhwb3J0IHZhciBDYWxlbmRhckxpc3RUcmlnZ2VyOwooZnVuY3Rpb24gKENhbGVuZGFyTGlzdFRyaWdnZXIpIHsKICAgIENhbGVuZGFyTGlzdFRyaWdnZXJbIldvcmtlciJdID0gIndvcmtlciI7CiAgICBDYWxlbmRhckxpc3RUcmlnZ2VyWyJDbGllbnRJbmNsdWRpbmdFdmVudHMiXSA9ICJjbGllbnRJbmNsdWRpbmdFdmVudHMiOwogICAgQ2FsZW5kYXJMaXN0VHJpZ2dlclsiQ2xpZW50Q2FsZW5kYXJzT25seSJdID0gImNsaWVudENhbGVuZGFyT25seSI7Cn0pKENhbGVuZGFyTGlzdFRyaWdnZXIgfHwgKENhbGVuZGFyTGlzdFRyaWdnZXIgPSB7fSkpOwpleHBvcnQgdmFyIENBTEVOREFSX0xJU1QgPSAoX2EgPSBjcmVhdGUoJ0NBTEVOREFSX0xJU1QnLCB7CiAgICBzdWNjZXNzOiBmdW5jdGlvbiAoc3RhdGUsIG1ldGEsIHBheWxvYWQpIHsKICAgICAgICB2YXIgX2E7CiAgICAgICAgLy8gUmV0YWluIGhpZGRlbiBzdGF0ZQogICAgICAgIHZhciBjYWxlbmRhckhpZGRlblN0YXRlID0gZmxhdHRlbihPYmplY3QudmFsdWVzKHN0YXRlLmNhbGVuZGFycykpCiAgICAgICAgICAgIC5yZWR1Y2UoZnVuY3Rpb24gKGNhbHMsIG5leHQpIHsKICAgICAgICAgICAgY2Fsc1tuZXh0LmlkXSA9IG5leHQ7CiAgICAgICAgICAgIHJldHVybiBjYWxzOwogICAgICAgIH0sIHt9KTsKICAgICAgICBpZiAoIW1ldGEuYWNjb3VudCkgewogICAgICAgICAgICB2YXIgY2FsZW5kYXJzXzEgPSB7fTsKICAgICAgICAgICAgcGF5bG9hZC5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7CiAgICAgICAgICAgICAgICB2YXIgX2E7CiAgICAgICAgICAgICAgICBpZiAoIWNhbGVuZGFyc18xW2MuYWNjb3VudF0pIHsKICAgICAgICAgICAgICAgICAgICBjYWxlbmRhcnNfMVtjLmFjY291bnRdID0gW107CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjYWxlbmRhcnNfMVtjLmFjY291bnRdLnB1c2goX19hc3NpZ24oX19hc3NpZ24oe30sIGMpLCB7IGhpZGRlbjogKChfYSA9IGNhbGVuZGFySGlkZGVuU3RhdGVbYy5pZF0pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5oaWRkZW4pIHx8IGMuaGlkZGVuIH0pKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHJldHVybiB1cGRhdGUoc3RhdGUsIHsKICAgICAgICAgICAgICAgIGNhbGVuZGFyczogeyAkc2V0OiBjYWxlbmRhcnNfMSB9LAogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgdmFyIHNob3duUGF5bG9hZCA9IHBheWxvYWQubWFwKGZ1bmN0aW9uIChjKSB7CiAgICAgICAgICAgIHZhciBfYTsKICAgICAgICAgICAgcmV0dXJuIChfX2Fzc2lnbihfX2Fzc2lnbih7fSwgYyksIHsgaGlkZGVuOiAoKF9hID0gY2FsZW5kYXJIaWRkZW5TdGF0ZVtjLmlkXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmhpZGRlbikgfHwgYy5oaWRkZW4gfSkpOwogICAgICAgIH0pOwogICAgICAgIHJldHVybiB1cGRhdGUoc3RhdGUsIHsKICAgICAgICAgICAgY2FsZW5kYXJzOiB7CiAgICAgICAgICAgICAgICAkc2V0OiAoX2EgPSB7fSwKICAgICAgICAgICAgICAgICAgICBfYVttZXRhLmFjY291bnRdID0gc2hvd25QYXlsb2FkLAogICAgICAgICAgICAgICAgICAgIF9hKSwKICAgICAgICAgICAgfSwKICAgICAgICB9KTsKICAgIH0sCn0pLCBfYS50eXBlKSwgY2FsZW5kYXJMaXN0ID0gX2EuYWN0aW9uLCBjYWxlbmRhckxpc3RSZWR1Y2VyID0gX2EucmVkdWNlcjsKZXhwb3J0IHZhciBDYWxlbmRhckV2ZW50RGlzcGxheVNjb3BlOwooZnVuY3Rpb24gKENhbGVuZGFyRXZlbnREaXNwbGF5U2NvcGUpIHsKICAgIENhbGVuZGFyRXZlbnREaXNwbGF5U2NvcGVbIkNvbW1hbmQiXSA9ICJjb21tYW5kIjsKICAgIENhbGVuZGFyRXZlbnREaXNwbGF5U2NvcGVbIlJzYiJdID0gInJzYiI7Cn0pKENhbGVuZGFyRXZlbnREaXNwbGF5U2NvcGUgfHwgKENhbGVuZGFyRXZlbnREaXNwbGF5U2NvcGUgPSB7fSkpOwpleHBvcnQgdmFyIENBTEVOREFSX0VWRU5UX0xJU1QgPSAoX2IgPSBjcmVhdGUoJ0NBTEVOREFSX0VWRU5UX0xJU1QnLCB7CiAgICBzdWNjZXNzOiBmdW5jdGlvbiAoc3RhdGUsIG1ldGEsIHBheWxvYWQpIHsKICAgICAgICB2YXIgX2E7CiAgICAgICAgdmFyIGV2ZW50cyA9IHt9OwogICAgICAgIHBheWxvYWQuZm9yRWFjaChmdW5jdGlvbiAoZSkgewogICAgICAgICAgICBpZiAoIWV2ZW50c1tlLmFjY291bnRdKSB7CiAgICAgICAgICAgICAgICBldmVudHNbZS5hY2NvdW50XSA9IFtdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGV2ZW50c1tlLmFjY291bnRdLnB1c2goZSk7CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICBjYWxlbmRhckV2ZW50czogKF9hID0ge30sCiAgICAgICAgICAgICAgICBfYVttZXRhLnNjb3BlXSA9IHsKICAgICAgICAgICAgICAgICAgICAkc2V0OiBldmVudHMsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgX2EpLAogICAgICAgIH0pOwogICAgfSwKfSksIF9iLnR5cGUpLCBjYWxlbmRhckV2ZW50TGlzdCA9IF9iLmFjdGlvbiwgY2FsZW5kYXJFdmVudExpc3RSZWR1Y2VyID0gX2IucmVkdWNlcjsKZXhwb3J0IHZhciBDQUxFTkRBUl9ISURFX1RPR0dMRSA9IChfYyA9IGNyZWF0ZSgnQ0FMRU5EQVJfSElERV9UT0dHTEUnLCB7CiAgICBzdGFydDogZnVuY3Rpb24gKHN0YXRlLCBtZXRhKSB7CiAgICAgICAgdmFyIF9hLCBfYjsKICAgICAgICB2YXIgYWNjb3VudCA9IHN0YXRlLm1haWxib3guYWNjb3VudDsKICAgICAgICB2YXIgY2FsZW5kYXI7CiAgICAgICAgaWYgKGFjY291bnQpIHsKICAgICAgICAgICAgY2FsZW5kYXIgPSBzdGF0ZS5jYWxlbmRhcnNbYWNjb3VudF0uZmluZChmdW5jdGlvbiAoYykgeyByZXR1cm4gYy5pZCA9PT0gbWV0YTsgfSk7CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICB2YXIgYWNjb3VudHMgPSBPYmplY3Qua2V5cyhzdGF0ZS5jYWxlbmRhcnMpOwogICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGFjY291bnRzXzEgPSBhY2NvdW50czsgX2kgPCBhY2NvdW50c18xLmxlbmd0aDsgX2krKykgewogICAgICAgICAgICAgICAgYWNjb3VudCA9IGFjY291bnRzXzFbX2ldOwogICAgICAgICAgICAgICAgY2FsZW5kYXIgPSBzdGF0ZS5jYWxlbmRhcnNbYWNjb3VudF0uZmluZChmdW5jdGlvbiAoYykgeyByZXR1cm4gYy5pZCA9PT0gbWV0YTsgfSk7CiAgICAgICAgICAgICAgICBpZiAoY2FsZW5kYXIpIHsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB2YXIgaW5kZXggPSBjYWxlbmRhciAmJiBhY2NvdW50ID8gc3RhdGUuY2FsZW5kYXJzW2FjY291bnRdLmluZGV4T2YoY2FsZW5kYXIpIDogdW5kZWZpbmVkOwogICAgICAgIGlmIChpbmRleCA9PT0gdW5kZWZpbmVkIHx8IGluZGV4IDwgMCB8fCAhY2FsZW5kYXIpIHsKICAgICAgICAgICAgcmV0dXJuIHN0YXRlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgICAgIGNhbGVuZGFyczogKF9hID0ge30sCiAgICAgICAgICAgICAgICBfYVthY2NvdW50XSA9IChfYiA9IHt9LAogICAgICAgICAgICAgICAgICAgIF9iW2luZGV4XSA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgJHNldDogX19hc3NpZ24oX19hc3NpZ24oe30sIGNhbGVuZGFyKSwgeyBoaWRkZW46ICFjYWxlbmRhci5oaWRkZW4gfSksCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBfYiksCiAgICAgICAgICAgICAgICBfYSksCiAgICAgICAgfSk7CiAgICB9LAp9KSwgX2MudHlwZSksIGNhbGVuZGFySGlkZVRvZ2dsZSA9IF9jLmFjdGlvbiwgY2FsZW5kYXJIaWRlVG9nZ2xlUmVkdWNlciA9IF9jLnJlZHVjZXI7CmV4cG9ydCB2YXIgQ0FMRU5EQVJfRVZFTlRfR0VUID0gKF9kID0gY3JlYXRlKCdDQUxFTkRBUl9FVkVOVF9HRVQnLCB7CiAgICBzdWNjZXNzOiBmdW5jdGlvbiAoc3RhdGUsIG1ldGEsIHBheWxvYWQpIHsKICAgICAgICBpZiAoIXBheWxvYWQpIHsKICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICAgICAgJHVuc2V0OiBbJ3NlbGVjdGVkQ2FsZW5kYXJFdmVudCddLAogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICBzZWxlY3RlZENhbGVuZGFyRXZlbnQ6IHsgJHNldDogcGF5bG9hZCB9LAogICAgICAgIH0pOwogICAgfSwKICAgIGZhaWx1cmU6IGZ1bmN0aW9uIChzdGF0ZSwgbWV0YSwgZXJyb3IpIHsKICAgICAgICByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgICAgICR1bnNldDogWydzZWxlY3RlZENhbGVuZGFyRXZlbnQnXSwKICAgICAgICB9KTsKICAgIH0sCn0pLCBfZC50eXBlKSwgY2FsZW5kYXJFdmVudEdldCA9IF9kLmFjdGlvbiwgY2FsZW5kYXJFdmVudEdldFJlZHVjZXIgPSBfZC5yZWR1Y2VyOwpleHBvcnQgdmFyIENBTEVOREFSX0VWRU5UX1JFU1BPTkQgPSAoX2UgPSBjcmVhdGUoJ0NBTEVOREFSX0VWRU5UX1JFU1BPTkQnLCB7fSksIF9lLnR5cGUpLCBjYWxlbmRhckV2ZW50UmVzcG9uZCA9IF9lLmFjdGlvbiwgY2FsZW5kYXJFdmVudFJlc3BvbmRSZWR1Y2VyID0gX2UucmVkdWNlcjsKZXhwb3J0IHZhciBzZWxlY3RXcml0YWJsZUNhbGVuZGFycyA9IGNyZWF0ZVNlbGVjdG9yKGZ1bmN0aW9uIChzdGF0ZSkgewogICAgcmV0dXJuIHN0YXRlLmNhbGVuZGFyczsKfSwgZnVuY3Rpb24gKGNhbGVuZGFycykgewogICAgdmFyIGZpbHRlcmVkQ2FsZW5kYXJzID0gX19hc3NpZ24oe30sIGNhbGVuZGFycyk7CiAgICBmb3IgKHZhciBhY2NvdW50IGluIGZpbHRlcmVkQ2FsZW5kYXJzKSB7CiAgICAgICAgaWYgKGZpbHRlcmVkQ2FsZW5kYXJzW2FjY291bnRdKSB7CiAgICAgICAgICAgIGZpbHRlcmVkQ2FsZW5kYXJzW2FjY291bnRdID0gZmlsdGVyZWRDYWxlbmRhcnNbYWNjb3VudF0KICAgICAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGNhbGVuZGFyKSB7IHJldHVybiAhY2FsZW5kYXIucmVhZE9ubHk7IH0pOwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBmaWx0ZXJlZENhbGVuZGFyczsKfSk7CmV4cG9ydCBkZWZhdWx0IFsKICAgIGNhbGVuZGFyTGlzdFJlZHVjZXIsCiAgICBjYWxlbmRhckhpZGVUb2dnbGVSZWR1Y2VyLAogICAgY2FsZW5kYXJFdmVudEdldFJlZHVjZXIsCiAgICBjYWxlbmRhckV2ZW50TGlzdFJlZHVjZXIsCl07Cg=="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/calendars.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/calendars.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;AACxC,OAAO,MAAM,MAAM,qBAAqB,CAAC;AAEzC,OAAO,EAAE,cAAc,EAAE,MAAM,UAAU,CAAC;AAC1C,OAAO,EAAE,OAAO,EAAE,MAAM,QAAQ,CAAC;AAEjC,MAAM,CAAN,IAAY,mBAIX;AAJD,WAAY,mBAAmB;IAC7B,wCAAiB,CAAA;IACjB,sEAA+C,CAAA;IAC/C,iEAA0C,CAAA;AAC5C,CAAC,EAJW,mBAAmB,KAAnB,mBAAmB,QAI9B;AAOD,MAAM,CACJ,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAAmB,EACnB,wBAAoB,EACpB,gCAA4B,CA2C3B;AAEH,MAAM,CAAN,IAAY,yBAGX;AAHD,WAAY,yBAAyB;IACnC,gDAAmB,CAAA;IACnB,wCAAW,CAAA;AACb,CAAC,EAHW,yBAAyB,KAAzB,yBAAyB,QAGpC;AAQD,MAAM,CACJ,IAAA;;;;;;;;;;;;;;;;;;YAAyB,EACzB,6BAAyB,EACzB,qCAAiC,CAmBhC;AAEH,MAAM,CACJ,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAA0B,EAC1B,8BAA0B,EAC1B,sCAAkC,CAiCjC;AAEH,MAAM,CACJ,IAAA;;;;;;;;;;;;;;;;YAAwB,EACxB,4BAAwB,EACxB,oCAAgC,CAiB/B;AAOH,MAAM,CACJ,IAAA,6EAA4B,EAC5B,gCAA4B,EAC5B,wCAAoC,CACmC;AAEzE,MAAM,CAAC,IAAM,uBAAuB,GAAG,cAAc,CACnD,UAAC,KAAiB;IAChB,OAAO,KAAK,CAAC,SAAS,CAAC;AACzB,CAAC,EACD,UAAC,SAAS;IAGR,IAAM,iBAAiB,gBAAS,SAAS,CAAE,CAAC;IAE5C,KAAK,IAAM,OAAO,IAAI,iBAAiB,EAAE;QACvC,IAAI,iBAAiB,CAAC,OAAO,CAAC,EAAE;YAC9B,iBAAiB,CAAC,OAAO,CAAC,GAAG,iBAAiB,CAAC,OAAO,CAAC;iBACpD,MAAM,CAAC,UAAA,QAAQ,IAAI,OAAA,CAAC,QAAQ,CAAC,QAAQ,EAAlB,CAAkB,CAAC,CAAC;SAC3C;KACF;IAED,OAAO,iBAAiB,CAAC;AAC3B,CAAC,CACF,CAAC;AAEF,eAAe;IACb,mBAAmB;IACnB,yBAAyB;IACzB,uBAAuB;IACvB,wBAAwB;CACzB,CAAC","sourcesContent":["import { create } from '@src/lib/redux';\nimport update from 'immutability-helper';\nimport { Calendar, CalendarEvent, AttendeeStatus, StoreState } from '@src/types';\nimport { createSelector } from 'reselect';\nimport { flatten } from 'lodash';\n\nexport enum CalendarListTrigger {\n  Worker = 'worker',\n  ClientIncludingEvents = 'clientIncludingEvents',\n  ClientCalendarsOnly = 'clientCalendarOnly',\n}\n\nexport interface CalendarListMeta {\n  type: CalendarListTrigger;\n  account?: string;\n}\n\nexport const {\n  type: CALENDAR_LIST,\n  action: calendarList,\n  reducer: calendarListReducer,\n} = create<CalendarListMeta, Calendar[]>('CALENDAR_LIST', {\n  success: (state, meta, payload) => {\n    // Retain hidden state\n    const calendarHiddenState = flatten(Object.values(state.calendars))\n      .reduce(\n      (cals, next) => {\n        cals[next.id] = next;\n        return cals;\n      },\n      {},\n    );\n\n    if (!meta.account) {\n      const calendars = {};\n      payload.forEach((c) => {\n        if (!calendars[c.account]) {\n          calendars[c.account] = [];\n        }\n        calendars[c.account].push({\n          ...c,\n          hidden: calendarHiddenState[c.id]?.hidden || c.hidden,\n        });\n      });\n\n      return update(state, {\n        calendars: { $set: calendars },\n      });\n    }\n\n    const shownPayload = payload.map(c => ({\n      ...c,\n      hidden: calendarHiddenState[c.id]?.hidden || c.hidden,\n    }));\n\n    return update(state, {\n      calendars: {\n        $set: {\n          [meta.account]: shownPayload,\n        },\n      },\n    });\n  },\n});\n\nexport enum CalendarEventDisplayScope {\n  Command = 'command',\n  Rsb = 'rsb',\n}\n\nexport interface CalendarEventRangeMeta {\n  scope: CalendarEventDisplayScope;\n  start: Date;\n  end: Date;\n}\n\nexport const {\n  type: CALENDAR_EVENT_LIST,\n  action: calendarEventList,\n  reducer: calendarEventListReducer,\n} = create<CalendarEventRangeMeta, CalendarEvent[]>('CALENDAR_EVENT_LIST', {\n  success: (state, meta, payload) => {\n    const events = {};\n    payload.forEach((e) => {\n      if (!events[e.account]) {\n        events[e.account] = [];\n      }\n      events[e.account].push(e);\n    });\n\n    return update(state, {\n      calendarEvents: {\n        [meta.scope]: {\n          $set: events,\n        },\n      },\n    });\n  },\n});\n\nexport const {\n  type: CALENDAR_HIDE_TOGGLE,\n  action: calendarHideToggle,\n  reducer: calendarHideToggleReducer,\n} = create<string, null>('CALENDAR_HIDE_TOGGLE', {\n  start: (state, meta) => {\n    let account = state.mailbox.account;\n    let calendar;\n\n    if (account) {\n      calendar = state.calendars[account].find(c => c.id === meta);\n    } else {\n      const accounts = Object.keys(state.calendars);\n      for (account of accounts) {\n        calendar = state.calendars[account].find(c => c.id === meta);\n        if (calendar) {\n          break;\n        }\n      }\n    }\n\n    const index = calendar && account ? state.calendars[account].indexOf(calendar) : undefined;\n    if (index === undefined || index < 0 || !calendar) {\n      return state;\n    }\n\n    return update(state, {\n      calendars: {\n        [account!]: {\n          [index]: {\n            $set: { ...calendar, hidden: !calendar.hidden },\n          },\n        },\n      },\n    });\n  },\n});\n\nexport const {\n  type: CALENDAR_EVENT_GET,\n  action: calendarEventGet,\n  reducer: calendarEventGetReducer,\n} = create<string, CalendarEvent|null>('CALENDAR_EVENT_GET', {\n  success: (state, meta, payload) => {\n    if (!payload) {\n      return update(state, {\n        $unset: ['selectedCalendarEvent'],\n      });\n    }\n\n    return update(state, {\n      selectedCalendarEvent: { $set: payload },\n    });\n  },\n  failure: (state, meta, error) =>\n    update(state, {\n      $unset: ['selectedCalendarEvent'],\n    }),\n});\n\nexport interface CalendarEventRespondMeta {\n  id: string;\n  status: AttendeeStatus;\n}\n\nexport const {\n  type: CALENDAR_EVENT_RESPOND,\n  action: calendarEventRespond,\n  reducer: calendarEventRespondReducer,\n} = create<CalendarEventRespondMeta, null>('CALENDAR_EVENT_RESPOND', {});\n\nexport const selectWritableCalendars = createSelector(\n  (state: StoreState) => {\n    return state.calendars;\n  },\n  (calendars): {\n    [account: string]: Calendar[];\n  } => {\n    const filteredCalendars = { ... calendars };\n\n    for (const account in filteredCalendars) {\n      if (filteredCalendars[account]) {\n        filteredCalendars[account] = filteredCalendars[account]\n          .filter(calendar => !calendar.readOnly);\n      }\n    }\n\n    return filteredCalendars;\n  },\n);\n\nexport default [\n  calendarListReducer,\n  calendarHideToggleReducer,\n  calendarEventGetReducer,\n  calendarEventListReducer,\n];\n"]}]}