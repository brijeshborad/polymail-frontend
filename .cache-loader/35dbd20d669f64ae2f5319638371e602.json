{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/searchDb.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/searchDb.ts","mtime":1675280254068},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/searchDb.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/searchDb.ts"],"names":[],"mappings":"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","sourcesContent":["import Dexie from 'dexie';\nimport { captureException } from '@sentry/browser';\nimport Cache, { Stores, SEARCH_DB_VERSION } from '@src/lib/db';\nimport { MessageBody, Mailbox, Thread, MailboxType } from '@src/types';\nimport { Observable } from 'rxjs';\nimport lunr from 'lunr';\nimport htmlToText from 'html-to-text';\nimport { keyBy, size, compact, intersection, flatten, uniq, difference } from 'lodash';\nimport {\n  threadPlainStringValue,\n  tokenizeThreads,\n  listThreadIdsByEmail,\n  countThreadsByEmail,\n  listThreadsByEmail,\n} from './thread';\nimport { queryParamsTextValue } from './search';\nimport { STOP_WORDS } from './searchUtils';\nimport { getSearchDbConfig } from './device';\nimport moment from 'moment';\n\nexport interface TokenizedMessageBody extends MessageBody {\n  tokens: string[];\n  updated: Date;\n}\n\nexport interface TokenizedThread {\n  id: string;\n  internal: Date;\n  tokens: string[];\n  hasAttachments?: number;\n  hasReminder?: number;\n  isOpened?: number;\n  isReplied?: number;\n  isUnread?: number;\n  isUnreplied?: number;\n  isUnopened?: number;\n}\n\nconst MAX_LIMIT = 200;\nexport const SEARCH_BODIES_EVICTION_DAYS = 3;\n\n// Constants for Message Bodies Database\nlet searchDb: SearchDb;\nconst mockIndexer: lunr.Index = lunr(() => { return; });\nconst punctuationRegex = new RegExp(/[,!\"\\#$%&'()*+\\-./:;<=>?@\\[\\\\\\]^_`{|}~\\s\\n\\t\\v\\f\\r\\0]/);\nlunr.tokenizer.separator = punctuationRegex;\nconst STOP_WORD_DICT = keyBy(STOP_WORDS);\n\n// IMPORTANT: READ WHEN UPGRDING https://dexie.org/docs/Tutorial/Design#database-versioning\n// NOTE(SHIN): Do not match to Polymail database since updating the version causes things to break\n// TODO(SHIN): Handle delete and recreate on version update\nclass SearchDb extends Dexie {\n  bodies: Dexie.Table<TokenizedMessageBody, string>;\n  threads: Dexie.Table<TokenizedThread, string>;\n  constructor() {\n    super('polymail-search');\n    this.version(SEARCH_DB_VERSION).stores({\n      bodies: 'id, thread, *tokens, updated',\n      // tslint:disable-next-line:max-line-length\n      threads: 'id,hasAttachments,hasReminder,internal,isOpened,isReplied,isUnread,isUnreplied,isUnopened,*tokens',\n    });\n\n    this.bodies = this.table('bodies');\n    this.threads = this.table('threads');\n\n    this.on.versionchange.subscribe(() => {\n      this.close();\n      Observable.from(this.open()).subscribe({\n        error: (e) => {\n          // tslint:disable-next-line: no-console\n          console.error(e);\n          captureException(e);\n        },\n      });\n    });\n  }\n}\n\nexport function getSearchDb() {\n  return searchDb;\n}\n\n// limited to 300 deletions at a time\nexport const evictExpiredSearchCache = (): Observable<null> => {\n  // Run TTL clears once every initialization;\n  const deleteExpiredBodies = Observable.from(\n    searchDb.bodies\n      .where('updated')\n      .below(moment().subtract(SEARCH_BODIES_EVICTION_DAYS, 'days').toDate())\n      .limit(300)\n      .delete(),\n  );\n\n  // Delete any threads older than TTL\n  const deleteExpiredThreads = Observable.from(\n    searchDb.threads\n      .where('internal')\n      .below(moment().subtract(getSearchDbConfig().threadsEvictionDays, 'days').toDate())\n      .limit(300)\n      .delete(),\n  );\n\n  // Delete any threads older than TTL\n  // TODO(SHIN): Remove after December\n  const deleteInvalidBodies = Observable.from(\n    searchDb.bodies\n      .where('updated')\n      .startsWith('2')\n      .limit(300)\n      .delete(),\n  );\n\n  // Handles logging error to console and sentry on failure\n  const logAndPassError = (e: Error): Observable<null> => {\n    // tslint:disable-next-line:no-console\n    console.error(e);\n    captureException(e);\n    return Observable.of(null);\n  };\n\n  return Observable.from(deleteExpiredBodies)\n    .catch(e => logAndPassError(e))\n    .flatMap(() => deleteExpiredThreads)\n    .catch(e => logAndPassError(e))\n    .flatMap(() => deleteInvalidBodies)\n    .catch(e => logAndPassError(e))\n    .flatMap(() => Observable.of(null));\n};\n\nexport const limitSearchCacheSize = (maxCount: number) => Observable.from(searchDb.bodies.count())\n  .flatMap((currentCount) => {\n    if (currentCount < maxCount) {\n      return Observable.of(null);\n    }\n\n    return Observable.from(\n      searchDb.bodies.orderBy('updated').reverse().offset(maxCount).delete(),\n    );\n  });\n\n// Save Message Bodies into Tokenized Message Bodies for Search\nexport const saveBodies = (bodies: MessageBody[]): Observable<string> => {\n  if (!getSearchDbConfig().enabled || !bodies.length) {\n    return Observable.of('');\n  }\n\n  const dateLimit = moment().subtract(SEARCH_BODIES_EVICTION_DAYS, 'days');\n\n  // Handle which bodies to save based off eviction criteria\n  const filteredBodies = bodies.filter(b => moment(b.updated).isAfter(dateLimit));\n\n  // Does a fetch against cache to determing which bodies to index into tokenized bodies\n  const allIds = filteredBodies.map(b => b.id);\n  const first = filteredBodies[0];\n\n  // Return empty if we don't want to save anything in search db\n  if (!first) {\n    return Observable.of('');\n  }\n\n  // Request primary keys for any matching for thread id\n  const idsRequest = searchDb.bodies.where('thread').equals(first.thread).primaryKeys();\n  return Observable.from(idsRequest)\n    .flatMap((foundIds) => {\n      const toSave = difference(allIds, foundIds);\n      const toSaveBodies = bodies.filter(b => toSave.indexOf(b.id) !== -1);\n      const indexedBodies = tokenizedMessageBodies(toSaveBodies);\n      return Observable.from(searchDb.bodies.bulkPut(indexedBodies));\n    });\n};\n\n// TODO(SHIN): May want to handle not tokenizing threads that have already been saved into SEARCHDB\nexport const saveThreadsToSearchDb = (threads: Thread[]): Observable<string> => {\n  const config = getSearchDbConfig();\n  if (!config.enabled) {\n    return Observable.of('');\n  }\n  const dateLimit = moment().subtract(config.threadsEvictionDays, 'days');\n  const toSave = threads.filter(t => moment(t.internal).isAfter(dateLimit));\n  const updated = tokenizeThreads(toSave);\n  return Observable.from(\n    searchDb.threads.bulkPut(updated),\n  );\n};\n\n// Tokenizes string into constituent parts. If english, uses porter stemmer from lunr for us english\nexport const tokenizeString = (string: string): string[] => {\n  const config = getSearchDbConfig();\n  const language = config.language;\n  const minLen = 3;\n  const maxLen = 64;\n  const maxAmount = 512;\n  if (config.enabled && language && language.startsWith('en-')) {\n    const stemmedTokens = (mockIndexer as any)\n      .pipeline.run(lunr.tokenizer(string))\n      .map((token: lunr.Token) => {\n        const str = token.toString();\n        return str.slice(0, Math.min(str.length, maxLen));\n      })\n      .filter((str: string) =>\n        !STOP_WORD_DICT[str] && !str.match(/^\\d/) && str.length >= minLen,\n      );\n    const uniqueEnglishValues: string[] = uniq(stemmedTokens);\n    return uniqueEnglishValues.slice(0, Math.min(maxAmount, uniqueEnglishValues.length));\n  }\n\n  // Do normal string split for non english languages\n  const tokens = string.toLowerCase().split(punctuationRegex)\n    .filter((str: string) =>\n      !STOP_WORD_DICT[str] && !str.match(/^\\d/) && str.length >= minLen,\n    );\n  const uniqueUnknownValues = uniq(tokens);\n  return uniqueUnknownValues.slice(0, Math.min(maxAmount, uniqueUnknownValues.length));\n};\n\n// Pipeline to check box values\nexport const checkBoxResults = (mailbox: Mailbox, threads: Thread[]): Thread[] => {\n  const trashOrSpamDict = {\n    [MailboxType.Trash.valueOf()]: true,\n    [MailboxType.Spam.valueOf()]: true,\n  };\n\n  const isTrashOrSpam = [MailboxType.Trash, MailboxType.Spam].indexOf(mailbox.type) !== -1;\n  const boxQueryParam = mailbox.queryParams && mailbox.queryParams.box || false;\n  if (isTrashOrSpam) {\n    return threads.filter(t => t.box.valueOf() === mailbox.type.valueOf());\n  }\n\n  // Handle box query param match\n  if (boxQueryParam) {\n    return threads.filter(t => t.box === boxQueryParam);\n  }\n\n  // Otherwise filter out items in the trash or spam folder\n  return threads.filter(t => !trashOrSpamDict[t.box]);\n};\n\n// Pipeline to check quoted text\nexport const checkQuotedTextAfter = (\n  mailbox: Mailbox,\n  threads: Thread[],\n  whitelist: {},\n): Thread[] => {\n  // Handle quoted search\n  const isQuoted = mailbox.queryParams && mailbox.queryParams.quoted === true;\n  const query = mailbox.queryParams &&\n    queryParamsTextValue(mailbox.queryParams).replace(/\"/g, '').trim();\n  if (!!isQuoted && query) {\n    return threads.filter((thread) => {\n      // Check whitelist\n      if (!!whitelist[thread.id]) {\n        return true;\n      }\n\n      // Check plain string value\n      const plainStringValue = threadPlainStringValue(thread).toLowerCase();\n      return plainStringValue.indexOf(query.toLowerCase()) !== -1;\n    });\n  }\n\n  return threads;\n};\n\n// Pipeline to check quoted text\nconst checkAccountAfter = (mailbox: Mailbox, threads: Thread[]): Thread[] => {\n  const accountId = mailbox.account;\n  if (!accountId) {\n    return threads;\n  }\n  return threads.filter(t => t.account === accountId);\n};\n\n// TODO(SHIN): Discuss, faster in some scenarios\n// // Pipeline to check quoted text\n// const checkBeforeResults = (mailbox: Mailbox, threads: Thread[]): Thread[] => {\n//   // Handle quoted search\n//   const before = mailbox.queryParams && mailbox.queryParams.before;\n//   if (!before) {\n//     return threads;\n//   }\n//   return threads.filter(t => t.internal < before);\n// };\n\n// // Pipeline to check quoted text\n// const checkAfterResults = (mailbox: Mailbox, threads: Thread[]): Thread[] => {\n//   // Handle quoted search\n//   const after = mailbox.queryParams && mailbox.queryParams.after;\n//   if (!after) {\n//     return threads;\n//   }\n//   return threads.filter(t => t.internal > after);\n// };\n\n// Pipeline to check lists\nconst boxListQueryIds = (mailbox: Mailbox, limit?: number): Observable<string[]> => {\n  const listId = mailbox.queryParams && mailbox.queryParams.list;\n  if (!listId) {\n    return Observable.of([]);\n  }\n\n  const range = IDBKeyRange.bound([listId, new Date(0)], [listId, Date()]);\n  return Cache.listIndexKeys(\n      Stores.Threads,\n      'list_internal',\n      range,\n    )\n    .map((keys) => {\n      if (limit && keys.length > limit) {\n        return keys.reverse().splice(0, limit);\n      }\n      return keys;\n    });\n};\n\n// Pipeline to check box\nconst boxQueryIds = (mailbox: Mailbox, limit?: number): Observable<string[]> => {\n  const box = mailbox.queryParams && mailbox.queryParams.box;\n  if (!box) {\n    return Observable.of([]);\n  }\n\n  return Cache.listIndexKeys(\n      Stores.Threads,\n      'box_sort',\n      IDBKeyRange.bound([box, new Date(0)], [box, Date()]),\n    )\n    .map((keys) => {\n      if (limit && keys.length > limit) {\n        return keys.reverse().splice(0, limit);\n      }\n      return keys;\n    });\n};\n\n// Pipeline to check starred Index\nconst starredQueryIds = (mailbox: Mailbox, limit?: number): Observable<string[]> => {\n  const isStarred = mailbox.queryParams && mailbox.queryParams.isStarred;\n  if (!isStarred) {\n    return Observable.of([]);\n  }\n\n  const range = IDBKeyRange.bound([1, new Date(0)], [1, Date()]);\n\n  const fullThreadIds = Cache.listIndexKeys(\n    Stores.Threads,\n    'starred_internal',\n    range,\n  );\n\n  if (limit) {\n    const limitRequest: Observable<string[]> = Cache.listIndex(\n        Stores.Threads,\n        'starred_internal',\n        range,\n        true,\n        limit,\n      )\n      .map((threads: Thread[]) => threads.map(t => t.id));\n\n    return limitRequest;\n  }\n\n  return fullThreadIds;\n};\n\n// Returns a limited set of DB results\nconst limitSearchDbResults = (\n  c: Dexie.Collection<TokenizedThread|Thread, string>,\n  limit?: number,\n): Observable<string[]> => {\n  return Observable.from(c.reverse().sortBy('internal'))\n  .map(r => r.splice(0, Math.min(r.length, limit || MAX_LIMIT))\n    .map(t => t.id),\n  );\n};\n\n// Pipeline to check attachments\nconst hasAttachmentsQueryId = (mailbox: Mailbox, limit?: number): Observable<string[]> => {\n  const hasAttachments = mailbox.queryParams && mailbox.queryParams.hasAttachment;\n  if (!hasAttachments) {\n    return Observable.of([]);\n  }\n\n  // Initial db query\n  const dbQuery = searchDb.threads\n    .where('hasAttachments')\n    .equals(1);\n\n  // Return limit if query exists\n  if (limit) {\n    return limitSearchDbResults(dbQuery, limit);\n  }\n  // If taking intersection, take all results to run intersection\n  return Observable.from(\n    dbQuery.primaryKeys(),\n  );\n};\n\n// Pipeline to check reminders\nconst hasReminderQueryIds = (mailbox: Mailbox, limit?: number): Observable<string[]> => {\n  const hasReminder = mailbox.queryParams && mailbox.queryParams.hasFollowUp;\n  if (!hasReminder) {\n    return Observable.of([]);\n  }\n\n  const dbQuery = searchDb.threads\n    .where('hasReminder')\n    .equals(1);\n\n  if (limit) {\n    return limitSearchDbResults(dbQuery, limit);\n  }\n\n  return Observable.from(\n    dbQuery.primaryKeys(),\n  );\n};\n\n// Pipeline to check opened state\nconst isOpenedQueryIds = (mailbox: Mailbox, limit?: number): Observable<string[]> => {\n  const isOpened = mailbox.queryParams && mailbox.queryParams.isOpened;\n  if (!isOpened) {\n    return Observable.of([]);\n  }\n  const dbQuery = searchDb.threads\n    .where('isOpened')\n    .equals(1);\n\n  if (limit) {\n    return limitSearchDbResults(dbQuery);\n  }\n\n  return Observable.from(\n    dbQuery.primaryKeys(),\n  );\n};\n\n// Pipeline to check replied state\nconst isRepliedQueryIds = (mailbox: Mailbox, limit?: number): Observable<string[]> => {\n  const isReplied = mailbox.queryParams && mailbox.queryParams.isReplied;\n  if (!isReplied) {\n    return Observable.of([]);\n  }\n\n  const dbQuery = searchDb.threads\n    .where('isReplied')\n    .equals(1);\n\n  if (limit) {\n    return limitSearchDbResults(dbQuery);\n  }\n\n  return Observable.from(\n    dbQuery.primaryKeys(),\n  );\n};\n\n// Pipeline to check unread state\nconst isUnreadQueryIds = (mailbox: Mailbox, limit?: number): Observable<string[]> => {\n  const isUnread = mailbox.queryParams && mailbox.queryParams.isUnread;\n  if (!isUnread) {\n    return Observable.of([]);\n  }\n\n  const dbQuery = searchDb.threads\n    .where('isUnread')\n    .equals(1);\n\n  if (limit) {\n    return limitSearchDbResults(dbQuery);\n  }\n\n  return Observable.from(\n    dbQuery.primaryKeys(),\n  );\n};\n\n// Pipeline to check unreplied\nconst isUnrepliedQueryIds = (mailbox: Mailbox, limit?: number): Observable<string[]> => {\n  const isUnreplied = mailbox.queryParams && mailbox.queryParams.isUnreplied;\n  if (!isUnreplied) {\n    return Observable.of([]);\n  }\n\n  const dbQuery = searchDb.threads\n    .where('isUnreplied')\n    .equals(1);\n\n  if (limit) {\n    return limitSearchDbResults(dbQuery);\n  }\n\n  return Observable.from(\n    dbQuery.primaryKeys(),\n  );\n};\n\n// Pipeline to check unopened state\nconst isUnopenedQueryIds = (mailbox: Mailbox, limit?: number): Observable<string[]> => {\n  const isUnopened = mailbox.queryParams && mailbox.queryParams.isUnopened;\n  if (!isUnopened) {\n    return Observable.of([]);\n  }\n\n  const dbQuery = searchDb.threads\n    .where('isUnopened')\n    .equals(1);\n\n  if (limit) {\n    return limitSearchDbResults(dbQuery);\n  }\n\n  return Observable.from(\n    dbQuery.primaryKeys(),\n  );\n};\n\n// Pipeline to return before results\nconst beforeQueryIds = (mailbox: Mailbox, limit?: number): Observable<string[]> => {\n  const before = mailbox.queryParams && mailbox.queryParams.before;\n  if (!before) {\n    return Observable.of([]);\n  }\n\n  const dbQuery = searchDb.threads\n    .where('internal')\n    .below(before);\n\n  if (limit) {\n    return Observable.from(dbQuery.reverse().limit(limit).primaryKeys());\n  }\n\n  return Observable.from(\n    dbQuery.primaryKeys(),\n  );\n};\n\n// Returns search results after a certain time\nconst afterQueryIds = (mailbox: Mailbox, limit?: number): Observable<string[]> => {\n  const after = mailbox.queryParams && mailbox.queryParams.after;\n  if (!after) {\n    return Observable.of([]);\n  }\n\n  const dbQuery = searchDb.threads\n    .where('internal')\n    .above(after);\n\n  if (limit) {\n    return Observable.from(dbQuery.reverse().limit(limit).primaryKeys());\n  }\n\n  return Observable.from(\n    dbQuery.primaryKeys(),\n  );\n};\n\n// Pipeline to check quoted text\nconst fromQueryIds = (mailbox: Mailbox, limit?: number): Observable<string[]> => {\n  const from = mailbox.queryParams && mailbox.queryParams.from;\n  const fromDict = from ? keyBy(from) : {};\n\n  // If from not defined, return results\n  if (!from || !size(fromDict)) {\n    return Observable.of([]);\n  }\n\n  return listThreadsByEmail(from, limit, (thread) => {\n    const joined = thread.messages.map(m => m.from).join(' ').toLowerCase();\n    // TODO: Need to sanitize from\n    return joined.search(from) >= 0;\n  }).map(threads => threads.map(thread => thread.id));\n};\n\n// Returns an AND query of all (with participants)\n// TODO(SHIN): Do not do count if with array only has one value\nconst withQueryIds = (mailbox: Mailbox, limit?: number): Observable<string[]> => {\n  const withArray = mailbox.queryParams && mailbox.queryParams.with || [];\n  if (!withArray.length) {\n    return Observable.of([]);\n  }\n\n  // Single request if only one with value is specified\n  const singleRequest = listThreadIdsByEmail(withArray[0]);\n\n  // Otherwise fetch counts and do optimized query based off best split\n  const counts = withArray.map(token =>\n    countThreadsByEmail(token)\n      .map(count => ({ token, count })),\n  );\n\n  let nextWithArray = withArray;\n  const multipleRequest = Observable.zip(...counts)\n    .flatMap((results) => {\n      const highest = results.reduce(\n        (prev, next) => next.count < prev.count ? next : prev,\n        results[0],\n      );\n\n      nextWithArray = nextWithArray.filter(value => value !== highest.token);\n      return Observable.of(highest);\n    })\n    .flatMap(result => listThreadsByEmail(result.token, limit))\n    .flatMap((results) => {\n      if (withArray.length === 1) {\n        return Observable.of(results);\n      }\n\n      // Reduction filter for AND query search results\n      const updated = nextWithArray.reduce(\n        (result: Thread[], key: string) => result\n          .filter((doc: Thread) => {\n            // Create dict for doc && make sure that the tokens match to complete the and query\n            const emailValues = doc.participantEmails.map(e => e.split('|')[0]);\n            const tokenDict = keyBy(emailValues);\n            return doc.participantEmails && !!tokenDict[key];\n          }),\n        results,\n      );\n      return Observable.of(updated);\n    })\n    .map((results) => {\n      // If limit sort by descending date\n      if (limit) {\n        return results\n          .sort((a, b) => b.internal.getTime() - a.internal.getTime())\n          .slice(0, Math.min(results.length, limit))\n          .map(t => t.id);\n      }\n\n      // Otherwise return\n      return results.map(t => t.id);\n    });\n\n  const dbRequest = withArray.length === 1\n    ? singleRequest\n    : multipleRequest;\n\n  return dbRequest;\n};\n\n// Returns an AND query of all (with participants)\n// TODO(SHIN): Have to match on the to array to actually determine to\nconst toQueryIds = (mailbox: Mailbox, limit?: number): Observable<string[]> => {\n  const toArray = mailbox.queryParams && mailbox.queryParams.to || [];\n  if (!toArray.length) {\n    return Observable.of([]);\n  }\n\n  // Single request if only one TO value is specified\n  const singleRequest = listThreadIdsByEmail(toArray[0]);\n\n  // Otherwise fetch counts and do optimized query based off best split\n  const counts = toArray.map(token =>\n    countThreadsByEmail(token)\n      .map(count => ({ token, count })),\n  );\n\n  let nextToArray = toArray;\n  const multipleRequest = Observable.zip(...counts)\n    .flatMap((results) => {\n      const highest = results.reduce(\n        (prev, next) => next.count < prev.count ? next : prev,\n        results[0],\n      );\n\n      nextToArray = nextToArray.filter(value => value !== highest.token);\n      return Observable.of(highest);\n    })\n    .flatMap(result => listThreadsByEmail(result.token, limit))\n    .flatMap((results) => {\n      if (toArray.length === 1) {\n        return Observable.of(results);\n      }\n\n      // Reduction filter for AND query search results\n      const updated = nextToArray.reduce(\n        (result: Thread[], key: string) => result\n          .filter((doc: Thread) => {\n            // Create dict for doc && make sure that the tokens match to complete the and query\n            const emailValues = doc.participantEmails.map(e => e.split('|')[0]);\n            const tokenDict = keyBy(emailValues);\n            return doc.participantEmails && !!tokenDict[key];\n          }),\n        results,\n      );\n      return Observable.of(updated);\n    })\n    .map((results) => {\n      // If limit sort by descending date\n      if (limit) {\n        return results\n          .sort((a, b) => b.internal.getTime() - a.internal.getTime())\n          .slice(0, Math.min(results.length, limit))\n          .map(t => t.id);\n      }\n\n      // Otherwise return\n      return results.map(t => t.id);\n    });\n\n  const dbRequest = toArray.length === 1\n    ? singleRequest\n    : multipleRequest;\n\n  return dbRequest;\n};\n\n// TODO(SHIN): Sort and filter predicate ids\nconst generateFilterIdRequests = (mailbox: Mailbox): Array<Observable<string[]>> => {\n  let filterIdsRequest: Array<Observable<string[]>> = [];\n  const textQueryExists = mailbox.queryParams &&\n    queryParamsTextValue(mailbox.queryParams).trim() !== '';\n  const limit = !textQueryExists && MAX_LIMIT || undefined;\n\n  // From pipeline request\n  if (mailbox.queryParams && mailbox.queryParams.from) {\n    const fromRequest = fromQueryIds(mailbox, limit);\n    filterIdsRequest = filterIdsRequest.concat([\n      fromRequest,\n    ]);\n  }\n\n  // With pipeline Request\n  if (mailbox.queryParams && mailbox.queryParams.with) {\n    const withRequest = withQueryIds(mailbox, limit);\n    filterIdsRequest = filterIdsRequest.concat([\n      withRequest,\n    ]);\n  }\n\n  // To pipeline Request\n  if (mailbox.queryParams && mailbox.queryParams.to) {\n    const toRequest = toQueryIds(mailbox, limit);\n    filterIdsRequest = filterIdsRequest.concat([\n      toRequest,\n    ]);\n  }\n\n  // Starred pipeline request\n  if (mailbox.queryParams && mailbox.queryParams.isStarred) {\n    const starredRequest = starredQueryIds(mailbox);\n    filterIdsRequest = filterIdsRequest.concat([\n      starredRequest,\n    ]);\n  }\n\n  // Box pipeline request\n  if (mailbox.queryParams && mailbox.queryParams.box) {\n    if (mailbox.queryParams.list) { // Special handling for lists\n      const listRequest = boxListQueryIds(mailbox);\n      filterIdsRequest = filterIdsRequest.concat([\n        listRequest,\n      ]);\n    } else { // Normal handling for box\n      const boxRequest = boxQueryIds(mailbox);\n      filterIdsRequest = filterIdsRequest.concat([\n        boxRequest,\n      ]);\n    }\n  }\n\n  // Attachment pipeline request\n  if (mailbox.queryParams && mailbox.queryParams.hasAttachment) {\n    const attachmentRequest = hasAttachmentsQueryId(mailbox, limit);\n    filterIdsRequest = filterIdsRequest.concat([\n      attachmentRequest,\n    ]);\n  }\n\n  // Opened pipeline request\n  if (mailbox.queryParams && mailbox.queryParams.isOpened) {\n    const isOpenedRequest = isOpenedQueryIds(mailbox, limit);\n    filterIdsRequest = filterIdsRequest.concat([\n      isOpenedRequest,\n    ]);\n  }\n\n  // Attachment pipeline request\n  if (mailbox.queryParams && mailbox.queryParams.isReplied) {\n    const isRepliedRequest = isRepliedQueryIds(mailbox, limit);\n    filterIdsRequest = filterIdsRequest.concat([\n      isRepliedRequest,\n    ]);\n  }\n\n  // Unread pipeline request\n  if (mailbox.queryParams && mailbox.queryParams.isUnread) {\n    const isUnreadRequest = isUnreadQueryIds(mailbox, limit);\n    filterIdsRequest = filterIdsRequest.concat([\n      isUnreadRequest,\n    ]);\n  }\n\n  // Unreplied pipeline request\n  if (mailbox.queryParams && mailbox.queryParams.isUnreplied) {\n    const isUnrepliedRequest = isUnrepliedQueryIds(mailbox, limit);\n    filterIdsRequest = filterIdsRequest.concat([\n      isUnrepliedRequest,\n    ]);\n  }\n\n  // Attachment pipeline request\n  if (mailbox.queryParams && mailbox.queryParams.isUnopened) {\n    const isUnopenedRequest = isUnopenedQueryIds(mailbox, limit);\n    filterIdsRequest = filterIdsRequest.concat([\n      isUnopenedRequest,\n    ]);\n  }\n\n  // Attachment pipeline request\n  if (mailbox.queryParams && mailbox.queryParams.hasFollowUp) {\n    const hasReminderRequest = hasReminderQueryIds(mailbox, limit);\n    filterIdsRequest = filterIdsRequest.concat([\n      hasReminderRequest,\n    ]);\n  }\n\n  // Before pipeline request\n  if (mailbox.queryParams && mailbox.queryParams.before) {\n    const beforeRequest = beforeQueryIds(mailbox, limit);\n    filterIdsRequest = filterIdsRequest.concat([\n      beforeRequest,\n    ]);\n  }\n\n  // After pipeline request\n  if (mailbox.queryParams && mailbox.queryParams.after) {\n    const afterRequest = afterQueryIds(mailbox, limit);\n    filterIdsRequest = filterIdsRequest.concat([\n      afterRequest,\n    ]);\n  }\n\n  return filterIdsRequest;\n};\n\n// Handle local thread search\n// TODO(SHIN): Need to handle additional query params for box/from/with/etc\nexport const newLocalThreadSearch = (mailbox: Mailbox, limit?: number): Observable<Thread[]> => {\n  const textSearch = mailbox.queryParams && queryParamsTextValue(mailbox.queryParams);\n  let queryIdsRequest: Array<Observable<string[]>> = [];\n\n  // Message Bodies Search, returning values as tokenized threads\n  // Probably want a cleaner way of setting quoted matches\n  let quotedBodiesMatch = {};\n  const messageBodiesRequest = searchBodyThreadIds(mailbox)\n    .map((results) => {\n      quotedBodiesMatch = keyBy(results);\n      return results;\n    });\n\n  // Thread Table Search\n  const threadMetasRequest = searchThreadIds(mailbox);\n\n  // Query results\n  queryIdsRequest = queryIdsRequest.concat([\n    messageBodiesRequest,\n    threadMetasRequest,\n  ]);\n\n  // Generate db requests based off mailboxParams\n  const filterIdsRequest = generateFilterIdRequests(mailbox);\n\n  // Handle setting primary and intersection results\n  let primaryIdsRequest: Array<Observable<string[]>> = [];\n  let intersectionIdsRequest: Array<Observable<string[]>> = [];\n  if (textSearch) {\n    primaryIdsRequest = queryIdsRequest;\n    intersectionIdsRequest = filterIdsRequest;\n  } else {\n    primaryIdsRequest = filterIdsRequest;\n  }\n\n  // Fire all requests\n  const zippedRequest = Observable.zip(...primaryIdsRequest)\n    .map((results: string[][]) => {\n      // Return intersection of requests if no text query\n      if (!textSearch) {\n        return intersection(...results.map(r => compact(r)));\n      }\n      // Otherwise combine results\n      return uniq(flatten(results));\n    })\n    // TODO(SHIN): Handle cases where search query returns no results but there is a filter\n    .flatMap((primaryResults) => {\n      // If no intersections requested, then return results\n      if (!intersectionIdsRequest.length) {\n        return Observable.of(primaryResults);\n      }\n\n      // Do not run intersection if no results for query search\n      if (!primaryResults.length && textSearch) {\n        return Observable.of(primaryResults);\n      }\n\n      // Otherwise run filter requests and intersect results for ids\n      return Observable.zip(...intersectionIdsRequest)\n        .map(ids => intersection(...ids))\n        .map((filterIds) => {\n\n          // If no text search, return filter ids\n          if (!textSearch) {\n            return filterIds;\n          }\n\n          // Otherwise return intersection of query and filters\n          const allIds = [\n            filterIds,\n            primaryResults,\n          ];\n          return intersection(...allIds);\n        });\n    })\n    // Get full threads from thread ids\n    .flatMap(results => Cache.bulkGet<Thread>(Stores.Threads, results))\n    // TODO(SHIN): We should handle compaction on bulkGet endpoint. Can remove once implemented\n    .map(results => compact(results))\n    // Run quoted search filter if search query is quoted\n    .map(threads => checkQuotedTextAfter(mailbox, threads, quotedBodiesMatch))\n    .map(threads => checkAccountAfter(mailbox, threads))\n    // Sort threads by descending\n    .map(threads => checkBoxResults(mailbox, threads))\n    .map((threads: Thread[]) =>\n      threads.sort((a: Thread, b: Thread) => b.sort.getTime() - a.sort.getTime()),\n    );\n\n  return zippedRequest;\n};\n\n// Searches Thread snippets returning a set of threadIds, sorted by descending date.\nconst searchThreadIds = (mailbox: Mailbox, limit?: number): Observable<string[]> => {\n  const textSearch = mailbox.queryParams && queryParamsTextValue(mailbox.queryParams);\n  // Return nothing if mailbox is empty\n  if (!textSearch) {\n    return Observable.of([]);\n  }\n\n  const tokenArray = tokenizeString(textSearch).sort((a, b) => b.length - a.length);\n\n  const counts = tokenArray.map(token =>\n    Observable.from(searchDb.threads.where('tokens').equals(token).count())\n    .map(count => ({ token, count })),\n  );\n\n  let nextTokenArray = tokenArray;\n  return Observable.zip(...counts)\n    .flatMap((results) => {\n      const highest = results.reduce(\n        (prev, next) => next.count < prev.count ? next : prev,\n        results[0],\n      );\n\n      nextTokenArray = nextTokenArray.filter(value => value !== highest.token);\n      return Observable.of(highest);\n    })\n    .flatMap(result => searchDb.threads.where('tokens').equals(result.token).toArray())\n    .flatMap((results) => {\n      if (tokenArray.length === 1) {\n        return Observable.of(results);\n      }\n\n      // Reduction filter for AND query search results\n      const updated = nextTokenArray.reduce(\n        (result: TokenizedThread[], key: string) => result\n          .filter((doc: TokenizedThread) => {\n\n            // Create dict for doc && make sure that the tokens match to complete the and query\n            const tokenDict = keyBy(doc.tokens);\n            return doc.tokens && !!tokenDict[key];\n          }),\n        results,\n      );\n      return Observable.of(updated);\n    })\n    .map((results) => {\n      return compact(results)\n        .sort((a, b) => b.internal.getTime() - a.internal.getTime())\n        .slice(0, Math.min(results.length, limit || MAX_LIMIT))\n        .map(t => t.id);\n    });\n};\n\n// Tokenizes the content of message bodies so they can be searched using fts\nexport const tokenizedMessageBodies = (bodies: MessageBody[]): TokenizedMessageBody[] => {\n  // const fakeDiv = FakeDOM().createElement('div');\n  const indexedBodies: TokenizedMessageBody[] = bodies.map((body) => {\n    const plainText = htmlToText.fromString(\n      body.body,\n      {\n        ignoreHref: true,\n        ignoreImage: true,\n        wordwrap: false,\n      },\n    );\n    return {\n      ...body,\n      tokens: tokenizeString(plainText),\n    };\n  });\n  return indexedBodies;\n};\n\n// Returns a list of thread ids where there is a fts match on message body\nexport const searchBodyThreadIds = (mailbox: Mailbox, limit?: number): Observable<string[]> => {\n  const textSearch = mailbox.queryParams && queryParamsTextValue(mailbox.queryParams);\n  const isQuoted = mailbox.queryParams && mailbox.queryParams.quoted === true;\n  const quotedQuery = isQuoted && mailbox.queryParams &&\n    queryParamsTextValue(mailbox.queryParams).replace(/\"/g, '').trim();\n  // Return nothing if mailbox is empty\n  if (!textSearch) {\n    return Observable.of([]);\n  }\n\n  const tokenArray = tokenizeString(textSearch).sort((a, b) => b.length - a.length);\n\n  const counts = tokenArray.map(token =>\n    Observable.from(searchDb.bodies.where('tokens').equals(token).count())\n    .map(count => ({ token, count })),\n  );\n\n  let nextTokenArray = tokenArray;\n  return Observable.zip(...counts)\n    .flatMap((results) => {\n      const highest = results.reduce(\n        (prev, next) => next.count < prev.count ? next : prev,\n        results[0],\n      );\n\n      nextTokenArray = nextTokenArray.filter(value => value !== highest.token);\n      return Observable.of(highest);\n    })\n    .flatMap(result => searchDb.bodies.where('tokens').equals(result.token).toArray())\n    .flatMap((results) => {\n      if (tokenArray.length === 1) {\n        return Observable.of(results);\n      }\n\n      // Reduction filter for AND query search results\n      const updated = nextTokenArray.reduce(\n        (result: TokenizedMessageBody[], key: string) => result\n          .filter((doc: TokenizedMessageBody) => {\n\n            // Create dict for doc && make sure that the tokens match to complete the and query\n            const tokenDict = keyBy(doc.tokens);\n            return doc.tokens && !!tokenDict[key];\n          }),\n        results,\n      );\n      return Observable.of(updated);\n    })\n    .map((results) => {\n      // Handle quoted queries\n      if (isQuoted && quotedQuery) {\n            // TODO: Need to sanitize quotedQuery\n        return results.filter(b => b.body.search(quotedQuery) >= 0);\n      }\n      return results;\n    })\n    .map((results) => {\n      return compact(\n        results\n        .sort((a, b) => b.updated.getTime() - a.updated.getTime())\n        .slice(0, Math.min(results.length, limit || MAX_LIMIT))\n        .map(t => t.thread),\n      );\n    });\n};\n\n// initDb must be called by app and worker init once\nexport function initSearchDb(): Observable<any> {\n  if (searchDb !== undefined) {\n    searchDb.close();\n  }\n\n  const checkDb = Observable.from(new Dexie('polymail-search').open());\n  return checkDb\n  .catch((e) => {\n    return Observable.of(null);\n  })\n  .flatMap((d: Dexie|null) => {\n\n    // Continue if no db found\n    if (!d) {\n      return Observable.of(null);\n    }\n\n    // Delete DB if version number changed\n    // TODO(SHIN): See if we can handle this without having to delete db and see if storage\n    // is ok after deleting db\n    if (d.verno !== SEARCH_DB_VERSION) {\n      const deleteRequests = d.tables.map(t => Observable.from(t.clear()));\n      return Observable.zip(...deleteRequests).map(() => {\n        d.close();\n        return Observable.from(d.delete());\n      });\n    }\n\n    // If version same, close db connection and load\n    d.close();\n    return Observable.of(null);\n  })\n  .flatMap(() => { // Reset DB\n    searchDb = new SearchDb();\n    return Observable.of(null);\n  });\n}\n\nexport default SearchDb;\n"]}]}