{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/team.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/team.ts","mtime":1675280254052},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkgewogICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHsKICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHsKICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTsKICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKQogICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07CiAgICAgICAgfQogICAgICAgIHJldHVybiB0OwogICAgfTsKICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9Owp2YXIgX2EsIF9iLCBfYywgX2Q7CmltcG9ydCB7IGNyZWF0ZSB9IGZyb20gJ0BzcmMvbGliL3JlZHV4JzsKaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnOwppbXBvcnQgdXBkYXRlIGZyb20gJ2ltbXV0YWJpbGl0eS1oZWxwZXInOwppbXBvcnQgeyBSZXNvdXJjZVN0YXR1cywgVGVhbVBsYW4gfSBmcm9tICdAc3JjL3R5cGVzJzsKaW1wb3J0IHsgcmVzb3VyY2VPayB9IGZyb20gJ0BzcmMvbGliL3Jlc291cmNlJzsKaW1wb3J0IHsgY3JlYXRlU2VsZWN0b3IgfSBmcm9tICdAc3JjL2xpYi9zZWxlY3Rvcic7CmV4cG9ydCB2YXIgVEVBTV9GRVRDSCA9IChfYSA9IGNyZWF0ZSgnVEVBTV9GRVRDSCcsIHsKICAgIHN0YXJ0OiBmdW5jdGlvbiAoc3RhdGUsIG1ldGEpIHsKICAgICAgICByZXR1cm4gdXBkYXRlKHN0YXRlLCB7IHRlYW06IHsgc3RhdHVzOiB7ICRzZXQ6IFJlc291cmNlU3RhdHVzLkxvYWRpbmcgfSB9IH0pOwogICAgfSwKICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChzdGF0ZSwgbWV0YSwgcGF5bG9hZCkgewogICAgICAgIC8vIHNhdmUgdG8gbG9jYWwgc3RvcmFnZQogICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0ZWFtJywgSlNPTi5zdHJpbmdpZnkocGF5bG9hZC50ZWFtKSk7CiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2ZlYXR1cmVzJywgSlNPTi5zdHJpbmdpZnkocGF5bG9hZC5mZWF0dXJlcykpOwogICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgc3RhdGUpLCB7IHRlYW06IHJlc291cmNlT2socGF5bG9hZC50ZWFtKSwgZmVhdHVyZXM6IHBheWxvYWQuZmVhdHVyZXMgfSk7CiAgICB9LAogICAgZmFpbHVyZTogZnVuY3Rpb24gKHN0YXRlLCBtZXRhLCBlcnJvcikgewogICAgICAgIHJldHVybiB1cGRhdGUoc3RhdGUsIHsKICAgICAgICAgICAgdGVhbTogewogICAgICAgICAgICAgICAgc3RhdHVzOiB7ICRzZXQ6IFJlc291cmNlU3RhdHVzLkZhaWx1cmUgfSwKICAgICAgICAgICAgICAgIGVycm9yOiB7ICRzZXQ6IGVycm9yIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgfSk7CiAgICB9LAp9KSwgX2EudHlwZSksIHRlYW1GZXRjaCA9IF9hLmFjdGlvbiwgdGVhbUZldGNoUmVkdWNlciA9IF9hLnJlZHVjZXI7CmV4cG9ydCB2YXIgVEVBTV9JTlZJVEVfQUNDRVBUID0gKF9iID0gY3JlYXRlKCdURUFNX0lOVklURV9BQ0NFUFQnLCB7CiAgICBzdWNjZXNzOiBmdW5jdGlvbiAoc3RhdGUsIG1ldGEsIHBheWxvYWQpIHsKICAgICAgICByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgICAgIG1lOiB7ICRzZXQ6IHJlc291cmNlT2socGF5bG9hZC5tZSkgfSwKICAgICAgICAgICAgdGVhbTogeyAkc2V0OiByZXNvdXJjZU9rKHBheWxvYWQudGVhbSkgfSwKICAgICAgICAgICAgc2hvd1RlYW1JbnZpdGVBY2NlcHRlZE1vZGFsOiB7ICRzZXQ6IHRydWUgfSwKICAgICAgICB9KTsKICAgIH0sCn0pLCBfYi50eXBlKSwgdGVhbUludml0ZUFjY2VwdCA9IF9iLmFjdGlvbiwgdGVhbUludml0ZUFjY2VwdFJlZHVjZXIgPSBfYi5yZWR1Y2VyOwpleHBvcnQgdmFyIFRFQU1fSk9JTkVEX01PREFMX0RJU01JU1MgPSAoX2MgPSBjcmVhdGUoJ1RFQU1fSk9JTkVEX01PREFMX0RJU01JU1MnLCB7CiAgICBzdGFydDogZnVuY3Rpb24gKHN0YXRlLCBtZXRhKSB7IHJldHVybiB1cGRhdGUoc3RhdGUsIHsKICAgICAgICBzaG93VGVhbUludml0ZUFjY2VwdGVkTW9kYWw6IHsgJHNldDogdW5kZWZpbmVkIH0sCiAgICB9KTsgfSwKfSksIF9jLnR5cGUpLCB0ZWFtSm9pbmVkTW9kYWxEaXNtaXNzcyA9IF9jLmFjdGlvbiwgdGVhbWpvaW5lZE1vZGFsRGlzbWlzc1JlZHVjZXIgPSBfYy5yZWR1Y2VyOwpleHBvcnQgdmFyIFRFQU1fVVBEQVRFID0gKF9kID0gY3JlYXRlKCdURUFNX1VQREFURScsIHsKICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChzdGF0ZSwgbWV0YSwgcGF5bG9hZCkgewogICAgICAgIHJldHVybiB1cGRhdGUoc3RhdGUsIHsKICAgICAgICAgICAgdGVhbTogeyAkc2V0OiByZXNvdXJjZU9rKHBheWxvYWQpIH0sCiAgICAgICAgfSk7CiAgICB9LAp9KSwgX2QudHlwZSksIHRlYW1VcGRhdGUgPSBfZC5hY3Rpb24sIHRlYW1VcGRhdGVSZWR1Y2VyID0gX2QucmVkdWNlcjsKZXhwb3J0IGZ1bmN0aW9uIHNlbGVjdFRlYW0oc3RhdGUpIHsKICAgIHJldHVybiBzdGF0ZS50ZWFtICYmIHN0YXRlLnRlYW0uZGF0YTsKfQovLyBNZW1vaXplZCBzZWxlY3RvciB0byBpZGVudGlmeSBpZiB0ZWFtIHNob3VsZCBzaG93IHByb3JhdGlvbiBjb3B5CmV4cG9ydCB2YXIgc2VsZWN0VGVhbVByb3JhdGlvbkNvcHkgPSBjcmVhdGVTZWxlY3RvcihbZnVuY3Rpb24gKHN0YXRlKSB7IHJldHVybiBzdGF0ZS50ZWFtOyB9XSwgZnVuY3Rpb24gKHRlYW0pIHsKICAgIGlmICghdGVhbSB8fCAhdGVhbS5kYXRhKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgcmV0dXJuIHRlYW0uZGF0YS5wbGFuICE9PSBUZWFtUGxhbi5JbmFjdGl2ZSAmJgogICAgICAgICghdGVhbS5kYXRhLnRyaWFsRXhwaXJlcyB8fCBtb21lbnQodGVhbS5kYXRhLnRyaWFsRXhwaXJlcykuaXNCZWZvcmUobW9tZW50KCkpKTsKfSwgdW5kZWZpbmVkLCBbJ3RlYW0nXSk7CmV4cG9ydCBkZWZhdWx0IFsKICAgIHRlYW1GZXRjaFJlZHVjZXIsCiAgICB0ZWFtam9pbmVkTW9kYWxEaXNtaXNzUmVkdWNlciwKICAgIHRlYW1JbnZpdGVBY2NlcHRSZWR1Y2VyLAogICAgdGVhbVVwZGF0ZVJlZHVjZXIsCl07Cg=="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/team.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/team.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;AACxC,OAAO,MAAM,MAAM,QAAQ,CAAC;AAC5B,OAAO,MAAM,MAAM,qBAAqB,CAAC;AAEzC,OAAO,EAAoB,cAAc,EAAY,QAAQ,EAAE,MAAM,YAAY,CAAC;AAClF,OAAO,EAAE,UAAU,EAAE,MAAM,mBAAmB,CAAC;AAG/C,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AAGnD,MAAM,CACJ,IAAA;;;;;;;;;;;;;;;;;;YAAgB,EAChB,qBAAiB,EACjB,6BAAyB,CA0BxB;AAEH,MAAM,CACJ,IAAA;;;;;;;;YAAwB,EACxB,4BAAwB,EACxB,oCAAgC,CAQ/B;AAEH,MAAM,CACJ,IAAA;;;;YAA+B,EAC/B,mCAA+B,EAC/B,0CAAsC,CAKrC;AAOH,MAAM,CACJ,IAAA;;;;;;YAAiB,EACjB,sBAAkB,EAClB,8BAA0B,CAMzB;AAEH,MAAM,UAAU,UAAU,CAAC,KAAiB;IAC1C,OAAO,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,CAAC,IAAK,CAAC;AACxC,CAAC;AAED,mEAAmE;AACnE,MAAM,CAAC,IAAM,uBAAuB,GAAG,cAAc,CAKnD,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,IAAI,EAAV,CAAU,CAAC,EACrB,UAAC,IAAoB;IACnB,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;QACvB,OAAO,KAAK,CAAC;KACd;IAED,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,QAAQ;QACzC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;AACnF,CAAC,EACD,SAAS,EACT,CAAC,MAAM,CAAC,CACT,CAAC;AAEF,eAAe;IACb,gBAAgB;IAChB,6BAA6B;IAC7B,uBAAuB;IACvB,iBAAiB;CAClB,CAAC","sourcesContent":["import { create } from '@src/lib/redux';\nimport moment from 'moment';\nimport update from 'immutability-helper';\n\nimport { Team, StoreState, ResourceStatus, Resource, TeamPlan } from '@src/types';\nimport { resourceOk } from '@src/lib/resource';\n\nimport { TeamBody, TeamInviteSuccessResponse } from '@src/api/team';\nimport { createSelector } from '@src/lib/selector';\nimport { TeamInviteValidateMeta } from './teamMembers';\n\nexport const {\n  type: TEAM_FETCH,\n  action: teamFetch,\n  reducer: teamFetchReducer,\n} = create<string, TeamBody>('TEAM_FETCH', {\n  start: (state, meta) => {\n    return update(state, { team: { status: { $set: ResourceStatus.Loading } } });\n  },\n\n  success: (state, meta, payload) => {\n    // save to local storage\n    localStorage.setItem('team', JSON.stringify(payload.team));\n    localStorage.setItem('features', JSON.stringify(payload.features));\n\n    return {\n      ...state,\n      team: resourceOk(payload.team),\n      features: payload.features,\n    };\n  },\n\n  failure: (state, meta, error) => {\n    return update(state, {\n      team: {\n        status: { $set: ResourceStatus.Failure },\n        error: { $set: error },\n      },\n    });\n  },\n});\n\nexport const {\n  type: TEAM_INVITE_ACCEPT,\n  action: teamInviteAccept,\n  reducer: teamInviteAcceptReducer,\n} = create<TeamInviteValidateMeta, TeamInviteSuccessResponse>('TEAM_INVITE_ACCEPT', {\n  success: (state, meta, payload) =>\n    update(state, {\n      me: { $set: resourceOk(payload.me) },\n      team: { $set: resourceOk(payload.team) },\n      showTeamInviteAcceptedModal: { $set: true },\n    }),\n});\n\nexport const {\n  type: TEAM_JOINED_MODAL_DISMISS,\n  action: teamJoinedModalDismisss,\n  reducer: teamjoinedModalDismissReducer,\n} = create<boolean, null>('TEAM_JOINED_MODAL_DISMISS', {\n  start: (state, meta) => update(state, {\n    showTeamInviteAcceptedModal: { $set: undefined },\n  }),\n});\n\nexport interface TeamUpdateMeta {\n  team: string;\n  name: string;\n}\n\nexport const {\n  type: TEAM_UPDATE,\n  action: teamUpdate,\n  reducer: teamUpdateReducer,\n} = create<TeamUpdateMeta, Team>('TEAM_UPDATE', {\n  success: (state, meta, payload) =>\n    update(state, {\n      team: { $set: resourceOk(payload) },\n    }),\n});\n\nexport function selectTeam(state: StoreState): Team {\n  return state.team && state.team.data!;\n}\n\n// Memoized selector to identify if team should show proration copy\nexport const selectTeamProrationCopy = createSelector<\n  undefined,\n  Resource<Team>,\n  boolean | undefined\n>(\n  [state => state.team],\n  (team: Resource<Team>) => {\n    if (!team || !team.data) {\n      return false;\n    }\n\n    return team.data.plan !== TeamPlan.Inactive &&\n      (!team.data.trialExpires || moment(team.data.trialExpires).isBefore(moment()));\n  },\n  undefined,\n  ['team'],\n);\n\nexport default [\n  teamFetchReducer,\n  teamjoinedModalDismissReducer,\n  teamInviteAcceptReducer,\n  teamUpdateReducer,\n];\n"]}]}