{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/sync/DraftSync.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/sync/DraftSync.ts","mtime":1675280254125},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkgewogICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikgewogICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwKICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fAogICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTsKICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTsKICAgIH07CiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHsKICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpOwogICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfQogICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTsKICAgIH07Cn0pKCk7CmltcG9ydCB7IFN0b3JlcyB9IGZyb20gJ0BzcmMvbGliL2RiJzsKaW1wb3J0IHsgRHJhZnRDbGllbnQgfSBmcm9tICdAc3JjL2FwaS9kcmFmdHMnOwppbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7CmltcG9ydCB7IEFQSVN5bmMgfSBmcm9tICcuL0FQSVN5bmMnOwppbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7CmltcG9ydCB7IHNlbmREcmFmdEJhdGNoUmVjZWl2ZWQgfSBmcm9tICdAc3JjL3dvcmtlci9icmlkZ2Uvd29ya2VyRXZlbnRzJzsKdmFyIERyYWZ0U3luYyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHsKICAgIF9fZXh0ZW5kcyhEcmFmdFN5bmMsIF9zdXBlcik7CiAgICAvLyAtIGFwcCBicmlkZ2UgaW50ZXJmYWNlCiAgICBmdW5jdGlvbiBEcmFmdFN5bmMoYXBpKSB7CiAgICAgICAgaWYgKGFwaSA9PT0gdm9pZCAwKSB7IGFwaSA9IG5ldyBEcmFmdENsaWVudCgpOyB9CiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgJ0RyYWZ0U3luYycsIFN0b3Jlcy5EcmFmdHMsIGZhbHNlKSB8fCB0aGlzOwogICAgICAgIF90aGlzLmFwaSA9IGFwaTsKICAgICAgICByZXR1cm4gX3RoaXM7CiAgICB9CiAgICBEcmFmdFN5bmMucHJvdG90eXBlLmZldGNoTmV4dFBhZ2UgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuYXBpLmxpc3QodGhpcy5vZmZzZXQpOwogICAgfTsKICAgIERyYWZ0U3luYy5wcm90b3R5cGUubmV4dFBhZ2VPZmZzZXQgPSBmdW5jdGlvbiAobW9kZWxzKSB7CiAgICAgICAgcmV0dXJuIG1vbWVudChtb2RlbHNbbW9kZWxzLmxlbmd0aCAtIDFdLnVwZGF0ZWQpLnRvSVNPU3RyaW5nKCk7CiAgICB9OwogICAgLy8gTk9URShTSElOKTogVGhpcyBoYXMgYSBzbWFsbGwgY2hhbmNlIG9mIG92ZXJ3cml0aW5nIGRyYWZ0cyBmcm9tIENvbW1pdFN5bmMvRHJhZnRJbmNyU3luYwogICAgRHJhZnRTeW5jLnByb3RvdHlwZS5vblNhdmUgPSBmdW5jdGlvbiAoZHJhZnRzKSB7CiAgICAgICAgc2VuZERyYWZ0QmF0Y2hSZWNlaXZlZChkcmFmdHMpOwogICAgICAgIHJldHVybiBPYnNlcnZhYmxlLm9mKG51bGwpOwogICAgfTsKICAgIHJldHVybiBEcmFmdFN5bmM7Cn0oQVBJU3luYykpOwpleHBvcnQgeyBEcmFmdFN5bmMgfTsKZXhwb3J0IGRlZmF1bHQgRHJhZnRTeW5jOwo="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/sync/DraftSync.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/sync/DraftSync.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,aAAa,CAAC;AAErC,OAAO,EAAY,WAAW,EAAE,MAAM,iBAAiB,CAAC;AACxD,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAClC,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AACpC,OAAO,MAAM,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAE,sBAAsB,EAAE,MAAM,iCAAiC,CAAC;AAEzE;IAA+B,6BAAc;IAG3C,yBAAyB;IAEzB,mBACE,GAAiC;QAAjC,oBAAA,EAAA,UAAoB,WAAW,EAAE;QADnC,YAGE,kBAAM,WAAW,EAAE,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,SAEzC;QADC,KAAI,CAAC,GAAG,GAAG,GAAG,CAAC;;IACjB,CAAC;IAES,iCAAa,GAAvB;QACE,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC;IAES,kCAAc,GAAxB,UAAyB,MAAe;QACtC,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;IACjE,CAAC;IAED,2FAA2F;IACjF,0BAAM,GAAhB,UAAiB,MAAe;QAC9B,sBAAsB,CAAC,MAAM,CAAC,CAAC;QAC/B,OAAO,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IACH,gBAAC;AAAD,CAAC,AAzBD,CAA+B,OAAO,GAyBrC;;AAED,eAAe,SAAS,CAAC","sourcesContent":["import { Stores } from '@src/lib/db';\nimport { Draft } from '@src/types';\nimport { DraftAPI, DraftClient } from '@src/api/drafts';\nimport { Observable } from 'rxjs';\nimport { APISync } from './APISync';\nimport moment from 'moment';\nimport { sendDraftBatchReceived } from '@src/worker/bridge/workerEvents';\n\nexport class DraftSync extends APISync<Draft> {\n  // Dependencies\n  private api: DraftAPI;\n  // - app bridge interface\n\n  constructor(\n    api: DraftAPI = new DraftClient(),\n  ) {\n    super('DraftSync', Stores.Drafts, false);\n    this.api = api;\n  }\n\n  protected fetchNextPage(): Observable<Draft[]> {\n    return this.api.list(this.offset);\n  }\n\n  protected nextPageOffset(models: Draft[]): string {\n    return moment(models[models.length - 1].updated).toISOString();\n  }\n\n  // NOTE(SHIN): This has a smalll chance of overwriting drafts from CommitSync/DraftIncrSync\n  protected onSave(drafts: Draft[]): Observable<null> {\n    sendDraftBatchReceived(drafts);\n    return Observable.of(null);\n  }\n}\n\nexport default DraftSync;\n"]}]}