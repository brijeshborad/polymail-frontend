{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/sync/ActivityFeedIncrSync.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/sync/ActivityFeedIncrSync.ts","mtime":1675280254124},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkgewogICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikgewogICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwKICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fAogICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTsKICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTsKICAgIH07CiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHsKICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpOwogICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfQogICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTsKICAgIH07Cn0pKCk7CmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JzsKaW1wb3J0IHsgU3RvcmVzIH0gZnJvbSAnQHNyYy9saWIvZGInOwppbXBvcnQgeyBBY3Rpdml0eUZlZWRDbGllbnQgfSBmcm9tICdAc3JjL2FwaS9hY3Rpdml0eUZlZWQnOwppbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7CmltcG9ydCB7IEFQSVN5bmMgfSBmcm9tICcuL0FQSVN5bmMnOwppbXBvcnQgeyBzZW5kQWN0aXZpdHlVcGRhdGVkIH0gZnJvbSAnQHNyYy93b3JrZXIvYnJpZGdlL3dvcmtlckV2ZW50cyc7CnZhciBBY3Rpdml0eUZlZWRJbmNyU3luYyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHsKICAgIF9fZXh0ZW5kcyhBY3Rpdml0eUZlZWRJbmNyU3luYywgX3N1cGVyKTsKICAgIGZ1bmN0aW9uIEFjdGl2aXR5RmVlZEluY3JTeW5jKGV2ZW50cywgYXBpKSB7CiAgICAgICAgaWYgKGFwaSA9PT0gdm9pZCAwKSB7IGFwaSA9IG5ldyBBY3Rpdml0eUZlZWRDbGllbnQoKTsgfQogICAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgICAgdmFyIGluY3JTeW5jID0gdHJ1ZTsKICAgICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsICdBY3Rpdml0eUZlZWRJbmNyU3luYycsIFN0b3Jlcy5BY3Rpdml0eUZlZWQsIGluY3JTeW5jKSB8fCB0aGlzOwogICAgICAgIF90aGlzLmFwaSA9IGFwaTsKICAgICAgICBfdGhpcy5ldmVudHMgPSBldmVudHM7CiAgICAgICAgcmV0dXJuIF90aGlzOwogICAgfQogICAgQWN0aXZpdHlGZWVkSW5jclN5bmMucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgICBfc3VwZXIucHJvdG90eXBlLmluaXQuY2FsbCh0aGlzKTsKICAgICAgICB0aGlzLmV2ZW50cy5zdWJzY3JpYmUoZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgICAgICAgIGlmIChldmVudC5uYW1lID09PSAnQWN0aXZpdHlVcGRhdGVkJykgewogICAgICAgICAgICAgICAgX3RoaXMucnVuKCkuc3Vic2NyaWJlKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH07CiAgICBBY3Rpdml0eUZlZWRJbmNyU3luYy5wcm90b3R5cGUuZmV0Y2hOZXh0UGFnZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gdGhpcy5hcGkubGlzdEluY3IodGhpcy5vZmZzZXQpOwogICAgfTsKICAgIEFjdGl2aXR5RmVlZEluY3JTeW5jLnByb3RvdHlwZS5uZXh0UGFnZU9mZnNldCA9IGZ1bmN0aW9uIChtb2RlbHMpIHsKICAgICAgICByZXR1cm4gbW9tZW50KG1vZGVsc1swXS51cGRhdGVkKS50b0lTT1N0cmluZygpOwogICAgfTsKICAgIEFjdGl2aXR5RmVlZEluY3JTeW5jLnByb3RvdHlwZS5vblNhdmUgPSBmdW5jdGlvbiAoYWN0aXZpdGllcykgewogICAgICAgIGFjdGl2aXRpZXMuZm9yRWFjaChmdW5jdGlvbiAoYWN0aXZpdHkpIHsgcmV0dXJuIHNlbmRBY3Rpdml0eVVwZGF0ZWQoYWN0aXZpdHkpOyB9KTsKICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS5vZihudWxsKTsKICAgIH07CiAgICByZXR1cm4gQWN0aXZpdHlGZWVkSW5jclN5bmM7Cn0oQVBJU3luYykpOwpleHBvcnQgeyBBY3Rpdml0eUZlZWRJbmNyU3luYyB9OwpleHBvcnQgZGVmYXVsdCBBY3Rpdml0eUZlZWRJbmNyU3luYzsK"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/sync/ActivityFeedIncrSync.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/sync/ActivityFeedIncrSync.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,OAAO,MAAM,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAE,MAAM,EAAE,MAAM,aAAa,CAAC;AAErC,OAAO,EAAmB,kBAAkB,EAAE,MAAM,uBAAuB,CAAC;AAC5E,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAClC,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AACpC,OAAO,EAAE,mBAAmB,EAAE,MAAM,iCAAiC,CAAC;AAEtE;IAA0C,wCAAiB;IAIzD,8BACE,MAAiC,EACjC,GAA+C;QAA/C,oBAAA,EAAA,UAA2B,kBAAkB,EAAE;QAFjD,iBASC;QALC,IAAM,QAAQ,GAAG,IAAI,CAAC;QACtB,QAAA,kBAAM,sBAAsB,EAAE,MAAM,CAAC,YAAY,EAAE,QAAQ,CAAC,SAAC;QAE7D,KAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC;;IACvB,CAAC;IAED,mCAAI,GAAJ;QAAA,iBAOC;QANC,iBAAM,IAAI,WAAE,CAAC;QACb,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,UAAC,KAAK;YAC1B,IAAI,KAAK,CAAC,IAAI,KAAK,iBAAiB,EAAE;gBACpC,KAAI,CAAC,GAAG,EAAE,CAAC,SAAS,EAAE,CAAC;aACxB;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAES,4CAAa,GAAvB;QACE,OAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACxC,CAAC;IAES,6CAAc,GAAxB,UAAyB,MAAkB;QACzC,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;IACjD,CAAC;IAES,qCAAM,GAAhB,UAAiB,UAAsB;QACrC,UAAU,CAAC,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,mBAAmB,CAAC,QAAQ,CAAC,EAA7B,CAA6B,CAAC,CAAC;QAC9D,OAAO,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IACH,2BAAC;AAAD,CAAC,AApCD,CAA0C,OAAO,GAoChD;;AAED,eAAe,oBAAoB,CAAC","sourcesContent":["import moment from 'moment';\nimport { Stores } from '@src/lib/db';\nimport { Activity, RealtimeEvent } from '@src/types';\nimport { ActivityFeedAPI, ActivityFeedClient } from '@src/api/activityFeed';\nimport { Observable } from 'rxjs';\nimport { APISync } from './APISync';\nimport { sendActivityUpdated } from '@src/worker/bridge/workerEvents';\n\nexport class ActivityFeedIncrSync extends APISync<Activity> {\n  private events: Observable<RealtimeEvent>;\n  private api: ActivityFeedAPI;\n\n  constructor(\n    events: Observable<RealtimeEvent>,\n    api: ActivityFeedAPI = new ActivityFeedClient(),\n  ) {\n    const incrSync = true;\n    super('ActivityFeedIncrSync', Stores.ActivityFeed, incrSync);\n\n    this.api = api;\n    this.events = events;\n  }\n\n  init() {\n    super.init();\n    this.events.subscribe((event) => {\n      if (event.name === 'ActivityUpdated') {\n        this.run().subscribe();\n      }\n    });\n  }\n\n  protected fetchNextPage(): Observable<Activity[]> {\n    return this.api.listIncr(this.offset);\n  }\n\n  protected nextPageOffset(models: Activity[]): string {\n    return moment(models[0].updated).toISOString();\n  }\n\n  protected onSave(activities: Activity[]): Observable<null> {\n    activities.forEach(activity => sendActivityUpdated(activity));\n    return Observable.of(null);\n  }\n}\n\nexport default ActivityFeedIncrSync;\n"]}]}