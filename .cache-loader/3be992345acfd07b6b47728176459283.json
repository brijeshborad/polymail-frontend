{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/salesforce.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/salesforce.ts","mtime":1675280253980},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnOwppbXBvcnQgeyBqc29uUmVxdWVzdCB9IGZyb20gJy4vYmFzZSc7CmltcG9ydCB7IFNPYmplY3RUeXBlLCB9IGZyb20gJ0BzcmMvdHlwZXMvc2FsZXNmb3JjZSc7CmltcG9ydCB7IGNyZWF0ZVNPYmplY3QsIGNyZWF0ZVNhbGVzZm9yY2VTdW1tYXJ5LCBjcmVhdGVTT2JqZWN0RmllbGQgfSBmcm9tICdAc3JjL21vY2tzL3NhbGVzZm9yY2UnOwppbXBvcnQgeyBhcHBseVNhbGVzZm9yY2VTdW1tYXJ5RGVmYXVsdHMgfSBmcm9tICdAc3JjL2xpYi9tb2RlbHMvc2FsZXNmb3JjZSc7CnZhciBTYWxlc2ZvcmNlQ2xpZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkgewogICAgZnVuY3Rpb24gU2FsZXNmb3JjZUNsaWVudCgpIHsKICAgIH0KICAgIFNhbGVzZm9yY2VDbGllbnQucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChlbWFpbCkgewogICAgICAgIHJldHVybiBqc29uUmVxdWVzdCh7CiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsCiAgICAgICAgICAgIHJvdXRlOiAiL3YxL3NhbGVzZm9yY2Uvc3VtbWFyeS8iICsgZW5jb2RlVVJJQ29tcG9uZW50KGVtYWlsKSwKICAgICAgICB9KS5tYXAoZnVuY3Rpb24gKGRhdGEpIHsgcmV0dXJuIGFwcGx5U2FsZXNmb3JjZVN1bW1hcnlEZWZhdWx0cyhkYXRhKTsgfSk7CiAgICB9OwogICAgU2FsZXNmb3JjZUNsaWVudC5wcm90b3R5cGUuZ2V0U2NoZW1hID0gZnVuY3Rpb24gKHR5cGUpIHsKICAgICAgICByZXR1cm4ganNvblJlcXVlc3QoewogICAgICAgICAgICBtZXRob2Q6ICdHRVQnLAogICAgICAgICAgICByb3V0ZTogIi92MS9zYWxlc2ZvcmNlL3NjaGVtYXMvIiArIHR5cGUsCiAgICAgICAgfSk7CiAgICB9OwogICAgU2FsZXNmb3JjZUNsaWVudC5wcm90b3R5cGUuY29udmVydExlYWRUb0NvbnRhY3QgPSBmdW5jdGlvbiAoZW1haWwpIHsKICAgICAgICByZXR1cm4ganNvblJlcXVlc3QoewogICAgICAgICAgICBtZXRob2Q6ICdQT1NUJywKICAgICAgICAgICAgcm91dGU6ICIvdjEvc2FsZXNmb3JjZS9sZWFkcy8iICsgZW5jb2RlVVJJQ29tcG9uZW50KGVtYWlsKSArICIvY29udmVydCIsCiAgICAgICAgfSkubWFwKGZ1bmN0aW9uIChkYXRhKSB7IHJldHVybiBhcHBseVNhbGVzZm9yY2VTdW1tYXJ5RGVmYXVsdHMoZGF0YSk7IH0pOwogICAgfTsKICAgIFNhbGVzZm9yY2VDbGllbnQucHJvdG90eXBlLmNyZWF0ZUNvbnRhY3QgPSBmdW5jdGlvbiAobWV0YSkgewogICAgICAgIHZhciBib2R5ID0ge307CiAgICAgICAgaWYgKG1ldGEuZmllbGRzKSB7CiAgICAgICAgICAgIG1ldGEuZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7CiAgICAgICAgICAgICAgICBib2R5W2ZpZWxkLm5hbWVdID0gZmllbGQudmFsdWU7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICBib2R5LkVtYWlsID0gbWV0YS5lbWFpbDsKICAgICAgICByZXR1cm4ganNvblJlcXVlc3QoewogICAgICAgICAgICBtZXRob2Q6ICdQT1NUJywKICAgICAgICAgICAgcm91dGU6ICIvdjEvc2FsZXNmb3JjZS9jb250YWN0cyIsCiAgICAgICAgICAgIGJvZHk6IGJvZHksCiAgICAgICAgfSkubWFwKGZ1bmN0aW9uIChkYXRhKSB7IHJldHVybiBhcHBseVNhbGVzZm9yY2VTdW1tYXJ5RGVmYXVsdHMoZGF0YSk7IH0pOwogICAgfTsKICAgIFNhbGVzZm9yY2VDbGllbnQucHJvdG90eXBlLmNyZWF0ZUxlYWQgPSBmdW5jdGlvbiAobWV0YSkgewogICAgICAgIHZhciBib2R5ID0ge307CiAgICAgICAgaWYgKG1ldGEuZmllbGRzKSB7CiAgICAgICAgICAgIG1ldGEuZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7CiAgICAgICAgICAgICAgICBib2R5W2ZpZWxkLm5hbWVdID0gZmllbGQudmFsdWU7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICBib2R5LkVtYWlsID0gbWV0YS5lbWFpbDsKICAgICAgICByZXR1cm4ganNvblJlcXVlc3QoewogICAgICAgICAgICBtZXRob2Q6ICdQT1NUJywKICAgICAgICAgICAgcm91dGU6ICIvdjEvc2FsZXNmb3JjZS9sZWFkcyIsCiAgICAgICAgICAgIGJvZHk6IGJvZHksCiAgICAgICAgfSkubWFwKGZ1bmN0aW9uIChkYXRhKSB7IHJldHVybiBhcHBseVNhbGVzZm9yY2VTdW1tYXJ5RGVmYXVsdHMoZGF0YSk7IH0pOwogICAgfTsKICAgIFNhbGVzZm9yY2VDbGllbnQucHJvdG90eXBlLmNyZWF0ZVRhc2sgPSBmdW5jdGlvbiAobWV0YSkgewogICAgICAgIHZhciBXaG9JZCA9IG1ldGEuV2hvSWQsIFN1YmplY3QgPSBtZXRhLlN1YmplY3QsIERlc2NyaXB0aW9uID0gbWV0YS5EZXNjcmlwdGlvbiwgQWN0aXZpdHlEYXRlID0gbWV0YS5BY3Rpdml0eURhdGUsIFN0YXR1cyA9IG1ldGEuU3RhdHVzOwogICAgICAgIHJldHVybiBqc29uUmVxdWVzdCh7CiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLAogICAgICAgICAgICByb3V0ZTogIi92MS9zYWxlc2ZvcmNlL3Rhc2tzIiwKICAgICAgICAgICAgYm9keTogewogICAgICAgICAgICAgICAgV2hvSWQ6IFdob0lkLAogICAgICAgICAgICAgICAgU3ViamVjdDogU3ViamVjdCwKICAgICAgICAgICAgICAgIERlc2NyaXB0aW9uOiBEZXNjcmlwdGlvbiwKICAgICAgICAgICAgICAgIEFjdGl2aXR5RGF0ZTogQWN0aXZpdHlEYXRlLAogICAgICAgICAgICAgICAgU3RhdHVzOiBTdGF0dXMsCiAgICAgICAgICAgIH0sCiAgICAgICAgfSk7CiAgICB9OwogICAgU2FsZXNmb3JjZUNsaWVudC5wcm90b3R5cGUudXBkYXRlQWNjb3VudCA9IGZ1bmN0aW9uIChlbWFpbCwgZmllbGROYW1lLCBmaWVsZFZhbHVlKSB7CiAgICAgICAgdmFyIF9hOwogICAgICAgIHJldHVybiBqc29uUmVxdWVzdCh7CiAgICAgICAgICAgIG1ldGhvZDogJ1BBVENIJywKICAgICAgICAgICAgcm91dGU6ICIvdjEvc2FsZXNmb3JjZS9hY2NvdW50cy8iICsgZW5jb2RlVVJJQ29tcG9uZW50KGVtYWlsKSwKICAgICAgICAgICAgYm9keTogKF9hID0ge30sCiAgICAgICAgICAgICAgICBfYVtmaWVsZE5hbWVdID0gZmllbGRWYWx1ZSwKICAgICAgICAgICAgICAgIF9hKSwKICAgICAgICB9KTsKICAgIH07CiAgICBTYWxlc2ZvcmNlQ2xpZW50LnByb3RvdHlwZS51cGRhdGVDb250YWN0ID0gZnVuY3Rpb24gKGVtYWlsLCBmaWVsZE5hbWUsIGZpZWxkVmFsdWUpIHsKICAgICAgICB2YXIgX2E7CiAgICAgICAgcmV0dXJuIGpzb25SZXF1ZXN0KHsKICAgICAgICAgICAgbWV0aG9kOiAnUEFUQ0gnLAogICAgICAgICAgICByb3V0ZTogIi92MS9zYWxlc2ZvcmNlL2NvbnRhY3RzLyIgKyBlbmNvZGVVUklDb21wb25lbnQoZW1haWwpLAogICAgICAgICAgICBib2R5OiAoX2EgPSB7fSwKICAgICAgICAgICAgICAgIF9hW2ZpZWxkTmFtZV0gPSBmaWVsZFZhbHVlLAogICAgICAgICAgICAgICAgX2EpLAogICAgICAgIH0pOwogICAgfTsKICAgIFNhbGVzZm9yY2VDbGllbnQucHJvdG90eXBlLnVwZGF0ZUxlYWQgPSBmdW5jdGlvbiAoaWQsIGZpZWxkTmFtZSwgZmllbGRWYWx1ZSkgewogICAgICAgIHZhciBfYTsKICAgICAgICByZXR1cm4ganNvblJlcXVlc3QoewogICAgICAgICAgICBtZXRob2Q6ICdQQVRDSCcsCiAgICAgICAgICAgIHJvdXRlOiAiL3YxL3NhbGVzZm9yY2UvbGVhZHMvIiArIGVuY29kZVVSSUNvbXBvbmVudChpZCksCiAgICAgICAgICAgIGJvZHk6IChfYSA9IHt9LAogICAgICAgICAgICAgICAgX2FbZmllbGROYW1lXSA9IGZpZWxkVmFsdWUsCiAgICAgICAgICAgICAgICBfYSksCiAgICAgICAgfSk7CiAgICB9OwogICAgU2FsZXNmb3JjZUNsaWVudC5wcm90b3R5cGUubGlzdFZpZXdzID0gZnVuY3Rpb24gKHR5cGUpIHsKICAgICAgICByZXR1cm4ganNvblJlcXVlc3QoewogICAgICAgICAgICBtZXRob2Q6ICdHRVQnLAogICAgICAgICAgICByb3V0ZTogIi92MS9zYWxlc2ZvcmNlL2xpc3R2aWV3cz9zb2JqZWN0VHlwZT0iICsgdHlwZSwKICAgICAgICB9KTsKICAgIH07CiAgICBTYWxlc2ZvcmNlQ2xpZW50LnByb3RvdHlwZS5jb250YWN0cyA9IGZ1bmN0aW9uIChsaXN0VmlldykgewogICAgICAgIHJldHVybiBqc29uUmVxdWVzdCh7CiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsCiAgICAgICAgICAgIHJvdXRlOiAiL3YxL3NhbGVzZm9yY2UvY29udGFjdHM/bGlzdHZpZXc9IiArIGxpc3RWaWV3LAogICAgICAgIH0pOwogICAgfTsKICAgIFNhbGVzZm9yY2VDbGllbnQucHJvdG90eXBlLmxlYWRzID0gZnVuY3Rpb24gKGxpc3RWaWV3KSB7CiAgICAgICAgcmV0dXJuIGpzb25SZXF1ZXN0KHsKICAgICAgICAgICAgbWV0aG9kOiAnR0VUJywKICAgICAgICAgICAgcm91dGU6ICIvdjEvc2FsZXNmb3JjZS9sZWFkcz9saXN0dmlldz0iICsgbGlzdFZpZXcsCiAgICAgICAgfSk7CiAgICB9OwogICAgcmV0dXJuIFNhbGVzZm9yY2VDbGllbnQ7Cn0oKSk7CmV4cG9ydCB7IFNhbGVzZm9yY2VDbGllbnQgfTsKZXhwb3J0IGZ1bmN0aW9uIG1vY2tTYWxlc2ZvcmNlQ2xpZW50KCkgewogICAgcmV0dXJuIHsKICAgICAgICBsaXN0Vmlld3M6IGZ1bmN0aW9uIChzb2JqZWN0VHlwZSkgeyByZXR1cm4gT2JzZXJ2YWJsZS5vZihbewogICAgICAgICAgICAgICAgaWQ6ICdtb2NrLWxpc3QnLAogICAgICAgICAgICAgICAgbmFtZTogJ21vY2stbGlzdCcsCiAgICAgICAgICAgICAgICBzb2JqZWN0VHlwZTogU09iamVjdFR5cGUuQ29udGFjdCwKICAgICAgICAgICAgfV0pOyB9LAogICAgICAgIGNvbnRhY3RzOiBmdW5jdGlvbiAobGlzdFZpZXcpIHsgcmV0dXJuIE9ic2VydmFibGUub2YoW2NyZWF0ZVNPYmplY3QoKV0pOyB9LAogICAgICAgIGxlYWRzOiBmdW5jdGlvbiAobGlzdFZpZXcpIHsgcmV0dXJuIE9ic2VydmFibGUub2YoW2NyZWF0ZVNPYmplY3QoKV0pOyB9LAogICAgICAgIGdldDogZnVuY3Rpb24gKGVtYWlsKSB7IHJldHVybiBPYnNlcnZhYmxlLm9mKGNyZWF0ZVNhbGVzZm9yY2VTdW1tYXJ5KCkpOyB9LAogICAgICAgIGdldFNjaGVtYTogZnVuY3Rpb24gKHR5cGUpIHsgcmV0dXJuIE9ic2VydmFibGUub2YoW2NyZWF0ZVNPYmplY3RGaWVsZCgpXSk7IH0sCiAgICAgICAgY29udmVydExlYWRUb0NvbnRhY3Q6IGZ1bmN0aW9uIChlbWFpbCkgeyByZXR1cm4gT2JzZXJ2YWJsZS5vZihjcmVhdGVTYWxlc2ZvcmNlU3VtbWFyeSgpKTsgfSwKICAgICAgICBjcmVhdGVDb250YWN0OiBmdW5jdGlvbiAobWV0YSkgeyByZXR1cm4gT2JzZXJ2YWJsZS5vZihjcmVhdGVTYWxlc2ZvcmNlU3VtbWFyeSgpKTsgfSwKICAgICAgICBjcmVhdGVMZWFkOiBmdW5jdGlvbiAobWV0YSkgeyByZXR1cm4gT2JzZXJ2YWJsZS5vZihjcmVhdGVTYWxlc2ZvcmNlU3VtbWFyeSgpKTsgfSwKICAgICAgICBjcmVhdGVUYXNrOiBmdW5jdGlvbiAobWV0YSkgeyByZXR1cm4gT2JzZXJ2YWJsZS5vZihjcmVhdGVTT2JqZWN0KCkpOyB9LAogICAgICAgIHVwZGF0ZUFjY291bnQ6IGZ1bmN0aW9uIChlbWFpbCwgZmllbGROYW1lLCBmaWVsZFZhbHVlKSB7CiAgICAgICAgICAgIHJldHVybiBPYnNlcnZhYmxlLm9mKGNyZWF0ZVNPYmplY3QoKSk7CiAgICAgICAgfSwKICAgICAgICB1cGRhdGVDb250YWN0OiBmdW5jdGlvbiAoZW1haWwsIGZpZWxkTmFtZSwgZmllbGRWYWx1ZSkgewogICAgICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS5vZihjcmVhdGVTT2JqZWN0KCkpOwogICAgICAgIH0sCiAgICAgICAgdXBkYXRlTGVhZDogZnVuY3Rpb24gKGlkLCBmaWVsZE5hbWUsIGZpZWxkVmFsdWUpIHsKICAgICAgICAgICAgcmV0dXJuIE9ic2VydmFibGUub2YoY3JlYXRlU09iamVjdCgpKTsKICAgICAgICB9LAogICAgfTsKfQo="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/salesforce.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/salesforce.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs';\n\nimport { jsonRequest } from './base';\n\nimport {\n  SalesforceSummary,\n  SObject,\n  SObjectType,\n  SFDCListView,\n  SObjectField,\n} from '@src/types/salesforce';\nimport { createSObject, createSalesforceSummary, createSObjectField } from '@src/mocks/salesforce';\nimport { SalesforceTaskCreateMeta, SalesforceSummaryCreateMeta } from '@src/ducks/salesforce';\nimport { applySalesforceSummaryDefaults } from '@src/lib/models/salesforce';\n\nexport interface SalesforceAPI {\n  get(email: string): Observable<SalesforceSummary>;\n  getSchema(type: SObjectType): Observable<SObjectField[]>;\n\n  convertLeadToContact(email: string): Observable<SalesforceSummary>;\n\n  createContact(meta: SalesforceSummaryCreateMeta): Observable<SalesforceSummary>;\n  createLead(meta: SalesforceSummaryCreateMeta): Observable<SalesforceSummary>;\n  createTask(meta: SalesforceTaskCreateMeta): Observable<SObject>;\n\n  updateAccount(email: string, fieldName: string, fieldValue: any): Observable<SObject>;\n  updateContact(email: string, fieldName: string, fieldValue: any): Observable<SObject>;\n  updateLead(id: string, fieldName: string, fieldValue: any): Observable<SObject>;\n\n  listViews(type: SObjectType): Observable<SFDCListView[]>;\n  contacts(listView: string): Observable<SObject[]>;\n  leads(listView: string): Observable<SObject[]>;\n}\n\nexport class SalesforceClient implements SalesforceAPI {\n  get(email: string): Observable<SalesforceSummary> {\n    return jsonRequest({\n      method: 'GET',\n      route: `/v1/salesforce/summary/${encodeURIComponent(email)}`,\n    }).map(data => applySalesforceSummaryDefaults(data));\n  }\n\n  getSchema(type: SObjectType): Observable<SObjectField[]> {\n    return jsonRequest({\n      method: 'GET',\n      route: `/v1/salesforce/schemas/${type}`,\n    });\n  }\n\n  convertLeadToContact(email: string): Observable<SalesforceSummary> {\n    return jsonRequest({\n      method: 'POST',\n      route: `/v1/salesforce/leads/${encodeURIComponent(email)}/convert`,\n    }).map(data => applySalesforceSummaryDefaults(data));\n  }\n\n  createContact(meta: SalesforceSummaryCreateMeta): Observable<SalesforceSummary> {\n    const body: { [key: string]: any } = {};\n    if (meta.fields) {\n      meta.fields.forEach((field) => {\n        body[field.name] = field.value;\n      });\n    }\n    body.Email = meta.email;\n\n    return jsonRequest({\n      method: 'POST',\n      route: `/v1/salesforce/contacts`,\n      body,\n    }).map(data => applySalesforceSummaryDefaults(data));\n  }\n\n  createLead(meta: SalesforceSummaryCreateMeta): Observable<SalesforceSummary> {\n    const body: {[key: string]: any} = {};\n    if (meta.fields) {\n      meta.fields.forEach((field) => {\n        body[field.name] = field.value;\n      });\n    }\n    body.Email = meta.email;\n\n    return jsonRequest({\n      method: 'POST',\n      route: `/v1/salesforce/leads`,\n      body,\n    }).map(data => applySalesforceSummaryDefaults(data));\n  }\n\n  createTask(meta: SalesforceTaskCreateMeta): Observable<SObject> {\n    const { WhoId, Subject, Description, ActivityDate, Status } = meta;\n    return jsonRequest({\n      method: 'POST',\n      route: `/v1/salesforce/tasks`,\n      body: {\n        WhoId,\n        Subject,\n        Description,\n        ActivityDate,\n        Status,\n      },\n    });\n  }\n\n  updateAccount(email: string, fieldName: string, fieldValue: any): Observable<SObject> {\n    return jsonRequest({\n      method: 'PATCH',\n      route: `/v1/salesforce/accounts/${encodeURIComponent(email)}`,\n      body: {\n        [fieldName]: fieldValue,\n      },\n    });\n  }\n\n  updateContact(email: string, fieldName: string, fieldValue: any): Observable<SObject> {\n    return jsonRequest({\n      method: 'PATCH',\n      route: `/v1/salesforce/contacts/${encodeURIComponent(email)}`,\n      body: {\n        [fieldName]: fieldValue,\n      },\n    });\n  }\n\n  updateLead(id: string, fieldName: string, fieldValue: any): Observable<SObject> {\n    return jsonRequest({\n      method: 'PATCH',\n      route: `/v1/salesforce/leads/${encodeURIComponent(id)}`,\n      body: {\n        [fieldName]: fieldValue,\n      },\n    });\n  }\n\n  listViews(type: SObjectType): Observable<SFDCListView[]> {\n    return jsonRequest({\n      method: 'GET',\n      route: `/v1/salesforce/listviews?sobjectType=${type}`,\n    });\n  }\n\n  contacts(listView: string): Observable<SObject[]> {\n    return jsonRequest({\n      method: 'GET',\n      route: `/v1/salesforce/contacts?listview=${listView}`,\n    });\n  }\n\n  leads(listView: string): Observable<SObject[]> {\n    return jsonRequest({\n      method: 'GET',\n      route: `/v1/salesforce/leads?listview=${listView}`,\n    });\n  }\n}\n\nexport function mockSalesforceClient(): SalesforceAPI {\n  return {\n    listViews: (sobjectType: string) => Observable.of([{\n      id: 'mock-list',\n      name: 'mock-list',\n      sobjectType: SObjectType.Contact,\n    }]),\n    contacts: (listView: string) => Observable.of([createSObject()]),\n    leads: (listView: string) => Observable.of([createSObject()]),\n\n    get: (email: string) => Observable.of(createSalesforceSummary()),\n    getSchema: type => Observable.of([createSObjectField()]),\n\n    convertLeadToContact: (email: string) => Observable.of(createSalesforceSummary()),\n    createContact: meta => Observable.of(createSalesforceSummary()),\n    createLead: meta => Observable.of(createSalesforceSummary()),\n    createTask: (meta: SalesforceTaskCreateMeta) => Observable.of(createSObject()),\n    updateAccount: (email: string, fieldName: string, fieldValue: any) =>\n      Observable.of(createSObject()),\n    updateContact: (email: string, fieldName: string, fieldValue: any) =>\n      Observable.of(createSObject()),\n    updateLead: (id: string, fieldName: string, fieldValue: any) =>\n      Observable.of(createSObject()),\n  };\n}\n"]}]}