{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/comments.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/comments.ts","mtime":1675280254047},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIF9hLCBfYiwgX2M7CmltcG9ydCB1cGRhdGUgZnJvbSAnaW1tdXRhYmlsaXR5LWhlbHBlcic7CmltcG9ydCB7IGxhc3QgfSBmcm9tICdsb2Rhc2gnOwppbXBvcnQgeyBjcmVhdGUgfSBmcm9tICdAc3JjL2xpYi9yZWR1eCc7CmltcG9ydCB7IGNyZWF0ZVNlbGVjdG9yIH0gZnJvbSAnQHNyYy9saWIvc2VsZWN0b3InOwppbXBvcnQgeyBzZWxlY3RTaGFyZWRUaHJlYWQgfSBmcm9tICdAc3JjL2R1Y2tzL3NoYXJlZFRocmVhZHMnOwppbXBvcnQgeyBmbnYxYTMyIH0gZnJvbSAnQHNyYy9saWIvY3J5cHQnOwpleHBvcnQgdmFyIENPTU1FTlRfQ1JFQVRFID0gKF9hID0gY3JlYXRlKCdDT01NRU5UX0NSRUFURScsIHsKICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChzdGF0ZSwgbWV0YSwgcGF5bG9hZCkgewogICAgICAgIHZhciBfYTsKICAgICAgICB2YXIgY29tbWVudHMgPSBzdGF0ZS5jb21tZW50c1twYXlsb2FkLnNoYXJlZFRocmVhZF0gfHwgW107CiAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICBjb21tZW50czogKF9hID0ge30sCiAgICAgICAgICAgICAgICBfYVtwYXlsb2FkLnNoYXJlZFRocmVhZF0gPSB7CiAgICAgICAgICAgICAgICAgICAgJHNldDogY29tbWVudHMuY29uY2F0KFtwYXlsb2FkXSksCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgX2EpLAogICAgICAgIH0pOwogICAgfSwKfSksIF9hLnR5cGUpLCBjb21tZW50Q3JlYXRlID0gX2EuYWN0aW9uLCBjb21tZW50Q3JlYXRlUmVkdWNlciA9IF9hLnJlZHVjZXI7CmV4cG9ydCB2YXIgQ09NTUVOVF9MSVNUID0gKF9iID0gY3JlYXRlKCdDT01NRU5UX0xJU1QnLCB7CiAgICBzdGFydDogZnVuY3Rpb24gKHN0YXRlLCBtZXRhKSB7CiAgICAgICAgdmFyIF9hOwogICAgICAgIGlmIChzdGF0ZS5jb21tZW50c1ttZXRhXSkgewogICAgICAgICAgICByZXR1cm4gc3RhdGU7CiAgICAgICAgfQogICAgICAgIHJldHVybiB1cGRhdGUoc3RhdGUsIHsKICAgICAgICAgICAgY29tbWVudHM6IChfYSA9IHt9LAogICAgICAgICAgICAgICAgX2FbbWV0YV0gPSB7ICRzZXQ6IFtdIH0sCiAgICAgICAgICAgICAgICBfYSksCiAgICAgICAgfSk7CiAgICB9LAogICAgc3VjY2VzczogZnVuY3Rpb24gKHN0YXRlLCBtZXRhLCBwYXlsb2FkKSB7CiAgICAgICAgdmFyIF9hLCBfYjsKICAgICAgICB2YXIgbGFzdENvbW1lbnQgPSBsYXN0KHBheWxvYWQpOwogICAgICAgIGlmIChsYXN0Q29tbWVudCAmJiBsYXN0Q29tbWVudC5zaGFyZWRUaHJlYWQgPT09IHN0YXRlLnNlbGVjdGVkU2hhcmVkVGhyZWFkCiAgICAgICAgICAgICYmIHN0YXRlLnNoYXJlZFRocmVhZEFjdGl2aXR5LmNvbW1lbnRbbGFzdENvbW1lbnQudXNlcl0pIHsKICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICAgICAgY29tbWVudHM6IChfYSA9IHt9LAogICAgICAgICAgICAgICAgICAgIF9hW21ldGFdID0geyAkc2V0OiBwYXlsb2FkIH0sCiAgICAgICAgICAgICAgICAgICAgX2EpLAogICAgICAgICAgICAgICAgc2hhcmVkVGhyZWFkQWN0aXZpdHk6IHsKICAgICAgICAgICAgICAgICAgICBjb21tZW50OiB7ICR1bnNldDogW2xhc3RDb21tZW50LnVzZXJdIH0sCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICBjb21tZW50czogKF9iID0ge30sCiAgICAgICAgICAgICAgICBfYlttZXRhXSA9IHsgJHNldDogcGF5bG9hZCB9LAogICAgICAgICAgICAgICAgX2IpLAogICAgICAgIH0pOwogICAgfSwKfSksIF9iLnR5cGUpLCBjb21tZW50TGlzdCA9IF9iLmFjdGlvbiwgY29tbWVudExpc3RSZWR1Y2VyID0gX2IucmVkdWNlcjsKZXhwb3J0IHZhciBDT01NRU5UX1JFQUQgPSAoX2MgPSBjcmVhdGUoJ0NPTU1FTlRfUkVBRCcsIHt9KSwgX2MudHlwZSksIGNvbW1lbnRSZWFkID0gX2MuYWN0aW9uLCBjb21tZW50UmVhZFJlZHVjZXIgPSBfYy5yZWR1Y2VyOwovLyBTZWxlY3RzIENvbW1lbnRzIGZvciBzZWxlY3RlZCB0aHJlYWQKZXhwb3J0IHZhciBzZWxlY3RDb21tZW50cyA9IGNyZWF0ZVNlbGVjdG9yKFsKICAgIGZ1bmN0aW9uIChzdGF0ZSwgc2hhcmVkVGhyZWFkKSB7IHJldHVybiBzdGF0ZS5jb21tZW50c1tzaGFyZWRUaHJlYWRdIHx8IFtdOyB9LAogICAgZnVuY3Rpb24gKHN0YXRlLCBzaGFyZWRUaHJlYWQpIHsgcmV0dXJuIHN0YXRlLnNlbGVjdGVkVGhyZWFkOyB9LAogICAgZnVuY3Rpb24gKHN0YXRlLCBzaGFyZWRUaHJlYWQpIHsgcmV0dXJuIHNlbGVjdFNoYXJlZFRocmVhZChzdGF0ZSwgc2hhcmVkVGhyZWFkKTsgfSwKXSwgZnVuY3Rpb24gKGNvbW1lbnRzLCB0aHJlYWQsIHNoYXJlZFRocmVhZCkgewogICAgaWYgKHRocmVhZCAmJiBzaGFyZWRUaHJlYWQgJiYgdGhyZWFkLmlkID09PSBzaGFyZWRUaHJlYWQudGhyZWFkKSB7CiAgICAgICAgcmV0dXJuIGNvbW1lbnRzIHx8IFtdOwogICAgfQogICAgcmV0dXJuIFtdOwp9LCBmdW5jdGlvbiAoY29tbWVudHMsIHRocmVhZCwgc2hhcmVkVGhyZWFkKSB7CiAgICByZXR1cm4gZm52MWEzMigodGhyZWFkICYmIHRocmVhZC5pZCB8fCAnZScpICsgKHNoYXJlZFRocmVhZCAmJiBzaGFyZWRUaHJlYWQuaWQgfHwgJ2UnKSk7Cn0sIFsnY29tbWVudHMnXSk7CmV4cG9ydCBkZWZhdWx0IFsKICAgIGNvbW1lbnRDcmVhdGVSZWR1Y2VyLAogICAgY29tbWVudExpc3RSZWR1Y2VyLApdOwo="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/comments.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/comments.ts"],"names":[],"mappings":";AAAA,OAAO,MAAM,MAAM,qBAAqB,CAAC;AACzC,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAC9B,OAAO,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;AAExC,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AAEnD,OAAO,EAAE,kBAAkB,EAAE,MAAM,0BAA0B,CAAC;AAC9D,OAAO,EAAE,OAAO,EAAE,MAAM,gBAAgB,CAAC;AAUzC,MAAM,CACJ,IAAA;;;;;;;;;;;;YAAoB,EACpB,yBAAqB,EACrB,iCAA6B,CAY5B;AAEH,MAAM,CACJ,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAAkB,EAClB,uBAAmB,EACnB,+BAA2B,CAiC1B;AAQH,MAAM,CACJ,IAAA,yDAAkB,EAClB,uBAAmB,EACnB,+BAA2B,CACyB;AAEtD,uCAAuC;AACvC,MAAM,CAAC,IAAM,cAAc,GAAG,cAAc,CAG1C;IACE,UAAC,KAAiB,EAAE,YAAoB,IAAK,OAAA,KAAK,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,EAAE,EAAlC,CAAkC;IAC/E,UAAC,KAAiB,EAAE,YAAoB,IAAK,OAAA,KAAK,CAAC,cAAc,EAApB,CAAoB;IACjE,UAAC,KAAiB,EAAE,YAAoB,IAAK,OAAA,kBAAkB,CAAC,KAAK,EAAE,YAAY,CAAC,EAAvC,CAAuC;CACrF,EACD,UAAC,QAAmB,EAAE,MAAwB,EAAE,YAAoC;IAClF,IAAI,MAAM,IAAI,YAAY,IAAI,MAAM,CAAC,EAAE,KAAK,YAAY,CAAC,MAAM,EAAE;QAC/D,OAAO,QAAQ,IAAI,EAAE,CAAC;KACvB;IAED,OAAO,EAAE,CAAC;AACZ,CAAC,EACD,UAAC,QAAa,EAAE,MAAwB,EAAE,YAAoC;IAC5E,OAAO,OAAO,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,EAAE,IAAI,GAAG,CAAC,GAAG,CAAC,YAAY,IAAI,YAAY,CAAC,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC;AAC1F,CAAC,EACD,CAAC,UAAU,CAAC,CACb,CAAC;AAEF,eAAe;IACb,oBAAoB;IACpB,kBAAkB;CACnB,CAAC","sourcesContent":["import update from 'immutability-helper';\nimport { last } from 'lodash';\nimport { create } from '@src/lib/redux';\nimport { Comment, SharedThread } from '@src/types/sharedThreads';\nimport { createSelector } from '@src/lib/selector';\nimport { Thread, StoreState, Attachment } from '@src/types';\nimport { selectSharedThread } from '@src/ducks/sharedThreads';\nimport { fnv1a32 } from '@src/lib/crypt';\n\nexport interface CommentCreateMeta {\n  rfcId: string;\n  body: string;\n  thread: string;\n  attachments?: Attachment[];\n  draft?: string;\n}\n\nexport const {\n  type: COMMENT_CREATE,\n  action: commentCreate,\n  reducer: commentCreateReducer,\n} = create<CommentCreateMeta, Comment>('COMMENT_CREATE', {\n  success: (state, meta, payload) => {\n    const comments = state.comments[payload.sharedThread] || [];\n    return update(state, {\n      comments: {\n        [payload.sharedThread]: {\n          $set: comments.concat([payload]),\n        },\n      },\n    });\n  },\n});\n\nexport const {\n  type: COMMENT_LIST,\n  action: commentList,\n  reducer: commentListReducer,\n} = create<string, Comment[]>('COMMENT_LIST', {\n  start: (state, meta) => {\n    if (state.comments[meta]) {\n      return state;\n    }\n\n    return update(state, {\n      comments: {\n        [meta]: { $set: [] },\n      },\n    });\n  },\n  success: (state, meta, payload) => {\n    const lastComment = last(payload);\n    if (lastComment && lastComment.sharedThread === state.selectedSharedThread\n      && state.sharedThreadActivity.comment[lastComment.user]) {\n      return update(state, {\n        comments: {\n          [meta]: { $set: payload },\n        },\n        sharedThreadActivity: {\n          comment: { $unset: [lastComment.user] },\n        },\n      });\n    }\n\n    return update(state, {\n      comments: {\n        [meta]: { $set: payload },\n      },\n    });\n  },\n});\n\nexport interface CommentReadMeta {\n  sharedThread: string;\n  comment: string;\n  read: boolean;\n}\n\nexport const {\n  type: COMMENT_READ,\n  action: commentRead,\n  reducer: commentReadReducer,\n} = create<CommentReadMeta, null>('COMMENT_READ', {});\n\n// Selects Comments for selected thread\nexport const selectComments = createSelector<\n  string, Comment[]|Thread|SharedThread|undefined, Comment[]\n>(\n  [\n    (state: StoreState, sharedThread: string) => state.comments[sharedThread] || [],\n    (state: StoreState, sharedThread: string) => state.selectedThread,\n    (state: StoreState, sharedThread: string) => selectSharedThread(state, sharedThread),\n  ],\n  (comments: Comment[], thread: Thread|undefined, sharedThread: SharedThread|undefined) => {\n    if (thread && sharedThread && thread.id === sharedThread.thread) {\n      return comments || [];\n    }\n\n    return [];\n  },\n  (comments: any, thread: Thread|undefined, sharedThread: SharedThread|undefined) => {\n    return fnv1a32((thread && thread.id || 'e') + (sharedThread && sharedThread.id || 'e'));\n  },\n  ['comments'],\n);\n\nexport default [\n  commentCreateReducer,\n  commentListReducer,\n];\n"]}]}