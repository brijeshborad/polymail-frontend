{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/auth.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/auth.ts","mtime":1675280254046},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkgewogICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHsKICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHsKICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTsKICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKQogICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07CiAgICAgICAgfQogICAgICAgIHJldHVybiB0OwogICAgfTsKICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9Owp2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZiwgX2csIF9oLCBfaiwgX2ssIF9sOwppbXBvcnQgdXBkYXRlIGZyb20gJ2ltbXV0YWJpbGl0eS1oZWxwZXInOwppbXBvcnQgeyBjcmVhdGUsIGNyZWF0ZUFjdGlvbiB9IGZyb20gJ0BzcmMvbGliL3JlZHV4JzsKaW1wb3J0IHsgaW5pdGlhbFN0YXRlV2l0aENhY2hlZERhdGEgfSBmcm9tICdAc3JjL2xpYi9zdGF0ZSc7CmltcG9ydCB7IFRva2VuVHlwZSB9IGZyb20gJ0BzcmMvYXBpL2F1dGgnOwppbXBvcnQgeyBkZWxldGVURkFOZWVkZWRDb29raWUsIFNUQU5EQVJEX0NPT0tJRV9BVFRSSUJVVEVTIH0gZnJvbSAnQHNyYy9saWIvY29va2llcyc7CmltcG9ydCBDb29raWVzIGZyb20gJ2pzLWNvb2tpZSc7CmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JzsKZXhwb3J0IHZhciBTVEFSVCA9ICdTVEFSVCc7CmV4cG9ydCB2YXIgc3RhcnQgPSBjcmVhdGVBY3Rpb24oU1RBUlQpOwpleHBvcnQgdmFyIEFVVEhfUEFTU1dPUkRfUkVTRVQgPSAoX2EgPSBjcmVhdGUoJ0FVVEhfUEFTU1dPUkRfUkVTRVQnLCB7fSksIF9hLnR5cGUpLCBhdXRoUGFzc3dvcmRSZXNldCA9IF9hLmFjdGlvbiwgYXV0aFBhc3N3b3JkUmVzZXRSZWR1Y2VyID0gX2EucmVkdWNlcjsKZXhwb3J0IHZhciBBVVRIX0dFVF9MT0dJTl9UT0tFTiA9IChfYiA9IGNyZWF0ZSgnQVVUSF9HRVRfTE9HSU5fVE9LRU4nLCB7CiAgICBzdWNjZXNzOiBmdW5jdGlvbiAoc3RhdGUsIG1ldGEsIHBheWxvYWQpIHsKICAgICAgICAvLyBTZXQgQ29va2llIG9uIHN1Y2Nlc3MKICAgICAgICBDb29raWVzLnNldCgncG1sdCcsIHBheWxvYWQsIF9fYXNzaWduKF9fYXNzaWduKHt9LCBTVEFOREFSRF9DT09LSUVfQVRUUklCVVRFUyksIHsgZXhwaXJlczogbW9tZW50KCkuYWRkKHBheWxvYWQudHRsIHx8IDAsICdzZWNvbmRzJykudG9EYXRlKCkgfSkpOwogICAgICAgIC8vIFJldHVybiBzdGF0ZQogICAgICAgIHJldHVybiBzdGF0ZTsKICAgIH0sCn0pLCBfYi50eXBlKSwgYXV0aEdldExvZ2luVG9rZW4gPSBfYi5hY3Rpb24sIGF1dGhHZXRMb2dpblRva2VuUmVkdWNlciA9IF9iLnJlZHVjZXI7CmV4cG9ydCB2YXIgQVVUSF9HRVRfTUFHSUNfTElOSyA9IChfYyA9IGNyZWF0ZSgnQVVUSF9HRVRfTUFHSUNfTElOSycsIHsKICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChzdGF0ZSwgbWV0YSwgcGF5bG9hZCkgewogICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdyZWRpcmVjdFBsYXRmb3JtJyk7CiAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICByZWRpcmVjdFBsYXRmb3JtOiB7ICRzZXQ6IHVuZGVmaW5lZCB9LAogICAgICAgIH0pOwogICAgfSwKICAgIGZhaWx1cmU6IGZ1bmN0aW9uIChzdGF0ZSwgbWV0YSwgZXJyb3IpIHsKICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgncmVkaXJlY3RQbGF0Zm9ybScpOwogICAgICAgIHJldHVybiB1cGRhdGUoc3RhdGUsIHsKICAgICAgICAgICAgcmVkaXJlY3RQbGF0Zm9ybTogeyAkc2V0OiB1bmRlZmluZWQgfSwKICAgICAgICB9KTsKICAgIH0sCn0pLCBfYy50eXBlKSwgYXV0aEdldE1hZ2ljTGluayA9IF9jLmFjdGlvbiwgYXV0aEdldE1hZ2ljTGlua1JlZHVjZXIgPSBfYy5yZWR1Y2VyOwpleHBvcnQgdmFyIEFVVEhfQ0xFQVJfUkVESVJFQ1QgPSAoX2QgPSBjcmVhdGUoJ0FVVEhfQ0xFQVJfUkVESVJFQ1QnLCB7CiAgICBzdGFydDogZnVuY3Rpb24gKHN0YXRlLCBtZXRhKSB7CiAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ3JlZGlyZWN0UGxhdGZvcm0nKTsKICAgICAgICByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgICAgIHJlZGlyZWN0UGxhdGZvcm06IHsgJHNldDogdW5kZWZpbmVkIH0sCiAgICAgICAgfSk7CiAgICB9LAp9KSwgX2QudHlwZSksIGF1dGhDbGVhclJlZGlyZWN0ID0gX2QuYWN0aW9uLCBhdXRoQ2xlYXJSZWRpcmVjdFJlZHVjZXIgPSBfZC5yZWR1Y2VyOwpleHBvcnQgdmFyIEFVVEhfTE9HSU4gPSAoX2UgPSBjcmVhdGUoJ0FVVEhfTE9HSU4nLCB7CiAgICBzdGFydDogZnVuY3Rpb24gKHN0YXRlLCBtZXRhKSB7IHJldHVybiB1cGRhdGUoc3RhdGUsIHsKICAgICAgICBhdXRoUGVuZGluZzogeyAkc2V0OiB0cnVlIH0sCiAgICB9KTsgfSwKICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChzdGF0ZSwgbWV0YSwgcGF5bG9hZCkgeyByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgYXV0aFBlbmRpbmc6IHsgJHNldDogZmFsc2UgfSwKICAgICAgICBsb2dnZWRJbjogeyAkc2V0OiB0cnVlIH0sCiAgICAgICAgdGZhTmVlZGVkOiB7ICRzZXQ6IHBheWxvYWQudHlwZSA9PT0gVG9rZW5UeXBlLkJhc2ljID8gdHJ1ZSA6IGZhbHNlIH0sCiAgICAgICAgbG9naW5Ub2tlbjogeyAkc2V0OiB1bmRlZmluZWQgfSwKICAgIH0pOyB9LAogICAgZmFpbHVyZTogZnVuY3Rpb24gKHN0YXRlLCBtZXRhLCBlcnJvcikgeyByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgYXV0aFBlbmRpbmc6IHsgJHNldDogZmFsc2UgfSwKICAgIH0pOyB9LAp9KSwgX2UudHlwZSksIGF1dGhMb2dpbiA9IF9lLmFjdGlvbiwgYXV0aExvZ2luUmVkdWNlciA9IF9lLnJlZHVjZXI7CmV4cG9ydCB2YXIgQVVUSF9MT0dHRURfSU5fU0VUID0gKF9mID0gY3JlYXRlKCdBVVRIX0xPR0dFRF9JTl9TRVQnLCB7CiAgICBzdGFydDogZnVuY3Rpb24gKHN0YXRlLCBtZXRhKSB7CiAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICBsb2dnZWRJbjogeyAkc2V0OiBtZXRhIH0sCiAgICAgICAgfSk7CiAgICB9LAp9KSwgX2YudHlwZSksIGF1dGhMb2dnZWRJblNldCA9IF9mLmFjdGlvbiwgYXV0aExvZ2dlZEluU2V0UmVkdWNlciA9IF9mLnJlZHVjZXI7CmV4cG9ydCB2YXIgQVVUSF9MT0dPVVQgPSAoX2cgPSBjcmVhdGUoJ0FVVEhfTE9HT1VUJywgewogICAgc3VjY2VzczogZnVuY3Rpb24gKHN0YXRlLCBtZXRhLCBwYXlsb2FkKSB7IHJldHVybiBpbml0aWFsU3RhdGVXaXRoQ2FjaGVkRGF0YSgpOyB9LAp9KSwgX2cudHlwZSksIGF1dGhMb2dvdXQgPSBfZy5hY3Rpb24sIGF1dGhMb2dvdXRSZWR1Y2VyID0gX2cucmVkdWNlcjsKZXhwb3J0IHZhciBBVVRIX0xPR09VVF9BTEwgPSAoX2ggPSBjcmVhdGUoJ0FVVEhfTE9HT1VUX0FMTCcsIHsKICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChzdGF0ZSwgbWV0YSwgcGF5bG9hZCkgeyByZXR1cm4gaW5pdGlhbFN0YXRlV2l0aENhY2hlZERhdGEoKTsgfSwKfSksIF9oLnR5cGUpLCBhdXRoTG9nb3V0QWxsID0gX2guYWN0aW9uLCBhdXRoTG9nb3V0QWxsUmVkdWNlciA9IF9oLnJlZHVjZXI7CmV4cG9ydCB2YXIgQVVUSF9PQVVUSF9MT0dJTiA9IChfaiA9IGNyZWF0ZSgnT0FVVEhfTE9HSU4nLCB7fSksIF9qLnR5cGUpLCBhdXRoT0F1dGhMb2dpbiA9IF9qLmFjdGlvbiwgYXV0aE9BdXRoTG9naW5SZWR1Y2VyID0gX2oucmVkdWNlcjsKZXhwb3J0IHZhciBBVVRIX1RGQV9DT0RFX1ZBTElEQVRFID0gKF9rID0gY3JlYXRlKCdBVVRIX1RGQV9DT0RFX1ZBTElEQVRFJywgewogICAgc3VjY2VzczogZnVuY3Rpb24gKHN0YXRlLCBtZXRhLCBwYXlsb2FkKSB7CiAgICAgICAgZGVsZXRlVEZBTmVlZGVkQ29va2llKCk7CiAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICB0ZmFOZWVkZWQ6IHsgJHNldDogZmFsc2UgfSwKICAgICAgICAgICAgbG9nZ2VkSW46IHsgJHNldDogdHJ1ZSB9LAogICAgICAgIH0pOwogICAgfSwKfSksIF9rLnR5cGUpLCBhdXRoVGZhQ29kZVZhbGlkYXRlID0gX2suYWN0aW9uLCBhdXRoVGZhQ29kZVZhbGlkYXRlUmVkdWNlciA9IF9rLnJlZHVjZXI7CmV4cG9ydCB2YXIgQVVUSF9URkFfQ09ERV9TRU5EID0gKF9sID0gY3JlYXRlKCdBVVRIX1RGQV9DT0RFX1NFTkQnLCB7fSksIF9sLnR5cGUpLCBhdXRoVGZhQ29kZVNlbmQgPSBfbC5hY3Rpb24sIGF1dGhUZmFDb2RlU2VuZFJlZHVjZXIgPSBfbC5yZWR1Y2VyOwpleHBvcnQgZGVmYXVsdCBbCiAgICBhdXRoTG9naW5SZWR1Y2VyLAogICAgYXV0aExvZ291dFJlZHVjZXIsCiAgICBhdXRoTG9nb3V0QWxsUmVkdWNlciwKICAgIGF1dGhQYXNzd29yZFJlc2V0UmVkdWNlciwKICAgIGF1dGhMb2dnZWRJblNldFJlZHVjZXIsCiAgICBhdXRoVGZhQ29kZVZhbGlkYXRlUmVkdWNlciwKICAgIGF1dGhHZXRNYWdpY0xpbmtSZWR1Y2VyLAogICAgYXV0aENsZWFyUmVkaXJlY3RSZWR1Y2VyLAogICAgYXV0aEdldExvZ2luVG9rZW5SZWR1Y2VyLApdOwo="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/auth.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/auth.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,OAAO,MAAM,MAAM,qBAAqB,CAAC;AAEzC,OAAO,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAC;AACtD,OAAO,EAAE,0BAA0B,EAAE,MAAM,gBAAgB,CAAC;AAE5D,OAAO,EAAoB,SAAS,EAAE,MAAM,eAAe,CAAC;AAE5D,OAAO,EAAE,qBAAqB,EAAE,0BAA0B,EAAE,MAAM,kBAAkB,CAAC;AACrF,OAAO,OAAO,MAAM,WAAW,CAAC;AAChC,OAAO,MAAM,MAAM,QAAQ,CAAC;AAE5B,MAAM,CAAC,IAAM,KAAK,GAAG,OAAO,CAAC;AAE7B,MAAM,CAAC,IAAM,KAAK,GAAG,YAAY,CAAa,KAAK,CAAC,CAAC;AAUrD,MAAM,CACJ,IAAA,uEAAyB,EACzB,6BAAyB,EACzB,qCAAiC,CACiB;AAapD,MAAM,CACJ,IAAA;;;;;;;YAA0B,EAC1B,6BAAyB,EACzB,qCAAiC,CAgBhC;AAEH,MAAM,CACJ,IAAA;;;;;;;;;;;;;YAAyB,EACzB,4BAAwB,EACxB,oCAAgC,CAc/B;AAEH,MAAM,CACJ,IAAA;;;;;;;YAAyB,EACzB,6BAAyB,EACzB,qCAAiC,CAQhC;AAEH,MAAM,CACJ,IAAA;;;;;;;;;;;;;YAAgB,EAChB,qBAAiB,EACjB,6BAAyB,CAcxB;AAEH,MAAM,CACJ,IAAA;;;;;;YAAwB,EACxB,2BAAuB,EACvB,mCAA+B,CAO9B;AAEH,MAAM,CACJ,IAAA;;YAAiB,EACjB,sBAAkB,EAClB,8BAA0B,CAGzB;AAEH,MAAM,CACJ,IAAA;;YAAqB,EACrB,yBAAqB,EACrB,iCAA6B,CAG5B;AAQH,MAAM,CACJ,IAAA,4DAAsB,EACtB,0BAAsB,EACtB,kCAA8B,CAC0B;AAE1D,MAAM,CACJ,IAAA;;;;;;;;YAA4B,EAC5B,+BAA2B,EAC3B,uCAAmC,CAUlC;AAEH,MAAM,CACJ,IAAA,qEAAwB,EACxB,2BAAuB,EACvB,mCAA+B,CACgB;AAEjD,eAAe;IACb,gBAAgB;IAChB,iBAAiB;IACjB,oBAAoB;IACpB,wBAAwB;IACxB,sBAAsB;IACtB,0BAA0B;IAC1B,uBAAuB;IACvB,wBAAwB;IACxB,wBAAwB;CACzB,CAAC","sourcesContent":["import update from 'immutability-helper';\n\nimport { create, createAction } from '@src/lib/redux';\nimport { initialStateWithCachedData } from '@src/lib/state';\n\nimport { LoginType, Token, TokenType } from '@src/api/auth';\nimport { OAuthType, LoginToken } from '@src/types';\nimport { deleteTFANeededCookie, STANDARD_COOKIE_ATTRIBUTES } from '@src/lib/cookies';\nimport Cookies from 'js-cookie';\nimport moment from 'moment';\n\nexport const START = 'START';\n\nexport const start = createAction<null, null>(START);\n\nexport interface AuthLoginMeta {\n  email: string|null;\n  password: string|null;\n  magicCode?: string;\n  token?: string;\n  type: LoginType;\n}\n\nexport const {\n  type: AUTH_PASSWORD_RESET,\n  action: authPasswordReset,\n  reducer: authPasswordResetReducer,\n} = create<string, null>('AUTH_PASSWORD_RESET', {});\n\nexport interface MagicLinkMeta {\n  email: string;\n  skipEmail?: boolean;\n  token?: string;\n}\n\nexport interface MagicLink {\n  code: string;\n  url: string;\n}\n\nexport const {\n  type: AUTH_GET_LOGIN_TOKEN,\n  action: authGetLoginToken,\n  reducer: authGetLoginTokenReducer,\n} = create<null, LoginToken>('AUTH_GET_LOGIN_TOKEN', {\n  success: (state, meta, payload) => {\n    // Set Cookie on success\n    Cookies.set(\n      'pmlt',\n      payload,\n      {\n        ...STANDARD_COOKIE_ATTRIBUTES,\n        expires: moment().add(payload.ttl || 0, 'seconds').toDate(),\n      },\n    );\n\n    // Return state\n    return state;\n  },\n});\n\nexport const {\n  type: AUTH_GET_MAGIC_LINK,\n  action: authGetMagicLink,\n  reducer: authGetMagicLinkReducer,\n} = create<MagicLinkMeta, null>('AUTH_GET_MAGIC_LINK', {\n  success: (state, meta, payload) => {\n    localStorage.removeItem('redirectPlatform');\n    return update(state, {\n      redirectPlatform: { $set: undefined },\n    });\n  },\n  failure: (state, meta, error) => {\n    localStorage.removeItem('redirectPlatform');\n    return update(state, {\n      redirectPlatform: { $set: undefined },\n    });\n  },\n});\n\nexport const {\n  type: AUTH_CLEAR_REDIRECT,\n  action: authClearRedirect,\n  reducer: authClearRedirectReducer,\n} = create<null, null>('AUTH_CLEAR_REDIRECT', {\n  start: (state, meta) => {\n    localStorage.removeItem('redirectPlatform');\n    return update(state, {\n      redirectPlatform: { $set: undefined },\n    });\n  },\n});\n\nexport const {\n  type: AUTH_LOGIN,\n  action: authLogin,\n  reducer: authLoginReducer,\n} = create<AuthLoginMeta, Token>('AUTH_LOGIN', {\n  start: (state, meta) => update(state, {\n    authPending: { $set: true },\n  }),\n  success: (state, meta, payload) => update(state, {\n    authPending: { $set: false },\n    loggedIn: { $set: true },\n    tfaNeeded: { $set: payload.type === TokenType.Basic ? true : false },\n    loginToken: { $set: undefined },\n  }),\n  failure: (state, meta, error) => update(state, {\n    authPending: { $set: false },\n  }),\n});\n\nexport const {\n  type: AUTH_LOGGED_IN_SET,\n  action: authLoggedInSet,\n  reducer: authLoggedInSetReducer,\n} = create<boolean, null>('AUTH_LOGGED_IN_SET', {\n  start: (state, meta) => {\n    return update(state, {\n      loggedIn: { $set: meta },\n    });\n  },\n});\n\nexport const {\n  type: AUTH_LOGOUT,\n  action: authLogout,\n  reducer: authLogoutReducer,\n} = create<null, null>('AUTH_LOGOUT', {\n  success: (state, meta, payload) => initialStateWithCachedData(),\n});\n\nexport const {\n  type: AUTH_LOGOUT_ALL,\n  action: authLogoutAll,\n  reducer: authLogoutAllReducer,\n} = create<null, null>('AUTH_LOGOUT_ALL', {\n  success: (state, meta, payload) => initialStateWithCachedData(),\n});\n\nexport interface AuthOAuthLoginMeta {\n  type: OAuthType;\n  teamInviteNonce?: string;\n  teamInvitePayload?: string;\n}\n\nexport const {\n  type: AUTH_OAUTH_LOGIN,\n  action: authOAuthLogin,\n  reducer: authOAuthLoginReducer,\n} = create<AuthOAuthLoginMeta, string>('OAUTH_LOGIN', {});\n\nexport const {\n  type: AUTH_TFA_CODE_VALIDATE,\n  action: authTfaCodeValidate,\n  reducer: authTfaCodeValidateReducer,\n} = create<string, Token>('AUTH_TFA_CODE_VALIDATE', {\n  success: (state, meta, payload) => {\n    deleteTFANeededCookie();\n\n    return update(state, {\n      tfaNeeded: { $set: false },\n      loggedIn: { $set: true },\n    });\n  },\n});\n\nexport const {\n  type: AUTH_TFA_CODE_SEND,\n  action: authTfaCodeSend,\n  reducer: authTfaCodeSendReducer,\n} = create<null, null>('AUTH_TFA_CODE_SEND', {});\n\nexport default [\n  authLoginReducer,\n  authLogoutReducer,\n  authLogoutAllReducer,\n  authPasswordResetReducer,\n  authLoggedInSetReducer,\n  authTfaCodeValidateReducer,\n  authGetMagicLinkReducer,\n  authClearRedirectReducer,\n  authGetLoginTokenReducer,\n];\n"]}]}