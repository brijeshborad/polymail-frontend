{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/CalendarScheduling/index.tsx","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/CalendarScheduling/index.tsx","mtime":1675280254076},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IENhbGVuZGFyU2NoZWR1bGluZyBmcm9tICcuL0NhbGVuZGFyU2NoZWR1bGluZyc7CmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7CmltcG9ydCB7IHRpbWVzbG90c0xpc3QsIHNjaGVkdWxpbmdQdWJsaWNHZXQgfSBmcm9tICdAc3JjL2R1Y2tzL3NjaGVkdWxpbmcnOwppbXBvcnQgeyB3aXRoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyJzsKdmFyIG1hcFN0YXRlVG9Qcm9wcyA9IGZ1bmN0aW9uIChzdGF0ZSwgb3duUHJvcHMpIHsKICAgIHZhciB1c2VyU2x1ZyA9IG93blByb3BzLm1hdGNoLnBhcmFtcy51c2VyU2x1ZyB8fCAnJzsKICAgIHZhciBzbHVnID0gb3duUHJvcHMubWF0Y2gucGFyYW1zLnNsdWcgfHwgJyc7CiAgICB2YXIgc2NoZWR1bGluZ1B1YmxpYyA9IHN0YXRlLnNjaGVkdWxpbmcuc2NoZWR1bGluZ1B1YmxpY3NbdXNlclNsdWcgKyBzbHVnXTsKICAgIHJldHVybiB7CiAgICAgICAgdXNlclNsdWc6IHVzZXJTbHVnLAogICAgICAgIHNsdWc6IHNsdWcsCiAgICAgICAgbG9hZGluZzogc3RhdGUuc2NoZWR1bGluZy50aW1lU2xvdHNMb2FkaW5nLAogICAgICAgIHRpbWVTbG90czogc3RhdGUuc2NoZWR1bGluZy50aW1lU2xvdHMsCiAgICAgICAgY3JlYXRlZEV2ZW50OiBzdGF0ZS5zY2hlZHVsaW5nLmNyZWF0ZWRFdmVudCwKICAgICAgICBzY2hlZHVsaW5nUHVibGljOiBzY2hlZHVsaW5nUHVibGljLAogICAgICAgIHRpbWVzbG90c0Vycm9yOiAhIXN0YXRlLnNjaGVkdWxpbmcudGltZVNsb3RzRXJyb3IsCiAgICB9Owp9Owp2YXIgbWFwRGlzcGF0Y2hUb1Byb3BzID0gZnVuY3Rpb24gKGRpc3BhdGNoKSB7IHJldHVybiAoewogICAgZmV0Y2hUaW1lU2xvdHM6IGZ1bmN0aW9uIChtZXRhKSB7IHJldHVybiBkaXNwYXRjaCh0aW1lc2xvdHNMaXN0KG1ldGEpKTsgfSwKICAgIGdldFB1YmxpYzogZnVuY3Rpb24gKG1ldGEpIHsgcmV0dXJuIGRpc3BhdGNoKHNjaGVkdWxpbmdQdWJsaWNHZXQobWV0YSkpOyB9LAp9KTsgfTsKZXhwb3J0IGRlZmF1bHQgd2l0aFJvdXRlcihjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShDYWxlbmRhclNjaGVkdWxpbmcpKTsK"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/CalendarScheduling/index.tsx","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/CalendarScheduling/index.tsx"],"names":[],"mappings":"AAAA,OAAO,kBAAiD,MAAM,sBAAsB,CAAC;AACrF,OAAO,EAAE,OAAO,EAAY,MAAM,aAAa,CAAC;AAGhD,OAAO,EAAE,aAAa,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAC3E,OAAO,EAAE,UAAU,EAAuB,MAAM,cAAc,CAAC;AAE/D,IAAM,eAAe,GAAG,UAAC,KAAiB,EAAE,QAAkC;IAC5E,IAAM,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,IAAI,EAAE,CAAC;IACtD,IAAM,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC;IAC9C,IAAM,gBAAgB,GAAG,KAAK,CAAC,UAAU,CAAC,iBAAiB,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC;IAC7E,OAAO;QACL,QAAQ,UAAA;QACR,IAAI,MAAA;QACJ,OAAO,EAAE,KAAK,CAAC,UAAU,CAAC,gBAAgB;QAC1C,SAAS,EAAE,KAAK,CAAC,UAAU,CAAC,SAAS;QACrC,YAAY,EAAE,KAAK,CAAC,UAAU,CAAC,YAAY;QAC3C,gBAAgB,kBAAA;QAChB,cAAc,EAAE,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,cAAc;KAClD,CAAC;AACJ,CAAC,CAAC;AAEF,IAAM,kBAAkB,GAAG,UAAC,QAA8B,IAAoB,OAAA,CAAC;IAC7E,cAAc,EAAE,UAAA,IAAI,IAAI,OAAA,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,EAA7B,CAA6B;IACrD,SAAS,EAAE,UAAA,IAAI,IAAI,OAAA,QAAQ,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC,EAAnC,CAAmC;CACvD,CAAC,EAH4E,CAG5E,CAAC;AAEH,eAAe,UAAU,CAAC,OAAO,CAAC,eAAe,EAAE,kBAAkB,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC","sourcesContent":["import CalendarScheduling, { StateProps, DispatchProps } from './CalendarScheduling';\nimport { connect, Dispatch } from 'react-redux';\n\nimport { StoreState } from '@src/types';\nimport { timeslotsList, schedulingPublicGet } from '@src/ducks/scheduling';\nimport { withRouter, RouteComponentProps } from 'react-router';\n\nconst mapStateToProps = (state: StoreState, ownProps: RouteComponentProps<any>): StateProps => {\n  const userSlug = ownProps.match.params.userSlug || '';\n  const slug = ownProps.match.params.slug || '';\n  const schedulingPublic = state.scheduling.schedulingPublics[userSlug + slug];\n  return {\n    userSlug,\n    slug,\n    loading: state.scheduling.timeSlotsLoading,\n    timeSlots: state.scheduling.timeSlots,\n    createdEvent: state.scheduling.createdEvent,\n    schedulingPublic,\n    timeslotsError: !!state.scheduling.timeSlotsError,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<StoreState>): DispatchProps => ({\n  fetchTimeSlots: meta => dispatch(timeslotsList(meta)),\n  getPublic: meta => dispatch(schedulingPublicGet(meta)),\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CalendarScheduling));\n"]}]}