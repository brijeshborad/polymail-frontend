{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/mailCounts.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/mailCounts.ts","mtime":1675280254049},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkgewogICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHsKICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHsKICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTsKICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKQogICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07CiAgICAgICAgfQogICAgICAgIHJldHVybiB0OwogICAgfTsKICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9Owp2YXIgX2E7CmltcG9ydCB7IGNyZWF0ZVNlbGVjdG9yIH0gZnJvbSAncmVzZWxlY3QnOwppbXBvcnQgdXBkYXRlIGZyb20gJ2ltbXV0YWJpbGl0eS1oZWxwZXInOwppbXBvcnQgeyBjcmVhdGUsIGNyZWF0ZUFjdGlvbiB9IGZyb20gJ0BzcmMvbGliL3JlZHV4JzsKaW1wb3J0IHsgRHJhZnRTdGF0dXMgfSBmcm9tICdAc3JjL3R5cGVzJzsKaW1wb3J0IHsgZGVmYXVsdENvdW50cywgZ2V0QWxsTWFpbENvdW50cyB9IGZyb20gJ0BzcmMvbGliL21haWxib3gnOwppbXBvcnQgeyBzaXplLCBmaWx0ZXIgfSBmcm9tICdsb2Rhc2gnOwppbXBvcnQgeyBpc0RyYWZ0T3V0Ym94IH0gZnJvbSAnQHNyYy9saWIvZHJhZnQnOwpleHBvcnQgdmFyIE1BSUxfQ09VTlRfVElUTEUgPSAnTUFJTF9DT1VOVF9USVRMRSc7CmV4cG9ydCB2YXIgbWFpbENvdW50VGl0bGUgPSBjcmVhdGVBY3Rpb24oTUFJTF9DT1VOVF9USVRMRSk7CmV4cG9ydCB2YXIgTUFJTF9DT1VOVF9VUERBVEUgPSAoX2EgPSBjcmVhdGUoJ01BSUxfQ09VTlRfVVBEQVRFJywgewogICAgc2V0dXA6IGZ1bmN0aW9uIChzdGF0ZSwgbWV0YSkgewogICAgICAgIHZhciBfYTsKICAgICAgICBpZiAoIXN0YXRlLm1haWxDb3VudHNbbWV0YV0pIHsKICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICAgICAgbWFpbENvdW50czogKF9hID0ge30sCiAgICAgICAgICAgICAgICAgICAgX2FbbWV0YV0gPSB7ICRzZXQ6IGRlZmF1bHRDb3VudHMgfSwKICAgICAgICAgICAgICAgICAgICBfYSksCiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICByZXR1cm4gc3RhdGU7CiAgICB9LAogICAgc3VjY2VzczogZnVuY3Rpb24gKHN0YXRlLCBtZXRhLCBwYXlsb2FkKSB7CiAgICAgICAgdmFyIF9hOwogICAgICAgIHJldHVybiB1cGRhdGUoc3RhdGUsIHsKICAgICAgICAgICAgbWFpbENvdW50czogKF9hID0ge30sCiAgICAgICAgICAgICAgICBfYVttZXRhXSA9IHsgJG1lcmdlOiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgcGF5bG9hZCksIHsgbGlzdHNVbnJlYWQ6IF9fYXNzaWduKF9fYXNzaWduKHt9LCBzdGF0ZS5tYWlsQ291bnRzW21ldGFdLmxpc3RzVW5yZWFkKSwgcGF5bG9hZC5saXN0c1VucmVhZCkgfSkgfSwKICAgICAgICAgICAgICAgIF9hKSwKICAgICAgICB9KTsKICAgIH0sCn0pLCBfYS50eXBlKSwgbWFpbENvdW50VXBkYXRlID0gX2EuYWN0aW9uLCBtYWlsQ291bnRVcGRhdGVSZWR1Y2VyID0gX2EucmVkdWNlcjsKZXhwb3J0IHZhciBzZWxlY3RNYWlsYm94Q291bnRzID0gY3JlYXRlU2VsZWN0b3IoZnVuY3Rpb24gKHN0YXRlKSB7CiAgICByZXR1cm4gc3RhdGUubWFpbENvdW50czsKfSwgZnVuY3Rpb24gKHN0YXRlKSB7CiAgICByZXR1cm4gc3RhdGUubGVmdFNpZGViYXIuc2VsZWN0ZWRBY2NvdW50Owp9LCBmdW5jdGlvbiAoY291bnRzLCBhY2NvdW50KSB7CiAgICBpZiAoYWNjb3VudCkgewogICAgICAgIHJldHVybiBjb3VudHNbYWNjb3VudF0gfHwgZGVmYXVsdENvdW50czsKICAgIH0KICAgIHJldHVybiBnZXRBbGxNYWlsQ291bnRzKGNvdW50cyk7Cn0pOwpleHBvcnQgdmFyIHNlbGVjdERyYWZ0Q291bnQgPSBjcmVhdGVTZWxlY3RvcihmdW5jdGlvbiAoc3RhdGUpIHsKICAgIHJldHVybiBzdGF0ZS5kcmFmdHM7Cn0sIGZ1bmN0aW9uIChkcmFmdHMpIHsKICAgIGlmIChkcmFmdHMpIHsKICAgICAgICByZXR1cm4gc2l6ZShmaWx0ZXIoZHJhZnRzLCBmdW5jdGlvbiAoZHJhZnQpIHsKICAgICAgICAgICAgaWYgKGRyYWZ0LmRhdGEpIHsKICAgICAgICAgICAgICAgIHZhciBzdGF0dXMgPSBkcmFmdC5kYXRhLnN0YXR1czsKICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPT09IERyYWZ0U3RhdHVzLkRyYWZ0IHx8IHN0YXR1cyA9PT0gRHJhZnRTdGF0dXMuRmFpbGVkKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0pKTsKICAgIH0KICAgIHJldHVybiAwOwp9KTsKLy8gSGFuZGxlIHNlbGVjdGlvbiBvZiBvdXRib3ggaXRlbXMKLy8gVE9ETyhTSElOKTogTWF5IHdhbnQgdG8gaGFuZGxlIG91dGJveCBjb3VudCB3aGVuIG5vdCB1bmRvYWJsZSBhbnltb3JlCmV4cG9ydCB2YXIgc2VsZWN0T3V0Ym94Q291bnQgPSBjcmVhdGVTZWxlY3RvcihmdW5jdGlvbiAoc3RhdGUpIHsKICAgIHJldHVybiBzdGF0ZS5kcmFmdHM7Cn0sIGZ1bmN0aW9uIChkcmFmdHMpIHsKICAgIGlmIChkcmFmdHMpIHsKICAgICAgICByZXR1cm4gc2l6ZShmaWx0ZXIoZHJhZnRzLCBmdW5jdGlvbiAoZHJhZnQpIHsKICAgICAgICAgICAgaWYgKCFkcmFmdC5kYXRhKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGlzRHJhZnRPdXRib3goZHJhZnQuZGF0YSk7CiAgICAgICAgfSkpOwogICAgfQogICAgcmV0dXJuIDA7Cn0pOwpleHBvcnQgdmFyIHNlbGVjdFNlbmRMYXRlckNvdW50ID0gY3JlYXRlU2VsZWN0b3IoZnVuY3Rpb24gKHN0YXRlKSB7CiAgICByZXR1cm4gc3RhdGUuZHJhZnRzOwp9LCBmdW5jdGlvbiAoZHJhZnRzKSB7CiAgICBpZiAoZHJhZnRzKSB7CiAgICAgICAgcmV0dXJuIHNpemUoZmlsdGVyKGRyYWZ0cywgZnVuY3Rpb24gKGRyYWZ0KSB7CiAgICAgICAgICAgIGlmIChkcmFmdC5kYXRhKSB7CiAgICAgICAgICAgICAgICB2YXIgc3RhdHVzID0gZHJhZnQuZGF0YS5zdGF0dXM7CiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzID09PSBEcmFmdFN0YXR1cy5TY2hlZHVsZWQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfSkpOwogICAgfQogICAgcmV0dXJuIDA7Cn0pOwpleHBvcnQgdmFyIHNlbGVjdEFsbE1haWxib3hDb3VudCA9IGNyZWF0ZVNlbGVjdG9yKGZ1bmN0aW9uIChzdGF0ZSkgewogICAgcmV0dXJuIHN0YXRlLm1haWxDb3VudHM7Cn0sIGZ1bmN0aW9uIChjb3VudCkgewogICAgcmV0dXJuIGdldEFsbE1haWxDb3VudHMoY291bnQpOwp9KTsKZXhwb3J0IGRlZmF1bHQgW21haWxDb3VudFVwZGF0ZVJlZHVjZXJdOwo="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/mailCounts.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/mailCounts.ts"],"names":[],"mappings":"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","sourcesContent":["import { createSelector } from 'reselect';\nimport update from 'immutability-helper';\n\nimport { create, createAction } from '@src/lib/redux';\n\nimport { StoreState, MailCount, DraftStatus } from '@src/types';\nimport { defaultCounts, getAllMailCounts } from '@src/lib/mailbox';\nimport { size, filter } from 'lodash';\nimport { isDraftOutbox } from '@src/lib/draft';\n\nexport const MAIL_COUNT_TITLE = 'MAIL_COUNT_TITLE';\nexport const mailCountTitle = createAction<null, null>(MAIL_COUNT_TITLE);\n\nexport const {\n  type: MAIL_COUNT_UPDATE,\n  action: mailCountUpdate,\n  reducer: mailCountUpdateReducer,\n} = create<string, MailCount>('MAIL_COUNT_UPDATE', {\n  setup: (state, meta) => {\n    if (!state.mailCounts[meta]) {\n      return update(state, {\n        mailCounts: {\n          [meta]: { $set: defaultCounts },\n        },\n      });\n    }\n\n    return state;\n  },\n  success: (state, meta, payload) => {\n    return update(state, {\n      mailCounts: {\n        [meta]: { $merge: {\n          ...payload,\n          listsUnread: {\n            ...state.mailCounts[meta].listsUnread,\n            ...payload.listsUnread,\n          },\n        }},\n      },\n    });\n  },\n});\n\nexport const selectMailboxCounts = createSelector(\n  (state: StoreState) => {\n    return state.mailCounts;\n  },\n  (state: StoreState) => {\n    return state.leftSidebar.selectedAccount;\n  },\n  (counts, account): MailCount => {\n    if (account) {\n      return counts[account] || defaultCounts;\n    }\n\n    return getAllMailCounts(counts);\n  },\n);\n\nexport const selectDraftCount = createSelector(\n  (state: StoreState) => {\n    return state.drafts;\n  },\n  (drafts): number => {\n    if (drafts) {\n      return size(filter(drafts, (draft) => {\n        if (draft.data) {\n          const status = draft.data.status;\n          if (status === DraftStatus.Draft || status === DraftStatus.Failed) {\n            return true;\n          }\n        }\n        return false;\n      }));\n    }\n\n    return 0;\n  },\n);\n\n// Handle selection of outbox items\n// TODO(SHIN): May want to handle outbox count when not undoable anymore\nexport const selectOutboxCount = createSelector(\n  (state: StoreState) => {\n    return state.drafts;\n  },\n  (drafts): number => {\n    if (drafts) {\n      return size(filter(drafts, (draft) => {\n        if (!draft.data) {\n          return false;\n        }\n\n        return isDraftOutbox(draft.data);\n      }));\n    }\n\n    return 0;\n  },\n);\n\nexport const selectSendLaterCount = createSelector(\n  (state: StoreState) => {\n    return state.drafts;\n  },\n  (drafts): number => {\n    if (drafts) {\n      return size(filter(drafts, (draft) => {\n        if (draft.data) {\n          const status = draft.data.status;\n          if (status === DraftStatus.Scheduled) {\n            return true;\n          }\n        }\n        return false;\n      }));\n    }\n\n    return 0;\n  },\n);\n\nexport const selectAllMailboxCount = createSelector(\n  (state: StoreState) => {\n    return state.mailCounts;\n  },\n  (count) => {\n    return getAllMailCounts(count);\n  },\n);\n\nexport default [mailCountUpdateReducer];\n"]}]}