{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/log.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/log.ts","mtime":1675280254065},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgTG9nRGV2aWNlLCBMb2dPcywgTG9nc0NsaWVudCwgbW9ja0xvZ3NDbGllbnQgfSBmcm9tICcuLi9hcGkvbG9nJzsKaW1wb3J0IHsgaXNFbGVjdHJvbk1hYywgaXNFbGVjdHJvbldpbmRvd3MgfSBmcm9tICcuL2VsZWN0cm9uJzsKdmFyIGFwaSA9IHByb2Nlc3MuZW52LkpFU1QgPT09ICd0cnVlJyA/IG1vY2tMb2dzQ2xpZW50KCkgOiBuZXcgTG9nc0NsaWVudCgpOwpleHBvcnQgZnVuY3Rpb24gcmVjb3JkTG9nKGxldmVsLCBtZXNzYWdlLCBwcm9wZXJ0aWVzKSB7CiAgICB2YXIgb3MgPSBMb2dPcy5XZWI7CiAgICBpZiAoaXNFbGVjdHJvbk1hYykgewogICAgICAgIG9zID0gTG9nT3MuTWFjT1M7CiAgICB9CiAgICBlbHNlIGlmIChpc0VsZWN0cm9uV2luZG93cykgewogICAgICAgIG9zID0gTG9nT3MuV2luZG93czsKICAgIH0KICAgIHZhciBsb2cgPSB7CiAgICAgICAgbGV2ZWw6IGxldmVsLAogICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsCiAgICAgICAgcHJvcGVydGllczogcHJvcGVydGllcywKICAgICAgICBjcmVhdGVkOiBuZXcgRGF0ZSgpLAogICAgICAgIG9zOiBvcywKICAgICAgICBkZXZpY2U6IExvZ0RldmljZS5EZXNrdG9wLAogICAgfTsKICAgIGFwaS5yZWNvcmRMb2cobG9nKS5zdWJzY3JpYmUoewogICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tY29uc29sZQogICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpOwogICAgICAgIH0sCiAgICB9KTsKfQo="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/log.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/log.ts"],"names":[],"mappings":"AAAA,OAAO,EAAO,SAAS,EAAY,KAAK,EAAE,UAAU,EAAE,cAAc,EAAE,MAAM,YAAY,CAAC;AACzF,OAAO,EAAE,aAAa,EAAE,iBAAiB,EAAE,MAAM,YAAY,CAAC;AAE9D,IAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,KAAK,MAAM,CAAC,CAAC,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC,IAAI,UAAU,EAAE,CAAC;AAE9E,MAAM,UAAU,SAAS,CACvB,KAAe,EACf,OAAe,EACf,UAAwC;IAExC,IAAI,EAAE,GAAG,KAAK,CAAC,GAAG,CAAC;IACnB,IAAI,aAAa,EAAE;QACjB,EAAE,GAAG,KAAK,CAAC,KAAK,CAAC;KAClB;SAAM,IAAI,iBAAiB,EAAE;QAC5B,EAAE,GAAG,KAAK,CAAC,OAAO,CAAC;KACpB;IAED,IAAM,GAAG,GAAQ;QACf,KAAK,OAAA;QACL,OAAO,SAAA;QACP,UAAU,YAAA;QACV,OAAO,EAAE,IAAI,IAAI,EAAE;QACnB,EAAE,IAAA;QACF,MAAM,EAAE,SAAS,CAAC,OAAO;KAC1B,CAAC;IAEF,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC;QAC3B,KAAK,EAAE,UAAC,CAAC;YACP,sCAAsC;YACtC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACnB,CAAC;KACF,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { Log, LogDevice, LogLevel, LogOs, LogsClient, mockLogsClient } from '../api/log';\nimport { isElectronMac, isElectronWindows } from './electron';\n\nconst api = process.env.JEST === 'true' ? mockLogsClient() : new LogsClient();\n\nexport function recordLog(\n  level: LogLevel,\n  message: string,\n  properties?: { [property: string]: any },\n) {\n  let os = LogOs.Web;\n  if (isElectronMac) {\n    os = LogOs.MacOS;\n  } else if (isElectronWindows) {\n    os = LogOs.Windows;\n  }\n\n  const log: Log = {\n    level,\n    message,\n    properties,\n    created: new Date(),\n    os,\n    device: LogDevice.Desktop,\n  };\n\n  api.recordLog(log).subscribe({\n    error: (e) => {\n      // tslint:disable-next-line:no-console\n      console.error(e);\n    },\n  });\n}\n"]}]}