{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/sharedThreads.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/sharedThreads.ts","mtime":1675280254059},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/sharedThreads.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/sharedThreads.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs';\nimport { Epic } from 'redux-observable';\nimport { StoreState, Action, ActionStatus, Thread, MessageBody, ShareLink, Draft } from '@src/types/index';\nimport {\n  SharedThread, Comment, SharedThreadActivity,\n  SharedThreadActivityType, SharedThreadPermissionScope,\n} from '@src/types/sharedThreads';\nimport { Deps } from '@src/lib/epic';\nimport {\n  SHARED_THREAD_CREATE,\n  sharedThreadCreate,\n  SHARED_THREAD_SELECT_BY_THREAD,\n  sharedThreadSelectByThread,\n  sharedThreadSelect,\n  SHARED_THREAD_SELECT,\n  SHARED_THREAD_LIST,\n  sharedThreadList,\n  sharedThreadOriginalFetch,\n  SHARED_THREAD_ORIGINAL_FETCH,\n  SharedThreadCreateMeta,\n  SHARED_THREAD_UPDATE,\n  sharedThreadUpdate,\n  SHARED_THREAD_ASANA_TASK_LIST,\n  sharedThreadAsanaTaskList,\n  SharedThreadAsanaTaskCreateMeta,\n  SHARED_THREAD_ASANA_TASK_CREATE,\n  SHARED_THREAD_ACTIVITY_CREATE,\n  SharedThreadActivityCreateMeta,\n  sharedThreadActivityCreate,\n  TTL,\n  SHARED_THREAD_DELETE,\n  sharedThreadDelete,\n  SHARED_THREAD_DRAFTS_LIST,\n  sharedThreadDraftsList,\n  SHARED_THREAD_DRAFT_FETCH,\n  sharedThreadDraftFetch,\n  SharedThreadDraftFetchMeta,\n} from '@src/ducks/sharedThreads';\nimport {\n  getSharedThreadByThreadId,\n  // getSharedThreadById,\n  listSharedThreads,\n  getSharedThreadById,\n} from '@src/lib/sharedThread';\nimport { commentList, commentCreate, CommentCreateMeta } from '@src/ducks/comments';\nimport { DB_READY } from '@src/ducks/db';\nimport { threadFetch, threadSelect } from '@src/ducks/threads';\nimport { LOCATION_CHANGE, LocationChangeAction } from 'react-router-redux';\nimport { recordEvent, UserEvents } from '@src/lib/analytics';\nimport {\n  sharedThreadMessageBodiesFetch,\n  SharedThreadMessageBodiesFetchMeta,\n} from '@src/ducks/messageBodies';\nimport { publicTeamFetch } from '@src/ducks/publicTeams';\nimport { shareLinkCreate, ShareLinkMeta } from '@src/ducks/shareLinks';\nimport { AsanaTask } from '@src/types/asana';\nimport { toastSet } from '@src/ducks/toasts';\nimport { asanaUserList } from '@src/ducks/asana';\nimport { selectAsanaEnabled } from '@src/ducks/integrations';\nimport { NavbarTab } from '@src/types/leftSidebar';\nimport browserHistory from '@src/lib/browserHistory';\n\nconst dbReadyTriggerListSharedThread: Epic<Action<null, SharedThread[]>, StoreState> = action$ =>\n  action$\n    .ofType(DB_READY)\n    .map(() => sharedThreadList(null));\n\nconst locationChangeSelectSharedThread: Epic<\n  Action<any, any>, StoreState, Deps\n> = (action$, store, deps) =>\n  action$\n    .ofType(LOCATION_CHANGE)\n    .debounceTime(200, deps.scheduler)\n    .filter((action: any) => {\n      const state = store.getState();\n      const path = (action as LocationChangeAction).payload.pathname;\n      if (path && state.selectedThread && path.endsWith(state.selectedThread.id)) {\n        return false;\n      }\n      return true;\n    })\n    .map((action: any): string => {\n      const split = (action as LocationChangeAction).payload.pathname.split('/');\n      if (split.length > 2 && (split[1] === 'mentions' || split[1] === 'sharedThreads')) {\n        return split[split.length - 1];\n      }\n\n      // Handle split for public shared threads\n      if (split.length > 2 && ((split[1] === 'public' && split[2] === 'sharedThreads'))) {\n        return split[3];\n      }\n\n      return '';\n    })\n    .flatMap((sharedThreadId) => {\n      const state = store.getState();\n      const actions: Array<Observable<Action<any, any>>> = [\n        Observable.of(sharedThreadSelect(sharedThreadId ? sharedThreadId : null)),\n      ];\n      const loggedIn = !!state.me.data;\n\n      if (loggedIn && !Object.keys(state.sharedThreads).length) {\n        actions.push(Observable.of(sharedThreadList(null)));\n      }\n\n      return Observable.merge(\n        ...actions,\n      );\n    });\n\nconst sharedThreadDraftsListEpic:\n  Epic<Action<\n    string,\n    Draft\n  >, StoreState, Deps>\n  = (action$, store, deps) =>\n    action$.ofType(SHARED_THREAD_DRAFTS_LIST)\n      .filter(action => action.status === ActionStatus.Start)\n      .flatMap(action =>\n        deps.sharedThreads.listDrafts(action.meta)\n          .map(drafts => sharedThreadDraftsList(action.meta, drafts[0]))\n          .catch(err => Observable.of(sharedThreadDraftsList(action.meta, err))),\n      );\n\nconst sharedThreadDraftFetchEpic:\n  Epic<Action<\n    SharedThreadDraftFetchMeta,\n    Draft\n  >, StoreState, Deps>\n  = (action$, store, deps) =>\n    action$.ofType(SHARED_THREAD_DRAFT_FETCH)\n      .filter(action => action.status === ActionStatus.Start)\n      .flatMap(action =>\n        deps.sharedThreads.getDraft(action.meta.sharedThread, action.meta.draft)\n          .map(draft => sharedThreadDraftFetch(action.meta, draft))\n          .catch(err => Observable.of(sharedThreadDraftFetch(action.meta, err))),\n      );\n\nconst createSharedThreadEpic:\n  Epic<Action<\n    SharedThreadCreateMeta|null|CommentCreateMeta|string|ShareLinkMeta,\n    SharedThread|Comment|ShareLink\n  >, StoreState, Deps>\n  = (action$, store, deps) =>\n    action$.ofType(SHARED_THREAD_CREATE)\n      .filter(action => action.status === ActionStatus.Start)\n      .flatMap((action: Action<SharedThreadCreateMeta, SharedThread>) =>\n        deps.sharedThreads.create({\n          ...action.meta,\n          permissions: {\n            drafts: store.getState().preferences.defaultShareDraft,\n            ...action.meta.permissions,\n            scope: action.meta.permissions.scope || SharedThreadPermissionScope.Private,\n          },\n        })\n          .do(sharedThread => recordEvent(UserEvents.ThreadShared, {\n            team: sharedThread.team,\n          }))\n          .flatMap((sharedThread) => {\n            const actions: Array<Observable<Action<\n              SharedThreadCreateMeta | null | CommentCreateMeta | string | ShareLinkMeta,\n              SharedThread | Comment | ShareLink\n              >>> = [\n                Observable.of(sharedThreadCreate(action.meta, sharedThread)),\n                Observable.of(sharedThreadSelect(sharedThread.id)),\n                ...(action.meta.comments || []).map(pending =>\n                  Observable.of(commentCreate({\n                    thread: sharedThread.id,\n                    rfcId: pending.rfcId,\n                    body: pending.body,\n                    attachments: pending.attachments,\n                  }))),\n              ];\n\n            if (action.meta.message) {\n              actions.push(Observable.of(shareLinkCreate({\n                sharedThread: sharedThread.id,\n                message: action.meta.message,\n              })));\n            }\n            return Observable.merge(\n              ...actions,\n            );\n          })\n          .catch(err => Observable.of(sharedThreadCreate(action.meta, err))),\n      );\n\nconst selectSharedThreadByThreadEpic:\n  Epic<Action<string|null, string|null|SharedThread|Comment[]>, StoreState, Deps>\n  = (action$, store, deps) =>\n    action$.ofType(SHARED_THREAD_SELECT_BY_THREAD)\n      .filter(action => action.status === ActionStatus.Start)\n      .debounceTime(200, deps.scheduler)\n      .flatMap((action: Action<string, string|null>) =>\n        getSharedThreadByThreadId(action.meta)\n          .map(sharedThreads =>\n            sharedThreadSelect(sharedThreads.length ? sharedThreads[0].id : null))\n          .catch(err => Observable.of(sharedThreadSelectByThread(action.meta, err))),\n      );\n\n// TODO(SHIN): Fetch SharedThread if does not exist in the state\n// TODO(SHIN): Handle refetch policy for permissions change\nconst selectSharedThreadEpic:\n  Epic<Action<string|null, SharedThread|Comment[]|Thread|null>, StoreState, Deps>\n  = (action$, store, deps) =>\n    action$.ofType(SHARED_THREAD_SELECT)\n      .filter(action => action.status === ActionStatus.Start && !!action.meta)\n      .debounceTime(200, deps.scheduler)\n      .flatMap((action: Action<string, SharedThread>) =>\n        getSharedThreadById(action.meta)\n          .flatMap((sharedThread) => {\n            if (!!sharedThread) {\n              return Observable.of(sharedThread);\n            }\n\n            return deps.sharedThreads.get(action.meta);\n          })\n          .filter(sharedThread => !!sharedThread)\n          .flatMap((sharedThread: SharedThread) => {\n            const state = store.getState();\n            const actions: Array<Observable<Action<any, any>>> = [\n              Observable.of(sharedThreadSelect(sharedThread.id, sharedThread)),\n              Observable.of(commentList(sharedThread.id)),\n              Observable.of(sharedThreadAsanaTaskList(sharedThread.id)),\n            ];\n\n            const loggedIn = state.loggedIn;\n            if (loggedIn && selectAsanaEnabled(state)) {\n              actions.push(Observable.of(asanaUserList('')));\n            }\n\n            // TODO(SHIN): Make sure user selected check for threadSelect fetching is correct\n            // TODO(SHIN): Make sure that the type of thread fetch is robust & performant\n            const userOwned = state.me && state.me.data && state.me.data.id === sharedThread.user;\n            if (loggedIn && userOwned && (!state.selectedThread ||\n              state.selectedThread.id !== sharedThread.thread)) {\n              actions.push(Observable.of(threadSelect(sharedThread.thread)));\n            }\n\n            // Always fetch original if not logged in or not on team\n            // TODO(SHIN): Consider fetch mechanisms for permission changes\n            const isNotOnTeam = !state.me || !state.me.data ||\n              state.me.data.team !== sharedThread.team;\n            const wasError = state.sharedThreads && state.sharedThreads[sharedThread.id] &&\n              !!state.sharedThreads[sharedThread.id].error;\n            if (!loggedIn || isNotOnTeam || wasError || !userOwned) {\n              actions.push(Observable.of(sharedThreadOriginalFetch(sharedThread.id)));\n            }\n\n            // Push public team fetch as well\n            if (isNotOnTeam && !state.publicTeams[sharedThread.team]) {\n              actions.push(Observable.of(publicTeamFetch(sharedThread.id)));\n            }\n\n            // Handle drafts fetch if drafts exist\n            if (!!sharedThread.drafts?.length) {\n              actions.push(\n                Observable.of(sharedThreadDraftsList(sharedThread.id)),\n              );\n            }\n\n            return Observable.merge(\n              ...actions,\n            );\n          })\n          .catch(e => Observable.of(sharedThreadSelect(action.meta, e))),\n      );\n\nconst listSharedThreadsEpic: Epic<Action<null, SharedThread[]>, StoreState, Deps>\n  = (action$, store, deps) =>\n    action$.ofType(SHARED_THREAD_LIST)\n      .filter(action => action.status === ActionStatus.Start)\n      .flatMap(action =>\n        listSharedThreads()\n          .flatMap(sharedThreads =>\n            Observable.merge(\n              Observable.of(sharedThreadList(action.meta, sharedThreads)),\n            ),\n          ),\n      );\n\nconst fetchSharedThreadOriginalEpic: Epic<\n  Action<string | SharedThreadMessageBodiesFetchMeta, Comment[]|Thread|MessageBody[]|null|Error\n>, StoreState, Deps> = (action$, store, deps) =>\n  action$.ofType(SHARED_THREAD_ORIGINAL_FETCH)\n    .filter(action => action.status === ActionStatus.Start)\n    .flatMap((action: Action<string, Thread>) =>\n      deps.sharedThreads.fetchOriginal(action.meta)\n        .flatMap((thread) => {\n          const state = store.getState();\n          const actions: Array<Observable<Action<\n            string|SharedThreadMessageBodiesFetchMeta, Comment[]|Thread|MessageBody[]|null|Error\n          >>> = [\n            Observable.of(threadFetch(thread.id, thread)),\n            Observable.of(sharedThreadMessageBodiesFetch({ sharedThread: action.meta, thread })),\n            Observable.of(commentList(action.meta)),\n          ];\n\n          const selectedSharedThread = state.sharedThreads[action.meta] &&\n            state.sharedThreads[action.meta].data;\n          const updateSelectedThread = (\n            state.selectedThread && state.selectedThread.id === thread.id\n          ) || selectedSharedThread && selectedSharedThread.thread === thread.id;\n\n          // Updates the selected thread with the updated thread (w. new messages)\n          if (updateSelectedThread) {\n            actions.push(Observable.of(threadSelect(thread.id, thread)));\n          }\n          return Observable.merge(...actions);\n        },\n      ),\n    );\n\nexport const deleteSharedThreadEpic:\n  Epic<Action<string, null>, StoreState, Deps>\n  = (action$, store, deps) =>\n    action$.ofType(SHARED_THREAD_DELETE)\n      .filter(action => action.status === ActionStatus.Start)\n      .flatMap(action =>\n        deps.sharedThreads.delete(action.meta)\n          .do(() => {\n            // Handle deselection behavior when user is in mentions or shared threads\n            const navbarTab = store.getState().leftSidebar.selectedTab;\n            switch (navbarTab) {\n              case NavbarTab.Mentions:\n                browserHistory.push('/mentions');\n                break;\n              case NavbarTab.SharedThreads:\n                browserHistory.push('/sharedThreads');\n                break;\n              default:\n                break;\n            }\n          })\n          .flatMap(() => Observable.of(sharedThreadDelete(action.meta, null)))\n          .catch(e => Observable.of(sharedThreadDelete(action.meta, e))),\n      );\n\nexport const updateSharedThreadEpic:\n  Epic<Action<SharedThread, SharedThread>, StoreState, Deps>\n  = (action$, store, deps) =>\n    action$.ofType(SHARED_THREAD_UPDATE)\n      .filter(action => action.status === ActionStatus.Start)\n      .flatMap(action =>\n        deps.sharedThreads.update(action.meta)\n          .flatMap(sharedThread => Observable.of(sharedThreadUpdate(action.meta, sharedThread)))\n          .catch(e => Observable.of(sharedThreadUpdate(action.meta, e))),\n      );\n\nconst updateSharedThreadSuccessEpic:\n  Epic<Action<SharedThread|string, SharedThread|Thread>, StoreState, Deps>\n  = (action$, store, deps) =>\n    action$.ofType(SHARED_THREAD_UPDATE)\n      .filter((action: Action<SharedThread, SharedThread>) => {\n        const state = store.getState();\n        return action.status === ActionStatus.Success && !!action.payload &&\n          ((state.selectedThread && state.selectedThread.id === action.payload.thread) ||\n          false);\n      })\n      .map((action: Action<SharedThread, SharedThread>) =>\n        sharedThreadOriginalFetch(action.payload!.id));\n\nconst getAsanaTasks: Epic<Action<string|null|Error, AsanaTask[]|null>, StoreState, Deps>\n  = (action$, store, deps) =>\n    action$.ofType(SHARED_THREAD_ASANA_TASK_LIST)\n      .filter(action => action.status === ActionStatus.Start)\n      .flatMap((action: Action<string, AsanaTask[]>) =>\n        deps.sharedThreads.getAsanaTasks(action.meta)\n          .map(tasks => sharedThreadAsanaTaskList(action.meta, tasks))\n          .catch(err => Observable.of(toastSet(err))),\n      );\n\nconst createAsanaTask: Epic<\n  Action<SharedThreadAsanaTaskCreateMeta|null|Error|string, AsanaTask|null|AsanaTask[]>,\n  StoreState, Deps\n> = (action$, store, deps) =>\n    action$.ofType(SHARED_THREAD_ASANA_TASK_CREATE)\n      .filter(action => action.status === ActionStatus.Start)\n      .do(() => recordEvent(UserEvents.AsanaTaskCreated))\n      .flatMap((action: Action<SharedThreadAsanaTaskCreateMeta, AsanaTask>) =>\n        deps.sharedThreads.createAsanaTask(action.meta.sharedThread, action.meta.task)\n          .map(task => sharedThreadAsanaTaskList(action.meta.sharedThread))\n          .catch(err => Observable.of(toastSet(err))),\n      );\n\nconst createSharedThreadActivity: Epic<\n  Action<SharedThreadActivityCreateMeta|Error|null, null|SharedThreadActivity>,\n  StoreState, Deps\n> = (action$, store, deps) =>\n    action$.ofType(SHARED_THREAD_ACTIVITY_CREATE)\n      .filter(action => action.status === ActionStatus.Start)\n      .flatMap((action: Action<SharedThreadActivityCreateMeta, null>) => {\n        const state = store.getState();\n        const user = state.me.data && state.me.data.id || state.sessionId.toString();\n\n        return deps.sharedThreads.createActivity(\n          action.meta.sharedThread,\n          action.meta.type,\n          user,\n          TTL,\n        )\n        .map(() => sharedThreadActivityCreate(action.meta, null))\n        .catch(e => Observable.of(toastSet(e)));\n      });\n\n// Fetches a draft based off a sharedThreadReply activity\nconst sharedThreadActivityHandlerEpic: Epic<\n    Action<\n    SharedThreadActivityCreateMeta|Error|null|SharedThreadDraftFetchMeta,\n    null|SharedThreadActivity|Draft\n  >, StoreState, Deps\n  > = (action$, store, deps) =>\n      action$.ofType(SHARED_THREAD_ACTIVITY_CREATE)\n        .delay(2000)\n        .filter((action: Action<any, SharedThreadActivity>) => {\n          return action.status === ActionStatus.Success &&\n            action.payload?.type === SharedThreadActivityType.Reply &&\n            !!action.payload.draft && !!action.payload.sharedThread &&\n            action.payload.sharedThread === store.getState().selectedSharedThread;\n        })\n        .flatMap((action: Action<any, SharedThreadActivity>) => {\n          return Observable.of(sharedThreadDraftFetch({\n            draft: action.payload?.draft || '',\n            sharedThread: action.payload?.sharedThread || '',\n          }));\n        });\n\nexport default [\n  createSharedThreadEpic,\n  selectSharedThreadByThreadEpic,\n  selectSharedThreadEpic,\n  listSharedThreadsEpic,\n  dbReadyTriggerListSharedThread,\n  fetchSharedThreadOriginalEpic,\n  locationChangeSelectSharedThread,\n  updateSharedThreadSuccessEpic,\n  updateSharedThreadEpic,\n  deleteSharedThreadEpic,\n  getAsanaTasks,\n  createAsanaTask,\n  createSharedThreadActivity,\n  sharedThreadDraftsListEpic,\n  sharedThreadDraftFetchEpic,\n  sharedThreadActivityHandlerEpic,\n];\n"]}]}