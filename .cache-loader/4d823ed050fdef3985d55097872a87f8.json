{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/sequences.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/sequences.ts","mtime":1675280254052},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/sequences.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/sequences.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,OAAO,MAAM,MAAM,qBAAqB,CAAC;AACzC,OAAO,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAC;AAEtD,OAAO,EAAE,UAAU,EAAE,cAAc,EAAE,eAAe,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AACjG,OAAO,EAAE,KAAK,EAAE,MAAM,QAAQ,CAAC;AAC/B,OAAO,EAAE,oBAAoB,EAAE,MAAM,+BAA+B,CAAC;AAErE,MAAM,CACJ,IAAA;;;;;;;;;;;;;;;YAAmB,EACnB,wBAAoB,EACpB,gCAA4B,CAkB3B;AAEH,MAAM,CACJ,IAAA;;;;;;;;;YAAqB,EACrB,0BAAsB,EACtB,kCAA8B,CAQ7B;AAEH,MAAM,CACJ,IAAA;;;;;;;;;;;;;;;;;YAAqB,EACrB,0BAAsB,EACtB,kCAA8B,CAe7B;AAEH,MAAM,CACJ,IAAA;;;;;;;;;;;;;;;;;YAAoB,EACpB,yBAAqB,EACrB,iCAA6B,CAe5B;AAEH,MAAM,CACJ,IAAA;;;;;;;;;;;;;;;;;;YAAqB,EACrB,0BAAsB,EACtB,kCAA8B,CAiB7B;AAEH,MAAM,CACJ,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;YAAqB,EACrB,0BAAsB,EACtB,kCAA8B,CAuB7B;AAEH,MAAM,CACJ,IAAA;;;;YAAyB,EACzB,6BAAyB,EACzB,qCAAiC,CAIhC;AAUH,MAAM,CACJ,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAAyB,EACzB,6BAAyB,EACzB,qCAAiC,CA4ChC;AAEH,MAAM,CACJ,IAAA;;;;;;YAAwB,EACxB,4BAAwB,EACxB,oCAAgC,CAM/B;AAEH,MAAM,CACJ,IAAA;;;;;;;;;YAAwB,EACxB,6BAAyB,EACzB,qCAAiC,CAQhC;AAEH,MAAM,CACJ,IAAA;;;;;;YAAoB,EACpB,yBAAqB,EACrB,iCAA6B,CAM5B;AAEH,MAAM,CAAC,IAAM,eAAe,GAAG,iBAAiB,CAAC;AACjD,MAAM,CAAC,IAAM,cAAc,GAAG,YAAY,CAGxC,eAAe,CAAC,CAAC;AAEnB,eAAe;IACb,mBAAmB;IACnB,qBAAqB;IACrB,qBAAqB;IACrB,oBAAoB;IACpB,qBAAqB;IACrB,qBAAqB;IACrB,wBAAwB;IACxB,wBAAwB;IACxB,uBAAuB;IACvB,wBAAwB;IACxB,oBAAoB;CACrB,CAAC","sourcesContent":["import update from 'immutability-helper';\nimport { create, createAction } from '@src/lib/redux';\nimport { Sequence, SequenceTab } from '@src/types/sequences';\nimport { resourceOk, resourceFailed, resourcePending, resourceLoading } from '@src/lib/resource';\nimport { keyBy } from 'lodash';\nimport { createDefaultHeaders } from '@src/ducks/sequenceRecipients';\n\nexport const {\n  type: SEQUENCE_LIST,\n  action: sequenceList,\n  reducer: sequenceListReducer,\n} = create<boolean, Sequence[]>('SEQUENCE_LIST', {\n  start: (state, meta) => {\n    return update(state, {\n      sequencePageLoaded: { sequences: { $set: false } },\n    });\n  },\n  success: (state, meta, payload) =>\n    update(state, {\n      sequences: {\n        $set: keyBy(\n          payload.map(val => resourceOk(val)),\n          sequence => sequence.data && sequence.data.id,\n        ),\n      },\n      sequenceCount: { $set: meta ? state.sequenceCount : payload.length },\n      sequencePageLoaded: { sequences: { $set: true } },\n    }),\n});\n\nexport const {\n  type: SEQUENCE_CREATE,\n  action: sequenceCreate,\n  reducer: sequenceCreateReducer,\n} = create<Sequence, Sequence>('SEQUENCE_CREATE', {\n  success: (state, meta, payload) =>\n    update(state, {\n      sequences: {\n        [payload.id]: { $set: resourceOk(payload) },\n      },\n    }),\n});\n\nexport const {\n  type: SEQUENCE_UPDATE,\n  action: sequenceUpdate,\n  reducer: sequenceUpdateReducer,\n} = create<Sequence, Sequence>('SEQUENCE_UPDATE', {\n  success: (state, meta, payload) => {\n    return update(state, {\n      sequences: {\n        [payload.id]: { $set: resourceOk(payload) },\n      },\n    });\n  },\n  failure: (state, meta, error) =>\n    update(state, {\n      sequences: {\n        [meta.id]: { $set: resourceFailed(error) },\n      },\n    }),\n});\n\nexport const {\n  type: SEQUENCE_SHARE,\n  action: sequenceShare,\n  reducer: sequenceShareReducer,\n} = create<Sequence, Sequence>('SEQUENCE_SHARE', {\n  success: (state, meta, payload) => {\n    return update(state, {\n      sequences: {\n        [payload.id]: { $set: resourceOk(payload) },\n      },\n    });\n  },\n  failure: (state, meta, error) =>\n    update(state, {\n      sequences: {\n        [meta.id]: { $set: resourceFailed(error) },\n      },\n    }),\n});\n\nexport const {\n  type: SEQUENCE_DELETE,\n  action: sequenceDelete,\n  reducer: sequenceDeleteReducer,\n} = create<Sequence, null>('SEQUENCE_DELETE', {\n  start: (state, meta) =>\n    update(state, {\n      sequences: {\n        $unset: [meta.id],\n      },\n    }),\n\n  failure: (state, meta, error) =>\n    update(state, {\n      sequences: {\n        [meta.id]: {\n          $set: resourceOk(meta),\n        },\n      },\n    }),\n});\n\nexport const {\n  type: SEQUENCE_SELECT,\n  action: sequenceSelect,\n  reducer: sequenceSelectReducer,\n} = create<string, Sequence>('SEQUENCE_SELECT', {\n  setup: (state, meta) => {\n    if (state.sequences[meta]) {\n      return state;\n    }\n\n    return update(state, {\n      sequences: {\n        [meta]: { $set: resourcePending() },\n      },\n    });\n  },\n  start: (state, meta) =>\n    ({ ...state, selectedSequence: meta }),\n  success: (state, meta, payload) =>\n    update(state, {\n      sequences: {\n        [meta]: {\n          $set: resourceOk(payload),\n        },\n      },\n    }),\n});\n\nexport const {\n  type: SEQUENCE_TAB_SELECT,\n  action: sequenceTabSelect,\n  reducer: sequenceTabSelectReducer,\n} = create<SequenceTab, null>('SEQUENCE_TAB_SELECT', {\n  start: (state, meta) =>\n    ({ ...state, selectedSequenceTab: meta }),\n});\n\nexport interface SequenceCsvUploadPayload {\n  cloudFile: string;\n  headers: string[];\n  emailHeader: string;\n  familyNameHeader?: string;\n  givenNameHeader?: string;\n}\n\nexport const {\n  type: SEQUENCE_CSV_UPLOAD,\n  action: sequenceCsvUpload,\n  reducer: sequenceCsvUploadReducer,\n} = create<File, SequenceCsvUploadPayload>('SEQUENCE_CSV_UPLOAD', {\n  setup: (state, meta) => {\n    if (state.sequenceRecipientsAddState) {\n      return state;\n    }\n\n    return update(state, {\n      sequenceRecipientsAddState: {\n        $set: {\n          recipients: [],\n          headers: createDefaultHeaders(state),\n        },\n      },\n    });\n  },\n  start: (state, meta) =>\n    update(state, {\n      sequenceRecipientsAddState: {\n        headersToAdd: { $set: resourceLoading() },\n      },\n    }),\n  success: (state, meta, payload) =>\n    update(state, {\n      sequenceRecipientsAddState: {\n        csv: { $set: payload.cloudFile },\n        emailHeader: {\n          $set: payload.emailHeader ? payload.emailHeader.toLowerCase() : undefined,\n        },\n        givenNameHeader: {\n          $set: payload.givenNameHeader ? payload.givenNameHeader.toLowerCase() : undefined,\n        },\n        familyNameHeader: {\n          $set: payload.familyNameHeader ? payload.familyNameHeader.toLowerCase() : undefined,\n        },\n        headersToAdd: { $set: resourceOk(payload.headers.map(h => h.toLowerCase())) },\n      },\n    }),\n  failure: (state, meta, error) =>\n    update(state, {\n      sequenceRecipientsAddState: {\n        headersToAdd: { $set: undefined },\n      },\n    }),\n});\n\nexport const {\n  type: SEQUENCE_CSV_CLEAR,\n  action: sequenceCsvClear,\n  reducer: sequenceCsvClearReducer,\n} = create<null, null>('SEQUENCE_CSV_CLEAR', {\n  start: (state, meta) =>\n    update(state, {\n      $unset: ['recipientCSV', 'recipientCSVHeader', 'uploadedSequenceRecipients'],\n    }),\n});\n\nexport const {\n  type: SEQUENCE_DUPLICATE,\n  action: sequenceDuplicate,\n  reducer: sequenceDuplicateReducer,\n} = create<string, Sequence>('SEQUENCE_DUPLICATE', {\n  success: (state, meta, payload) =>\n    update(state, {\n      sequences: {\n        [payload.id]: { $set: resourceOk(payload) },\n      },\n    }),\n});\n\nexport const {\n  type: SEQUENCE_COUNT,\n  action: sequenceCount,\n  reducer: sequenceCountReducer,\n} = create<null, Sequence[]>('SEQUENCE_COUNT', {\n  success: (state, meta, payload) =>\n    update(state, {\n      sequenceCount: { $set: payload.length },\n    }),\n});\n\nexport const SEQUENCE_EXPORT = 'SEQUENCE_EXPORT';\nexport const sequenceExport = createAction<\n  Sequence,\n  null\n>(SEQUENCE_EXPORT);\n\nexport default [\n  sequenceListReducer,\n  sequenceCreateReducer,\n  sequenceUpdateReducer,\n  sequenceShareReducer,\n  sequenceDeleteReducer,\n  sequenceSelectReducer,\n  sequenceTabSelectReducer,\n  sequenceCsvUploadReducer,\n  sequenceCsvClearReducer,\n  sequenceDuplicateReducer,\n  sequenceCountReducer,\n];\n"]}]}