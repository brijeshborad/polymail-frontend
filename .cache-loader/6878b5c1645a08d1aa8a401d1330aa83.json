{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Settings/routes/Integrations/routes/Slack/index.tsx","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Settings/routes/Integrations/routes/Slack/index.tsx","mtime":1675280254105},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JzsKaW1wb3J0IFNsYWNrIGZyb20gJy4vU2xhY2snOwppbXBvcnQgeyBpbnRlZ3JhdGlvblNsYWNrTG9naW4sIHNlbGVjdFNsYWNrSW50ZWdyYXRpb24sIGludGVncmF0aW9uU2xhY2tMb2dvdXQsIGludGVncmF0aW9uTGlzdCwgfSBmcm9tICdAc3JjL2R1Y2tzL2ludGVncmF0aW9ucyc7CmltcG9ydCB7IHNlbGVjdFRlYW0gfSBmcm9tICdAc3JjL2R1Y2tzL3RlYW0nOwppbXBvcnQgeyB3aXRoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyJzsKdmFyIG1hcFN0YXRlVG9Qcm9wcyA9IGZ1bmN0aW9uIChzdGF0ZSwgb3duUHJvcHMpIHsKICAgIHZhciBzZWFyY2ggPSBuZXcgVVJMU2VhcmNoUGFyYW1zKG93blByb3BzLmxvY2F0aW9uLnNlYXJjaCk7CiAgICByZXR1cm4gewogICAgICAgIHNsYWNrSW50ZWdyYXRpb246IHNlbGVjdFNsYWNrSW50ZWdyYXRpb24oc3RhdGUpLAogICAgICAgIHRlYW06IHNlbGVjdFRlYW0oc3RhdGUpLAogICAgICAgIHJlZnJlc2hJbnRlZ3JhdGlvbnM6ICEhc2VhcmNoLmdldCgnaW50ZWdyYXRpb25SZWZyZXNoJyksCiAgICB9Owp9Owp2YXIgbWFwRGlzcGF0Y2hUb1Byb3BzID0gZnVuY3Rpb24gKGRpc3BhdGNoKSB7IHJldHVybiAoewogICAgbG9naW5TbGFjazogZnVuY3Rpb24gKHRlYW1JZCkgeyByZXR1cm4gZGlzcGF0Y2goaW50ZWdyYXRpb25TbGFja0xvZ2luKHRlYW1JZCkpOyB9LAogICAgbG9nb3V0U2xhY2s6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRpc3BhdGNoKGludGVncmF0aW9uU2xhY2tMb2dvdXQobnVsbCkpOyB9LAogICAgbGlzdEludGVncmF0aW9uczogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGlzcGF0Y2goaW50ZWdyYXRpb25MaXN0KG51bGwpKTsgfSwKfSk7IH07CmV4cG9ydCBkZWZhdWx0IHdpdGhSb3V0ZXIoY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcykoU2xhY2spKTsK"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Settings/routes/Integrations/routes/Slack/index.tsx","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Settings/routes/Integrations/routes/Slack/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAY,MAAM,aAAa,CAAC;AAGhD,OAAO,KAAoC,MAAM,SAAS,CAAC;AAC3D,OAAO,EACL,qBAAqB,EAAE,sBAAsB,EAAE,sBAAsB,EAAE,eAAe,GACvF,MAAM,yBAAyB,CAAC;AACjC,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAC7C,OAAO,EAAE,UAAU,EAAuB,MAAM,cAAc,CAAC;AAE/D,IAAM,eAAe,GAAG,UAAC,KAAiB,EAAE,QAAkC;IAC5E,IAAM,MAAM,GAAG,IAAI,eAAe,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IAE7D,OAAO;QACL,gBAAgB,EAAE,sBAAsB,CAAC,KAAK,CAAC;QAC/C,IAAI,EAAE,UAAU,CAAC,KAAK,CAAC;QACvB,mBAAmB,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,oBAAoB,CAAC;KACxD,CAAC;AACJ,CAAC,CAAC;AAEF,IAAM,kBAAkB,GAAG,UAAC,QAA8B,IAAoB,OAAA,CAAC;IAC7E,UAAU,EAAE,UAAC,MAAc,IAAK,OAAA,QAAQ,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC,EAAvC,CAAuC;IACvE,WAAW,EAAE,cAAM,OAAA,QAAQ,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC,EAAtC,CAAsC;IACzD,gBAAgB,EAAE,cAAM,OAAA,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,EAA/B,CAA+B;CACxD,CAAC,EAJ4E,CAI5E,CAAC;AAEH,eAAe,UAAU,CACvB,OAAO,CAA4B,eAAe,EAAE,kBAAkB,CAAC,CAAC,KAAK,CAAC,CAC/E,CAAC","sourcesContent":["import { connect, Dispatch } from 'react-redux';\n\nimport { StoreState } from '@src/types';\nimport Slack, { StateProps, DispatchProps } from './Slack';\nimport {\n  integrationSlackLogin, selectSlackIntegration, integrationSlackLogout, integrationList,\n} from '@src/ducks/integrations';\nimport { selectTeam } from '@src/ducks/team';\nimport { withRouter, RouteComponentProps } from 'react-router';\n\nconst mapStateToProps = (state: StoreState, ownProps: RouteComponentProps<any>): StateProps => {\n  const search = new URLSearchParams(ownProps.location.search);\n\n  return {\n    slackIntegration: selectSlackIntegration(state),\n    team: selectTeam(state),\n    refreshIntegrations: !!search.get('integrationRefresh'),\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<StoreState>): DispatchProps => ({\n  loginSlack: (teamId: string) => dispatch(integrationSlackLogin(teamId)),\n  logoutSlack: () => dispatch(integrationSlackLogout(null)),\n  listIntegrations: () => dispatch(integrationList(null)),\n});\n\nexport default withRouter(\n  connect<StateProps, DispatchProps>(mapStateToProps, mapDispatchToProps)(Slack),\n);\n"]}]}