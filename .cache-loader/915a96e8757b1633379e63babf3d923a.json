{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/components/Cells/AttachmentCell/index.tsx","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/components/Cells/AttachmentCell/index.tsx","mtime":1675280253990},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IEF0dGFjaG1lbnRDZWxsIGZyb20gJy4vQXR0YWNobWVudENlbGwnOwppbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnOwppbXBvcnQgeyBmbnYxYTY0aGV4IH0gZnJvbSAnQHNyYy9saWIvY3J5cHQnOwp2YXIgbWFwU3RhdGVUb1Byb3BzID0gZnVuY3Rpb24gKHN0YXRlLCBvd25Qcm9wcykgewogICAgdmFyIF9hID0gb3duUHJvcHMuYXR0YWNobWVudCwgdGhyZWFkID0gX2EudGhyZWFkLCBtZXNzYWdlID0gX2EubWVzc2FnZSwgaWQgPSBfYS5pZDsKICAgIHZhciBkb3dubG9hZElkID0gZm52MWE2NGhleCgodGhyZWFkIHx8ICcnKSArICItIiArIG1lc3NhZ2UgKyAiLSIgKyBpZCk7CiAgICByZXR1cm4gewogICAgICAgIHByb2dyZXNzOiBzdGF0ZS5hdHRhY2htZW50c0Rvd25sb2FkaW5nW2Rvd25sb2FkSWRdICYmCiAgICAgICAgICAgIHN0YXRlLmF0dGFjaG1lbnRzRG93bmxvYWRpbmdbZG93bmxvYWRJZF0ucHJvZ3Jlc3MsCiAgICB9Owp9OwpleHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcykoQXR0YWNobWVudENlbGwpOwo="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/components/Cells/AttachmentCell/index.tsx","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/components/Cells/AttachmentCell/index.tsx"],"names":[],"mappings":"AAAA,OAAO,cAAqC,MAAM,kBAAkB,CAAC;AACrE,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;AAEtC,OAAO,EAAE,UAAU,EAAE,MAAM,gBAAgB,CAAC;AAE5C,IAAM,eAAe,GAAG,UAAC,KAAiB,EAAE,QAAe;IACnD,IAAA,wBAA6C,EAA3C,kBAAM,EAAE,oBAAO,EAAE,UAA0B,CAAC;IACpD,IAAM,UAAU,GAAG,UAAU,CAAC,CAAG,MAAM,IAAI,EAAE,UAAI,OAAO,SAAI,EAAI,CAAC,CAAC;IAElE,OAAO;QACL,QAAQ,EAAE,KAAK,CAAC,sBAAsB,CAAC,UAAU,CAAC;YAChD,KAAK,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAAC,QAAQ;KACpD,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,OAAO,CAAwB,eAAe,CAAC,CAAC,cAAc,CAAC,CAAC","sourcesContent":["import AttachmentCell, { Props, StateProps } from './AttachmentCell';\nimport { connect } from 'react-redux';\nimport { StoreState } from '@src/types';\nimport { fnv1a64hex } from '@src/lib/crypt';\n\nconst mapStateToProps = (state: StoreState, ownProps: Props): StateProps => {\n  const { thread, message, id } = ownProps.attachment;\n  const downloadId = fnv1a64hex(`${thread || ''}-${message}-${id}`);\n\n  return {\n    progress: state.attachmentsDownloading[downloadId] &&\n      state.attachmentsDownloading[downloadId].progress,\n  };\n};\n\nexport default connect<StateProps, {}, Props>(mapStateToProps)(AttachmentCell);\n"]}]}