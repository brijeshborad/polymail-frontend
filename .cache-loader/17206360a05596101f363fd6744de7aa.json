{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/sequenceStages.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/sequenceStages.ts","mtime":1675280254052},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/sequenceStages.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/sequenceStages.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,OAAO,MAAM,MAAM,qBAAqB,CAAC;AACzC,OAAO,EAAE,KAAK,EAAE,MAAM,QAAQ,CAAC;AAC/B,OAAO,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;AACxC,OAAO,EAAE,cAAc,EAAmB,MAAM,YAAY,CAAC;AAE7D,OAAO,EAAE,UAAU,EAAE,kBAAkB,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AAEpF,MAAM,CACJ,IAAA;;;;;;;;;;;;;;;;;;;;;;YAAyB,EACzB,6BAAyB,EACzB,qCAAiC,CAwBhC;AAUH,+FAA+F;AAC/F,8EAA8E;AAC9E,MAAM,CACJ,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAA2B,EAC3B,+BAA2B,EAC3B,uCAAmC,CA8BlC;AAOH,+FAA+F;AAC/F,8EAA8E;AAC9E,MAAM,CACJ,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAA2B,EAC3B,+BAA2B,EAC3B,uCAAmC,CAiDlC;AAEH,iEAAiE;AACjE,8EAA8E;AAC9E,MAAM,CACJ,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAA2B,EAC3B,+BAA2B,EAC3B,uCAAmC,CAmClC;AAEH,MAAM,CACJ,IAAA;;YAA2B,EAC3B,+BAA2B,EAC3B,uCAAmC,CAGlC;AAEH,MAAM,CACJ,IAAA;;;;;;;;;;;YAA8B,EAC9B,kCAA8B,EAC9B,0CAAsC,CAUrC;AAEH,eAAe;IACb,0BAA0B;IAC1B,0BAA0B;IAC1B,0BAA0B;IAC1B,wBAAwB;IACxB,0BAA0B;IAC1B,6BAA6B;CAC9B,CAAC","sourcesContent":["import update from 'immutability-helper';\nimport { keyBy } from 'lodash';\nimport { create } from '@src/lib/redux';\nimport { ResourceStatus, RequiredPartial } from '@src/types';\nimport { SequenceStage } from '@src/types/sequences';\nimport { resourceOk, resourceRefreshing, resourcePending } from '@src/lib/resource';\n\nexport const {\n  type: SEQUENCE_STAGE_LIST,\n  action: sequenceStageList,\n  reducer: sequenceStageListReducer,\n} = create<string, SequenceStage[]>('SEQUENCE_STAGE_LIST', {\n  setup: (state, meta) => {\n    if (state.sequenceStages[meta]) {\n      return state;\n    }\n\n    return update(state, {\n      sequenceStages: {\n        [meta]: { $set: {} },\n      },\n    });\n  },\n  success: (state, meta, payload) =>\n    update(state, {\n      sequenceStages: {\n        [meta]: {\n          $merge: keyBy(\n            payload.map(val => resourceOk(val)),\n            stage => stage.data && stage.data.id,\n          ),\n        },\n      },\n    }),\n});\n\nexport interface SequenceStageCreateMeta {\n  stage: RequiredPartial<\n    SequenceStage,\n    'newThread'| 'intervalDays' | 'sequence'\n  >;\n  navigateTo?: boolean;\n}\n\n// TODO(SHIN): Discuss start case for invidivual stage delete errors. Do we expect optimistics?\n// TODO(SHIN): Handle failure notifications for invidivual stage delete errors\nexport const {\n  type: SEQUENCE_STAGE_CREATE,\n  action: sequenceStageCreate,\n  reducer: sequenceStageCreateReducer,\n} = create<SequenceStageCreateMeta, SequenceStage>('SEQUENCE_STAGE_CREATE', {\n  setup: (state, meta) => {\n    if (state.sequenceStages[meta.stage.sequence]) {\n      return state;\n    }\n\n    return update(state, {\n      sequenceStages: {\n        [meta.stage.sequence]: { $set: {} },\n      },\n    });\n  },\n  success: (state, meta, payload) => update(state, {\n    sequenceStages: {\n      [payload.sequence]: {\n        [payload.id]: {\n          $set: resourceOk(payload),\n        },\n      },\n    },\n  }),\n  failure: (state, meta, error) =>\n    update(state, {\n      sequenceStages: {\n        [meta.stage.sequence]: {\n          $unset: [meta.stage.id],\n        },\n      },\n    }),\n});\n\nexport type SequenceStageUpdateMeta = RequiredPartial<\n  SequenceStage,\n  'id' | 'sequence' | 'sequence'\n  >;\n\n// TODO(SHIN): Discuss start case for invidivual stage delete errors. Do we expect optimistics?\n// TODO(SHIN): Handle failure notifications for invidivual stage delete errors\nexport const {\n  type: SEQUENCE_STAGE_UPDATE,\n  action: sequenceStageUpdate,\n  reducer: sequenceStageUpdateReducer,\n} = create<SequenceStageUpdateMeta, SequenceStage>('SEQUENCE_STAGE_UPDATE', {\n  setup: (state, meta) => {\n    if (state.sequenceStages[meta.sequence]) {\n      if (state.sequenceStages[meta.sequence][meta.id]) {\n        return state;\n      }\n\n      return update(state, {\n        sequenceStages: {\n          [meta.sequence]: { [meta.id]: { $set: resourcePending() } },\n        },\n      });\n    }\n\n    return update(state, {\n      sequenceStages: {\n        [meta.sequence]: { $set: { [meta.id]: resourcePending() } },\n      },\n    });\n  },\n  start: (state, meta) => update(state, {\n    sequenceStages: {\n      [meta.sequence]: {\n        [meta.id]: { $set: resourceRefreshing(meta) },\n      },\n    },\n  }),\n  success: (state, meta, payload) => update(state, {\n    sequenceStages: {\n      [meta.sequence]: {\n        [meta.id]: {\n          $set: resourceOk(payload),\n        },\n      },\n    },\n  }),\n  failure: (state, meta, error) =>\n    update(state, {\n      sequenceStages: {\n        [meta.sequence]: {\n          [meta.id]: {\n            status: {\n              $set: ResourceStatus.Ok,\n            },\n          },\n        },\n      },\n    }),\n});\n\n// TODO(SHIN): Discuss Error states for sequence stages deletions\n// TODO(SHIN): Handle failure notifications for invidivual stage delete errors\nexport const {\n  type: SEQUENCE_STAGE_DELETE,\n  action: sequenceStageDelete,\n  reducer: sequenceStageDeleteReducer,\n} = create<SequenceStage, null>('SEQUENCE_STAGE_DELETE', {\n  setup: (state, meta) => {\n    if (state.sequenceStages[meta.sequence]) {\n      if (state.sequenceStages[meta.sequence][meta.id]) {\n        return state;\n      }\n\n      return update(state, {\n        sequenceStages: {\n          [meta.sequence]: { [meta.id]: { $set: resourcePending() } },\n        },\n      });\n    }\n\n    return update(state, {\n      sequenceStages: {\n        [meta.sequence]: { $set: { [meta.id]: resourcePending() } },\n      },\n    });\n  },\n  success: (state, meta, payload) => update(state, {\n    sequenceStages: {\n      [meta.sequence]: {\n        $unset: [meta.id],\n      },\n    },\n  }),\n  failure: (state, meta, error) => update(state, {\n    sequenceStages: {\n      [meta.sequence]: {\n        [meta.id]: { $set: resourceOk(meta) },\n      },\n    },\n  }),\n});\n\nexport const {\n  type: SEQUENCE_STAGE_SELECT,\n  action: sequenceStageSelect,\n  reducer: sequenceStageSelectReducer,\n} = create<string, null>('SEQUENCE_STAGE_SELECT', {\n  start: (state, meta) => ({ ...state, selectedSequenceStage: meta }),\n});\n\nexport const {\n  type: SEQUENCE_STAGE_DUPLICATE,\n  action: sequenceStageDuplicate,\n  reducer: sequenceStageDuplicateReducer,\n} = create<SequenceStage, SequenceStage>('SEQUENCE_STAGE_DUPLICATE', {\n  success: (state, meta, payload) =>\n    update(state, {\n      sequenceStages: {\n        [payload.sequence]: {\n          [payload.id]: { $set: resourceOk(payload) },\n        },\n      },\n    }),\n});\n\nexport default [\n  sequenceStageDeleteReducer,\n  sequenceStageUpdateReducer,\n  sequenceStageCreateReducer,\n  sequenceStageListReducer,\n  sequenceStageSelectReducer,\n  sequenceStageDuplicateReducer,\n];\n"]}]}