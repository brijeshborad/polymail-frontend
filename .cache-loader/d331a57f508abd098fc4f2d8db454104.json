{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/models/draft.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/models/draft.ts","mtime":1675280254066},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnOwppbXBvcnQgeyBXYWl0aW5nVHlwZSwgRHJhZnRTdGF0dXMgfSBmcm9tICdAc3JjL3R5cGVzJzsKaW1wb3J0IENhY2hlLCB7IFN0b3JlcyB9IGZyb20gJ0BzcmMvbGliL2RiJzsKZXhwb3J0IHZhciBnZXREZWZhdWx0V2FpdGluZyA9IGZ1bmN0aW9uIChmb2xsb3dVcCkgewogICAgcmV0dXJuIHsKICAgICAgICB0eXBlOiBXYWl0aW5nVHlwZS5Ob1JlcGx5LAogICAgICAgIHdoZW46IG1vbWVudCgpLmFkZChmb2xsb3dVcCwgJ3NlY29uZHMnKS50b0RhdGUoKSwKICAgICAgICB3aGVuUmVsYXRpdmU6IGZvbGxvd1VwLAogICAgfTsKfTsKLy8gRmV0Y2ggcmV0cmlldmVzIGEgcGFnZSBvZiBjb21taXRzIGZyb20gdGhlIGNvbW1pdCBsb2cgdG8gcHJvY2VzcwpleHBvcnQgZnVuY3Rpb24gZmV0Y2hTdGFnZWREcmFmdHMoKSB7CiAgICB2YXIgcmVmcmVzaENvbW1pdHMgPSBDYWNoZS5saXN0KFN0b3Jlcy5EcmFmdHMsIGZ1bmN0aW9uIChjb21taXQpIHsKICAgICAgICByZXR1cm4gW0RyYWZ0U3RhdHVzLlN0YWdlZCwgRHJhZnRTdGF0dXMuRmFpbGVkXQogICAgICAgICAgICAuaW5kZXhPZihjb21taXQuc3RhdHVzKSA+IC0xOwogICAgfSk7CiAgICByZXR1cm4gcmVmcmVzaENvbW1pdHM7Cn0K"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/models/draft.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/models/draft.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAW,WAAW,EAAS,WAAW,EAAE,MAAM,YAAY,CAAC;AAEtE,OAAO,KAAK,EAAE,EAAE,MAAM,EAAE,MAAM,aAAa,CAAC;AAE5C,MAAM,CAAC,IAAM,iBAAiB,GAAG,UAAC,QAAgB;IAChD,OAAO;QACL,IAAI,EAAE,WAAW,CAAC,OAAO;QACzB,IAAI,EAAE,MAAM,EAAE,CAAC,GAAG,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,MAAM,EAAE;QAChD,YAAY,EAAE,QAAQ;KACvB,CAAC;AACJ,CAAC,CAAC;AAEF,mEAAmE;AACnE,MAAM,UAAU,iBAAiB;IAC/B,IAAM,cAAc,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,UAAC,MAAa;QAC7D,OAAO,CAAC,WAAW,CAAC,MAAM,EAAE,WAAW,CAAC,MAAM,CAAC;aAC5C,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,OAAO,cAAc,CAAC;AACxB,CAAC","sourcesContent":["import moment from 'moment';\nimport { Waiting, WaitingType, Draft, DraftStatus } from '@src/types';\nimport { Observable } from 'rxjs';\nimport Cache, { Stores } from '@src/lib/db';\n\nexport const getDefaultWaiting = (followUp: number): Waiting => {\n  return {\n    type: WaitingType.NoReply,\n    when: moment().add(followUp, 'seconds').toDate(),\n    whenRelative: followUp,\n  };\n};\n\n// Fetch retrieves a page of commits from the commit log to process\nexport function fetchStagedDrafts(): Observable<Draft[]> {\n  const refreshCommits = Cache.list(Stores.Drafts, (commit: Draft) => {\n    return [DraftStatus.Staged, DraftStatus.Failed]\n      .indexOf(commit.status) > -1;\n  });\n\n  return refreshCommits;\n}\n"]}]}