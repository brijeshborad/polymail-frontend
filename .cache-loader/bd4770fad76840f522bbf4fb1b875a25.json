{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/unleash-experiments.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/unleash-experiments.ts","mtime":1675280254069},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkgewogICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHsKICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHsKICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTsKICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKQogICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07CiAgICAgICAgfQogICAgICAgIHJldHVybiB0OwogICAgfTsKICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9OwppbXBvcnQgeyBVbmxlYXNoQ2xpZW50IH0gZnJvbSAndW5sZWFzaC1wcm94eS1jbGllbnQnOwp2YXIgRXhwZXJpbWVudHM7CihmdW5jdGlvbiAoRXhwZXJpbWVudHMpIHsKICAgIEV4cGVyaW1lbnRzWyJQcmV2aWV3UGxhbnNPblNpZ251cCJdID0gInByZXZpZXdfcGxhbnNfb25fc2lnbnVwIjsKfSkoRXhwZXJpbWVudHMgfHwgKEV4cGVyaW1lbnRzID0ge30pKTsKZXhwb3J0IHZhciBpbml0VW5sZWFzaCA9IGZ1bmN0aW9uIChpZCkgewogICAgdmFyIF9hOwogICAgdmFyIHVubGVhc2ggPSBuZXcgVW5sZWFzaENsaWVudCh7CiAgICAgICAgdXJsOiAnaHR0cHM6Ly91bmxlYXNoLnBvbHltYWlsLmlvL2FwaS9mcm9udGVuZCcsCiAgICAgICAgY2xpZW50S2V5OiBwcm9jZXNzLmVudi5VTkxFQVNIX0NMSUVOVF9LRVkgfHwgJycsCiAgICAgICAgYXBwTmFtZTogcHJvY2Vzcy5lbnYuVU5MRUFTSF9BUFBfTkFNRSB8fCAnJywKICAgIH0pOwogICAgdW5sZWFzaC51cGRhdGVDb250ZXh0KHsKICAgICAgICB1c2VySWQ6IGlkLAogICAgfSk7CiAgICB1bmxlYXNoLnN0YXJ0KCk7CiAgICAvLyBoZXJlIHlvdXIgZXhwZXJpbWVudHMgZGVjbGFyZWQgaW4gVW5sZWFzaAogICAgdmFyIGV4cGVyaW1lbnRzID0gKF9hID0ge30sCiAgICAgICAgX2FbRXhwZXJpbWVudHMuUHJldmlld1BsYW5zT25TaWdudXBdID0gdW5kZWZpbmVkLAogICAgICAgIF9hKTsKICAgIC8vIHJldHVybiBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHVubGVhc2ggaXMgcmVhZHkgb3IgZXJyb3JlZC93YXJuZWQKICAgIHZhciBsaXN0ZW5lcnNSZXNvbHZlZFByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkgewogICAgICAgIHVubGVhc2gub24oJ3JlYWR5JywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAvLyBjb25zdCBlbmFibGVkID0gdW5sZWFzaC5pc0VuYWJsZWQoRXhwZXJpbWVudHMuRmVhdHVyZTEpOwogICAgICAgICAgICB2YXIgX2E7CiAgICAgICAgICAgIC8vIGxvb3Agb3ZlciBhbGwgdGhlIGV4aXN0aW5nIGV4cGVyaW1lbnRzCiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2IgPSBPYmplY3Qua2V5cyhleHBlcmltZW50cyk7IF9pIDwgX2IubGVuZ3RoOyBfaSsrKSB7CiAgICAgICAgICAgICAgICB2YXIgZXhwZXJpbWVudCA9IF9iW19pXTsKICAgICAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tY29uc29sZQogICAgICAgICAgICAgICAgdmFyIGVuYWJsZWQgPSB1bmxlYXNoLmlzRW5hYmxlZChleHBlcmltZW50KTsKICAgICAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25zb2xlCiAgICAgICAgICAgICAgICBleHBlcmltZW50cyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBleHBlcmltZW50cyksIChfYSA9IHt9LCBfYVtleHBlcmltZW50XSA9IGVuYWJsZWQsIF9hKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmVzb2x2ZShleHBlcmltZW50cyk7CiAgICAgICAgfSk7CiAgICAgICAgdW5sZWFzaC5vbignZXJyb3InLCBmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tY29uc29sZQogICAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbmxlYXNoIGVycm9yJywgZXJyKTsKICAgICAgICAgICAgZXhwZXJpbWVudHMgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZXhwZXJpbWVudHMpLCB7IGVycm9yOiBlcnIgfSk7CiAgICAgICAgICAgIHJlc29sdmUoZXhwZXJpbWVudHMpOwogICAgICAgIH0pOwogICAgICAgIHVubGVhc2gub24oJ3dhcm4nLCBmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tY29uc29sZQogICAgICAgICAgICBjb25zb2xlLndhcm4oJ1VubGVhc2ggd2FybicsIGVycik7CiAgICAgICAgICAgIGV4cGVyaW1lbnRzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGV4cGVyaW1lbnRzKSwgeyB3YXJuOiBlcnIgfSk7CiAgICAgICAgfSk7CiAgICB9KTsKICAgIHJldHVybiBsaXN0ZW5lcnNSZXNvbHZlZFByb21pc2U7Cn07Cg=="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/unleash-experiments.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/unleash-experiments.ts"],"names":[],"mappings":";;;;;;;;;;;AACA,OAAO,EAAE,aAAa,EAAE,MAAM,sBAAsB,CAAC;AAErD,IAAK,WAEJ;AAFD,WAAK,WAAW;IACd,+DAAgD,CAAA;AAClD,CAAC,EAFI,WAAW,KAAX,WAAW,QAEf;AASD,MAAM,CAAC,IAAM,WAAW,GAAG,UAAC,EAAY;;IACtC,IAAM,OAAO,GAAG,IAAI,aAAa,CAAC;QAChC,GAAG,EAAE,0CAA0C;QAC/C,SAAS,EAAE,OAAO,CAAC,GAAG,CAAC,kBAAkB,IAAI,EAAE;QAC/C,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,gBAAgB,IAAI,EAAE;KAC5C,CAAC,CAAC;IAEH,OAAO,CAAC,aAAa,CAAC;QACpB,MAAM,EAAE,EAAE;KACX,CAAC,CAAC;IAEH,OAAO,CAAC,KAAK,EAAE,CAAC;IAEhB,4CAA4C;IAC5C,IAAI,WAAW;QACb,GAAC,WAAW,CAAC,oBAAoB,IAAG,SAAS;WAC9C,CAAC;IAEF,yEAAyE;IACzE,IAAM,wBAAwB,GAAG,IAAI,OAAO,CAAC,UAAC,OAAO;QACnD,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE;YAClB,2DAA2D;;YAE3D,yCAAyC;YACzC,KAAyB,UAAwB,EAAxB,KAAA,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,EAAxB,cAAwB,EAAxB,IAAwB,EAAE;gBAA9C,IAAM,UAAU,SAAA;gBACnB,uCAAuC;gBAEvC,IAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;gBAE9C,sCAAsC;gBACtC,WAAW,yBACN,WAAW,gBACb,UAAU,IAAG,OAAO,MACtB,CAAC;aACH;YAED,OAAO,CAAC,WAAW,CAAC,CAAC;QACvB,CAAC,CAAC,CAAC;QAEH,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,UAAC,GAAQ;YAC3B,uCAAuC;YACvC,OAAO,CAAC,KAAK,CAAC,eAAe,EAAE,GAAG,CAAC,CAAC;YACpC,WAAW,yBACN,WAAW,KACd,KAAK,EAAE,GAAG,GACX,CAAC;YACF,OAAO,CAAC,WAAW,CAAC,CAAC;QACvB,CAAC,CAAC,CAAC;QAEH,OAAO,CAAC,EAAE,CAAC,MAAM,EAAE,UAAC,GAAQ;YAC1B,uCAAuC;YACvC,OAAO,CAAC,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;YAElC,WAAW,yBACN,WAAW,KACd,IAAI,EAAE,GAAG,GACV,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,OAAO,wBAAwB,CAAC;AAClC,CAAC,CAAC","sourcesContent":["import { Me, ResourceStatus } from '@src/types';\nimport { UnleashClient } from 'unleash-proxy-client';\n\nenum Experiments {\n  PreviewPlansOnSignup = 'preview_plans_on_signup',\n}\n\nexport interface ExperimentsState {\n  [Experiments.PreviewPlansOnSignup]: boolean | undefined;\n  error?: any;\n  warn?: any;\n  status?: ResourceStatus; // todo: add this status when starting me fetch\n}\n\nexport const initUnleash = (id: Me['id']) => {\n  const unleash = new UnleashClient({\n    url: 'https://unleash.polymail.io/api/frontend',\n    clientKey: process.env.UNLEASH_CLIENT_KEY || '',\n    appName: process.env.UNLEASH_APP_NAME || '',\n  });\n\n  unleash.updateContext({\n    userId: id,\n  });\n\n  unleash.start();\n\n  // here your experiments declared in Unleash\n  let experiments: ExperimentsState = {\n    [Experiments.PreviewPlansOnSignup]: undefined,\n  };\n\n  // return a promise that resolves when unleash is ready or errored/warned\n  const listenersResolvedPromise = new Promise((resolve) => {\n    unleash.on('ready', () => {\n      // const enabled = unleash.isEnabled(Experiments.Feature1);\n\n      // loop over all the existing experiments\n      for (const experiment of Object.keys(experiments)) {\n        // tslint:disable-next-line: no-console\n\n        const enabled = unleash.isEnabled(experiment);\n\n        // tslint:disable-next-line:no-console\n        experiments = {\n          ...experiments,\n          [experiment]: enabled,\n        };\n      }\n\n      resolve(experiments);\n    });\n\n    unleash.on('error', (err: any) => {\n      // tslint:disable-next-line: no-console\n      console.error('Unleash error', err);\n      experiments = {\n        ...experiments,\n        error: err,\n      };\n      resolve(experiments);\n    });\n\n    unleash.on('warn', (err: any) => {\n      // tslint:disable-next-line: no-console\n      console.warn('Unleash warn', err);\n\n      experiments = {\n        ...experiments,\n        warn: err,\n      };\n    });\n  });\n\n  return listenersResolvedPromise;\n};\n"]}]}