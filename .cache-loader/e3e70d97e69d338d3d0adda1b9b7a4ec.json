{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/models/mailCount.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/models/mailCount.ts","mtime":1675280254066},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnOwppbXBvcnQgeyBUaHJlYWRCb3gsIERvY2tDb3VudCwgTGVmdFNpZGViYXJDb3VudCB9IGZyb20gJ0BzcmMvdHlwZXMnOwppbXBvcnQgQ2FjaGUsIHsgU3RvcmVzIH0gZnJvbSAnQHNyYy9saWIvZGInOwppbXBvcnQgeyBNYWlsQ291bnRUeXBlIH0gZnJvbSAnQHNyYy93b3JrZXIvbWFpbENvdW50Qm90JzsKZXhwb3J0IHZhciBNQVhfTElTVF9DT1VOVCA9IDUwMDsKZXhwb3J0IGZ1bmN0aW9uIGdldE5ld01haWxDb3VudChxdWVyeSkgewogICAgdmFyIGFjY291bnRJZCA9IHF1ZXJ5LmFjY291bnQ7CiAgICBzd2l0Y2ggKHF1ZXJ5LnR5cGUpIHsKICAgICAgICBjYXNlIE1haWxDb3VudFR5cGUuSW5ib3g6CiAgICAgICAgICAgIHZhciBpbmJveFJlYWRfMSA9IDA7CiAgICAgICAgICAgIHZhciBpbmJveFVucmVhZF8xID0gMDsKICAgICAgICAgICAgLy8gSGFuZGxlIG9wdGltaXphdGlvbiBmb3Igd2hlbiBqdXN0IG5lZWQgdW5yZWFkIGluYm94IGNvdW50cwogICAgICAgICAgICB2YXIgZG9ja0NvdW50VW5yZWFkT25seSA9IHF1ZXJ5LmRvY2tDb3VudCA9PT0gRG9ja0NvdW50LkJvb2xVbnJlYWQKICAgICAgICAgICAgICAgIHx8IHF1ZXJ5LmRvY2tDb3VudCA9PT0gRG9ja0NvdW50Lk5vbmUgfHwgcXVlcnkuZG9ja0NvdW50ID09PSBEb2NrQ291bnQuVW5yZWFkOwogICAgICAgICAgICBpZiAocXVlcnkubGVmdFNpZGViYXJDb3VudCA9PT0gTGVmdFNpZGViYXJDb3VudC5VbnJlYWQgJiYgZG9ja0NvdW50VW5yZWFkT25seSkgewogICAgICAgICAgICAgICAgcmV0dXJuIENhY2hlLmNvdW50SW5kZXgoU3RvcmVzLlRocmVhZHMsICdhY2NvdW50X2luYm94X3VucmVhZCcsIElEQktleVJhbmdlLm9ubHkoW3F1ZXJ5LmFjY291bnQsIDFdKSkubWFwKGZ1bmN0aW9uIChjKSB7CiAgICAgICAgICAgICAgICAgICAgaW5ib3hVbnJlYWRfMSA9IGM7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICh7CiAgICAgICAgICAgICAgICAgICAgICAgIGluYm94UmVhZDogaW5ib3hSZWFkXzEsCiAgICAgICAgICAgICAgICAgICAgICAgIGluYm94VW5yZWFkOiBpbmJveFVucmVhZF8xLAogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8gSGFuZGxlIG9wdGltaXphdGlvbiBmb3Igd2hlbiBqdXN0IG5lZWQgdG90YWwgaW5ib3ggY291bnRzCiAgICAgICAgICAgIHZhciBkb2NrQ291bnRUb3RhbE9ubHkgPSBxdWVyeS5kb2NrQ291bnQgPT09IERvY2tDb3VudC5BbGwKICAgICAgICAgICAgICAgIHx8IHF1ZXJ5LmRvY2tDb3VudCA9PT0gRG9ja0NvdW50LkJvb2wgfHwgcXVlcnkuZG9ja0NvdW50ID09PSBEb2NrQ291bnQuTm9uZTsKICAgICAgICAgICAgaWYgKHF1ZXJ5LmxlZnRTaWRlYmFyQ291bnQgPT09IExlZnRTaWRlYmFyQ291bnQuQWxsICYmIGRvY2tDb3VudFRvdGFsT25seSkgewogICAgICAgICAgICAgICAgcmV0dXJuIENhY2hlLmNvdW50SW5kZXgoU3RvcmVzLlRocmVhZHMsICdhY2NvdW50X2luYm94X3VucmVhZCcsIElEQktleVJhbmdlLmJvdW5kKFtxdWVyeS5hY2NvdW50LCAwXSwgW3F1ZXJ5LmFjY291bnQsIDFdKSkubWFwKGZ1bmN0aW9uIChjKSB7CiAgICAgICAgICAgICAgICAgICAgaW5ib3hVbnJlYWRfMSA9IGM7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICh7CiAgICAgICAgICAgICAgICAgICAgICAgIGluYm94UmVhZDogaW5ib3hSZWFkXzEsCiAgICAgICAgICAgICAgICAgICAgICAgIGluYm94VW5yZWFkOiBpbmJveFVucmVhZF8xLAogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8gRGVmYXVsdCB0byBnZXR0aW5nIGJhY2sgYm90aCB1bnJlYWQgYW5kIHJlYWQgY291bnRzCiAgICAgICAgICAgIHJldHVybiBDYWNoZS5jb3VudEluZGV4KFN0b3Jlcy5UaHJlYWRzLCAnYWNjb3VudF9pbmJveF91bnJlYWQnLCBJREJLZXlSYW5nZS5vbmx5KFtxdWVyeS5hY2NvdW50LCAwXSkpLmZsYXRNYXAoZnVuY3Rpb24gKGMpIHsKICAgICAgICAgICAgICAgIGluYm94UmVhZF8xID0gYzsKICAgICAgICAgICAgICAgIHJldHVybiBDYWNoZS5jb3VudEluZGV4KFN0b3Jlcy5UaHJlYWRzLCAnYWNjb3VudF9pbmJveF91bnJlYWQnLCBJREJLZXlSYW5nZS5vbmx5KFtxdWVyeS5hY2NvdW50LCAxXSkpOwogICAgICAgICAgICB9KS5tYXAoZnVuY3Rpb24gKGMpIHsKICAgICAgICAgICAgICAgIGluYm94VW5yZWFkXzEgPSBjOwogICAgICAgICAgICAgICAgcmV0dXJuICh7CiAgICAgICAgICAgICAgICAgICAgaW5ib3hSZWFkOiBpbmJveFJlYWRfMSwKICAgICAgICAgICAgICAgICAgICBpbmJveFVucmVhZDogaW5ib3hVbnJlYWRfMSwKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICBjYXNlIE1haWxDb3VudFR5cGUuRm9sbG93VXBDb3VudDoKICAgICAgICAgICAgcmV0dXJuIENhY2hlLmxpc3RJbmRleChTdG9yZXMuVGhyZWFkcywgJ3dhaXRpbmcnLCBJREJLZXlSYW5nZS5vbmx5KDEpLCBmYWxzZSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAodGhyZWFkKSB7IHJldHVybiB0aHJlYWQuYWNjb3VudCA9PT0gcXVlcnkuYWNjb3VudDsgfSkubWFwKGZ1bmN0aW9uICh0KSB7IHJldHVybiB0Lmxlbmd0aDsgfSkKICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGMpIHsgcmV0dXJuICh7CiAgICAgICAgICAgICAgICBmb2xsb3dVcENvdW50OiBjLAogICAgICAgICAgICB9KTsgfSk7CiAgICAgICAgY2FzZSBNYWlsQ291bnRUeXBlLkxhdGVyQ291bnQ6CiAgICAgICAgICAgIHJldHVybiBDYWNoZS5jb3VudEluZGV4KFN0b3Jlcy5UaHJlYWRzLCAnYWNjb3VudF9ib3hfc29ydCcsIElEQktleVJhbmdlLmJvdW5kKFthY2NvdW50SWQsIFRocmVhZEJveC5MYXRlciwgbmV3IERhdGUoMCldLCBbYWNjb3VudElkLCAnbGF0ZXInLCBEYXRlKCldKSkubWFwKGZ1bmN0aW9uIChjKSB7IHJldHVybiAoewogICAgICAgICAgICAgICAgbGF0ZXJDb3VudDogYywKICAgICAgICAgICAgfSk7IH0pOwogICAgICAgIGNhc2UgTWFpbENvdW50VHlwZS5MaXN0VW5yZWFkOgogICAgICAgICAgICB2YXIgbF8xID0gcXVlcnkubGlzdDsKICAgICAgICAgICAgaWYgKGxfMSkgewogICAgICAgICAgICAgICAgcmV0dXJuIENhY2hlLmNvdW50SW5kZXgoU3RvcmVzLlRocmVhZHMsICdhY2NvdW50X2xpc3RfdW5yZWFkJywgSURCS2V5UmFuZ2Uub25seShbYWNjb3VudElkLCBsXzFdKSkubWFwKGZ1bmN0aW9uIChjKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIF9hOwogICAgICAgICAgICAgICAgICAgIHJldHVybiAoewogICAgICAgICAgICAgICAgICAgICAgICBsaXN0c1VucmVhZDogKF9hID0ge30sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYVtsXzFdID0gYywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hKSwKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBPYnNlcnZhYmxlLm9mKHt9KTsKICAgICAgICBjYXNlIE1haWxDb3VudFR5cGUuU3RhcnJlZENvdW50OgogICAgICAgICAgICByZXR1cm4gQ2FjaGUuY291bnRJbmRleChTdG9yZXMuVGhyZWFkcywgJ3N0YXJyZWRfYWNjb3VudF9pbnRlcm5hbCcsIElEQktleVJhbmdlLmJvdW5kKFsxLCBhY2NvdW50SWQsIG5ldyBEYXRlKDApXSwgWzEsIGFjY291bnRJZCwgRGF0ZSgpXSkpLm1hcChmdW5jdGlvbiAoYykgeyByZXR1cm4gKHsKICAgICAgICAgICAgICAgIHN0YXJyZWRDb3VudDogYywKICAgICAgICAgICAgfSk7IH0pOwogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgIHJldHVybiBPYnNlcnZhYmxlLm9mKHt9KTsKICAgIH0KfQo="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/models/mailCount.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/models/mailCount.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs';\n\nimport { Thread, ThreadBox, MailCount, DockCount, LeftSidebarCount } from '@src/types';\nimport Cache, { Stores } from '@src/lib/db';\nimport { MailCountQuery, MailCountType } from '@src/worker/mailCountBot';\n\nexport const MAX_LIST_COUNT = 500;\n\nexport function getNewMailCount(query: MailCountQuery): Observable<Partial<MailCount>> {\n  const accountId = query.account;\n  switch (query.type) {\n    case MailCountType.Inbox:\n      let inboxRead = 0;\n      let inboxUnread = 0;\n\n      // Handle optimization for when just need unread inbox counts\n      const dockCountUnreadOnly = query.dockCount === DockCount.BoolUnread\n        || query.dockCount === DockCount.None || query.dockCount === DockCount.Unread;\n      if (query.leftSidebarCount === LeftSidebarCount.Unread && dockCountUnreadOnly) {\n        return Cache.countIndex(\n          Stores.Threads, 'account_inbox_unread', IDBKeyRange.only([query.account, 1]),\n        ).map((c) => {\n          inboxUnread = c;\n          return ({\n            inboxRead,\n            inboxUnread,\n          });\n        });\n      }\n\n      // Handle optimization for when just need total inbox counts\n      const dockCountTotalOnly = query.dockCount === DockCount.All\n        || query.dockCount === DockCount.Bool || query.dockCount === DockCount.None;\n      if (query.leftSidebarCount === LeftSidebarCount.All && dockCountTotalOnly) {\n        return Cache.countIndex(\n          Stores.Threads,\n          'account_inbox_unread',\n          IDBKeyRange.bound(\n            [query.account, 0], [query.account, 1],\n          ),\n        ).map((c) => {\n          inboxUnread = c;\n          return ({\n            inboxRead,\n            inboxUnread,\n          });\n        });\n      }\n\n      // Default to getting back both unread and read counts\n      return Cache.countIndex(\n        Stores.Threads, 'account_inbox_unread', IDBKeyRange.only([query.account, 0]),\n      ).flatMap((c) =>  {\n        inboxRead = c;\n        return Cache.countIndex(\n          Stores.Threads, 'account_inbox_unread', IDBKeyRange.only([query.account, 1]),\n        );\n      }).map((c) => {\n        inboxUnread = c;\n        return ({\n          inboxRead,\n          inboxUnread,\n        });\n      });\n    case MailCountType.FollowUpCount:\n      return Cache.listIndex(\n        Stores.Threads, 'waiting', IDBKeyRange.only(1), false, undefined,\n        (thread: Thread) => thread.account === query.account,\n      ).map(t => t.length)\n      .map(c => ({\n        followUpCount: c,\n      }))\n      ;\n    case MailCountType.LaterCount:\n      return Cache.countIndex(\n        Stores.Threads, 'account_box_sort',\n        IDBKeyRange.bound([accountId, ThreadBox.Later, new Date(0)], [accountId, 'later', Date()]),\n      ).map(c => ({\n        laterCount: c,\n      }));\n    case MailCountType.ListUnread:\n      const l = query.list;\n      if (l) {\n        return Cache.countIndex(\n          Stores.Threads,\n          'account_list_unread',\n          IDBKeyRange.only([accountId, l],\n        )).map(c => ({\n          listsUnread: {\n            [l]: c,\n          },\n        }));\n      }\n\n      return Observable.of({});\n    case MailCountType.StarredCount:\n      return Cache.countIndex(\n        Stores.Threads, 'starred_account_internal',\n        IDBKeyRange.bound([1, accountId, new Date(0)], [1, accountId, Date()]),\n      ).map(c => ({\n        starredCount: c,\n      }));\n    default:\n      return Observable.of({});\n  }\n}\n"]}]}