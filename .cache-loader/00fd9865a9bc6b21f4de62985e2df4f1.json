{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/filters.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/filters.ts","mtime":1675280254048},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIF9hLCBfYiwgX2M7CmltcG9ydCB7IGNyZWF0ZSB9IGZyb20gJ0BzcmMvbGliL3JlZHV4JzsKaW1wb3J0IHsgY3JlYXRlU2VsZWN0b3IgfSBmcm9tICdAc3JjL2xpYi9zZWxlY3Rvcic7CmltcG9ydCB7IHNpemUsIGxhc3QsIHZhbHVlcywga2V5QnkgfSBmcm9tICdsb2Rhc2gnOwppbXBvcnQgeyBhZGRyZXNzVG9FbWFpbCB9IGZyb20gJ0BzcmMvbGliL2FkZHJlc3MnOwppbXBvcnQgeyBmbnYxYTMyLCBtb25nb0lkIH0gZnJvbSAnQHNyYy9saWIvY3J5cHQnOwppbXBvcnQgdXBkYXRlIGZyb20gJ2ltbXV0YWJpbGl0eS1oZWxwZXInOwppbXBvcnQgeyBGaWx0ZXJTZWxlY3RvclR5cGUsIEZpbHRlckFjdGlvblR5cGUsIH0gZnJvbSAnQHNyYy90eXBlcy9maWx0ZXJzJzsKZXhwb3J0IHZhciBmaWx0ZXJCbG9ja0NyZWF0ZSA9IGZ1bmN0aW9uIChzZW5kZXIpIHsKICAgIHJldHVybiB7CiAgICAgICAgaWQ6IG1vbmdvSWQoKSwKICAgICAgICBzZWxlY3RvcnM6IFt7IHR5cGU6IEZpbHRlclNlbGVjdG9yVHlwZS5Gcm9tLCB2YWx1ZTogc2VuZGVyIH1dLAogICAgICAgIGFjdGlvbnM6IFt7IHR5cGU6IEZpbHRlckFjdGlvblR5cGUuQmxvY2tDb250YWN0IH1dLAogICAgfTsKfTsKZXhwb3J0IHZhciBGSUxURVJTX0xJU1QgPSAoX2EgPSBjcmVhdGUoJ0ZJTFRFUlNfTElTVCcsIHsKICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChzdGF0ZSwgbWV0YSwgcGF5bG9hZCkgewogICAgICAgIHJldHVybiB1cGRhdGUoc3RhdGUsIHsKICAgICAgICAgICAgZmlsdGVyczogewogICAgICAgICAgICAgICAgJHNldDoga2V5QnkocGF5bG9hZCwgJ2lkJyksCiAgICAgICAgICAgIH0sCiAgICAgICAgfSk7CiAgICB9LAp9KSwgX2EudHlwZSksIGZpbHRlcnNMaXN0ID0gX2EuYWN0aW9uLCBmaWx0ZXJMaXN0UmVkdWNlciA9IF9hLnJlZHVjZXI7CmV4cG9ydCB2YXIgRklMVEVSX1NFVCA9IChfYiA9IGNyZWF0ZSgnRklMVEVSX1NFVCcsIHsKICAgIHN0YXJ0OiBmdW5jdGlvbiAoc3RhdGUsIG1ldGEpIHsKICAgICAgICB2YXIgX2E7CiAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICBmaWx0ZXJzOiAoX2EgPSB7fSwKICAgICAgICAgICAgICAgIF9hW21ldGEuaWRdID0geyAkc2V0OiBtZXRhIH0sCiAgICAgICAgICAgICAgICBfYSksCiAgICAgICAgfSk7CiAgICB9LAogICAgc3VjY2VzczogZnVuY3Rpb24gKHN0YXRlLCBtZXRhLCBwYXlsb2FkKSB7CiAgICAgICAgdmFyIF9hOwogICAgICAgIHJldHVybiB1cGRhdGUoc3RhdGUsIHsKICAgICAgICAgICAgZmlsdGVyczogKF9hID0ge30sCiAgICAgICAgICAgICAgICBfYVtwYXlsb2FkLmlkXSA9IHsgJHNldDogcGF5bG9hZCB9LAogICAgICAgICAgICAgICAgX2EpLAogICAgICAgIH0pOwogICAgfSwKICAgIGZhaWx1cmU6IGZ1bmN0aW9uIChzdGF0ZSwgbWV0YSwgZXJyKSB7CiAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICBmaWx0ZXJzOiB7CiAgICAgICAgICAgICAgICAkdW5zZXQ6IFttZXRhLmlkXSwKICAgICAgICAgICAgfSwKICAgICAgICB9KTsKICAgIH0sCn0pLCBfYi50eXBlKSwgZmlsdGVyU2V0ID0gX2IuYWN0aW9uLCBmaWx0ZXJTZXRSZWR1Y2VyID0gX2IucmVkdWNlcjsKZXhwb3J0IHZhciBGSUxURVJfREVMRVRFID0gKF9jID0gY3JlYXRlKCdGSUxURVJfREVMRVRFJywgewogICAgc3VjY2VzczogZnVuY3Rpb24gKHN0YXRlLCBtZXRhLCBwYXlsb2FkKSB7CiAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICBmaWx0ZXJzOiB7CiAgICAgICAgICAgICAgICAkdW5zZXQ6IFttZXRhXSwKICAgICAgICAgICAgfSwKICAgICAgICB9KTsKICAgIH0sCn0pLCBfYy50eXBlKSwgZmlsdGVyRGVsZXRlID0gX2MuYWN0aW9uLCBmaWx0ZXJEZWxldGVSZWR1Y2VyID0gX2MucmVkdWNlcjsKLy8gUnVucyBzZWxlY3RvciB0byBpZGVudGlmeSBpZiBzZW5kZXIgZnJvbSBzZWxlY3RlZCB0aHJlYWQgaXMgYmxvY2tlZApleHBvcnQgdmFyIHNlbGVjdEJsb2NrRmlsdGVyID0gY3JlYXRlU2VsZWN0b3IoWwogICAgZnVuY3Rpb24gKHN0YXRlLCB0aHJlYWRJZCkgeyByZXR1cm4gdGhyZWFkSWQ7IH0sCiAgICBmdW5jdGlvbiAoc3RhdGUsIF8pIHsgcmV0dXJuIHN0YXRlLnNlbGVjdGVkVGhyZWFkOyB9LAogICAgZnVuY3Rpb24gKHN0YXRlLCBfKSB7IHJldHVybiBzdGF0ZS5maWx0ZXJzOyB9LApdLCBmdW5jdGlvbiAodGhyZWFkSWQsIHRocmVhZCwgZmlsdGVycykgewogICAgaWYgKCF0aHJlYWQgfHwgIXNpemUoZmlsdGVycykpIHsKICAgICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgfQogICAgdmFyIGxhc3RNZXNzYWdlID0gbGFzdCh0aHJlYWQubWVzc2FnZXMpOwogICAgaWYgKCFsYXN0TWVzc2FnZSkgewogICAgICAgIHJldHVybiB1bmRlZmluZWQ7CiAgICB9CiAgICB2YXIgbG93ZXJTZW5kZXIgPSBhZGRyZXNzVG9FbWFpbChsYXN0TWVzc2FnZS5mcm9tKS50b0xvd2VyQ2FzZSgpOwogICAgdmFyIGZpbHRlciA9IHZhbHVlcyhmaWx0ZXJzKS5maWx0ZXIoZnVuY3Rpb24gKGYpIHsgcmV0dXJuIGYuc2VsZWN0b3JzWzBdLnZhbHVlID09PSBsb3dlclNlbmRlcjsgfSlbMF07CiAgICByZXR1cm4gZmlsdGVyOwp9LCBmdW5jdGlvbiAodGhyZWFkSWQsIHRocmVhZCwgZmlsdGVycykgewogICAgaWYgKHRocmVhZCkgewogICAgICAgIHZhciBsYXN0TWVzc2FnZSA9IGxhc3QodGhyZWFkLm1lc3NhZ2VzKTsKICAgICAgICBpZiAobGFzdE1lc3NhZ2UpIHsKICAgICAgICAgICAgcmV0dXJuIGFkZHJlc3NUb0VtYWlsKGxhc3RNZXNzYWdlLmZyb20pLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIGZudjFhMzIodGhyZWFkSWQpOwp9LCBbJ2ZpbHRlcnMnXSk7CmV4cG9ydCBkZWZhdWx0IFsKICAgIGZpbHRlclNldFJlZHVjZXIsCiAgICBmaWx0ZXJEZWxldGVSZWR1Y2VyLAogICAgZmlsdGVyTGlzdFJlZHVjZXIsCl07Cg=="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/filters.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/filters.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;AACxC,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AAEnD,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,QAAQ,CAAC;AACnD,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAClD,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,gBAAgB,CAAC;AAClD,OAAO,MAAM,MAAM,qBAAqB,CAAC;AACzC,OAAO,EAEL,kBAAkB,EAClB,gBAAgB,GACjB,MAAM,oBAAoB,CAAC;AAE5B,MAAM,CAAC,IAAM,iBAAiB,GAAG,UAAC,MAAc;IAC9C,OAAO;QACL,EAAE,EAAE,OAAO,EAAE;QACb,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,kBAAkB,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC;QAC7D,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,gBAAgB,CAAC,YAAY,EAAE,CAAC;KACnD,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CACJ,IAAA;;;;;;;;YAAkB,EAClB,uBAAmB,EACnB,8BAA0B,CASzB;AAEH,MAAM,CACJ,IAAA;;;;;;;;;;;;;;;;;;;;;;;;YAAgB,EAChB,qBAAiB,EACjB,6BAAyB,CAuBxB;AAEH,MAAM,CACJ,IAAA;;;;;;;;YAAmB,EACnB,wBAAoB,EACpB,gCAA4B,CAS3B;AAEH,sEAAsE;AACtE,MAAM,CAAC,IAAM,iBAAiB,GAAG,cAAc,CAK7C;IACE,UAAC,KAAK,EAAE,QAAgB,IAAK,OAAA,QAAQ,EAAR,CAAQ;IACrC,UAAC,KAAK,EAAE,CAAS,IAAK,OAAA,KAAK,CAAC,cAAc,EAApB,CAAoB;IAC1C,UAAC,KAAK,EAAE,CAAS,IAAK,OAAA,KAAK,CAAC,OAAO,EAAb,CAAa;CACpC,EACD,UAAC,QAAgB,EAAE,MAAwB,EAAE,OAAgC;IAC3E,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;QAC7B,OAAO,SAAS,CAAC;KAClB;IACD,IAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IAC1C,IAAI,CAAC,WAAW,EAAE;QAChB,OAAO,SAAS,CAAC;KAClB;IACD,IAAM,WAAW,GAAG,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC;IACnE,IAAM,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,WAAW,EAApC,CAAoC,CAAC,CAAC,CAAC,CAAC,CAAC;IACpF,OAAO,MAAM,CAAC;AAChB,CAAC,EACD,UAAC,QAAgB,EAAE,MAAwB,EAAE,OAAmC;IAC9E,IAAI,MAAM,EAAE;QACV,IAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAC1C,IAAI,WAAW,EAAE;YACf,OAAO,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC;SACvD;KACF;IACD,OAAO,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC3B,CAAC,EACD,CAAC,SAAS,CAAC,CACZ,CAAC;AAEF,eAAe;IACb,gBAAgB;IAChB,mBAAmB;IACnB,iBAAiB;CAClB,CAAC","sourcesContent":["import { create } from '@src/lib/redux';\nimport { createSelector } from '@src/lib/selector';\nimport { Thread } from '@src/types';\nimport { size, last, values, keyBy } from 'lodash';\nimport { addressToEmail } from '@src/lib/address';\nimport { fnv1a32, mongoId } from '@src/lib/crypt';\nimport update from 'immutability-helper';\nimport {\n  Filter,\n  FilterSelectorType,\n  FilterActionType,\n} from '@src/types/filters';\n\nexport const filterBlockCreate = (sender: string): Filter => {\n  return {\n    id: mongoId(),\n    selectors: [{ type: FilterSelectorType.From, value: sender }],\n    actions: [{ type: FilterActionType.BlockContact }],\n  };\n};\n\nexport const {\n  type: FILTERS_LIST,\n  action: filtersList,\n  reducer: filterListReducer,\n} = create<null, Filter[]>('FILTERS_LIST', {\n  success: (state, meta, payload) => {\n    return update(state, {\n      filters: {\n        $set: keyBy(payload, 'id'),\n      },\n    });\n  },\n});\n\nexport const {\n  type: FILTER_SET,\n  action: filterSet,\n  reducer: filterSetReducer,\n} = create<Filter, Filter>('FILTER_SET', {\n  start: (state, meta) => {\n    return update(state, {\n      filters: {\n        [meta.id]: { $set: meta },\n      },\n    });\n  },\n  success: (state, meta, payload) => {\n    return update(state, {\n      filters: {\n        [payload.id]: { $set: payload },\n      },\n    });\n  },\n  failure: (state, meta, err) => {\n    return update(state, {\n      filters: {\n        $unset: [meta.id],\n      },\n    });\n  },\n});\n\nexport const {\n  type: FILTER_DELETE,\n  action: filterDelete,\n  reducer: filterDeleteReducer,\n} = create<string, null>('FILTER_DELETE', {\n  success: (state, meta, payload) => {\n    return update(state, {\n      filters: {\n        $unset: [meta],\n      },\n    });\n  },\n});\n\n// Runs selector to identify if sender from selected thread is blocked\nexport const selectBlockFilter = createSelector<\n  string|undefined,\n  string | Thread | { [key: string]: Filter } | undefined,\n  Filter|undefined\n>(\n  [\n    (state, threadId: string) => threadId,\n    (state, _: string) => state.selectedThread,\n    (state, _: string) => state.filters,\n  ],\n  (threadId: string, thread: Thread|undefined, filters: {[key: string]: Filter}) => {\n    if (!thread || !size(filters)) {\n      return undefined;\n    }\n    const lastMessage = last(thread.messages);\n    if (!lastMessage) {\n      return undefined;\n    }\n    const lowerSender = addressToEmail(lastMessage.from).toLowerCase();\n    const filter = values(filters).filter(f => f.selectors[0].value === lowerSender)[0];\n    return filter;\n  },\n  (threadId: string, thread: Thread|undefined, filters: { [key: string ]: Filter }) => {\n    if (thread) {\n      const lastMessage = last(thread.messages);\n      if (lastMessage) {\n        return addressToEmail(lastMessage.from).toLowerCase();\n      }\n    }\n    return fnv1a32(threadId);\n  },\n  ['filters'],\n);\n\nexport default [\n  filterSetReducer,\n  filterDeleteReducer,\n  filterListReducer,\n];\n"]}]}