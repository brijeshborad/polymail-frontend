{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/filters.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/filters.ts","mtime":1675280254056},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnOwppbXBvcnQgeyBBY3Rpb25TdGF0dXMgfSBmcm9tICdAc3JjL3R5cGVzJzsKaW1wb3J0IHsgZmlsdGVyc0xpc3QsIEZJTFRFUlNfTElTVCwgZmlsdGVyU2V0LCBGSUxURVJfU0VULCBmaWx0ZXJEZWxldGUsIEZJTFRFUl9ERUxFVEUsIH0gZnJvbSAnQHNyYy9kdWNrcy9maWx0ZXJzJzsKaW1wb3J0IHsgdG9hc3RTZXQgfSBmcm9tICdAc3JjL2R1Y2tzL3RvYXN0cyc7CnZhciBmaWx0ZXJTZXRFcGljID0gZnVuY3Rpb24gKGFjdGlvbiQsIHN0b3JlLCBkZXBzKSB7CiAgICByZXR1cm4gYWN0aW9uJC5vZlR5cGUoRklMVEVSX1NFVCkKICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChhY3Rpb24pIHsgcmV0dXJuIGFjdGlvbi5zdGF0dXMgPT09IEFjdGlvblN0YXR1cy5TdGFydDsgfSkKICAgICAgICAuZmxhdE1hcChmdW5jdGlvbiAoYWN0aW9uKSB7CiAgICAgICAgcmV0dXJuIGRlcHMuZmlsdGVycy5jcmVhdGUoYWN0aW9uLm1ldGEpCiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHJlc3VsdCkgeyByZXR1cm4gZmlsdGVyU2V0KGFjdGlvbi5tZXRhLCByZXN1bHQpOyB9KQogICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgcmV0dXJuIE9ic2VydmFibGUubWVyZ2UoT2JzZXJ2YWJsZS5vZihmaWx0ZXJTZXQoYWN0aW9uLm1ldGEsIGUpKSwgT2JzZXJ2YWJsZS5vZih0b2FzdFNldChuZXcgRXJyb3IoJ1dlIHdlcmUgdW5hYmxlIHRvIGJsb2NrIHRoaXMgc2VuZGVyIGF0JwogICAgICAgICAgICAgICAgKyAnIHRoaXMgdGltZS4gUGxlYXNlIHRyeSBhZ2FpbiBsYXRlciEnKSkpKTsKICAgICAgICB9KTsKICAgIH0pOwp9Owp2YXIgZmlsdGVyRGVsZXRlRXBpYyA9IGZ1bmN0aW9uIChhY3Rpb24kLCBzdG9yZSwgZGVwcykgewogICAgcmV0dXJuIGFjdGlvbiQub2ZUeXBlKEZJTFRFUl9ERUxFVEUpCiAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoYWN0aW9uKSB7IHJldHVybiBhY3Rpb24uc3RhdHVzID09PSBBY3Rpb25TdGF0dXMuU3RhcnQ7IH0pCiAgICAgICAgLmZsYXRNYXAoZnVuY3Rpb24gKGFjdGlvbikgewogICAgICAgIHJldHVybiBkZXBzLmZpbHRlcnMuZGVsZXRlKGFjdGlvbi5tZXRhKQogICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChyZXN1bHQpIHsgcmV0dXJuIGZpbHRlckRlbGV0ZShhY3Rpb24ubWV0YSwgcmVzdWx0KTsgfSkKICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIHJldHVybiBPYnNlcnZhYmxlLm1lcmdlKE9ic2VydmFibGUub2YoZmlsdGVyRGVsZXRlKGFjdGlvbi5tZXRhLCBlKSksIE9ic2VydmFibGUub2YodG9hc3RTZXQoZSkpKTsKICAgICAgICB9KTsKICAgIH0pOwp9Owp2YXIgZmlsdGVyc0xpc3RFcGljID0gZnVuY3Rpb24gKGFjdGlvbiQsIHN0b3JlLCBkZXBzKSB7CiAgICByZXR1cm4gYWN0aW9uJC5vZlR5cGUoRklMVEVSU19MSVNUKQogICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGFjdGlvbikgeyByZXR1cm4gYWN0aW9uLnN0YXR1cyA9PT0gQWN0aW9uU3RhdHVzLlN0YXJ0OyB9KQogICAgICAgIC5mbGF0TWFwKGZ1bmN0aW9uIChhY3Rpb24pIHsKICAgICAgICByZXR1cm4gZGVwcy5maWx0ZXJzLmxpc3QoKQogICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChyZXN1bHQpIHsgcmV0dXJuIGZpbHRlcnNMaXN0KGFjdGlvbi5tZXRhLCByZXN1bHQpOyB9KQogICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGUpIHsgcmV0dXJuIE9ic2VydmFibGUub2YoZmlsdGVyc0xpc3QoYWN0aW9uLm1ldGEsIGUpKTsgfSk7CiAgICB9KTsKfTsKZXhwb3J0IGRlZmF1bHQgWwogICAgZmlsdGVyc0xpc3RFcGljLAogICAgZmlsdGVyU2V0RXBpYywKICAgIGZpbHRlckRlbGV0ZUVwaWMsCl07Cg=="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/filters.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/filters.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAGlC,OAAO,EAAE,YAAY,EAAsB,MAAM,YAAY,CAAC;AAE9D,OAAO,EACL,WAAW,EAAE,YAAY,EACzB,SAAS,EAAE,UAAU,EACrB,YAAY,EAAE,aAAa,GAC5B,MAAM,oBAAoB,CAAC;AAE5B,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAE7C,IAAM,aAAa,GACf,UAAC,OAAO,EAAE,KAAK,EAAE,IAAI;IACrB,OAAA,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC;SACvB,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,MAAM,KAAK,YAAY,CAAC,KAAK,EAApC,CAAoC,CAAC;SACtD,OAAO,CAAC,UAAC,MAA8B;QACtC,OAAA,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;aAC7B,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,SAAS,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,EAA9B,CAA8B,CAAC;aAC7C,KAAK,CAAC,UAAC,CAAQ;YACd,OAAA,UAAU,CAAC,KAAK,CACd,UAAU,CAAC,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,EACxC,UAAU,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,KAAK,CAAC,wCAAwC;kBACvE,qCAAqC,CAAC,CAAC,CAAC,CAC3C;QAJD,CAIC,CACF;IARH,CAQG,CACJ;AAZH,CAYG,CAAC;AAER,IAAM,gBAAgB,GAClB,UAAC,OAAO,EAAE,KAAK,EAAE,IAAI;IACrB,OAAA,OAAO,CAAC,MAAM,CAAC,aAAa,CAAC;SAC1B,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,MAAM,KAAK,YAAY,CAAC,KAAK,EAApC,CAAoC,CAAC;SACtD,OAAO,CAAC,UAAC,MAA4B;QACpC,OAAA,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;aAC7B,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,YAAY,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,EAAjC,CAAiC,CAAC;aAChD,KAAK,CAAC,UAAC,CAAQ;YACd,OAAA,UAAU,CAAC,KAAK,CACd,UAAU,CAAC,EAAE,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,EAC3C,UAAU,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAC3B;QAHD,CAGC,CACF;IAPH,CAOG,CACJ;AAXH,CAWG,CAAC;AAER,IAAM,eAAe,GACjB,UAAC,OAAO,EAAE,KAAK,EAAE,IAAI;IACrB,OAAA,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC;SACzB,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,MAAM,KAAK,YAAY,CAAC,KAAK,EAApC,CAAoC,CAAC;SACtD,OAAO,CAAC,UAAA,MAAM;QACb,OAAA,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;aAChB,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,EAAhC,CAAgC,CAAC;aAC/C,KAAK,CAAC,UAAC,CAAQ,IAAK,OAAA,UAAU,CAAC,EAAE,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,EAA1C,CAA0C,CAAC;IAFlE,CAEkE,CACrE;AAND,CAMC,CAAC;AAEN,eAAe;IACb,eAAe;IACf,aAAa;IACb,gBAAgB;CACjB,CAAC","sourcesContent":["import { Observable } from 'rxjs';\nimport { Epic } from 'redux-observable';\n\nimport { ActionStatus, Action, StoreState } from '@src/types';\nimport { Deps } from '@src/lib/epic';\nimport {\n  filtersList, FILTERS_LIST,\n  filterSet, FILTER_SET,\n  filterDelete, FILTER_DELETE,\n} from '@src/ducks/filters';\nimport { Filter } from '@src/types/filters';\nimport { toastSet } from '@src/ducks/toasts';\n\nconst filterSetEpic: Epic<Action<Filter|Error|null, Filter|null>, StoreState, Deps>\n  = (action$, store, deps) =>\n    action$.ofType(FILTER_SET)\n      .filter(action => action.status === ActionStatus.Start)\n      .flatMap((action: Action<Filter, Filter>) =>\n        deps.filters.create(action.meta)\n          .map(result => filterSet(action.meta, result))\n          .catch((e: Error) =>\n            Observable.merge(\n              Observable.of(filterSet(action.meta, e)),\n              Observable.of(toastSet(new Error('We were unable to block this sender at'\n              + ' this time. Please try again later!'))),\n            ),\n          ),\n      );\n\nconst filterDeleteEpic: Epic<Action<string|Error|null, null>, StoreState, Deps>\n  = (action$, store, deps) =>\n    action$.ofType(FILTER_DELETE)\n      .filter(action => action.status === ActionStatus.Start)\n      .flatMap((action: Action<string, null>) =>\n        deps.filters.delete(action.meta)\n          .map(result => filterDelete(action.meta, result))\n          .catch((e: Error) =>\n            Observable.merge(\n              Observable.of(filterDelete(action.meta, e)),\n              Observable.of(toastSet(e)),\n            ),\n          ),\n      );\n\nconst filtersListEpic: Epic<Action<null, Filter[]>, StoreState, Deps>\n  = (action$, store, deps) =>\n    action$.ofType(FILTERS_LIST)\n      .filter(action => action.status === ActionStatus.Start)\n      .flatMap(action =>\n        deps.filters.list()\n          .map(result => filtersList(action.meta, result))\n          .catch((e: Error) => Observable.of(filtersList(action.meta, e))),\n    );\n\nexport default [\n  filtersListEpic,\n  filterSetEpic,\n  filterDeleteEpic,\n];\n"]}]}