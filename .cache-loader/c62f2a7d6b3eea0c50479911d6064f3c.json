{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Threads/components/ThreadList/components/InfiniteThreadList/index.tsx","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Threads/components/ThreadList/components/InfiniteThreadList/index.tsx","mtime":1675280254118},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JzsKaW1wb3J0IHsgd2l0aFJvdXRlciB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nOwppbXBvcnQgeyBzZWxlY3RlZElkc1VwZGF0ZSwgdGhyZWFkQ29tbWl0c1N1Ym1pdCwgdGhyZWFkU3dpcGVJZFNldCwgdGhyZWFkTGlzdCwgfSBmcm9tICdAc3JjL2R1Y2tzL3RocmVhZHMnOwppbXBvcnQgeyBzZWxlY3REcmFmdHMsIHNlbGVjdFNlbmRMYXRlckRyYWZ0cywgc2VsZWN0T3V0Ym94RHJhZnRzIH0gZnJvbSAnQHNyYy9kdWNrcy9kcmFmdHMnOwppbXBvcnQgeyBNYWlsYm94VHlwZSwgRGlzcGxheU1vZGUsIH0gZnJvbSAnQHNyYy90eXBlcyc7CmltcG9ydCBJbmZpbml0ZVRocmVhZExpc3QgZnJvbSAnLi9JbmZpbml0ZVRocmVhZExpc3QnOwppbXBvcnQgeyBjb21tYW5kQ29udHJvbFNob3cgfSBmcm9tICdAc3JjL2R1Y2tzL2NvbW1hbmRDb250cm9sJzsKaW1wb3J0IHsgc2VsZWN0UnNiT25ib2FyZGluZywgb25ib2FyZGluZ1BhdGNoIH0gZnJvbSAnQHNyYy9kdWNrcy9tZSc7CnZhciBub3REcmFmdHNNYWlsYm94ID0gW107CnZhciBzZWxlY3REcmFmdHNNYWlsYm94ID0gZnVuY3Rpb24gKHN0YXRlKSB7CiAgICBzd2l0Y2ggKHN0YXRlLm1haWxib3ggJiYgc3RhdGUubWFpbGJveC50eXBlKSB7CiAgICAgICAgY2FzZSBNYWlsYm94VHlwZS5EcmFmdHM6CiAgICAgICAgICAgIHJldHVybiBzZWxlY3REcmFmdHMoc3RhdGUpOwogICAgICAgIGNhc2UgTWFpbGJveFR5cGUuU2VuZExhdGVyOgogICAgICAgICAgICByZXR1cm4gc2VsZWN0U2VuZExhdGVyRHJhZnRzKHN0YXRlKTsKICAgICAgICBjYXNlIE1haWxib3hUeXBlLk91dGJveDoKICAgICAgICAgICAgcmV0dXJuIHNlbGVjdE91dGJveERyYWZ0cyhzdGF0ZSk7CiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgcmV0dXJuIG5vdERyYWZ0c01haWxib3g7CiAgICB9Cn07CnZhciBDRUxMX0hFSUdIVCA9IDkwOwp2YXIgQ09MTEFQU0VEX0NFTExfSEVJR0hUID0gODY7CnZhciBtYXBTdGF0ZVRvUHJvcHMgPSBmdW5jdGlvbiAoc3RhdGUpIHsgcmV0dXJuICh7CiAgICBzZWxlY3RlZElkczogc3RhdGUuc2VsZWN0ZWRJZHMsCiAgICBzZWxlY3RlZFRocmVhZDogc3RhdGUuc2VsZWN0ZWRUaHJlYWQgJiYgc3RhdGUuc2VsZWN0ZWRUaHJlYWQuaWQsCiAgICB0aHJlYWRzOiBzdGF0ZS5tYWlsYm94VGhyZWFkcy5kYXRhIHx8IFtdLAogICAgc2VsZWN0ZWREcmFmdDogc3RhdGUuc2VsZWN0ZWREcmFmdCwKICAgIGRyYWZ0czogc2VsZWN0RHJhZnRzTWFpbGJveChzdGF0ZSksCiAgICBzZWxlY3RlZE1haWxib3g6IHN0YXRlLm1haWxib3gsCiAgICBjb21tYW5kQ29udHJvbFR5cGU6IHN0YXRlLmNvbW1hbmRDb250cm9sVHlwZSwKICAgIGxhc3RTd2lwZUlkOiBzdGF0ZS50aHJlYWRTd2lwZUlkLAogICAgc2VsZWN0ZWRBY2NvdW50OiBzdGF0ZS5sZWZ0U2lkZWJhci5zZWxlY3RlZEFjY291bnQsCiAgICByc2JPbmJvYXJkaW5nVHlwZTogc2VsZWN0UnNiT25ib2FyZGluZyhzdGF0ZSksCiAgICBjZWxsSGVpZ2h0OiBzdGF0ZS5wcmVmZXJlbmNlcy5kaXNwbGF5TW9kZSA9PT0gRGlzcGxheU1vZGUuQ29tcGFjdAogICAgICAgID8gQ09MTEFQU0VEX0NFTExfSEVJR0hUIDogQ0VMTF9IRUlHSFQsCn0pOyB9Owp2YXIgbWFwRGlzcGF0Y2hUb1Byb3BzID0gZnVuY3Rpb24gKGRpc3BhdGNoKSB7IHJldHVybiAoewogICAgdXBkYXRlVGhyZWFkOiBmdW5jdGlvbiAoY29tbWl0TWV0YSkgeyByZXR1cm4gZGlzcGF0Y2godGhyZWFkQ29tbWl0c1N1Ym1pdChjb21taXRNZXRhKSk7IH0sCiAgICB1cGRhdGVTZWxlY3Rpb25zOiBmdW5jdGlvbiAoc2VsZWN0aW9ucykgeyByZXR1cm4gZGlzcGF0Y2goc2VsZWN0ZWRJZHNVcGRhdGUoc2VsZWN0aW9ucykpOyB9LAogICAgc2hvd0NvbW1hbmRDb250cm9sOiBmdW5jdGlvbiAodHlwZSkgeyByZXR1cm4gZGlzcGF0Y2goY29tbWFuZENvbnRyb2xTaG93KHR5cGUpKTsgfSwKICAgIHNldFN3aXBlSWQ6IGZ1bmN0aW9uIChpZCkgeyByZXR1cm4gZGlzcGF0Y2godGhyZWFkU3dpcGVJZFNldChpZCkpOyB9LAogICAgcmVmcmVzaFRocmVhZHM6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRpc3BhdGNoKHRocmVhZExpc3QoZmFsc2UpKTsgfSwKICAgIHVwZGF0ZU9uYm9hcmRpbmc6IGZ1bmN0aW9uIChtZXRhKSB7IHJldHVybiBkaXNwYXRjaChvbmJvYXJkaW5nUGF0Y2gobWV0YSkpOyB9LAp9KTsgfTsKZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcykod2l0aFJvdXRlcihJbmZpbml0ZVRocmVhZExpc3QpKTsK"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Threads/components/ThreadList/components/InfiniteThreadList/index.tsx","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Threads/components/ThreadList/components/InfiniteThreadList/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import { connect, Dispatch } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport {\n  selectedIdsUpdate,\n  threadCommitsSubmit,\n  threadSwipeIdSet,\n  threadList,\n} from '@src/ducks/threads';\nimport { selectDrafts, selectSendLaterDrafts, selectOutboxDrafts } from '@src/ducks/drafts';\nimport {\n  StoreState,\n  MailboxType,\n  Draft,\n  ThreadCommitMeta,\n  DisplayMode,\n} from '@src/types';\nimport InfiniteThreadList, { Props, DispatchProps, StateProps } from './InfiniteThreadList';\nimport { commandControlShow } from '@src/ducks/commandControl';\nimport { selectRsbOnboarding, onboardingPatch } from '@src/ducks/me';\n\nconst notDraftsMailbox: Draft[] = [];\nconst selectDraftsMailbox = (state: StoreState) => {\n  switch (state.mailbox && state.mailbox.type) {\n    case MailboxType.Drafts:\n      return selectDrafts(state);\n    case MailboxType.SendLater:\n      return selectSendLaterDrafts(state);\n    case MailboxType.Outbox:\n      return selectOutboxDrafts(state);\n    default:\n      return notDraftsMailbox;\n  }\n};\n\nconst CELL_HEIGHT = 90;\nconst COLLAPSED_CELL_HEIGHT = 86;\n\nconst mapStateToProps = (state: StoreState): StateProps => ({\n  selectedIds: state.selectedIds,\n  selectedThread: state.selectedThread && state.selectedThread.id,\n  threads: state.mailboxThreads.data || [],\n  selectedDraft: state.selectedDraft,\n  drafts: selectDraftsMailbox(state),\n  selectedMailbox: state.mailbox,\n  commandControlType: state.commandControlType,\n  lastSwipeId: state.threadSwipeId,\n  selectedAccount: state.leftSidebar.selectedAccount,\n  rsbOnboardingType: selectRsbOnboarding(state),\n  cellHeight: state.preferences.displayMode === DisplayMode.Compact\n    ? COLLAPSED_CELL_HEIGHT : CELL_HEIGHT,\n} as any);\n\nconst mapDispatchToProps = (dispatch: Dispatch<StoreState>): DispatchProps => ({\n  updateThread: (commitMeta: ThreadCommitMeta) => dispatch(threadCommitsSubmit(commitMeta)),\n  updateSelections: selections => dispatch(selectedIdsUpdate(selections)),\n  showCommandControl: type => dispatch(commandControlShow(type)),\n  setSwipeId: id => dispatch(threadSwipeIdSet(id)),\n  refreshThreads: () => dispatch(threadList(false)),\n  updateOnboarding: meta => dispatch(onboardingPatch(meta)),\n});\n\nexport default connect<StateProps, DispatchProps, Props>(\n  mapStateToProps, mapDispatchToProps)(withRouter(InfiniteThreadList),\n);\n"]}]}