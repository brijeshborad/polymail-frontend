{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Threads/components/ThreadList/components/InfiniteThreadList/ProviderSearchCell/ProviderSearchCell.tsx","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Threads/components/ThreadList/components/InfiniteThreadList/ProviderSearchCell/ProviderSearchCell.tsx","mtime":1675280254117},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JzsKaW1wb3J0ICcuL1Byb3ZpZGVyU2VhcmNoQ2VsbC5zY3NzJzsKdmFyIFByb3ZpZGVyU2VhcmNoQ2VsbCA9IGZ1bmN0aW9uIChwcm9wcykgewogICAgdmFyIHNlbGVjdGVkTWFpbGJveCA9IHByb3BzLnNlbGVjdGVkTWFpbGJveDsKICAgIHZhciBkZXNjcmlwdGlvblN0cmluZyA9ICdTaG93aW5nIHJlc3VsdHMgc3RvcmVkIG9uIHlvdXIgZGV2aWNlJzsKICAgIC8vIFVwZGF0ZSBzZWFyY2guCiAgICB2YXIgZXhwYW5kU2VhcmNoID0gZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBxdWVyeSA9IHNlbGVjdGVkTWFpbGJveC5xdWVyeTsKICAgICAgICBwcm9wcy5zZWFyY2hQcm92aWRlcih7IHF1ZXJ5OiBxdWVyeSB8fCAnJywgcHJvdmlkZXI6IHRydWUgfSk7CiAgICB9OwogICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KCJkaXYiLCB7IGNsYXNzTmFtZTogInByb3ZpZGVyLXNlYXJjaC1jZWxsIiB9LAogICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoImRpdiIsIHsgY2xhc3NOYW1lOiAiZGVzY3JpcHRpb24iIH0sIGRlc2NyaXB0aW9uU3RyaW5nKSwKICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCJidXR0b24iLCB7IGNsYXNzTmFtZTogImV4cGFuZC1idXR0b24iLCBvbkNsaWNrOiBleHBhbmRTZWFyY2ggfSwgIlNlYXJjaCBmdXJ0aGVyIGJhY2siKSkpOwp9OwpleHBvcnQgZGVmYXVsdCBQcm92aWRlclNlYXJjaENlbGw7Cg=="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Threads/components/ThreadList/components/InfiniteThreadList/ProviderSearchCell/ProviderSearchCell.tsx","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Threads/components/ThreadList/components/InfiniteThreadList/ProviderSearchCell/ProviderSearchCell.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAG1B,OAAO,2BAA2B,CAAC;AAWnC,IAAM,kBAAkB,GAAG,UAAC,KAA4B;IAC9C,IAAA,uCAAe,CAAW;IAClC,IAAM,iBAAiB,GAAG,uCAAuC,CAAC;IAElE,iBAAiB;IACjB,IAAM,YAAY,GAAG;QACnB,IAAM,KAAK,GAAG,eAAe,CAAC,KAAK,CAAC;QACpC,KAAK,CAAC,cAAc,CAAC,EAAE,KAAK,EAAE,KAAK,IAAI,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;IAC/D,CAAC,CAAC;IAEF,OAAO,CACL,6BAAK,SAAS,EAAC,sBAAsB;QACnC,6BAAK,SAAS,EAAC,aAAa,IACzB,iBAAiB,CACd;QACN,gCACE,SAAS,EAAC,eAAe,EACzB,OAAO,EAAE,YAAY,0BAGd,CACL,CACP,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,kBAAkB,CAAC","sourcesContent":["import React from 'react';\nimport { Mailbox } from '@src/types';\nimport { ThreadSearchMeta } from '@src/ducks/threads';\nimport './ProviderSearchCell.scss';\n\nexport interface Props {\n  selectedMailbox: Mailbox;\n  query?: string;\n}\n\nexport interface DispatchProps {\n  searchProvider: (meta: ThreadSearchMeta) => void;\n}\n\nconst ProviderSearchCell = (props: Props & DispatchProps) => {\n  const { selectedMailbox } = props;\n  const descriptionString = 'Showing results stored on your device';\n\n  // Update search.\n  const expandSearch = () => {\n    const query = selectedMailbox.query;\n    props.searchProvider({ query: query || '', provider: true });\n  };\n\n  return (\n    <div className=\"provider-search-cell\">\n      <div className=\"description\">\n        {descriptionString}\n      </div>\n      <button\n        className=\"expand-button\"\n        onClick={expandSearch}\n      >\n        Search further back\n      </button>\n    </div>\n  );\n};\n\nexport default ProviderSearchCell;\n"]}]}