{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/notifications.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/notifications.ts","mtime":1675280254050},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkgewogICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHsKICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHsKICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTsKICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKQogICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07CiAgICAgICAgfQogICAgICAgIHJldHVybiB0OwogICAgfTsKICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9Owp2YXIgX2E7CmltcG9ydCB7IGNyZWF0ZSB9IGZyb20gJ0BzcmMvbGliL3JlZHV4JzsKaW1wb3J0IHVwZGF0ZSBmcm9tICdpbW11dGFiaWxpdHktaGVscGVyJzsKaW1wb3J0IHsgRGV2aWNlTm90aWZpY2F0aW9uc01haWwsIERldmljZU5vdGlmaWNhdGlvbnNUcmFja2luZywgfSBmcm9tICdAc3JjL3R5cGVzJzsKaW1wb3J0IGxvZ29Ob3RpZmljYXRpb24gZnJvbSAnQHNyYy9jb21wb25lbnRzL0ljb25zL0xvZ29Ob3RpZmljYXRpb25AM3gucG5nJzsKaW1wb3J0IHsgaXNFbGVjdHJvbiB9IGZyb20gJ0BzcmMvbGliL2VsZWN0cm9uJzsKaW1wb3J0IHsgY3JlYXRlU2VsZWN0b3IgfSBmcm9tICdAc3JjL2xpYi9zZWxlY3Rvcic7CmltcG9ydCB7IHNlbGVjdEFjY291bnRzLCBzZWxlY3RBY2NvdW50IH0gZnJvbSAnQHNyYy9kdWNrcy9hY2NvdW50cyc7CmV4cG9ydCB2YXIgTk9USUZJQ0FUSU9OX1NIT1cgPSAoX2EgPSBjcmVhdGUoJ05PVElGSUNBVElPTl9TSE9XJywgKHsKICAgIHN0YXJ0OiBmdW5jdGlvbiAoc3RhdGUsIG1ldGEpIHsKICAgICAgICB2YXIgbm90aWZpY2F0aW9uT3B0aW9ucyA9IHsKICAgICAgICAgICAgYm9keTogbWV0YS5kYXRhLmJvZHksCiAgICAgICAgICAgIC8vIE1ha2UgYWxsIG5vdGlmaWNhdGlvbnMgc2lsZW50IGZvciBub3cKICAgICAgICAgICAgLy8gc2lsZW50OiAhbWV0YS5kYXRhLnNvdW5kLAogICAgICAgICAgICBzaWxlbnQ6IHRydWUsCiAgICAgICAgICAgIGljb246IGlzRWxlY3Ryb24gPyB1bmRlZmluZWQgOiBsb2dvTm90aWZpY2F0aW9uLAogICAgICAgIH07CiAgICAgICAgdmFyIG9uQ2xpY2sgPSBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgIHdpbmRvdy5mb2N1cygpOwogICAgICAgICAgICBtZXRhLmNhbGxiYWNrKCk7CiAgICAgICAgICAgIC8vIG9wZW4gbWluaW1pemVkIHdpbmRvdyBvbiBlbGVjdHJvbgogICAgICAgICAgICBpZiAod2luZG93LlBNRWxlY3Ryb25CcmlkZ2UgJiYgd2luZG93LlBNRWxlY3Ryb25CcmlkZ2UucmVzdG9yZVdpbmRvdykgewogICAgICAgICAgICAgICAgd2luZG93LlBNRWxlY3Ryb25CcmlkZ2UucmVzdG9yZVdpbmRvdygpOwogICAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICAvLyBIYW5kbGVzIGRldmljZSBzcGVjaWZpYyBub3RpZmljYXRpb24gc2V0dGluZ3MKICAgICAgICBpZiAobWV0YS5kYXRhLmFjY291bnQpIHsKICAgICAgICAgICAgdmFyIGFjY291bnQgPSBzZWxlY3RBY2NvdW50KHN0YXRlLCBtZXRhLmRhdGEuYWNjb3VudCk7CiAgICAgICAgICAgIGlmIChhY2NvdW50KSB7CiAgICAgICAgICAgICAgICBzd2l0Y2ggKG1ldGEuZGF0YS50eXBlKSB7CiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbWFpbCc6CiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoYWNjb3VudC5ub3RpZmljYXRpb25zLm1haWwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgRGV2aWNlTm90aWZpY2F0aW9uc01haWwuTmV3OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBEZXZpY2VOb3RpZmljYXRpb25zTWFpbC5Ob25lOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdGF0ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgY2FzZSAndHJhY2snOgogICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGFjY291bnQubm90aWZpY2F0aW9ucy50cmFja2luZykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBEZXZpY2VOb3RpZmljYXRpb25zVHJhY2tpbmcuQWxsOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBEZXZpY2VOb3RpZmljYXRpb25zVHJhY2tpbmcuRmlyc3Q6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtZXRhLmRhdGEuZmlyc3QpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0YXRlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgRGV2aWNlTm90aWZpY2F0aW9uc1RyYWNraW5nLk5vbmU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0YXRlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAoISgnTm90aWZpY2F0aW9uJyBpbiB3aW5kb3cpKSB7CiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25zb2xlCiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdUaGlzIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBkZXNrdG9wIG5vdGlmaWNhdGlvbicpOwogICAgICAgIH0KICAgICAgICBlbHNlIGlmIChOb3RpZmljYXRpb24ucGVybWlzc2lvbiA9PT0gJ2dyYW50ZWQnKSB7CiAgICAgICAgICAgIG5ldyBOb3RpZmljYXRpb24obWV0YS5kYXRhLnRpdGxlLCBub3RpZmljYXRpb25PcHRpb25zKQogICAgICAgICAgICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25DbGljayk7CiAgICAgICAgICAgIC8vIFNhdmUgcGVybWlzc2lvbnMgaW50byBsb2NhbCBzdG9yYWdlIGlmIG5vdCBzYXZlZCB5ZXQKICAgICAgICAgICAgaWYgKCFzdGF0ZS5wZXJtaXNzaW9ucy5ub3RpZmljYXRpb25zKSB7CiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncGVybWlzc2lvbnMnLCBKU09OLnN0cmluZ2lmeShfX2Fzc2lnbihfX2Fzc2lnbih7fSwgc3RhdGUucGVybWlzc2lvbnMpLCB7IG5vdGlmaWNhdGlvbjogdHJ1ZSB9KSkpOwogICAgICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICAgICAgICAgIHBlcm1pc3Npb25zOiB7ICRzZXQ6IF9fYXNzaWduKF9fYXNzaWduKHt9LCBzdGF0ZS5wZXJtaXNzaW9ucyksIHsgbm90aWZpY2F0aW9uczogdHJ1ZSB9KSB9LAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHN0YXRlOwogICAgfSwKfSkpLCBfYS50eXBlKSwgbm90aWZpY2F0aW9uU2hvdyA9IF9hLmFjdGlvbiwgbm90aWZpY2F0aW9uU2hvd1JlZHVjZXIgPSBfYS5yZWR1Y2VyOwpleHBvcnQgdmFyIHNlbGVjdEFjY291bnROb3RpZmljYXRpb25TZXR0aW5ncyA9IGNyZWF0ZVNlbGVjdG9yKFsKICAgIGZ1bmN0aW9uIChzdGF0ZSkgeyByZXR1cm4gc2VsZWN0QWNjb3VudHMoc3RhdGUpOyB9LApdLCBmdW5jdGlvbiAoYWNjb3VudHMpIHsKICAgIHZhciBub3RpZmljYXRpb25TZXR0aW5ncyA9IHt9OwogICAgYWNjb3VudHMuZm9yRWFjaChmdW5jdGlvbiAoYSkgewogICAgICAgIG5vdGlmaWNhdGlvblNldHRpbmdzW2EuaWRdID0gYS5ub3RpZmljYXRpb25zOwogICAgfSk7CiAgICByZXR1cm4gbm90aWZpY2F0aW9uU2V0dGluZ3M7Cn0sIHVuZGVmaW5lZCwgWydhY2NvdW50cyddKTsKZXhwb3J0IGRlZmF1bHQgWwogICAgbm90aWZpY2F0aW9uU2hvd1JlZHVjZXIsCl07Cg=="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/notifications.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/notifications.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;AACxC,OAAO,MAAM,MAAM,qBAAqB,CAAC;AACzC,OAAO,EAEL,uBAAuB,EACvB,2BAA2B,GAG5B,MAAM,YAAY,CAAC;AAEpB,OAAO,gBAAgB,MAAM,+CAA+C,CAAC;AAC7E,OAAO,EAAE,UAAU,EAAE,MAAM,mBAAmB,CAAC;AAC/C,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AACnD,OAAO,EAAE,cAAc,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAC;AAOpE,MAAM,CACJ,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;aAAuB,EACvB,4BAAwB,EACxB,oCAAgC,CAiF9B;AAEJ,MAAM,CAAC,IAAM,iCAAiC,GAAG,cAAc,CAG7D;IACE,UAAA,KAAK,IAAI,OAAA,cAAc,CAAC,KAAK,CAAC,EAArB,CAAqB;CAC/B,EACD,UAAC,QAAmB;IAClB,IAAM,oBAAoB,GAAG,EAAE,CAAC;IAChC,QAAQ,CAAC,OAAO,CAAC,UAAC,CAAC;QACjB,oBAAoB,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,aAAa,CAAC;IAC/C,CAAC,CAAC,CAAC;IAEH,OAAO,oBAAoB,CAAC;AAC9B,CAAC,EACD,SAAS,EACT,CAAC,UAAU,CAAC,CACb,CAAC;AAEF,eAAe;IACb,uBAAuB;CACxB,CAAC","sourcesContent":["import { create } from '@src/lib/redux';\nimport update from 'immutability-helper';\nimport {\n  RealtimeNotification,\n  DeviceNotificationsMail,\n  DeviceNotificationsTracking,\n  DeviceTypeNotifications,\n  Account,\n} from '@src/types';\n\nimport logoNotification from '@src/components/Icons/LogoNotification@3x.png';\nimport { isElectron } from '@src/lib/electron';\nimport { createSelector } from '@src/lib/selector';\nimport { selectAccounts, selectAccount } from '@src/ducks/accounts';\n\nexport interface NotificationShowMeta {\n  data: RealtimeNotification;\n  callback: () => void;\n}\n\nexport const {\n  type: NOTIFICATION_SHOW,\n  action: notificationShow,\n  reducer: notificationShowReducer,\n} = create<NotificationShowMeta, null>('NOTIFICATION_SHOW', ({\n  start: (state, meta) => {\n    const notificationOptions = {\n      body: meta.data.body,\n      // Make all notifications silent for now\n      // silent: !meta.data.sound,\n      silent: true,\n      icon: isElectron ? undefined : logoNotification,\n    };\n    const onClick = (e: Event) => {\n      e.preventDefault();\n      window.focus();\n      meta.callback();\n\n      // open minimized window on electron\n      if (window.PMElectronBridge && window.PMElectronBridge.restoreWindow) {\n        window.PMElectronBridge.restoreWindow();\n      }\n    };\n\n    // Handles device specific notification settings\n    if (meta.data.account) {\n      const account = selectAccount(state, meta.data.account);\n      if (account) {\n        switch (meta.data.type) {\n          case 'mail':\n            switch (account.notifications.mail) {\n              case DeviceNotificationsMail.New:\n                break;\n              case DeviceNotificationsMail.None:\n                return state;\n              default:\n                break;\n            }\n            break;\n          case 'track':\n            switch (account.notifications.tracking) {\n              case DeviceNotificationsTracking.All:\n                break;\n              case DeviceNotificationsTracking.First:\n                if (!meta.data.first) {\n                  return state;\n                }\n                break;\n              case DeviceNotificationsTracking.None:\n                return state;\n              default:\n                break;\n            }\n            break;\n          default:\n            break;\n        }\n      }\n    }\n\n    if (!('Notification' in window)) {\n      // tslint:disable-next-line:no-console\n      console.log('This browser does not support desktop notification');\n    } else if ((Notification as any).permission === 'granted') {\n      new Notification(meta.data.title, notificationOptions)\n        .addEventListener('click', onClick);\n\n      // Save permissions into local storage if not saved yet\n      if (!state.permissions.notifications) {\n        localStorage.setItem('permissions', JSON.stringify({\n          ...state.permissions,\n          notification: true,\n        }));\n\n        return update(state, {\n          permissions: { $set: {\n            ...state.permissions,\n            notifications: true,\n          } },\n        });\n      }\n    }\n    return state;\n  },\n}));\n\nexport const selectAccountNotificationSettings = createSelector<\n  undefined, Account[], { [id: string]: DeviceTypeNotifications }\n>(\n  [\n    state => selectAccounts(state),\n  ],\n  (accounts: Account[]) => {\n    const notificationSettings = {};\n    accounts.forEach((a) => {\n      notificationSettings[a.id] = a.notifications;\n    });\n\n    return notificationSettings;\n  },\n  undefined,\n  ['accounts'],\n);\n\nexport default [\n  notificationShowReducer,\n];\n"]}]}