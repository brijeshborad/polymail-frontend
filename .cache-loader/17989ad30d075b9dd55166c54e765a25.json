{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/components/Cells/ActivityCell/index.tsx","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/components/Cells/ActivityCell/index.tsx","mtime":1675280253990},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IEFjdGl2aXR5Q2VsbCBmcm9tICcuL0FjdGl2aXR5Q2VsbCc7CmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7CmltcG9ydCB7IERpc3BsYXlNb2RlIH0gZnJvbSAnQHNyYy90eXBlcyc7CmltcG9ydCB7IHNlbGVjdENvbnRhY3QsIGNvbnRhY3RHZXQgfSBmcm9tICdAc3JjL2R1Y2tzL2NvbnRhY3RzJzsKaW1wb3J0IHsgc2VsZWN0QWN0aXZpdHlUaHJlYWQgfSBmcm9tICdAc3JjL2R1Y2tzL3RocmVhZHMnOwppbXBvcnQgeyBhY3Rpdml0eVNlbGVjdCB9IGZyb20gJ0BzcmMvZHVja3MvYWN0aXZpdHlGZWVkJzsKaW1wb3J0IHsgd2l0aFJvdXRlciB9IGZyb20gJ3JlYWN0LXJvdXRlcic7CnZhciBtYXBTdGF0ZVRvUHJvcHMgPSBmdW5jdGlvbiAoc3RhdGUsIG93blByb3BzKSB7CiAgICByZXR1cm4gewogICAgICAgIGNvbnRhY3Q6IHNlbGVjdENvbnRhY3Qoc3RhdGUsIG93blByb3BzLmFjdGl2aXR5LnJlY2lwaWVudCksCiAgICAgICAgdGhyZWFkOiBvd25Qcm9wcy5hY3Rpdml0eS50aHJlYWQgJiYgc2VsZWN0QWN0aXZpdHlUaHJlYWQoc3RhdGUsIG93blByb3BzLmFjdGl2aXR5LnRocmVhZCksCiAgICAgICAgc2VsZWN0ZWRBY3Rpdml0eTogc3RhdGUuc2VsZWN0ZWRBY3Rpdml0eSwKICAgICAgICBzZWxlY3RlZE1haWxib3g6IHN0YXRlLm1haWxib3gsCiAgICAgICAgc2VsZWN0ZWRBY2NvdW50OiBzdGF0ZS5sZWZ0U2lkZWJhci5zZWxlY3RlZEFjY291bnQsCiAgICAgICAgY29tcGFjdDogc3RhdGUucHJlZmVyZW5jZXMgJiYgc3RhdGUucHJlZmVyZW5jZXMuZGlzcGxheU1vZGUgPT09IERpc3BsYXlNb2RlLkNvbXBhY3QsCiAgICB9Owp9Owp2YXIgbWFwRGlzcGF0Y2hUb1Byb3BzID0gZnVuY3Rpb24gKGRpc3BhdGNoKSB7IHJldHVybiAoewogICAgc2VsZWN0QWN0aXZpdHk6IGZ1bmN0aW9uIChhY3Rpdml0eSkgeyByZXR1cm4gZGlzcGF0Y2goYWN0aXZpdHlTZWxlY3QoYWN0aXZpdHkpKTsgfSwKICAgIGdldENvbnRhY3Q6IGZ1bmN0aW9uIChhZGRyZXNzKSB7IHJldHVybiBkaXNwYXRjaChjb250YWN0R2V0KGFkZHJlc3MpKTsgfSwKfSk7IH07CmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMpKHdpdGhSb3V0ZXIoQWN0aXZpdHlDZWxsKSk7Cg=="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/components/Cells/ActivityCell/index.tsx","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/components/Cells/ActivityCell/index.tsx"],"names":[],"mappings":"AAAA,OAAO,YAAsC,MAAM,gBAAgB,CAAC;AACpE,OAAO,EAAE,OAAO,EAAY,MAAM,aAAa,CAAC;AAChD,OAAO,EAAwB,WAAW,EAAE,MAAM,YAAY,CAAC;AAC/D,OAAO,EAAE,aAAa,EAAE,UAAU,EAAE,MAAM,qBAAqB,CAAC;AAChE,OAAO,EAAE,oBAAoB,EAAE,MAAM,oBAAoB,CAAC;AAC1D,OAAO,EAAE,cAAc,EAAE,MAAM,yBAAyB,CAAC;AACzD,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAE1C,IAAM,eAAe,GAAG,UAAC,KAAiB,EAAE,QAAe;IACzD,OAAO;QACL,OAAO,EAAE,aAAa,CAAC,KAAK,EAAE,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC;QAC1D,MAAM,EAAE,QAAQ,CAAC,QAAQ,CAAC,MAAM,IAAI,oBAAoB,CAAC,KAAK,EAAE,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC;QACzF,gBAAgB,EAAE,KAAK,CAAC,gBAAgB;QACxC,eAAe,EAAE,KAAK,CAAC,OAAO;QAC9B,eAAe,EAAE,KAAK,CAAC,WAAW,CAAC,eAAe;QAClD,OAAO,EAAE,KAAK,CAAC,WAAW,IAAI,KAAK,CAAC,WAAW,CAAC,WAAW,KAAK,WAAW,CAAC,OAAO;KACpF,CAAC;AACJ,CAAC,CAAC;AAEF,IAAM,kBAAkB,GAAG,UAAC,QAA8B,IAAoB,OAAA,CAAC;IAC7E,cAAc,EAAE,UAAC,QAAkB,IAAK,OAAA,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,EAAlC,CAAkC;IAC1E,UAAU,EAAE,UAAC,OAAe,IAAK,OAAA,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,EAA7B,CAA6B;CAC/D,CAAC,EAH4E,CAG5E,CAAC;AAEH,eAAe,OAAO,CAAC,eAAe,EAAE,kBAAkB,CAAC,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC","sourcesContent":["import ActivityCell, { Props, DispatchProps } from './ActivityCell';\nimport { connect, Dispatch } from 'react-redux';\nimport { StoreState, Activity, DisplayMode } from '@src/types';\nimport { selectContact, contactGet } from '@src/ducks/contacts';\nimport { selectActivityThread } from '@src/ducks/threads';\nimport { activitySelect } from '@src/ducks/activityFeed';\nimport { withRouter } from 'react-router';\n\nconst mapStateToProps = (state: StoreState, ownProps: Props): any => {\n  return {\n    contact: selectContact(state, ownProps.activity.recipient),\n    thread: ownProps.activity.thread && selectActivityThread(state, ownProps.activity.thread),\n    selectedActivity: state.selectedActivity,\n    selectedMailbox: state.mailbox,\n    selectedAccount: state.leftSidebar.selectedAccount,\n    compact: state.preferences && state.preferences.displayMode === DisplayMode.Compact,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<StoreState>): DispatchProps => ({\n  selectActivity: (activity: Activity) => dispatch(activitySelect(activity)),\n  getContact: (address: string) => dispatch(contactGet(address)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(ActivityCell));\n"]}]}