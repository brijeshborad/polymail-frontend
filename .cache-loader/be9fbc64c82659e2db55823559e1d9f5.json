{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/calendarEvents.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/calendarEvents.ts","mtime":1675280254054},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnOwppbXBvcnQgQ2FjaGUsIHsgU3RvcmVzIH0gZnJvbSAnQHNyYy9saWIvZGInOwppbXBvcnQgeyBBY3Rpb25TdGF0dXMgfSBmcm9tICdAc3JjL3R5cGVzJzsKaW1wb3J0IHsgQ0FMRU5EQVJfTElTVCwgY2FsZW5kYXJMaXN0LCBDQUxFTkRBUl9FVkVOVF9HRVQsIGNhbGVuZGFyRXZlbnRHZXQsIENBTEVOREFSX0VWRU5UX1JFU1BPTkQsIENBTEVOREFSX0VWRU5UX0xJU1QsIGNhbGVuZGFyRXZlbnRMaXN0LCB9IGZyb20gJ0BzcmMvZHVja3MvY2FsZW5kYXJzJzsKaW1wb3J0IHsgY29tcHV0ZWRDYWxlbmRhckV2ZW50IH0gZnJvbSAnQHNyYy9saWIvZXZlbnQnOwppbXBvcnQgeyB0b2FzdFNldCB9IGZyb20gJ0BzcmMvZHVja3MvdG9hc3RzJzsKdmFyIGxpc3RDYWxlbmRhciA9IGZ1bmN0aW9uIChhY3Rpb24kLCBzdG9yZSwgZGVwcykgewogICAgcmV0dXJuIGFjdGlvbiQKICAgICAgICAub2ZUeXBlKENBTEVOREFSX0xJU1QpCiAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoYWN0aW9uKSB7IHJldHVybiBhY3Rpb24uc3RhdHVzID09PSBBY3Rpb25TdGF0dXMuU3RhcnQ7IH0pCiAgICAgICAgLmZsYXRNYXAoZnVuY3Rpb24gKGFjdGlvbikgewogICAgICAgIHJldHVybiBDYWNoZS5saXN0KFN0b3Jlcy5DYWxlbmRhcnMsIGZ1bmN0aW9uIChjYWxlbmRhcikgeyByZXR1cm4gKCEhYWN0aW9uLm1ldGEuYWNjb3VudCA/IGNhbGVuZGFyLmFjY291bnQgPT09IGFjdGlvbi5tZXRhLmFjY291bnQgOiB0cnVlKTsgfSkKICAgICAgICAgICAgLmZsYXRNYXAoZnVuY3Rpb24gKGNhbGVuZGFycykgewogICAgICAgICAgICB2YXIgYWN0aW9ucyA9IFsKICAgICAgICAgICAgICAgIE9ic2VydmFibGUub2YoY2FsZW5kYXJMaXN0KGFjdGlvbi5tZXRhLCBjYWxlbmRhcnMpKSwKICAgICAgICAgICAgXTsKICAgICAgICAgICAgLy8gUmV0dXJuIGNhbGVuZGFyIGV2ZW50cwogICAgICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS5jb25jYXQuYXBwbHkoT2JzZXJ2YWJsZSwgYWN0aW9ucyk7CiAgICAgICAgfSkKICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlKSB7IHJldHVybiBPYnNlcnZhYmxlLm9mKGNhbGVuZGFyTGlzdChhY3Rpb24ubWV0YSwgZSkpOyB9KTsKICAgIH0pOwp9Owp2YXIgbGlzdENhbGVuZGFyRXZlbnRzID0gZnVuY3Rpb24gKGFjdGlvbiQsIHN0b3JlKSB7CiAgICByZXR1cm4gYWN0aW9uJAogICAgICAgIC5vZlR5cGUoQ0FMRU5EQVJfRVZFTlRfTElTVCkKICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChhY3Rpb24pIHsgcmV0dXJuIGFjdGlvbi5zdGF0dXMgPT09IEFjdGlvblN0YXR1cy5TdGFydDsgfSkKICAgICAgICAuZmxhdE1hcChmdW5jdGlvbiAoYWN0aW9uKSB7CiAgICAgICAgcmV0dXJuIENhY2hlLmxpc3RJbmRleChTdG9yZXMuQ2FsZW5kYXJFdmVudHMsICdzdGFydHRpbWUnLCBJREJLZXlSYW5nZS5ib3VuZChhY3Rpb24ubWV0YS5zdGFydCwgYWN0aW9uLm1ldGEuZW5kKSwgZmFsc2UsIDEwMDAsIHVuZGVmaW5lZCkKICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoY2FsZW5kYXJFdmVudHMpIHsKICAgICAgICAgICAgcmV0dXJuIGNhbGVuZGFyRXZlbnRMaXN0KGFjdGlvbi5tZXRhLCBjYWxlbmRhckV2ZW50cy5tYXAoZnVuY3Rpb24gKHApIHsKICAgICAgICAgICAgICAgIHJldHVybiBjb21wdXRlZENhbGVuZGFyRXZlbnQocCwgc3RvcmUuZ2V0U3RhdGUoKS5jYWxlbmRhcnMsIGNhbGVuZGFyRXZlbnRzKTsKICAgICAgICAgICAgfSkpOwogICAgICAgIH0pOwogICAgfSk7Cn07CnZhciBnZXRDYWxlbmRhckV2ZW50ID0gZnVuY3Rpb24gKGFjdGlvbiQsIHN0b3JlLCBkZXBzKSB7CiAgICByZXR1cm4gYWN0aW9uJC5vZlR5cGUoQ0FMRU5EQVJfRVZFTlRfR0VUKQogICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGFjdGlvbikgeyByZXR1cm4gYWN0aW9uLnN0YXR1cyA9PT0gQWN0aW9uU3RhdHVzLlN0YXJ0OyB9KQogICAgICAgIC5mbGF0TWFwKGZ1bmN0aW9uIChhY3Rpb24pIHsKICAgICAgICByZXR1cm4gZGVwcy5jYWxlbmRhckV2ZW50cy5nZXQoYWN0aW9uLm1ldGEpCiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGV2ZW50KSB7IHJldHVybiBjYWxlbmRhckV2ZW50R2V0KGFjdGlvbi5tZXRhLCBldmVudCk7IH0pCiAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHsgcmV0dXJuIE9ic2VydmFibGUub2YoY2FsZW5kYXJFdmVudEdldChhY3Rpb24ubWV0YSwgZXJyb3IpKTsgfSk7CiAgICB9KTsKfTsKdmFyIHJlc3BvbmRDYWxlbmRhckV2ZW50ID0gZnVuY3Rpb24gKGFjdGlvbiQsIHN0b3JlLCBkZXBzKSB7CiAgICByZXR1cm4gYWN0aW9uJC5vZlR5cGUoQ0FMRU5EQVJfRVZFTlRfUkVTUE9ORCkKICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChhY3Rpb24pIHsgcmV0dXJuIGFjdGlvbi5zdGF0dXMgPT09IEFjdGlvblN0YXR1cy5TdGFydDsgfSkKICAgICAgICAuZmxhdE1hcChmdW5jdGlvbiAoYWN0aW9uKSB7CiAgICAgICAgcmV0dXJuIGRlcHMuY2FsZW5kYXJFdmVudHMucmVzcG9uZChhY3Rpb24ubWV0YS5pZCwgYWN0aW9uLm1ldGEuc3RhdHVzKQogICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChldmVudCkgeyByZXR1cm4gY2FsZW5kYXJFdmVudEdldChhY3Rpb24ubWV0YS5pZCwgZXZlbnQgfHwgdW5kZWZpbmVkKTsgfSkKICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikgeyByZXR1cm4gT2JzZXJ2YWJsZS5vZih0b2FzdFNldChlcnJvcikpOyB9KTsKICAgIH0pOwp9OwpleHBvcnQgZGVmYXVsdCBbCiAgICBsaXN0Q2FsZW5kYXIsCiAgICBnZXRDYWxlbmRhckV2ZW50LAogICAgcmVzcG9uZENhbGVuZGFyRXZlbnQsCiAgICBsaXN0Q2FsZW5kYXJFdmVudHMsCl07Cg=="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/calendarEvents.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/calendarEvents.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs';\nimport { Epic } from 'redux-observable';\n\nimport Cache, { Stores } from '@src/lib/db';\nimport { Calendar, StoreState, Action, ActionStatus, CalendarEvent } from '@src/types';\nimport {\n  CALENDAR_LIST,\n  calendarList,\n  CALENDAR_EVENT_GET,\n  calendarEventGet,\n  CalendarEventRespondMeta,\n  CALENDAR_EVENT_RESPOND,\n  CalendarListMeta,\n  CALENDAR_EVENT_LIST,\n  CalendarEventRangeMeta,\n  calendarEventList,\n} from '@src/ducks/calendars';\n\nimport { computedCalendarEvent } from '@src/lib/event';\nimport { Deps } from '@src/lib/epic';\nimport { toastSet } from '@src/ducks/toasts';\n\nconst listCalendar: Epic<\n  Action<CalendarListMeta|string|null, Calendar[] | CalendarEvent[]>,\n  StoreState, Deps\n> = (action$, store, deps) =>\n  action$\n    .ofType(CALENDAR_LIST)\n    .filter(action => action.status === ActionStatus.Start)\n    .flatMap((action: Action<CalendarListMeta, CalendarEvent[]>) =>\n      Cache.list<Calendar>(\n        Stores.Calendars,\n        calendar => (!!action.meta.account ? calendar.account === action.meta.account : true),\n      )\n      .flatMap((calendars) => {\n\n        const actions: Observable<\n          Action<CalendarListMeta|string|null, Calendar[] | CalendarEvent[]>\n        >[] = [\n          Observable.of(calendarList(action.meta, calendars)),\n        ];\n\n        // Return calendar events\n        return Observable.concat(\n          ...actions,\n        );\n      })\n      .catch(e => Observable.of(calendarList(action.meta, e))),\n    );\n\nconst listCalendarEvents: Epic<Action<CalendarEventRangeMeta, CalendarEvent[]>, StoreState> = (\n  action$,\n  store,\n) =>\n  action$\n    .ofType(CALENDAR_EVENT_LIST)\n    .filter(action => action.status === ActionStatus.Start)\n    .flatMap(action =>\n      Cache.listIndex<CalendarEvent>(\n        Stores.CalendarEvents,\n        'starttime',\n        IDBKeyRange.bound(\n          action.meta.start,\n          action.meta.end,\n        ),\n        false,\n        1000,\n        undefined,\n      )\n        .map(calendarEvents =>\n          calendarEventList(\n            action.meta,\n            calendarEvents.map(p =>\n              computedCalendarEvent(p, store.getState().calendars, calendarEvents),\n            ),\n          ),\n        ),\n    );\n\nconst getCalendarEvent: Epic<Action<string, CalendarEvent|null>, StoreState, Deps>\n  = (action$, store, deps) =>\n    action$.ofType(CALENDAR_EVENT_GET)\n      .filter(action => action.status === ActionStatus.Start)\n      .flatMap(action =>\n        deps.calendarEvents.get(action.meta)\n          .map(event => calendarEventGet(action.meta, event))\n          .catch(error => Observable.of(calendarEventGet(action.meta, error))),\n      );\n\nconst respondCalendarEvent: Epic<\n  Action<CalendarEventRespondMeta|string|Error|null, CalendarEvent|null>, StoreState, Deps\n>\n  = (action$, store, deps) =>\n    action$.ofType(CALENDAR_EVENT_RESPOND)\n      .filter(action => action.status === ActionStatus.Start)\n      .flatMap((action: Action<CalendarEventRespondMeta, null>) =>\n        deps.calendarEvents.respond(action.meta.id, action.meta.status)\n          .map(event => calendarEventGet(action.meta.id, event || undefined))\n          .catch(error => Observable.of(toastSet(error))),\n      );\n\nexport default [\n  listCalendar,\n  getCalendarEvent,\n  respondCalendarEvent,\n  listCalendarEvents,\n];\n"]}]}