{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/sequenceStageInstances.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/sequenceStageInstances.ts","mtime":1675280254051},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nLCBfaCwgX2o7CmltcG9ydCB1cGRhdGUgZnJvbSAnaW1tdXRhYmlsaXR5LWhlbHBlcic7CmltcG9ydCB7IGNyZWF0ZSwgY3JlYXRlQWN0aW9uIH0gZnJvbSAnQHNyYy9saWIvcmVkdXgnOwppbXBvcnQgeyBSZXNvdXJjZVN0YXR1cywgfSBmcm9tICdAc3JjL3R5cGVzJzsKaW1wb3J0IHsgcmVzb3VyY2VPaywgcmVzb3VyY2VSZWZyZXNoaW5nLCByZXNvdXJjZVBlbmRpbmcsIHJlc291cmNlRmFpbGVkIH0gZnJvbSAnQHNyYy9saWIvcmVzb3VyY2UnOwppbXBvcnQgeyBrZXlCeSwgdmFsdWVzLCBjb21wYWN0IH0gZnJvbSAnbG9kYXNoJzsKaW1wb3J0IHsgY3JlYXRlU2VsZWN0b3IgfSBmcm9tICdAc3JjL2xpYi9zZWxlY3Rvcic7Ci8vIEFwcGxpZXMgYW55IGF0dGFjaG1lbnQgbWV0YXMgd2l0aCBzdGF0dXMgY3JlYXRlL2RlbGV0ZSBieSBjYWxsaW5nIEFQSQovLyB0byBhZGQgb3IgcmVtb3ZlIHRoZW0gZnJvbSB0aGUgcmVzb3VyY2UKZXhwb3J0IHZhciBTRVFVRU5DRV9TVEFHRV9JTlNUQU5DRV9BVFRBQ0hNRU5UU19BUFBMWSA9IChfYSA9IGNyZWF0ZSgnU0VRVUVOQ0VfU1RBR0VfSU5TVEFOQ0VfQVRUQUNITUVOVFNfQVBQTFknLCB7CiAgICBzZXR1cDogZnVuY3Rpb24gKHN0YXRlLCBtZXRhKSB7CiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kOwogICAgICAgIHZhciBtZXRhRXhpc3RzID0gc3RhdGUuYXR0YWNobWVudE1ldGFzW21ldGEuaWRdIHx8IGZhbHNlOwogICAgICAgIHZhciBhdHRhY2htZW50UmVzb3VyY2VFeGlzdHMgPSBzdGF0ZS5hdHRhY2htZW50c1ttZXRhLmlkXSB8fCBmYWxzZTsKICAgICAgICBpZiAoIW1ldGFFeGlzdHMgJiYgIWF0dGFjaG1lbnRSZXNvdXJjZUV4aXN0cykgewogICAgICAgICAgICByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgICAgICAgICBhdHRhY2htZW50TWV0YXM6IChfYSA9IHt9LAogICAgICAgICAgICAgICAgICAgIF9hW21ldGEuaWRdID0geyAkc2V0OiB7fSB9LAogICAgICAgICAgICAgICAgICAgIF9hKSwKICAgICAgICAgICAgICAgIGF0dGFjaG1lbnRzOiAoX2IgPSB7fSwKICAgICAgICAgICAgICAgICAgICBfYlttZXRhLmlkXSA9IHsgJHNldDoge30gfSwKICAgICAgICAgICAgICAgICAgICBfYiksCiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICBpZiAoIW1ldGFFeGlzdHMpIHsKICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICAgICAgYXR0YWNobWVudE1ldGFzOiAoX2MgPSB7fSwKICAgICAgICAgICAgICAgICAgICBfY1ttZXRhLmlkXSA9IHsgJHNldDoge30gfSwKICAgICAgICAgICAgICAgICAgICBfYyksCiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICBpZiAoIWF0dGFjaG1lbnRSZXNvdXJjZUV4aXN0cykgewogICAgICAgICAgICByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgICAgICAgICBhdHRhY2htZW50czogKF9kID0ge30sCiAgICAgICAgICAgICAgICAgICAgX2RbbWV0YS5pZF0gPSB7ICRzZXQ6IHt9IH0sCiAgICAgICAgICAgICAgICAgICAgX2QpLAogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHN0YXRlOwogICAgfSwKICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChzdGF0ZSwgbWV0YSwgcGF5bG9hZCkgewogICAgICAgIHZhciBfYSwgX2I7CiAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICBhdHRhY2htZW50czogKF9hID0ge30sCiAgICAgICAgICAgICAgICBfYVttZXRhLmlkXSA9IHsKICAgICAgICAgICAgICAgICAgICAkbWVyZ2U6IGtleUJ5KHBheWxvYWQsIGZ1bmN0aW9uIChzdGFnZUluc3RhbmNlKSB7IHJldHVybiBzdGFnZUluc3RhbmNlLmlkOyB9KSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBfYSksCiAgICAgICAgICAgIGF0dGFjaG1lbnRNZXRhczogKF9iID0ge30sCiAgICAgICAgICAgICAgICBfYlttZXRhLmlkXSA9IHsKICAgICAgICAgICAgICAgICAgICAkdW5zZXQ6IHBheWxvYWQubWFwKGZ1bmN0aW9uIChhdHRhY2htZW50KSB7IHJldHVybiBhdHRhY2htZW50LmlkOyB9KSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBfYiksCiAgICAgICAgfSk7CiAgICB9LAp9KSwgX2EudHlwZSksIHNlcXVlbmNlU3RhZ2VJbnN0YW5jZUF0dGFjaG1lbnRzQXBwbHkgPSBfYS5hY3Rpb24sIHNlcXVlbmNlU3RhZ2VJbnN0YW5jZUF0dGFjaG1lbnRzQXBwbHlSZWR1Y2VyID0gX2EucmVkdWNlcjsKZXhwb3J0IHZhciBTRVFVRU5DRV9TVEFHRV9JTlNUQU5DRV9BVFRBQ0hNRU5UX0FERCA9IChfYiA9IGNyZWF0ZSgnU0VRVUVOQ0VfU1RBR0VfSU5TVEFOQ0VfQVRUQUNITUVOVF9BREQnLCB7CiAgICBzZXR1cDogZnVuY3Rpb24gKHN0YXRlLCBtZXRhKSB7CiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kOwogICAgICAgIHZhciBtZXRhRXhpc3RzID0gc3RhdGUuYXR0YWNobWVudE1ldGFzW21ldGEucmVzb3VyY2VJZF0gfHwgZmFsc2U7CiAgICAgICAgdmFyIGF0dGFjaG1lbnRSZXNvdXJjZUV4aXN0cyA9IHN0YXRlLmF0dGFjaG1lbnRzW21ldGEucmVzb3VyY2VJZF0gfHwgZmFsc2U7CiAgICAgICAgaWYgKCFtZXRhRXhpc3RzICYmICFhdHRhY2htZW50UmVzb3VyY2VFeGlzdHMpIHsKICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICAgICAgYXR0YWNobWVudE1ldGFzOiAoX2EgPSB7fSwKICAgICAgICAgICAgICAgICAgICBfYVttZXRhLnJlc291cmNlSWRdID0geyAkc2V0OiB7fSB9LAogICAgICAgICAgICAgICAgICAgIF9hKSwKICAgICAgICAgICAgICAgIGF0dGFjaG1lbnRzOiAoX2IgPSB7fSwKICAgICAgICAgICAgICAgICAgICBfYlttZXRhLnJlc291cmNlSWRdID0geyAkc2V0OiB7fSB9LAogICAgICAgICAgICAgICAgICAgIF9iKSwKICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIGlmICghbWV0YUV4aXN0cykgewogICAgICAgICAgICByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgICAgICAgICBhdHRhY2htZW50TWV0YXM6IChfYyA9IHt9LAogICAgICAgICAgICAgICAgICAgIF9jW21ldGEucmVzb3VyY2VJZF0gPSB7ICRzZXQ6IHt9IH0sCiAgICAgICAgICAgICAgICAgICAgX2MpLAogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgaWYgKCFhdHRhY2htZW50UmVzb3VyY2VFeGlzdHMpIHsKICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICAgICAgYXR0YWNobWVudHM6IChfZCA9IHt9LAogICAgICAgICAgICAgICAgICAgIF9kW21ldGEucmVzb3VyY2VJZF0gPSB7ICRzZXQ6IHt9IH0sCiAgICAgICAgICAgICAgICAgICAgX2QpLAogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHN0YXRlOwogICAgfSwKICAgIHN0YXJ0OiBmdW5jdGlvbiAoc3RhdGUsIG1ldGEpIHsKICAgICAgICB2YXIgX2EsIF9iOwogICAgICAgIHJldHVybiB1cGRhdGUoc3RhdGUsIHsKICAgICAgICAgICAgYXR0YWNobWVudE1ldGFzOiAoX2EgPSB7fSwgX2FbbWV0YS5yZXNvdXJjZUlkXSA9IChfYiA9IHt9LCBfYlttZXRhLmF0dGFjaG1lbnRdID0geyAkc2V0OiByZXNvdXJjZU9rKG1ldGEpIH0sIF9iKSwgX2EpLAogICAgICAgIH0pOwogICAgfSwKICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChzdGF0ZSwgbWV0YSwgcGF5bG9hZCkgewogICAgICAgIHZhciBfYSwgX2I7CiAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICBhdHRhY2htZW50TWV0YXM6IChfYSA9IHt9LAogICAgICAgICAgICAgICAgX2FbbWV0YS5yZXNvdXJjZUlkXSA9IChfYiA9IHt9LCBfYlttZXRhLmF0dGFjaG1lbnRdID0geyAkc2V0OiByZXNvdXJjZU9rKHBheWxvYWQpIH0sIF9iKSwKICAgICAgICAgICAgICAgIF9hKSwKICAgICAgICB9KTsKICAgIH0sCiAgICBmYWlsdXJlOiBmdW5jdGlvbiAoc3RhdGUsIG1ldGEsIGVycm9yKSB7CiAgICAgICAgdmFyIF9hLCBfYjsKICAgICAgICByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgICAgIGF0dGFjaG1lbnRNZXRhczogKF9hID0ge30sCiAgICAgICAgICAgICAgICBfYVttZXRhLnJlc291cmNlSWRdID0gKF9iID0ge30sCiAgICAgICAgICAgICAgICAgICAgX2JbbWV0YS5hdHRhY2htZW50XSA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgJHNldDogcmVzb3VyY2VGYWlsZWQoZXJyb3IsIG1ldGEpLAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgX2IpLAogICAgICAgICAgICAgICAgX2EpLAogICAgICAgIH0pOwogICAgfSwKfSksIF9iLnR5cGUpLCBzZXF1ZW5jZVN0YWdlSW5zdGFuY2VBdHRhY2htZW50QWRkID0gX2IuYWN0aW9uLCBzZXF1ZW5jZVN0YWdlSW5zdGFuY2VBdHRhY2htZW50QWRkUmVkdWNlciA9IF9iLnJlZHVjZXI7Ci8vIFRPRE8oU0hJTik6IENvbm5lY3QgdG8gQ29tbWl0U3luYz8KZXhwb3J0IHZhciBTRVFVRU5DRV9TVEFHRV9JTlNUQU5DRV9BVFRBQ0hNRU5UX1JFTU9WRSA9IChfYyA9IGNyZWF0ZSgnU0VRVUVOQ0VfU1RBR0VfSU5TVEFOQ0VfQVRUQUNITUVOVF9SRU1PVkUnLCB7CiAgICBzZXR1cDogZnVuY3Rpb24gKHN0YXRlLCBtZXRhKSB7CiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kOwogICAgICAgIHZhciBtZXRhRXhpc3RzID0gc3RhdGUuYXR0YWNobWVudE1ldGFzW21ldGEucmVzb3VyY2VJZF0gfHwgZmFsc2U7CiAgICAgICAgdmFyIGF0dGFjaG1lbnRSZXNvdXJjZUV4aXN0cyA9IHN0YXRlLmF0dGFjaG1lbnRzW21ldGEucmVzb3VyY2VJZF0gfHwgZmFsc2U7CiAgICAgICAgaWYgKCFtZXRhRXhpc3RzICYmICFhdHRhY2htZW50UmVzb3VyY2VFeGlzdHMpIHsKICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICAgICAgYXR0YWNobWVudE1ldGFzOiAoX2EgPSB7fSwKICAgICAgICAgICAgICAgICAgICBfYVttZXRhLnJlc291cmNlSWRdID0geyAkc2V0OiB7fSB9LAogICAgICAgICAgICAgICAgICAgIF9hKSwKICAgICAgICAgICAgICAgIGF0dGFjaG1lbnRzOiAoX2IgPSB7fSwKICAgICAgICAgICAgICAgICAgICBfYlttZXRhLnJlc291cmNlSWRdID0geyAkc2V0OiB7fSB9LAogICAgICAgICAgICAgICAgICAgIF9iKSwKICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIGlmICghbWV0YUV4aXN0cykgewogICAgICAgICAgICByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgICAgICAgICBhdHRhY2htZW50TWV0YXM6IChfYyA9IHt9LAogICAgICAgICAgICAgICAgICAgIF9jW21ldGEucmVzb3VyY2VJZF0gPSB7ICRzZXQ6IHt9IH0sCiAgICAgICAgICAgICAgICAgICAgX2MpLAogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgaWYgKCFhdHRhY2htZW50UmVzb3VyY2VFeGlzdHMpIHsKICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICAgICAgYXR0YWNobWVudHM6IChfZCA9IHt9LAogICAgICAgICAgICAgICAgICAgIF9kW21ldGEucmVzb3VyY2VJZF0gPSB7ICRzZXQ6IHt9IH0sCiAgICAgICAgICAgICAgICAgICAgX2QpLAogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHN0YXRlOwogICAgfSwKICAgIHN0YXJ0OiBmdW5jdGlvbiAoc3RhdGUsIG1ldGEpIHsKICAgICAgICB2YXIgX2EsIF9iLCBfYzsKICAgICAgICByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgICAgIGF0dGFjaG1lbnRNZXRhczogKF9hID0ge30sCiAgICAgICAgICAgICAgICBfYVttZXRhLnJlc291cmNlSWRdID0gKF9iID0ge30sCiAgICAgICAgICAgICAgICAgICAgX2JbbWV0YS5hdHRhY2htZW50XSA9IHsgJHNldDogcmVzb3VyY2VPayhtZXRhKSB9LAogICAgICAgICAgICAgICAgICAgIF9iKSwKICAgICAgICAgICAgICAgIF9hKSwKICAgICAgICAgICAgYXR0YWNobWVudHM6IChfYyA9IHt9LAogICAgICAgICAgICAgICAgX2NbbWV0YS5yZXNvdXJjZUlkXSA9IHsKICAgICAgICAgICAgICAgICAgICAkdW5zZXQ6IFttZXRhLmF0dGFjaG1lbnRdLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIF9jKSwKICAgICAgICB9KTsKICAgIH0sCiAgICBzdWNjZXNzOiBmdW5jdGlvbiAoc3RhdGUsIG1ldGEpIHsKICAgICAgICB2YXIgX2EsIF9iOwogICAgICAgIHJldHVybiB1cGRhdGUoc3RhdGUsIHsKICAgICAgICAgICAgYXR0YWNobWVudE1ldGFzOiAoX2EgPSB7fSwKICAgICAgICAgICAgICAgIF9hW21ldGEucmVzb3VyY2VJZF0gPSB7CiAgICAgICAgICAgICAgICAgICAgJHVuc2V0OiBbbWV0YS5hdHRhY2htZW50XSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBfYSksCiAgICAgICAgICAgIGF0dGFjaG1lbnRzOiAoX2IgPSB7fSwKICAgICAgICAgICAgICAgIF9iW21ldGEucmVzb3VyY2VJZF0gPSB7CiAgICAgICAgICAgICAgICAgICAgJHVuc2V0OiBbbWV0YS5hdHRhY2htZW50XSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBfYiksCiAgICAgICAgfSk7CiAgICB9LAp9KSwgX2MudHlwZSksIHNlcXVlbmNlU3RhZ2VJbnN0YW5jZUF0dGFjaG1lbnRSZW1vdmUgPSBfYy5hY3Rpb24sIHNlcXVlbmNlU3RhZ2VJbnN0YW5jZUF0dGFjaG1lbnRSZW1vdmVSZWR1Y2VyID0gX2MucmVkdWNlcjsKZXhwb3J0IHZhciBTRVFVRU5DRV9TVEFHRV9JTlNUQU5DRV9MSVNUID0gKF9kID0gY3JlYXRlKCdTRVFVRU5DRV9TVEFHRV9JTlNUQU5DRV9MSVNUJywgewogICAgc2V0dXA6IGZ1bmN0aW9uIChzdGF0ZSwgbWV0YSkgewogICAgICAgIHZhciBfYTsKICAgICAgICBpZiAoc3RhdGUuc2VxdWVuY2VTdGFnZUluc3RhbmNlc1ttZXRhLnNlcXVlbmNlICsgbWV0YS5zdGFnZV0pIHsKICAgICAgICAgICAgcmV0dXJuIHN0YXRlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgICAgIHNlcXVlbmNlU3RhZ2VJbnN0YW5jZXM6IChfYSA9IHt9LAogICAgICAgICAgICAgICAgX2FbbWV0YS5zZXF1ZW5jZSArIG1ldGEuc3RhZ2VdID0geyAkc2V0OiB7fSB9LAogICAgICAgICAgICAgICAgX2EpLAogICAgICAgIH0pOwogICAgfSwKICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChzdGF0ZSwgbWV0YSwgcGF5bG9hZCkgewogICAgICAgIHZhciBfYTsKICAgICAgICByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgICAgIHNlcXVlbmNlU3RhZ2VJbnN0YW5jZXM6IChfYSA9IHt9LAogICAgICAgICAgICAgICAgX2FbbWV0YS5zZXF1ZW5jZSArIG1ldGEuc3RhZ2VdID0gewogICAgICAgICAgICAgICAgICAgICRtZXJnZToga2V5QnkocGF5bG9hZC5tYXAoZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gcmVzb3VyY2VPayh2YWwpOyB9KSwgZnVuY3Rpb24gKHN0YWdlSW5zdGFuY2UpIHsgcmV0dXJuIHN0YWdlSW5zdGFuY2UuZGF0YSAmJiBzdGFnZUluc3RhbmNlLmRhdGEuaWQ7IH0pLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIF9hKSwKICAgICAgICB9KTsKICAgIH0sCn0pLCBfZC50eXBlKSwgc2VxdWVuY2VTdGFnZUluc3RhbmNlTGlzdCA9IF9kLmFjdGlvbiwgc2VxdWVuY2VTdGFnZUluc3RhbmNlTGlzdFJlZHVjZXIgPSBfZC5yZWR1Y2VyOwpleHBvcnQgdmFyIFNFUVVFTkNFX1NUQUdFX0lOU1RBTkNFX0FUVEFDSE1FTlRTX0xJU1QgPSAoX2UgPSBjcmVhdGUoJ1NFUVVFTkNFX1NUQUdFX0lOU1RBTkNFX0FUVEFDSE1FTlRTX0xJU1QnLCB7CiAgICBzZXR1cDogZnVuY3Rpb24gKHN0YXRlLCBtZXRhKSB7CiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kOwogICAgICAgIHZhciBtZXRhRXhpc3RzID0gc3RhdGUuYXR0YWNobWVudE1ldGFzW21ldGEuaWRdIHx8IGZhbHNlOwogICAgICAgIHZhciBhdHRhY2htZW50UmVzb3VyY2VFeGlzdHMgPSBzdGF0ZS5hdHRhY2htZW50c1ttZXRhLmlkXSB8fCBmYWxzZTsKICAgICAgICBpZiAoIW1ldGFFeGlzdHMgJiYgIWF0dGFjaG1lbnRSZXNvdXJjZUV4aXN0cykgewogICAgICAgICAgICByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgICAgICAgICBhdHRhY2htZW50TWV0YXM6IChfYSA9IHt9LAogICAgICAgICAgICAgICAgICAgIF9hW21ldGEuaWRdID0geyAkc2V0OiB7fSB9LAogICAgICAgICAgICAgICAgICAgIF9hKSwKICAgICAgICAgICAgICAgIGF0dGFjaG1lbnRzOiAoX2IgPSB7fSwKICAgICAgICAgICAgICAgICAgICBfYlttZXRhLmlkXSA9IHsgJHNldDoge30gfSwKICAgICAgICAgICAgICAgICAgICBfYiksCiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICBpZiAoIW1ldGFFeGlzdHMpIHsKICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICAgICAgYXR0YWNobWVudE1ldGFzOiAoX2MgPSB7fSwKICAgICAgICAgICAgICAgICAgICBfY1ttZXRhLmlkXSA9IHsgJHNldDoge30gfSwKICAgICAgICAgICAgICAgICAgICBfYyksCiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICBpZiAoIWF0dGFjaG1lbnRSZXNvdXJjZUV4aXN0cykgewogICAgICAgICAgICByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgICAgICAgICBhdHRhY2htZW50czogKF9kID0ge30sCiAgICAgICAgICAgICAgICAgICAgX2RbbWV0YS5pZF0gPSB7ICRzZXQ6IHt9IH0sCiAgICAgICAgICAgICAgICAgICAgX2QpLAogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHN0YXRlOwogICAgfSwKICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChzdGF0ZSwgbWV0YSwgcGF5bG9hZCkgewogICAgICAgIHZhciBfYSwgX2I7CiAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICBhdHRhY2htZW50czogKF9hID0ge30sCiAgICAgICAgICAgICAgICBfYVttZXRhLmlkXSA9IHsKICAgICAgICAgICAgICAgICAgICAkc2V0OiBrZXlCeShwYXlsb2FkLCBmdW5jdGlvbiAoc3RhZ2VJbnN0YW5jZSkgeyByZXR1cm4gc3RhZ2VJbnN0YW5jZS5pZDsgfSksCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgX2EpLAogICAgICAgICAgICAvLyBSZW1vdmUgYW55IGFzc29jaWF0ZWQgbWV0YXMgd2hlbiByZWZldGNoaW5nIGF0dGFjaG1lbnRzCiAgICAgICAgICAgIGF0dGFjaG1lbnRNZXRhczogKF9iID0ge30sCiAgICAgICAgICAgICAgICBfYlttZXRhLmlkXSA9IHsKICAgICAgICAgICAgICAgICAgICAkc2V0OiB7fSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBfYiksCiAgICAgICAgfSk7CiAgICB9LAp9KSwgX2UudHlwZSksIHNlcXVlbmNlU3RhZ2VJbnN0YW5jZUF0dGFjaG1lbnRzTGlzdCA9IF9lLmFjdGlvbiwgc2VxdWVuY2VTdGFnZUluc3RhbmNlQXR0YWNobWVudHNMaXN0UmVkdWNlciA9IF9lLnJlZHVjZXI7CmV4cG9ydCB2YXIgU0VRVUVOQ0VfU1RBR0VfSU5TVEFOQ0VfQ1JFQVRFID0gKF9mID0gY3JlYXRlKCdTRVFVRU5DRV9TVEFHRV9JTlNUQU5DRV9DUkVBVEUnLCB7CiAgICBzZXR1cDogZnVuY3Rpb24gKHN0YXRlLCBtZXRhKSB7CiAgICAgICAgdmFyIF9hOwogICAgICAgIGlmIChzdGF0ZS5zZXF1ZW5jZVN0YWdlSW5zdGFuY2VzW21ldGEuc2VxdWVuY2UgKyBtZXRhLnN0YWdlXSkgewogICAgICAgICAgICByZXR1cm4gc3RhdGU7CiAgICAgICAgfQogICAgICAgIHJldHVybiB1cGRhdGUoc3RhdGUsIHsKICAgICAgICAgICAgc2VxdWVuY2VTdGFnZUluc3RhbmNlczogKF9hID0ge30sCiAgICAgICAgICAgICAgICBfYVttZXRhLnNlcXVlbmNlICsgbWV0YS5zdGFnZV0gPSB7ICRzZXQ6IHt9IH0sCiAgICAgICAgICAgICAgICBfYSksCiAgICAgICAgfSk7CiAgICB9LAogICAgc3VjY2VzczogZnVuY3Rpb24gKHN0YXRlLCBtZXRhLCBwYXlsb2FkKSB7CiAgICAgICAgdmFyIF9hLCBfYjsKICAgICAgICByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgICAgIHNlcXVlbmNlU3RhZ2VJbnN0YW5jZXM6IChfYSA9IHt9LAogICAgICAgICAgICAgICAgX2FbcGF5bG9hZC5zZXF1ZW5jZSArIHBheWxvYWQuc3RhZ2VdID0gKF9iID0ge30sCiAgICAgICAgICAgICAgICAgICAgX2JbcGF5bG9hZC5pZF0gPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRzZXQ6IHJlc291cmNlT2socGF5bG9hZCksCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBfYiksCiAgICAgICAgICAgICAgICBfYSksCiAgICAgICAgfSk7CiAgICB9LAogICAgZmFpbHVyZTogZnVuY3Rpb24gKHN0YXRlLCBtZXRhLCBlcnJvcikgewogICAgICAgIHZhciBfYTsKICAgICAgICByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgICAgIHNlcXVlbmNlU3RhZ2VJbnN0YW5jZXM6IChfYSA9IHt9LAogICAgICAgICAgICAgICAgX2FbbWV0YS5zZXF1ZW5jZSArIG1ldGEuc3RhZ2VdID0gewogICAgICAgICAgICAgICAgICAgICR1bnNldDogW21ldGEuaWRdLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIF9hKSwKICAgICAgICB9KTsKICAgIH0sCn0pLCBfZi50eXBlKSwgc2VxdWVuY2VTdGFnZUluc3RhbmNlQ3JlYXRlID0gX2YuYWN0aW9uLCBzZXF1ZW5jZVN0YWdlSW5zdGFuY2VDcmVhdGVSZWR1Y2VyID0gX2YucmVkdWNlcjsKLy8gVE9ETyhTSElOKTogSGFuZGxlIGZhaWx1cmUgbm90aWZpY2F0aW9ucyBmb3IgaW52aWRpdnVhbCBzdGFnZUluc3RhbmNlIGRlbGV0ZSBlcnJvcnMKZXhwb3J0IHZhciBTRVFVRU5DRV9TVEFHRV9JTlNUQU5DRV9VUERBVEUgPSAoX2cgPSBjcmVhdGUoJ1NFUVVFTkNFX1NUQUdFX0lOU1RBTkNFX1VQREFURScsIHsKICAgIHNldHVwOiBmdW5jdGlvbiAoc3RhdGUsIG1ldGEpIHsKICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2Q7CiAgICAgICAgaWYgKHN0YXRlLnNlcXVlbmNlU3RhZ2VJbnN0YW5jZXNbbWV0YS5zZXF1ZW5jZSArIG1ldGEuc3RhZ2VdKSB7CiAgICAgICAgICAgIGlmIChzdGF0ZS5zZXF1ZW5jZVN0YWdlSW5zdGFuY2VzW21ldGEuc2VxdWVuY2UgKyBtZXRhLnN0YWdlXVttZXRhLmlkXSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHN0YXRlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB1cGRhdGUoc3RhdGUsIHsKICAgICAgICAgICAgICAgIHNlcXVlbmNlU3RhZ2VJbnN0YW5jZXM6IChfYSA9IHt9LAogICAgICAgICAgICAgICAgICAgIF9hW21ldGEuc2VxdWVuY2UgKyBtZXRhLnN0YWdlXSA9IChfYiA9IHt9LCBfYlttZXRhLmlkXSA9IHsgJHNldDogcmVzb3VyY2VQZW5kaW5nKCkgfSwgX2IpLAogICAgICAgICAgICAgICAgICAgIF9hKSwKICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiB1cGRhdGUoc3RhdGUsIHsKICAgICAgICAgICAgc2VxdWVuY2VTdGFnZUluc3RhbmNlczogKF9jID0ge30sCiAgICAgICAgICAgICAgICBfY1ttZXRhLnNlcXVlbmNlICsgbWV0YS5zdGFnZV0gPSB7ICRzZXQ6IChfZCA9IHt9LCBfZFttZXRhLmlkXSA9IHJlc291cmNlUGVuZGluZygpLCBfZCkgfSwKICAgICAgICAgICAgICAgIF9jKSwKICAgICAgICB9KTsKICAgIH0sCiAgICBzdGFydDogZnVuY3Rpb24gKHN0YXRlLCBtZXRhKSB7CiAgICAgICAgdmFyIF9hLCBfYjsKICAgICAgICByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgICAgIHNlcXVlbmNlU3RhZ2VJbnN0YW5jZXM6IChfYSA9IHt9LAogICAgICAgICAgICAgICAgX2FbbWV0YS5zZXF1ZW5jZSArIG1ldGEuc3RhZ2VdID0gKF9iID0ge30sCiAgICAgICAgICAgICAgICAgICAgX2JbbWV0YS5pZF0gPSB7ICRzZXQ6IHJlc291cmNlUmVmcmVzaGluZyhtZXRhKSB9LAogICAgICAgICAgICAgICAgICAgIF9iKSwKICAgICAgICAgICAgICAgIF9hKSwKICAgICAgICB9KTsKICAgIH0sCiAgICBzdWNjZXNzOiBmdW5jdGlvbiAoc3RhdGUsIG1ldGEsIHBheWxvYWQpIHsKICAgICAgICB2YXIgX2EsIF9iOwogICAgICAgIHJldHVybiB1cGRhdGUoc3RhdGUsIHsKICAgICAgICAgICAgc2VxdWVuY2VTdGFnZUluc3RhbmNlczogKF9hID0ge30sCiAgICAgICAgICAgICAgICBfYVttZXRhLnNlcXVlbmNlICsgbWV0YS5zdGFnZV0gPSAoX2IgPSB7fSwKICAgICAgICAgICAgICAgICAgICBfYlttZXRhLmlkXSA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgJHNldDogcmVzb3VyY2VPayhwYXlsb2FkKSwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIF9iKSwKICAgICAgICAgICAgICAgIF9hKSwKICAgICAgICB9KTsKICAgIH0sCiAgICBmYWlsdXJlOiBmdW5jdGlvbiAoc3RhdGUsIG1ldGEsIGVycm9yKSB7CiAgICAgICAgdmFyIF9hLCBfYjsKICAgICAgICByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgICAgIHNlcXVlbmNlU3RhZ2VJbnN0YW5jZXM6IChfYSA9IHt9LAogICAgICAgICAgICAgICAgX2FbbWV0YS5zZXF1ZW5jZSArIG1ldGEuc3RhZ2VdID0gKF9iID0ge30sCiAgICAgICAgICAgICAgICAgICAgX2JbbWV0YS5pZF0gPSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNldDogUmVzb3VyY2VTdGF0dXMuT2ssCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBfYiksCiAgICAgICAgICAgICAgICBfYSksCiAgICAgICAgfSk7CiAgICB9LAp9KSwgX2cudHlwZSksIHNlcXVlbmNlU3RhZ2VJbnN0YW5jZVVwZGF0ZSA9IF9nLmFjdGlvbiwgc2VxdWVuY2VTdGFnZUluc3RhbmNlVXBkYXRlUmVkdWNlciA9IF9nLnJlZHVjZXI7Ci8vIFRPRE8oU0hJTik6IERpc2N1c3MgRXJyb3Igc3RhdGVzIGZvciBzZXF1ZW5jZSBzdGFnZUluc3RhbmNlcyBkZWxldGlvbnMKLy8gVE9ETyhTSElOKTogSGFuZGxlIGZhaWx1cmUgbm90aWZpY2F0aW9ucyBmb3IgaW52aWRpdnVhbCBzdGFnZUluc3RhbmNlIGRlbGV0ZSBlcnJvcnMKZXhwb3J0IHZhciBTRVFVRU5DRV9TVEFHRV9JTlNUQU5DRV9ERUxFVEUgPSAoX2ggPSBjcmVhdGUoJ1NFUVVFTkNFX1NUQUdFX0lOU1RBTkNFX0RFTEVURScsIHsKICAgIHNldHVwOiBmdW5jdGlvbiAoc3RhdGUsIG1ldGEpIHsKICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2Q7CiAgICAgICAgaWYgKHN0YXRlLnNlcXVlbmNlU3RhZ2VJbnN0YW5jZXNbbWV0YS5zZXF1ZW5jZSArIG1ldGEuc3RhZ2VdKSB7CiAgICAgICAgICAgIGlmIChzdGF0ZS5zZXF1ZW5jZVN0YWdlSW5zdGFuY2VzW21ldGEuc2VxdWVuY2UgKyBtZXRhLnN0YWdlXVttZXRhLmlkXSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHN0YXRlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB1cGRhdGUoc3RhdGUsIHsKICAgICAgICAgICAgICAgIHNlcXVlbmNlU3RhZ2VJbnN0YW5jZXM6IChfYSA9IHt9LAogICAgICAgICAgICAgICAgICAgIF9hW21ldGEuc2VxdWVuY2UgKyBtZXRhLnN0YWdlXSA9IChfYiA9IHt9LCBfYlttZXRhLmlkXSA9IHsgJHNldDogcmVzb3VyY2VQZW5kaW5nKCkgfSwgX2IpLAogICAgICAgICAgICAgICAgICAgIF9hKSwKICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiB1cGRhdGUoc3RhdGUsIHsKICAgICAgICAgICAgc2VxdWVuY2VTdGFnZUluc3RhbmNlczogKF9jID0ge30sCiAgICAgICAgICAgICAgICBfY1ttZXRhLnNlcXVlbmNlICsgbWV0YS5zdGFnZV0gPSB7ICRzZXQ6IChfZCA9IHt9LCBfZFttZXRhLmlkXSA9IHJlc291cmNlUGVuZGluZygpLCBfZCkgfSwKICAgICAgICAgICAgICAgIF9jKSwKICAgICAgICB9KTsKICAgIH0sCiAgICBzdWNjZXNzOiBmdW5jdGlvbiAoc3RhdGUsIG1ldGEsIHBheWxvYWQpIHsKICAgICAgICB2YXIgX2E7CiAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICBzZXF1ZW5jZVN0YWdlSW5zdGFuY2VzOiAoX2EgPSB7fSwKICAgICAgICAgICAgICAgIF9hW21ldGEuc2VxdWVuY2UgKyBtZXRhLnN0YWdlXSA9IHsKICAgICAgICAgICAgICAgICAgICAkdW5zZXQ6IFttZXRhLmlkXSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBfYSksCiAgICAgICAgfSk7CiAgICB9LAogICAgZmFpbHVyZTogZnVuY3Rpb24gKHN0YXRlLCBtZXRhLCBlcnJvcikgewogICAgICAgIHZhciBfYSwgX2I7CiAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICBzZXF1ZW5jZVN0YWdlSW5zdGFuY2VzOiAoX2EgPSB7fSwKICAgICAgICAgICAgICAgIF9hW21ldGEuc2VxdWVuY2UgKyBtZXRhLnN0YWdlXSA9IChfYiA9IHt9LAogICAgICAgICAgICAgICAgICAgIF9iW21ldGEuaWRdID0geyAkc2V0OiByZXNvdXJjZU9rKG1ldGEpIH0sCiAgICAgICAgICAgICAgICAgICAgX2IpLAogICAgICAgICAgICAgICAgX2EpLAogICAgICAgIH0pOwogICAgfSwKfSksIF9oLnR5cGUpLCBzZXF1ZW5jZVN0YWdlSW5zdGFuY2VEZWxldGUgPSBfaC5hY3Rpb24sIHNlcXVlbmNlU3RhZ2VJbnN0YW5jZURlbGV0ZVJlZHVjZXIgPSBfaC5yZWR1Y2VyOwpleHBvcnQgdmFyIFNFUVVFTkNFX1NUQUdFX0lOU1RBTkNFX1RFU1QgPSAnU0VRVUVOQ0VfU1RBR0VfSU5TVEFOQ0VfVEVTVCc7CmV4cG9ydCB2YXIgc2VxdWVuY2VTdGFnZUluc3RhbmNlVGVzdCA9IGNyZWF0ZUFjdGlvbihTRVFVRU5DRV9TVEFHRV9JTlNUQU5DRV9URVNUKTsKLy8gQXBwbHkgdGVtcGxhdGUgdG8gc2VxdWVuY2Ugc3RhZ2UgaW5zdGFuY2UKZXhwb3J0IHZhciBTRVFVRU5DRV9TVEFHRV9JTlNUQU5DRV9URU1QTEFURV9BUFBMWSA9IChfaiA9IGNyZWF0ZSgnU0VRVUVOQ0VfU1RBR0VfSU5TVEFOQ0VfVEVNUExBVEVfQVBQTFknLCB7fSksIF9qLnR5cGUpLCBzZXF1ZW5jZVN0YWdlSW5zdGFuY2VUZW1wbGF0ZUFwcGx5ID0gX2ouYWN0aW9uLCBzZXF1ZW5jZVN0YWdlSW5zdGFuY2VUZW1wbGF0ZUFwcGx5UmVkdWNlciA9IF9qLnJlZHVjZXI7CnZhciBlbXB0eUF0dGFjaG1lbnRzID0gW107CnZhciBlbXB0eVNlcXVlbmNlU3RhZ2VJbnN0YW5jZXMgPSBbXTsKLy8gUmV0dXJucyB5b3UgYWxsIHNlcXVlbmNlU3RhZ2VJbnN0YW5jZXMgZm9yIGEgU2VxdWVuY2VTdGFnZQpleHBvcnQgdmFyIHNlbGVjdEF2YWlsYWJsZVNlcXVlbmNlU3RhZ2VJbnN0YW5jZXMgPSBjcmVhdGVTZWxlY3RvcihbCiAgICBmdW5jdGlvbiAoc3RhdGUsIHN0YWdlKSB7IHJldHVybiBzdGF0ZS5zZXF1ZW5jZVN0YWdlSW5zdGFuY2VzW3N0YWdlLnNlcXVlbmNlICsgc3RhZ2UuaWRdOyB9LAogICAgZnVuY3Rpb24gKHN0YXRlLCBzdGFnZSkgeyByZXR1cm4gc3RhZ2U7IH0sCl0sIGZ1bmN0aW9uIChtZXRhcykgewogICAgaWYgKCFtZXRhcykgewogICAgICAgIHJldHVybiBlbXB0eVNlcXVlbmNlU3RhZ2VJbnN0YW5jZXM7CiAgICB9CiAgICByZXR1cm4gY29tcGFjdCh2YWx1ZXMobWV0YXMpLm1hcChmdW5jdGlvbiAocmVzb3VyY2UpIHsgcmV0dXJuIHJlc291cmNlLmRhdGE7IH0pKTsKfSwgZnVuY3Rpb24gKHN0YXRlLCBzdGFnZSkgeyByZXR1cm4gc3RhZ2Uuc2VxdWVuY2UgKyBzdGFnZS5pZDsgfSwgWydzZXF1ZW5jZVN0YWdlSW5zdGFuY2VzJ10pOwovLyBSZXR1cm5zIHlvdSBhbGwgYXR0YWNobWVudCBtZXRhcyBmb3IgYSBkcmFmdApleHBvcnQgdmFyIHNlbGVjdFN0YWdlSW5zdGFuY2VBdHRhY2htZW50c0ZvclJlc291cmNlID0gY3JlYXRlU2VsZWN0b3IoW2Z1bmN0aW9uIChzdGF0ZSwgcmVzb3VyY2VJZCkgeyByZXR1cm4gc3RhdGUuYXR0YWNobWVudHNbcmVzb3VyY2VJZF07IH1dLCBmdW5jdGlvbiAobWV0YXMsIHJlc291cmNlSWQpIHsKICAgIGlmICghbWV0YXMpIHsKICAgICAgICByZXR1cm4gZW1wdHlBdHRhY2htZW50czsKICAgIH0KICAgIHJldHVybiB2YWx1ZXMobWV0YXMpOwp9LCB1bmRlZmluZWQsIFsnYXR0YWNobWVudHMnXSk7CmV4cG9ydCBkZWZhdWx0IFsKICAgIHNlcXVlbmNlU3RhZ2VJbnN0YW5jZVVwZGF0ZVJlZHVjZXIsCiAgICBzZXF1ZW5jZVN0YWdlSW5zdGFuY2VDcmVhdGVSZWR1Y2VyLAogICAgc2VxdWVuY2VTdGFnZUluc3RhbmNlRGVsZXRlUmVkdWNlciwKICAgIHNlcXVlbmNlU3RhZ2VJbnN0YW5jZUxpc3RSZWR1Y2VyLAogICAgc2VxdWVuY2VTdGFnZUluc3RhbmNlQXR0YWNobWVudEFkZFJlZHVjZXIsCiAgICBzZXF1ZW5jZVN0YWdlSW5zdGFuY2VBdHRhY2htZW50UmVtb3ZlUmVkdWNlciwKICAgIHNlcXVlbmNlU3RhZ2VJbnN0YW5jZUF0dGFjaG1lbnRzTGlzdFJlZHVjZXIsCiAgICBzZXF1ZW5jZVN0YWdlSW5zdGFuY2VBdHRhY2htZW50c0FwcGx5UmVkdWNlciwKXTsK"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/sequenceStageInstances.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/sequenceStageInstances.ts"],"names":[],"mappings":"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","sourcesContent":["import update from 'immutability-helper';\nimport { create, createAction } from '@src/lib/redux';\nimport {\n  ResourceStatus,\n  RequiredPartial,\n  AttachmentMeta,\n  Attachment,\n  AttachmentMetaStatus,\n  Template,\n  Resource,\n} from '@src/types';\nimport { SequenceStageInstance, SequenceStage } from '@src/types/sequences';\nimport { resourceOk, resourceRefreshing, resourcePending, resourceFailed } from '@src/lib/resource';\nimport { keyBy, values, compact } from 'lodash';\nimport { createSelector } from '@src/lib/selector';\n\nexport interface SequenceStageInstanceMeta {\n  sequence: string;\n  stage: string;\n}\n\nexport interface SequenceStageInstanceAttachmentMeta extends AttachmentMeta {\n  stage: string;\n  sequence: string;\n  status: AttachmentMetaStatus;\n}\n\n// Applies any attachment metas with status create/delete by calling API\n// to add or remove them from the resource\nexport const {\n  type: SEQUENCE_STAGE_INSTANCE_ATTACHMENTS_APPLY,\n  action: sequenceStageInstanceAttachmentsApply,\n  reducer: sequenceStageInstanceAttachmentsApplyReducer,\n} = create<SequenceStageInstance, Attachment[]>('SEQUENCE_STAGE_INSTANCE_ATTACHMENTS_APPLY', {\n  setup: (state, meta) => {\n    const metaExists = state.attachmentMetas[meta.id] || false;\n    const attachmentResourceExists = state.attachments[meta.id] || false;\n    if (!metaExists && !attachmentResourceExists) {\n      return update(state, {\n        attachmentMetas: {\n          [meta.id]: { $set: {} },\n        },\n        attachments: {\n          [meta.id]: { $set: {} },\n        },\n      });\n    }\n\n    if (!metaExists) {\n      return update(state, {\n        attachmentMetas: {\n          [meta.id]: { $set: {} },\n        },\n      });\n    }\n\n    if (!attachmentResourceExists) {\n      return update(state, {\n        attachments: {\n          [meta.id]: { $set: {} },\n        },\n      });\n    }\n    return state;\n  },\n  success: (state, meta, payload) => {\n    return update(state, {\n      attachments: {\n        [meta.id]: {\n          $merge: keyBy(\n            payload,\n            stageInstance => stageInstance.id,\n          ),\n        },\n      },\n      attachmentMetas: {\n        [meta.id]: {\n          $unset: payload.map(attachment => attachment.id),\n        },\n      },\n    });\n  },\n});\n\nexport const {\n  type: SEQUENCE_STAGE_INSTANCE_ATTACHMENT_ADD,\n  action: sequenceStageInstanceAttachmentAdd,\n  reducer: sequenceStageInstanceAttachmentAddReducer,\n} = create<SequenceStageInstanceAttachmentMeta, SequenceStageInstanceAttachmentMeta>(\n  'SEQUENCE_STAGE_INSTANCE_ATTACHMENT_ADD', {\n    setup: (state, meta) => {\n      const metaExists = state.attachmentMetas[meta.resourceId] || false;\n      const attachmentResourceExists = state.attachments[meta.resourceId] || false;\n      if (!metaExists && !attachmentResourceExists) {\n        return update(state, {\n          attachmentMetas: {\n            [meta.resourceId]: { $set: {} },\n          },\n          attachments: {\n            [meta.resourceId]: { $set: {} },\n          },\n        });\n      }\n\n      if (!metaExists) {\n        return update(state, {\n          attachmentMetas: {\n            [meta.resourceId]: { $set: {} },\n          },\n        });\n      }\n\n      if (!attachmentResourceExists) {\n        return update(state, {\n          attachments: {\n            [meta.resourceId]: { $set: {} },\n          },\n        });\n      }\n      return state;\n    },\n    start: (state, meta) => {\n      return update(state, {\n        attachmentMetas: { [meta.resourceId]: { [meta.attachment]: { $set: resourceOk(meta) } } },\n      });\n    },\n    success: (state, meta, payload) => {\n      return update(state, {\n        attachmentMetas: {\n          [meta.resourceId]: { [meta.attachment]: { $set: resourceOk(payload) } },\n        },\n      });\n    },\n    failure: (state, meta, error) => {\n      return update(state, {\n        attachmentMetas: {\n          [meta.resourceId]: {\n            [meta.attachment]: {\n              $set: resourceFailed(error, meta),\n            },\n          },\n        },\n      });\n    },\n  });\n\n// TODO(SHIN): Connect to CommitSync?\nexport const {\n  type: SEQUENCE_STAGE_INSTANCE_ATTACHMENT_REMOVE,\n  action: sequenceStageInstanceAttachmentRemove,\n  reducer: sequenceStageInstanceAttachmentRemoveReducer,\n} = create<SequenceStageInstanceAttachmentMeta, null>('SEQUENCE_STAGE_INSTANCE_ATTACHMENT_REMOVE', {\n  setup: (state, meta) => {\n    const metaExists = state.attachmentMetas[meta.resourceId] || false;\n    const attachmentResourceExists = state.attachments[meta.resourceId] || false;\n    if (!metaExists && !attachmentResourceExists) {\n      return update(state, {\n        attachmentMetas: {\n          [meta.resourceId]: { $set: {} },\n        },\n        attachments: {\n          [meta.resourceId]: { $set: {} },\n        },\n      });\n    }\n\n    if (!metaExists) {\n      return update(state, {\n        attachmentMetas: {\n          [meta.resourceId]: { $set: {} },\n        },\n      });\n    }\n\n    if (!attachmentResourceExists) {\n      return update(state, {\n        attachments: {\n          [meta.resourceId]: { $set: {} },\n        },\n      });\n    }\n    return state;\n  },\n  start: (state, meta) => {\n    return update(state, {\n      attachmentMetas: {\n        [meta.resourceId]: {\n          [meta.attachment]: { $set: resourceOk(meta) },\n        },\n      },\n      attachments: {\n        [meta.resourceId]: {\n          $unset: [meta.attachment],\n        },\n      },\n    });\n  },\n  success: (state, meta) => {\n    return update(state, {\n      attachmentMetas: {\n        [meta.resourceId]: {\n          $unset: [meta.attachment],\n        },\n      },\n      attachments: {\n        [meta.resourceId]: {\n          $unset: [meta.attachment],\n        },\n      },\n    });\n  },\n});\n\nexport const {\n  type: SEQUENCE_STAGE_INSTANCE_LIST,\n  action: sequenceStageInstanceList,\n  reducer: sequenceStageInstanceListReducer,\n} = create<SequenceStageInstanceMeta, SequenceStageInstance[]>('SEQUENCE_STAGE_INSTANCE_LIST', {\n  setup: (state, meta) => {\n    if (state.sequenceStageInstances[meta.sequence + meta.stage]) {\n      return state;\n    }\n\n    return update(state, {\n      sequenceStageInstances: {\n        [meta.sequence + meta.stage]: { $set: {} },\n      },\n    });\n  },\n  success: (state, meta, payload) =>\n    update(state, {\n      sequenceStageInstances: {\n        [meta.sequence + meta.stage]: {\n          $merge: keyBy(\n            payload.map(val => resourceOk(val)),\n            stageInstance => stageInstance.data && stageInstance.data.id,\n          ),\n        },\n      },\n    }),\n});\n\nexport const {\n  type: SEQUENCE_STAGE_INSTANCE_ATTACHMENTS_LIST,\n  action: sequenceStageInstanceAttachmentsList,\n  reducer: sequenceStageInstanceAttachmentsListReducer,\n} = create<SequenceStageInstance, Attachment[]>('SEQUENCE_STAGE_INSTANCE_ATTACHMENTS_LIST', {\n  setup: (state, meta) => {\n    const metaExists = state.attachmentMetas[meta.id] || false;\n    const attachmentResourceExists = state.attachments[meta.id] || false;\n    if (!metaExists && !attachmentResourceExists) {\n      return update(state, {\n        attachmentMetas: {\n          [meta.id]: { $set: {} },\n        },\n        attachments: {\n          [meta.id]: { $set: {} },\n        },\n      });\n    }\n\n    if (!metaExists) {\n      return update(state, {\n        attachmentMetas: {\n          [meta.id]: { $set: {} },\n        },\n      });\n    }\n\n    if (!attachmentResourceExists) {\n      return update(state, {\n        attachments: {\n          [meta.id]: { $set: {} },\n        },\n      });\n    }\n    return state;\n  },\n  success: (state, meta, payload) => {\n    return update(state, {\n      attachments: {\n        [meta.id]: {\n          $set: keyBy(\n            payload,\n            stageInstance => stageInstance.id,\n          ),\n        },\n      },\n      // Remove any associated metas when refetching attachments\n      attachmentMetas: {\n        [meta.id]: {\n          $set: {},\n        },\n      },\n    });\n  },\n});\n\nexport type SequenceStageInstanceCreateMeta = RequiredPartial<\n  SequenceStageInstance,\n 'stage' | 'sequence' | 'subject' | 'body'\n>;\n\nexport const {\n  type: SEQUENCE_STAGE_INSTANCE_CREATE,\n  action: sequenceStageInstanceCreate,\n  reducer: sequenceStageInstanceCreateReducer,\n} = create<SequenceStageInstanceCreateMeta, SequenceStageInstance>(\n  'SEQUENCE_STAGE_INSTANCE_CREATE', {\n    setup: (state, meta) => {\n      if (state.sequenceStageInstances[meta.sequence + meta.stage]) {\n        return state;\n      }\n\n      return update(state, {\n        sequenceStageInstances: {\n          [meta.sequence + meta.stage]: { $set: {} },\n        },\n      });\n    },\n    success: (state, meta, payload) => update(state, {\n      sequenceStageInstances: {\n        [payload.sequence + payload.stage]: {\n          [payload.id]: {\n            $set: resourceOk(payload),\n          },\n        },\n      },\n    }),\n    failure: (state, meta, error) =>\n      update(state, {\n        sequenceStageInstances: {\n          [meta.sequence + meta.stage]: {\n            $unset: [meta.id],\n          },\n        },\n      }),\n  });\n\nexport type SequenceStageInstanceUpdateMeta = RequiredPartial<\n  SequenceStageInstance,\n  'stage' | 'sequence' | 'id'\n>;\n\n// TODO(SHIN): Handle failure notifications for invidivual stageInstance delete errors\nexport const {\n  type: SEQUENCE_STAGE_INSTANCE_UPDATE,\n  action: sequenceStageInstanceUpdate,\n  reducer: sequenceStageInstanceUpdateReducer,\n} = create<SequenceStageInstanceUpdateMeta, SequenceStageInstance>(\n  'SEQUENCE_STAGE_INSTANCE_UPDATE', {\n    setup: (state, meta) => {\n      if (state.sequenceStageInstances[meta.sequence + meta.stage]) {\n        if (state.sequenceStageInstances[meta.sequence + meta.stage][meta.id]) {\n          return state;\n        }\n\n        return update(state, {\n          sequenceStageInstances: {\n            [meta.sequence + meta.stage]: { [meta.id]: { $set: resourcePending() } },\n          },\n        });\n      }\n\n      return update(state, {\n        sequenceStageInstances: {\n          [meta.sequence + meta.stage]: { $set: { [meta.id]: resourcePending() } },\n        },\n      });\n    },\n    start: (state, meta) => update(state, {\n      sequenceStageInstances: {\n        [meta.sequence + meta.stage]: {\n          [meta.id]: { $set: resourceRefreshing(meta) },\n        },\n      },\n    }),\n    success: (state, meta, payload) => update(state, {\n      sequenceStageInstances: {\n        [meta.sequence + meta.stage]: {\n          [meta.id]: {\n            $set: resourceOk(payload),\n          },\n        },\n      },\n    }),\n    failure: (state, meta, error) =>\n      update(state, {\n        sequenceStageInstances: {\n          [meta.sequence + meta.stage]: {\n            [meta.id]: {\n              status: {\n                $set: ResourceStatus.Ok,\n              },\n            },\n          },\n        },\n      }),\n  });\n\n// TODO(SHIN): Discuss Error states for sequence stageInstances deletions\n// TODO(SHIN): Handle failure notifications for invidivual stageInstance delete errors\nexport const {\n  type: SEQUENCE_STAGE_INSTANCE_DELETE,\n  action: sequenceStageInstanceDelete,\n  reducer: sequenceStageInstanceDeleteReducer,\n} = create<SequenceStageInstance, null>('SEQUENCE_STAGE_INSTANCE_DELETE', {\n  setup: (state, meta) => {\n    if (state.sequenceStageInstances[meta.sequence + meta.stage]) {\n      if (state.sequenceStageInstances[meta.sequence + meta.stage][meta.id]) {\n        return state;\n      }\n\n      return update(state, {\n        sequenceStageInstances: {\n          [meta.sequence + meta.stage]: { [meta.id]: { $set: resourcePending() } },\n        },\n      });\n    }\n\n    return update(state, {\n      sequenceStageInstances: {\n        [meta.sequence + meta.stage]: { $set: { [meta.id]: resourcePending() } },\n      },\n    });\n  },\n  success: (state, meta, payload) => update(state, {\n    sequenceStageInstances: {\n      [meta.sequence + meta.stage]: {\n        $unset: [meta.id],\n      },\n    },\n  }),\n  failure: (state, meta, error) => update(state, {\n    sequenceStageInstances: {\n      [meta.sequence + meta.stage]: {\n        [meta.id]: { $set: resourceOk(meta) },\n      },\n    },\n  }),\n});\n\nexport interface SequenceStageInstanceTestMeta {\n  sequence: string;\n  stage: string;\n  instance: SequenceStageInstance;\n  emails: string[];\n  insertVariables: boolean;\n  attachments: Attachment[];\n}\nexport const SEQUENCE_STAGE_INSTANCE_TEST = 'SEQUENCE_STAGE_INSTANCE_TEST';\nexport const sequenceStageInstanceTest = createAction<SequenceStageInstanceTestMeta, null>(\n  SEQUENCE_STAGE_INSTANCE_TEST,\n);\n\n// Apply template to sequence stage instance\nexport const {\n  type: SEQUENCE_STAGE_INSTANCE_TEMPLATE_APPLY,\n  action: sequenceStageInstanceTemplateApply,\n  reducer: sequenceStageInstanceTemplateApplyReducer,\n} = create<Template, SequenceStageInstance>('SEQUENCE_STAGE_INSTANCE_TEMPLATE_APPLY', {});\n\nconst emptyAttachments: Attachment[] = [];\nconst emptySequenceStageInstances: SequenceStageInstance[] = [];\n\n// Returns you all sequenceStageInstances for a SequenceStage\nexport const selectAvailableSequenceStageInstances = createSelector<\n  SequenceStage,\n  { [id: string]: Resource<SequenceStageInstance> } | undefined | SequenceStage,\n  SequenceStageInstance[]\n>(\n  [\n    (state, stage) => state.sequenceStageInstances[stage.sequence + stage.id],\n    (state, stage) => stage,\n  ],\n  (metas: { [id: string]: Resource<SequenceStageInstance> } | undefined) => {\n    if (!metas) {\n      return emptySequenceStageInstances;\n    }\n\n    return compact(values(metas).map(resource => resource.data));\n  },\n  (state, stage: SequenceStage) => stage.sequence + stage.id,\n  ['sequenceStageInstances'],\n);\n\n// Returns you all attachment metas for a draft\nexport const selectStageInstanceAttachmentsForResource = createSelector<\n  string,\n  { [id: string]: Attachment } | undefined,\n  Attachment[]\n>(\n    [(state, resourceId) => state.attachments[resourceId]],\n    (metas: { [id: string]: Attachment }, resourceId: string) => {\n      if (!metas) {\n        return emptyAttachments;\n      }\n\n      return values(metas);\n    },\n    undefined,\n    ['attachments'],\n);\n\nexport default [\n  sequenceStageInstanceUpdateReducer,\n  sequenceStageInstanceCreateReducer,\n  sequenceStageInstanceDeleteReducer,\n  sequenceStageInstanceListReducer,\n  sequenceStageInstanceAttachmentAddReducer,\n  sequenceStageInstanceAttachmentRemoveReducer,\n  sequenceStageInstanceAttachmentsListReducer,\n  sequenceStageInstanceAttachmentsApplyReducer,\n];\n"]}]}