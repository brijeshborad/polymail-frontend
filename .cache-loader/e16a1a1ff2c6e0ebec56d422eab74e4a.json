{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/components/ThreadDetail/components/ShareThreadPopover/components/ShareToSlack/index.tsx","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/components/ThreadDetail/components/ShareThreadPopover/components/ShareToSlack/index.tsx","mtime":1675280254044},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JzsKaW1wb3J0IFNoYXJlVG9TbGFjayBmcm9tICcuL1NoYXJlVG9TbGFjayc7CmltcG9ydCB7IHNlbGVjdFNsYWNrRW5hYmxlZCwgaW50ZWdyYXRpb25TbGFja0xvZ2luIH0gZnJvbSAnQHNyYy9kdWNrcy9pbnRlZ3JhdGlvbnMnOwppbXBvcnQgeyBzZWxlY3RUZWFtIH0gZnJvbSAnQHNyYy9kdWNrcy90ZWFtJzsKaW1wb3J0IHsgc2xhY2tDaGFubmVsTGlzdCwgc2xhY2tNZW1iZXJMaXN0LCBzbGFja01lc3NhZ2VQb3N0IH0gZnJvbSAnQHNyYy9kdWNrcy9zbGFjayc7CnZhciBtYXBTdGF0ZVRvUHJvcHMgPSBmdW5jdGlvbiAoc3RhdGUpIHsKICAgIHJldHVybiB7CiAgICAgICAgc2xhY2tFbmFibGVkOiBzZWxlY3RTbGFja0VuYWJsZWQoc3RhdGUpLAogICAgICAgIHRlYW06IHNlbGVjdFRlYW0oc3RhdGUpLAogICAgICAgIHNsYWNrU3RhdGU6IHN0YXRlLnNsYWNrLAogICAgfTsKfTsKdmFyIG1hcERpc3BhdGNoVG9Qcm9wcyA9IGZ1bmN0aW9uIChkaXNwYXRjaCkgewogICAgcmV0dXJuIHsKICAgICAgICBsb2dpblNsYWNrOiBmdW5jdGlvbiAodGVhbSkgeyByZXR1cm4gZGlzcGF0Y2goaW50ZWdyYXRpb25TbGFja0xvZ2luKHRlYW0pKTsgfSwKICAgICAgICBsaXN0Q2hhbm5lbHM6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRpc3BhdGNoKHNsYWNrQ2hhbm5lbExpc3QobnVsbCkpOyB9LAogICAgICAgIGxpc3RNZW1iZXJzOiBmdW5jdGlvbiAoKSB7IHJldHVybiBkaXNwYXRjaChzbGFja01lbWJlckxpc3QobnVsbCkpOyB9LAogICAgICAgIHBvc3RNZXNzYWdlOiBmdW5jdGlvbiAobWV0YSkgeyByZXR1cm4gZGlzcGF0Y2goc2xhY2tNZXNzYWdlUG9zdChtZXRhKSk7IH0sCiAgICB9Owp9OwpleHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShTaGFyZVRvU2xhY2spOwo="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/components/ThreadDetail/components/ShareThreadPopover/components/ShareToSlack/index.tsx","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/components/ThreadDetail/components/ShareThreadPopover/components/ShareToSlack/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAY,MAAM,aAAa,CAAC;AAEhD,OAAO,YAA2C,MAAM,gBAAgB,CAAC;AACzE,OAAO,EAAE,kBAAkB,EAAE,qBAAqB,EAAE,MAAM,yBAAyB,CAAC;AACpF,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAC7C,OAAO,EAAE,gBAAgB,EAAE,eAAe,EAAE,gBAAgB,EAAE,MAAM,kBAAkB,CAAC;AAEvF,IAAM,eAAe,GAAG,UAAC,KAAiB;IACxC,OAAO;QACL,YAAY,EAAE,kBAAkB,CAAC,KAAK,CAAC;QACvC,IAAI,EAAE,UAAU,CAAC,KAAK,CAAC;QACvB,UAAU,EAAE,KAAK,CAAC,KAAK;KACxB,CAAC;AACJ,CAAC,CAAC;AAEF,IAAM,kBAAkB,GAAG,UAAC,QAA8B;IACxD,OAAO;QACL,UAAU,EAAE,UAAA,IAAI,IAAI,OAAA,QAAQ,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC,EAArC,CAAqC;QACzD,YAAY,EAAE,cAAM,OAAA,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,EAAhC,CAAgC;QACpD,WAAW,EAAE,cAAM,OAAA,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,EAA/B,CAA+B;QAClD,WAAW,EAAE,UAAA,IAAI,IAAI,OAAA,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,EAAhC,CAAgC;KACtD,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,OAAO,CAAC,eAAe,EAAE,kBAAkB,CAAC,CAAC,YAAY,CAAC,CAAC","sourcesContent":["import { connect, Dispatch } from 'react-redux';\nimport { StoreState } from '@src/types';\nimport ShareToSlack, { StateProps, DispatchProps } from './ShareToSlack';\nimport { selectSlackEnabled, integrationSlackLogin } from '@src/ducks/integrations';\nimport { selectTeam } from '@src/ducks/team';\nimport { slackChannelList, slackMemberList, slackMessagePost } from '@src/ducks/slack';\n\nconst mapStateToProps = (state: StoreState): StateProps => {\n  return {\n    slackEnabled: selectSlackEnabled(state),\n    team: selectTeam(state),\n    slackState: state.slack,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<StoreState>): DispatchProps => {\n  return {\n    loginSlack: team => dispatch(integrationSlackLogin(team)),\n    listChannels: () => dispatch(slackChannelList(null)),\n    listMembers: () => dispatch(slackMemberList(null)),\n    postMessage: meta => dispatch(slackMessagePost(meta)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShareToSlack);\n"]}]}