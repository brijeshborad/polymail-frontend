{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/components/Form/ContactInput/index.tsx","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/components/Form/ContactInput/index.tsx","mtime":1675280254005},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JzsKaW1wb3J0IENvbnRhY3RJbnB1dCBmcm9tICcuL0NvbnRhY3RJbnB1dCc7CmltcG9ydCB7IGNvbnRhY3RUeXBlYWhlYWQsIGNvbnRhY3RUeXBlYWhlYWRDbGVhciB9IGZyb20gJ0BzcmMvZHVja3MvY29udGFjdHMnOwp2YXIgbWFwU3RhdGVUb1Byb3BzID0gZnVuY3Rpb24gKHN0YXRlKSB7CiAgICByZXR1cm4gewogICAgICAgIHR5cGVhaGVhZENvbnRhY3RzOiBzdGF0ZS50eXBlYWhlYWRDb250YWN0cywKICAgIH07Cn07CnZhciBtYXBEaXNwYXRjaFRvUHJvcHMgPSBmdW5jdGlvbiAoZGlzcGF0Y2gpIHsKICAgIHJldHVybiB7CiAgICAgICAgY29udGFjdFR5cGVhaGVhZDogZnVuY3Rpb24gKHF1ZXJ5KSB7IHJldHVybiBkaXNwYXRjaChjb250YWN0VHlwZWFoZWFkKHF1ZXJ5KSk7IH0sCiAgICAgICAgY2xlYXJDb250YWN0VHlwZWFoZWFkOiBmdW5jdGlvbiAoKSB7IHJldHVybiBkaXNwYXRjaChjb250YWN0VHlwZWFoZWFkQ2xlYXIoKSk7IH0sCiAgICB9Owp9OwpleHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShDb250YWN0SW5wdXQpOwo="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/components/Form/ContactInput/index.tsx","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/components/Form/ContactInput/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAY,MAAM,aAAa,CAAC;AAGhD,OAAO,YAAkD,MAAM,gBAAgB,CAAC;AAChF,OAAO,EAAE,gBAAgB,EAAE,qBAAqB,EAAE,MAAM,qBAAqB,CAAC;AAE9E,IAAM,eAAe,GAAG,UAAC,KAAiB;IACxC,OAAO;QACL,iBAAiB,EAAE,KAAK,CAAC,iBAAiB;KAC3C,CAAC;AACJ,CAAC,CAAC;AAEF,IAAM,kBAAkB,GAAG,UAAC,QAA8B;IACxD,OAAO;QACL,gBAAgB,EAAE,UAAA,KAAK,IAAI,OAAA,QAAQ,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,EAAjC,CAAiC;QAC5D,qBAAqB,EAAE,cAAM,OAAA,QAAQ,CAAC,qBAAqB,EAAE,CAAC,EAAjC,CAAiC;KAC/D,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,OAAO,CACpB,eAAe,EAAE,kBAAkB,CACpC,CAAC,YAAY,CAAC,CAAC","sourcesContent":["import { connect, Dispatch } from 'react-redux';\nimport { StoreState } from '@src/types';\n\nimport ContactInput, { StateProps, DispatchProps, Props } from './ContactInput';\nimport { contactTypeahead, contactTypeaheadClear } from '@src/ducks/contacts';\n\nconst mapStateToProps = (state: StoreState): StateProps => {\n  return {\n    typeaheadContacts: state.typeaheadContacts,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<StoreState>): DispatchProps => {\n  return {\n    contactTypeahead: query => dispatch(contactTypeahead(query)),\n    clearContactTypeahead: () => dispatch(contactTypeaheadClear()),\n  };\n};\n\nexport default connect<StateProps, DispatchProps, Props>(\n  mapStateToProps, mapDispatchToProps,\n)(ContactInput);\n"]}]}