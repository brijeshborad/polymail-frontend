{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Login/components/MagicLink/index.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Login/components/MagicLink/index.ts","mtime":1675280254078},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JzsKaW1wb3J0IHsgYXV0aEdldE1hZ2ljTGluaywgYXV0aExvZ2luLCBhdXRoQ2xlYXJSZWRpcmVjdCB9IGZyb20gJ0BzcmMvZHVja3MvYXV0aCc7CmltcG9ydCBNYWdpY0xpbmsgZnJvbSAnLi9NYWdpY0xpbmsnOwppbXBvcnQgeyBMb2dpblR5cGUgfSBmcm9tICdAc3JjL2FwaS9hdXRoJzsKaW1wb3J0IHsgd2l0aFJvdXRlciB9IGZyb20gJ3JlYWN0LXJvdXRlcic7CnZhciBtYXBTdGF0ZVRvUHJvcHMgPSBmdW5jdGlvbiAoc3RhdGUsIG93blByb3BzKSB7IHJldHVybiAoewogICAgbWU6IHN0YXRlLm1lLmRhdGEsCiAgICBjb2RlOiBuZXcgVVJMU2VhcmNoUGFyYW1zKG93blByb3BzLmxvY2F0aW9uLnNlYXJjaCB8fCAnJykuZ2V0KCdjb2RlJykgfHwgdW5kZWZpbmVkLAogICAgbG9nZ2VkSW46IHN0YXRlLmxvZ2dlZEluLAogICAgcmVkaXJlY3RQbGF0Zm9ybTogc3RhdGUucmVkaXJlY3RQbGF0Zm9ybSwKfSk7IH07CnZhciBtYXBEaXNwYXRjaFRvUHJvcHMgPSBmdW5jdGlvbiAoZGlzcGF0Y2gpIHsgcmV0dXJuICh7CiAgICBnZXRNYWdpY0xpbms6IGZ1bmN0aW9uIChlbWFpbCkgeyByZXR1cm4gZGlzcGF0Y2goYXV0aEdldE1hZ2ljTGluayh7IGVtYWlsOiBlbWFpbCwgc2tpcEVtYWlsOiB0cnVlIH0pKTsgfSwKICAgIGxvZ2luOiBmdW5jdGlvbiAoY29kZSkgeyByZXR1cm4gZGlzcGF0Y2goYXV0aExvZ2luKHsKICAgICAgICBlbWFpbDogbnVsbCwKICAgICAgICBwYXNzd29yZDogbnVsbCwKICAgICAgICBtYWdpY0NvZGU6IGNvZGUsCiAgICAgICAgdHlwZTogTG9naW5UeXBlLlRydXN0ZWQsCiAgICB9KSk7IH0sCiAgICBjbGVhclJlZGlyZWN0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkaXNwYXRjaChhdXRoQ2xlYXJSZWRpcmVjdChudWxsKSk7IH0sCn0pOyB9OwpleHBvcnQgZGVmYXVsdCB3aXRoUm91dGVyKGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMpKE1hZ2ljTGluaykpOwo="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Login/components/MagicLink/index.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Login/components/MagicLink/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAY,MAAM,aAAa,CAAC;AAChD,OAAO,EAAE,gBAAgB,EAAE,SAAS,EAAE,iBAAiB,EAAE,MAAM,iBAAiB,CAAC;AACjF,OAAO,SAAwC,MAAM,aAAa,CAAC;AACnE,OAAO,EAAE,SAAS,EAAE,MAAM,eAAe,CAAC;AAC1C,OAAO,EAAuB,UAAU,EAAE,MAAM,cAAc,CAAC;AAG/D,IAAM,eAAe,GAAG,UAAC,KAAiB,EAAE,QAAkC,IAAiB,OAAA,CAAC;IAC9F,EAAE,EAAE,KAAK,CAAC,EAAE,CAAC,IAAI;IACjB,IAAI,EAAE,IAAI,eAAe,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,SAAS;IAClF,QAAQ,EAAE,KAAK,CAAC,QAAQ;IACxB,gBAAgB,EAAE,KAAK,CAAC,gBAAgB;CACzC,CAAC,EAL6F,CAK7F,CAAC;AAEH,IAAM,kBAAkB,GAAG,UAAC,QAAuB,IAAoB,OAAA,CAAC;IACtE,YAAY,EAAE,UAAA,KAAK,IAAK,OAAA,QAAQ,CAAC,gBAAgB,CAAC,EAAE,KAAK,OAAA,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC,EAAtD,CAAsD;IAC9E,KAAK,EAAE,UAAA,IAAI,IAAI,OAAA,QAAQ,CAAC,SAAS,CAAC;QAChC,KAAK,EAAE,IAAI;QACX,QAAQ,EAAE,IAAI;QACd,SAAS,EAAE,IAAI;QACf,IAAI,EAAE,SAAS,CAAC,OAAO;KACxB,CAAC,CAAC,EALY,CAKZ;IACH,aAAa,EAAE,cAAM,OAAA,QAAQ,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,EAAjC,CAAiC;CACvD,CAAC,EATqE,CASrE,CAAC;AAEH,eAAe,UAAU,CACvB,OAAO,CAA4B,eAAe,EAAE,kBAAkB,CAAC,CAAC,SAAS,CAAC,CACnF,CAAC","sourcesContent":["import { connect, Dispatch } from 'react-redux';\nimport { authGetMagicLink, authLogin, authClearRedirect } from '@src/ducks/auth';\nimport MagicLink, { StateProps, DispatchProps } from './MagicLink';\nimport { LoginType } from '@src/api/auth';\nimport { RouteComponentProps, withRouter } from 'react-router';\nimport { StoreState } from '@src/types';\n\nconst mapStateToProps = (state: StoreState, ownProps: RouteComponentProps<any>): StateProps => ({\n  me: state.me.data,\n  code: new URLSearchParams(ownProps.location.search || '').get('code') || undefined,\n  loggedIn: state.loggedIn,\n  redirectPlatform: state.redirectPlatform,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>): DispatchProps => ({\n  getMagicLink: email  => dispatch(authGetMagicLink({ email, skipEmail: true })),\n  login: code => dispatch(authLogin({\n    email: null,\n    password: null,\n    magicCode: code,\n    type: LoginType.Trusted,\n  })),\n  clearRedirect: () => dispatch(authClearRedirect(null)),\n});\n\nexport default withRouter(\n  connect<StateProps, DispatchProps>(mapStateToProps, mapDispatchToProps)(MagicLink),\n);\n"]}]}