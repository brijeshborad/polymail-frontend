{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/sequenceStageInstances.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/sequenceStageInstances.ts","mtime":1675280253980},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnOwppbXBvcnQgeyBqc29uUmVxdWVzdCwgYmxhbmtSZXF1ZXN0IH0gZnJvbSAnLi9iYXNlJzsKaW1wb3J0IHsgY3JlYXRlU2VxdWVuY2VTdGFnZUluc3RhbmNlIH0gZnJvbSAnQHNyYy9tb2Nrcy9zZXF1ZW5jZXMnOwppbXBvcnQgeyBhcHBseVNlcXVlbmNlU3RhZ2VJbnN0YW5jZURlZmF1bHRzIH0gZnJvbSAnQHNyYy9saWIvbW9kZWxzL3NlcXVlbmNlU3RhZ2VJbnN0YW5jZXMnOwppbXBvcnQgeyBjcmVhdGVBdHRhY2htZW50LCBjcmVhdGVDbG91ZEZpbGUgfSBmcm9tICdAc3JjL21vY2tzL2F0dGFjaG1lbnRzJzsKaW1wb3J0IHsgQ2xvdWRGaWxlQ2xpZW50IH0gZnJvbSAnQHNyYy9hcGkvY2xvdWRGaWxlJzsKdmFyIFNlcXVlbmNlU3RhZ2VJbnN0YW5jZUNsaWVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHsKICAgIGZ1bmN0aW9uIFNlcXVlbmNlU3RhZ2VJbnN0YW5jZUNsaWVudCgpIHsKICAgIH0KICAgIFNlcXVlbmNlU3RhZ2VJbnN0YW5jZUNsaWVudC5wcm90b3R5cGUubGlzdCA9IGZ1bmN0aW9uIChzZXF1ZW5jZSwgc3RhZ2UpIHsKICAgICAgICByZXR1cm4ganNvblJlcXVlc3QoewogICAgICAgICAgICBtZXRob2Q6ICdHRVQnLAogICAgICAgICAgICByb3V0ZTogIi92MS9zZXF1ZW5jZXMvIiArIHNlcXVlbmNlICsgIi9zdGFnZXMvIiArIHN0YWdlICsgIi9pbnN0YW5jZXMiLAogICAgICAgIH0pCiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGluc3RhbmNlcykgeyByZXR1cm4gaW5zdGFuY2VzLm1hcChmdW5jdGlvbiAoaSkgeyByZXR1cm4gYXBwbHlTZXF1ZW5jZVN0YWdlSW5zdGFuY2VEZWZhdWx0cyhpKTsgfSk7IH0pOwogICAgfTsKICAgIFNlcXVlbmNlU3RhZ2VJbnN0YW5jZUNsaWVudC5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7CiAgICAgICAgcmV0dXJuIGpzb25SZXF1ZXN0KHsKICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsCiAgICAgICAgICAgIHJvdXRlOiAiL3YxL3NlcXVlbmNlcy8iICsgaW5zdGFuY2Uuc2VxdWVuY2UgKyAiL3N0YWdlcy8iICsgaW5zdGFuY2Uuc3RhZ2UgKyAiL2luc3RhbmNlcyIsCiAgICAgICAgICAgIGJvZHk6IGluc3RhbmNlLAogICAgICAgIH0pCiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIGFwcGx5U2VxdWVuY2VTdGFnZUluc3RhbmNlRGVmYXVsdHMocyk7IH0pOwogICAgfTsKICAgIFNlcXVlbmNlU3RhZ2VJbnN0YW5jZUNsaWVudC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7CiAgICAgICAgcmV0dXJuIGpzb25SZXF1ZXN0KHsKICAgICAgICAgICAgbWV0aG9kOiAnUEFUQ0gnLAogICAgICAgICAgICByb3V0ZTogIi92MS9zZXF1ZW5jZXMvIiArIGluc3RhbmNlLnNlcXVlbmNlICsgIi9zdGFnZXMvIiArIGluc3RhbmNlLnN0YWdlICsgIi9pbnN0YW5jZXMvIiArIGluc3RhbmNlLmlkLAogICAgICAgICAgICBib2R5OiBpbnN0YW5jZSwKICAgICAgICB9KQogICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChzKSB7IHJldHVybiBhcHBseVNlcXVlbmNlU3RhZ2VJbnN0YW5jZURlZmF1bHRzKHMpOyB9KTsKICAgIH07CiAgICBTZXF1ZW5jZVN0YWdlSW5zdGFuY2VDbGllbnQucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uIChpbnN0YW5jZSkgewogICAgICAgIHJldHVybiBibGFua1JlcXVlc3QoewogICAgICAgICAgICBtZXRob2Q6ICdERUxFVEUnLAogICAgICAgICAgICByb3V0ZTogIi92MS9zZXF1ZW5jZXMvIiArIGluc3RhbmNlLnNlcXVlbmNlICsgIi9zdGFnZXMvIiArIGluc3RhbmNlLnN0YWdlICsgIi9pbnN0YW5jZXMvIiArIGluc3RhbmNlLmlkLAogICAgICAgIH0pOwogICAgfTsKICAgIFNlcXVlbmNlU3RhZ2VJbnN0YW5jZUNsaWVudC5wcm90b3R5cGUudXBsb2FkQ2xvdWRGaWxlID0gZnVuY3Rpb24gKG1ldGEpIHsKICAgICAgICByZXR1cm4gbmV3IENsb3VkRmlsZUNsaWVudCgpLnVwbG9hZFdpdGhQcm9ncmVzcyhtZXRhLmZpbGUpOwogICAgfTsKICAgIFNlcXVlbmNlU3RhZ2VJbnN0YW5jZUNsaWVudC5wcm90b3R5cGUudXBsb2FkQXR0YWNobWVudCA9IGZ1bmN0aW9uIChtZXRhKSB7CiAgICAgICAgcmV0dXJuIGpzb25SZXF1ZXN0KHsKICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsCiAgICAgICAgICAgIHJvdXRlOiAiL3YxL3NlcXVlbmNlcy8iICsgbWV0YS5zZXF1ZW5jZSArICIvc3RhZ2VzLyIgKyBtZXRhLnN0YWdlICsgIi9pbnN0YW5jZXMvIgogICAgICAgICAgICAgICAgKyAobWV0YS5yZXNvdXJjZUlkICsgIi9hdHRhY2htZW50cyIpLAogICAgICAgICAgICBib2R5OiB7CiAgICAgICAgICAgICAgICBpZDogbWV0YS5hdHRhY2htZW50LAogICAgICAgICAgICAgICAgZmlsZW5hbWU6IG1ldGEuZmlsZSAmJiBtZXRhLmZpbGUubmFtZSwKICAgICAgICAgICAgICAgIGNsb3VkRmlsZTogbWV0YS5jbG91ZEZpbGUsCiAgICAgICAgICAgICAgICBpbmxpbmU6IG1ldGEuaW5saW5lIHx8IGZhbHNlLAogICAgICAgICAgICAgICAgY2xvdWQ6IG1ldGEuY2xvdWQgfHwgZmFsc2UsCiAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogbWV0YS50ZW1wbGF0ZSwKICAgICAgICAgICAgfSwKICAgICAgICB9KTsKICAgIH07CiAgICBTZXF1ZW5jZVN0YWdlSW5zdGFuY2VDbGllbnQucHJvdG90eXBlLnVwbG9hZFRlbXBsYXRlQXR0YWNobWVudCA9IGZ1bmN0aW9uIChtZXRhKSB7CiAgICAgICAgcmV0dXJuIGpzb25SZXF1ZXN0KHsKICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsCiAgICAgICAgICAgIHJvdXRlOiAiL3YxL3NlcXVlbmNlcy8iICsgbWV0YS5zZXF1ZW5jZSArICIvc3RhZ2VzLyIgKyBtZXRhLnN0YWdlICsgIi8iCiAgICAgICAgICAgICAgICArICgiaW5zdGFuY2VzLyIgKyBtZXRhLnJlc291cmNlSWQgKyAiL2F0dGFjaG1lbnRzIiksCiAgICAgICAgICAgIGJvZHk6IG1ldGEsCiAgICAgICAgfSk7CiAgICB9OwogICAgU2VxdWVuY2VTdGFnZUluc3RhbmNlQ2xpZW50LnByb3RvdHlwZS5yZW1vdmVBdHRhY2htZW50ID0gZnVuY3Rpb24gKG1ldGEpIHsKICAgICAgICByZXR1cm4gYmxhbmtSZXF1ZXN0KHsKICAgICAgICAgICAgbWV0aG9kOiAnREVMRVRFJywKICAgICAgICAgICAgcm91dGU6ICIvdjEvc2VxdWVuY2VzLyIgKyBtZXRhLnNlcXVlbmNlICsgIi9zdGFnZXMvIiArIG1ldGEuc3RhZ2UgKyAiL2luc3RhbmNlcy8iICsgbWV0YS5yZXNvdXJjZUlkCiAgICAgICAgICAgICAgICArICgiL2F0dGFjaG1lbnRzLyIgKyBtZXRhLmF0dGFjaG1lbnQpLAogICAgICAgIH0pOwogICAgfTsKICAgIFNlcXVlbmNlU3RhZ2VJbnN0YW5jZUNsaWVudC5wcm90b3R5cGUubGlzdEF0dGFjaG1lbnRzID0gZnVuY3Rpb24gKHNlcXVlbmNlLCBzdGFnZSwgaW5zdGFuY2UpIHsKICAgICAgICByZXR1cm4ganNvblJlcXVlc3QoewogICAgICAgICAgICBtZXRob2Q6ICdHRVQnLAogICAgICAgICAgICByb3V0ZTogIi92MS9zZXF1ZW5jZXMvIiArIHNlcXVlbmNlICsgIi9zdGFnZXMvIiArIHN0YWdlICsgIi9pbnN0YW5jZXMvIiArIGluc3RhbmNlICsgIi9hdHRhY2htZW50cyIsCiAgICAgICAgfSk7CiAgICB9OwogICAgU2VxdWVuY2VTdGFnZUluc3RhbmNlQ2xpZW50LnByb3RvdHlwZS50ZXN0ID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7CiAgICAgICAgcmV0dXJuIE9ic2VydmFibGUubWVyZ2UuYXBwbHkoT2JzZXJ2YWJsZSwgaW5zdGFuY2UuZW1haWxzLm1hcChmdW5jdGlvbiAoZW1haWwpIHsKICAgICAgICAgICAgcmV0dXJuIGJsYW5rUmVxdWVzdCh7CiAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJywKICAgICAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtbGluZS1sZW5ndGgKICAgICAgICAgICAgICAgIHJvdXRlOiAiL3YxL3NlcXVlbmNlcy8iICsgaW5zdGFuY2Uuc2VxdWVuY2UgKyAiL3N0YWdlcy8iICsgaW5zdGFuY2Uuc3RhZ2UgKyAiL2luc3RhbmNlcy8iICsgaW5zdGFuY2UuaW5zdGFuY2UuaWQgKyAiL3Rlc3QiLAogICAgICAgICAgICAgICAgYm9keTogewogICAgICAgICAgICAgICAgICAgIGVtYWlsOiBlbWFpbCwKICAgICAgICAgICAgICAgICAgICBzdWJqZWN0OiBpbnN0YW5jZS5pbnN0YW5jZS5zdWJqZWN0LAogICAgICAgICAgICAgICAgICAgIGJvZHk6IGluc3RhbmNlLmluc3RhbmNlLmJvZHksCiAgICAgICAgICAgICAgICAgICAgdW5zdWJzY3JpYmVMaW5rOiBpbnN0YW5jZS5pbnN0YW5jZS51bnN1YnNjcmliZUxpbmssCiAgICAgICAgICAgICAgICAgICAgaW5zZXJ0VmFyaWFibGVzOiBpbnN0YW5jZS5pbnNlcnRWYXJpYWJsZXMsCiAgICAgICAgICAgICAgICAgICAgYXR0YWNobWVudHM6IGluc3RhbmNlLmF0dGFjaG1lbnRzLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSk7CiAgICAgICAgfSkpOwogICAgfTsKICAgIHJldHVybiBTZXF1ZW5jZVN0YWdlSW5zdGFuY2VDbGllbnQ7Cn0oKSk7CmV4cG9ydCB7IFNlcXVlbmNlU3RhZ2VJbnN0YW5jZUNsaWVudCB9OwpleHBvcnQgZnVuY3Rpb24gbW9ja1NlcXVlbmNlU3RhZ2VJbnN0YW5jZUNsaWVudCgpIHsKICAgIHJldHVybiB7CiAgICAgICAgbGlzdDogZnVuY3Rpb24gKCkgeyByZXR1cm4gT2JzZXJ2YWJsZS5vZihbY3JlYXRlU2VxdWVuY2VTdGFnZUluc3RhbmNlKCldKTsgfSwKICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uIChpbnN0YW5jZSkgeyByZXR1cm4gT2JzZXJ2YWJsZS5vZihjcmVhdGVTZXF1ZW5jZVN0YWdlSW5zdGFuY2UoaW5zdGFuY2UpKTsgfSwKICAgICAgICBkZWxldGU6IGZ1bmN0aW9uIChpbnN0YW5jZSkgeyByZXR1cm4gT2JzZXJ2YWJsZS5vZihudWxsKTsgfSwKICAgICAgICBjcmVhdGU6IGZ1bmN0aW9uIChpbnN0YW5jZSkgeyByZXR1cm4gT2JzZXJ2YWJsZS5vZihjcmVhdGVTZXF1ZW5jZVN0YWdlSW5zdGFuY2UoaW5zdGFuY2UpKTsgfSwKICAgICAgICB0ZXN0OiBmdW5jdGlvbiAoaW5zdGFuY2UpIHsgcmV0dXJuIE9ic2VydmFibGUub2YobnVsbCk7IH0sCiAgICAgICAgdXBsb2FkQ2xvdWRGaWxlOiBmdW5jdGlvbiAobWV0YSkgeyByZXR1cm4gT2JzZXJ2YWJsZS5vZihjcmVhdGVDbG91ZEZpbGUoKSk7IH0sCiAgICAgICAgdXBsb2FkQXR0YWNobWVudDogZnVuY3Rpb24gKG1ldGEpIHsKICAgICAgICAgICAgcmV0dXJuIE9ic2VydmFibGUub2YoY3JlYXRlQXR0YWNobWVudCgpKTsKICAgICAgICB9LAogICAgICAgIHVwbG9hZFRlbXBsYXRlQXR0YWNobWVudDogZnVuY3Rpb24gKG1ldGEpIHsgcmV0dXJuIE9ic2VydmFibGUub2YoY3JlYXRlQXR0YWNobWVudCgpKTsgfSwKICAgICAgICByZW1vdmVBdHRhY2htZW50OiBmdW5jdGlvbiAobWV0YSkgeyByZXR1cm4gT2JzZXJ2YWJsZS5vZihudWxsKTsgfSwKICAgICAgICBsaXN0QXR0YWNobWVudHM6IGZ1bmN0aW9uIChtZXRhKSB7IHJldHVybiBPYnNlcnZhYmxlLm9mKFtjcmVhdGVBdHRhY2htZW50KCldKTsgfSwKICAgIH07Cn0K"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/sequenceStageInstances.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/sequenceStageInstances.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs';\n\nimport { SequenceStageInstance } from '@src/types/sequences';\nimport { jsonRequest, blankRequest } from './base';\nimport { createSequenceStageInstance } from '@src/mocks/sequences';\nimport { applySequenceStageInstanceDefaults } from '@src/lib/models/sequenceStageInstances';\nimport {\n  SequenceStageInstanceCreateMeta,\n  SequenceStageInstanceUpdateMeta,\n  SequenceStageInstanceTestMeta,\n  SequenceStageInstanceAttachmentMeta,\n} from '@src/ducks/sequenceStageInstances';\nimport { createAttachment, createCloudFile } from '@src/mocks/attachments';\nimport { Attachment, CloudFile } from '@src/types';\nimport { CloudFileClient } from '@src/api/cloudFile';\n\nexport interface SequenceStageInstanceAPI {\n  list(sequence: string, stage: string): Observable<SequenceStageInstance[]>;\n  update(instance: SequenceStageInstanceUpdateMeta): Observable<SequenceStageInstance>;\n  delete(instance: SequenceStageInstance): Observable<null>;\n  create(instance: SequenceStageInstanceCreateMeta): Observable<SequenceStageInstance>;\n  uploadCloudFile(meta: SequenceStageInstanceAttachmentMeta): Observable<CloudFile|number>;\n  uploadAttachment(meta: SequenceStageInstanceAttachmentMeta): Observable<Attachment>;\n  removeAttachment(meta: SequenceStageInstanceAttachmentMeta): Observable<null>;\n  uploadTemplateAttachment(meta: SequenceStageInstanceAttachmentMeta): Observable<Attachment>;\n  listAttachments(\n    sequence: string,\n    stage: string,\n    instance: string,\n  ): Observable<Attachment[]>;\n  test(instance: SequenceStageInstanceTestMeta): Observable<null>;\n}\n\nexport class SequenceStageInstanceClient implements SequenceStageInstanceAPI {\n  list(sequence: string, stage: string): Observable<SequenceStageInstance[]> {\n    return jsonRequest({\n      method: 'GET',\n      route: `/v1/sequences/${sequence}/stages/${stage}/instances`,\n    })\n    .map(instances => instances.map(\n      (i: SequenceStageInstance) => applySequenceStageInstanceDefaults(i),\n    ));\n  }\n  create(instance: SequenceStageInstanceCreateMeta): Observable<SequenceStageInstance> {\n    return jsonRequest({\n      method: 'POST',\n      route: `/v1/sequences/${instance.sequence}/stages/${instance.stage}/instances`,\n      body: instance,\n    })\n      .map(s => applySequenceStageInstanceDefaults(s));\n  }\n\n  update(instance: Partial<SequenceStageInstance>): Observable<SequenceStageInstance> {\n    return jsonRequest({\n      method: 'PATCH',\n      route: `/v1/sequences/${instance.sequence}/stages/${instance.stage}/instances/${instance.id}`,\n      body: instance,\n    })\n      .map(s => applySequenceStageInstanceDefaults(s));\n  }\n\n  delete(instance: SequenceStageInstance): Observable<null> {\n    return blankRequest({\n      method: 'DELETE',\n      route: `/v1/sequences/${instance.sequence}/stages/${instance.stage}/instances/${instance.id}`,\n    });\n  }\n\n  uploadCloudFile(meta: SequenceStageInstanceAttachmentMeta): Observable<CloudFile|number> {\n    return new CloudFileClient().uploadWithProgress(meta.file!);\n  }\n\n  uploadAttachment(meta: SequenceStageInstanceAttachmentMeta): Observable<Attachment> {\n    return jsonRequest({\n      method: 'POST',\n      route: `/v1/sequences/${meta.sequence}/stages/${meta.stage}/instances/`\n        + `${meta.resourceId}/attachments`,\n      body: {\n        id: meta.attachment,\n        filename: meta.file && meta.file.name,\n        cloudFile: meta.cloudFile,\n        inline: meta.inline || false,\n        cloud: meta.cloud || false,\n        template: meta.template,\n      },\n    });\n  }\n\n  uploadTemplateAttachment(meta: SequenceStageInstanceAttachmentMeta): Observable<Attachment> {\n    return jsonRequest({\n      method: 'POST',\n      route: `/v1/sequences/${meta.sequence}/stages/${meta.stage}/`\n        + `instances/${meta.resourceId}/attachments`,\n      body: meta,\n    });\n  }\n\n  removeAttachment(meta: SequenceStageInstanceAttachmentMeta): Observable<null> {\n    return blankRequest({\n      method: 'DELETE',\n      route: `/v1/sequences/${meta.sequence}/stages/${meta.stage}/instances/${meta.resourceId}`\n        + `/attachments/${meta.attachment}`,\n    });\n  }\n\n  listAttachments(\n    sequence: string,\n    stage: string,\n    instance: string,\n  ): Observable<Attachment[]> {\n    return jsonRequest({\n      method: 'GET',\n      route: `/v1/sequences/${sequence}/stages/${stage}/instances/${instance}/attachments`,\n    });\n  }\n\n  test(instance: SequenceStageInstanceTestMeta): Observable<null> {\n    return Observable.merge(\n      ...instance.emails.map(email =>\n        blankRequest({\n          method: 'POST',\n          // tslint:disable-next-line:max-line-length\n          route: `/v1/sequences/${instance.sequence}/stages/${instance.stage}/instances/${instance.instance.id}/test`,\n          body: {\n            email,\n            subject: instance.instance.subject,\n            body: instance.instance.body,\n            unsubscribeLink: instance.instance.unsubscribeLink,\n            insertVariables: instance.insertVariables,\n            attachments: instance.attachments,\n          },\n        }),\n      ),\n    );\n  }\n}\n\nexport function mockSequenceStageInstanceClient(): SequenceStageInstanceAPI {\n  return {\n    list: () => Observable.of([createSequenceStageInstance()]),\n    update: instance => Observable.of(createSequenceStageInstance(instance)),\n    delete: instance => Observable.of(null),\n    create: instance => Observable.of(createSequenceStageInstance(instance)),\n    test: instance => Observable.of(null),\n    uploadCloudFile: meta => Observable.of(createCloudFile()),\n    uploadAttachment: (meta: SequenceStageInstanceAttachmentMeta) =>\n      Observable.of(createAttachment()),\n    uploadTemplateAttachment: meta => Observable.of(createAttachment()),\n    removeAttachment: (meta: SequenceStageInstanceAttachmentMeta) => Observable.of(null),\n    listAttachments: meta => Observable.of([createAttachment()]),\n  };\n}\n"]}]}