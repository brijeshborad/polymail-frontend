{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/messageBodies.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/messageBodies.ts","mtime":1675280254057},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnOwppbXBvcnQgeyBMT0NBVElPTl9DSEFOR0UgfSBmcm9tICdyZWFjdC1yb3V0ZXItcmVkdXgnOwppbXBvcnQgeyBBY3Rpb25TdGF0dXMsIH0gZnJvbSAnQHNyYy90eXBlcy9pbmRleCc7CmltcG9ydCB7IE1FU1NBR0VfQk9ESUVTX0ZFVENILCBtZXNzYWdlQm9kaWVzRmV0Y2gsIHNlbGVjdE1lc3NhZ2VCb2RpZXMsIFNIQVJFRF9USFJFQURfTUVTU0FHRV9CT0RJRVNfRkVUQ0gsIH0gZnJvbSAnQHNyYy9kdWNrcy9tZXNzYWdlQm9kaWVzJzsKaW1wb3J0IHsgZ2V0TWVzc2FnZUJvZGllcyB9IGZyb20gJ0BzcmMvbGliL21vZGVscy9tZXNzYWdlQm9kaWVzJzsKaW1wb3J0IENhY2hlLCB7IFN0b3JlcyB9IGZyb20gJ0BzcmMvbGliL2RiJzsKaW1wb3J0IHsgZGlmZmVyZW5jZSB9IGZyb20gJ2xvZGFzaCc7CmltcG9ydCB7IHNlbGVjdFRocmVhZCB9IGZyb20gJ0BzcmMvZHVja3MvdGhyZWFkcyc7CmV4cG9ydCB2YXIgZmV0Y2hCb2RpZXMgPSBmdW5jdGlvbiAoYWN0aW9uJCwgc3RvcmUsIGRlcHMpIHsKICAgIHJldHVybiBhY3Rpb24kLm9mVHlwZShNRVNTQUdFX0JPRElFU19GRVRDSCkKICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChhY3Rpb24pIHsgcmV0dXJuIGFjdGlvbi5zdGF0dXMgPT09IEFjdGlvblN0YXR1cy5TdGFydDsgfSkKICAgICAgICAuZmxhdE1hcChmdW5jdGlvbiAoYWN0aW9uKSB7CiAgICAgICAgdmFyIHN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTsKICAgICAgICB2YXIgZm91bmRUaHJlYWQgPSBzZWxlY3RUaHJlYWQoc3RhdGUsIGFjdGlvbi5tZXRhKTsKICAgICAgICByZXR1cm4gKCEhZm91bmRUaHJlYWQgPyBPYnNlcnZhYmxlLm9mKGZvdW5kVGhyZWFkKSA6IENhY2hlLmdldChTdG9yZXMuVGhyZWFkcywgYWN0aW9uLm1ldGEpKQogICAgICAgICAgICAuZmxhdE1hcChmdW5jdGlvbiAodGhyZWFkKSB7CiAgICAgICAgICAgIGlmICghdGhyZWFkKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RocmVhZCBub3QgZm91bmQgaW4gY2FjaGUnKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgbWVzc2FnZUlkcyA9IHRocmVhZC5tZXNzYWdlcy5tYXAoZnVuY3Rpb24gKG1lc3NhZ2UpIHsgcmV0dXJuIG1lc3NhZ2UuaWQ7IH0pOwogICAgICAgICAgICAvLyBQcmVsaW1pbmFyeSBjYWNoZSBjaGVjawogICAgICAgICAgICB2YXIgYm9kaWVzID0gc2VsZWN0TWVzc2FnZUJvZGllcyhzdGF0ZSwgdGhyZWFkLmlkKTsKICAgICAgICAgICAgaWYgKGJvZGllcy5sZW5ndGggPT09IHRocmVhZC5tZXNzYWdlcy5sZW5ndGgpIHsKICAgICAgICAgICAgICAgIHZhciBib2R5SWRzID0gYm9kaWVzLm1hcChmdW5jdGlvbiAoYm9keSkgeyByZXR1cm4gYm9keS5pZDsgfSk7CiAgICAgICAgICAgICAgICBpZiAoZGlmZmVyZW5jZShib2R5SWRzLCBtZXNzYWdlSWRzKS5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS5vZihib2RpZXMpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIERvIENhY2hlIHJlcXVlc3QgaWYgbm8gc3RhdGUgbGV2ZWwgaXRlbXMsIHRoZW4gZG8gYXBpIHJlcXVlc3QgaWYgdGhhdCBmYWlscy4KICAgICAgICAgICAgcmV0dXJuIGdldE1lc3NhZ2VCb2RpZXMoZGVwcy50aHJlYWRzLCB0aHJlYWQpOwogICAgICAgIH0pCiAgICAgICAgICAgIC8vIEhhbmRsZSBzYXZpbmcgaW50byBkYXRhYmFzZQogICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChib2RpZXMpIHsKICAgICAgICAgICAgaWYgKCFib2RpZXMgfHwgYm9kaWVzLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNZXNzYWdlIGJvZGllcyBub3QgZm91bmQnKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gbWVzc2FnZUJvZGllc0ZldGNoKGFjdGlvbi5tZXRhLCBib2RpZXMpOwogICAgICAgIH0pCiAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS5vZihtZXNzYWdlQm9kaWVzRmV0Y2goYWN0aW9uLm1ldGEsIGUpKTsKICAgICAgICB9KTsKICAgIH0pOwp9Owp2YXIgZmV0Y2hTaGFyZWRUaHJlYWRCb2RpZXMgPSBmdW5jdGlvbiAoYWN0aW9uJCwgc3RvcmUsIGRlcHMpIHsKICAgIHJldHVybiBhY3Rpb24kLm9mVHlwZShTSEFSRURfVEhSRUFEX01FU1NBR0VfQk9ESUVTX0ZFVENIKQogICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGFjdGlvbikgeyByZXR1cm4gYWN0aW9uLnN0YXR1cyA9PT0gQWN0aW9uU3RhdHVzLlN0YXJ0OyB9KQogICAgICAgIC5mbGF0TWFwKGZ1bmN0aW9uIChhY3Rpb24pIHsKICAgICAgICByZXR1cm4gZGVwcy5zaGFyZWRUaHJlYWRzLmdldE1lc3NhZ2VCb2RpZXMoYWN0aW9uLm1ldGEuc2hhcmVkVGhyZWFkLCBhY3Rpb24ubWV0YS50aHJlYWQpCiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGJvZGllcykgeyByZXR1cm4gISFib2RpZXMubGVuZ3RoOyB9KQogICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChib2RpZXMpIHsgcmV0dXJuIG1lc3NhZ2VCb2RpZXNGZXRjaChhY3Rpb24ubWV0YS50aHJlYWQuaWQsIGJvZGllcyk7IH0pCiAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZSkgeyByZXR1cm4gT2JzZXJ2YWJsZS5vZihtZXNzYWdlQm9kaWVzRmV0Y2goYWN0aW9uLm1ldGEudGhyZWFkLmlkLCBlKSk7IH0pOwogICAgfSk7Cn07CmV4cG9ydCB2YXIgbG9jYXRpb25DaGFuZ2VGZXRjaEJvZGllcyA9IGZ1bmN0aW9uIChhY3Rpb24kLCBzdG9yZSwgZGVwcykgewogICAgcmV0dXJuIGFjdGlvbiQKICAgICAgICAub2ZUeXBlKExPQ0FUSU9OX0NIQU5HRSkKICAgICAgICAuZGVib3VuY2VUaW1lKDIwMCwgZGVwcy5zY2hlZHVsZXIpCiAgICAgICAgLmZsYXRNYXAoZnVuY3Rpb24gKGFjdGlvbikgewogICAgICAgIHZhciBzcGxpdCA9IGFjdGlvbi5wYXlsb2FkCiAgICAgICAgICAgIC5wYXRobmFtZS50b0xvd2VyQ2FzZSgpLnNwbGl0KCcvJyk7CiAgICAgICAgdmFyIHRocmVhZElkID0gJyc7CiAgICAgICAgaWYgKCEoc3BsaXQubGVuZ3RoIDwgNSB8fCAoc3BsaXRbM10gPT09ICdsaXN0cycgJiYgc3BsaXQubGVuZ3RoIDwgNikpKSB7CiAgICAgICAgICAgIHRocmVhZElkID0gc3BsaXRbc3BsaXQubGVuZ3RoIC0gMV07CiAgICAgICAgfQogICAgICAgIGlmIChzcGxpdC5sZW5ndGggPiAyICYmIHNwbGl0WzFdID09PSAnbWVudGlvbnMnKSB7CiAgICAgICAgICAgIHRocmVhZElkID0gJyc7CiAgICAgICAgfQogICAgICAgIC8vIHByZXZlbnQgZmV0Y2hpbmcgbWVzc2FnZSBib2RpZXMgZm9yIGRyYWZ0IHJvdXRlcwogICAgICAgIGlmIChzcGxpdC5sZW5ndGggPiAzICYmIChzcGxpdFszXSA9PT0gJ2RyYWZ0cycgfHwgc3BsaXRbM10gPT09ICdzZW5kbGF0ZXInKSkgewogICAgICAgICAgICB0aHJlYWRJZCA9ICcnOwogICAgICAgIH0KICAgICAgICAvLyBwcmV2ZW50IGZldGNoaW5nIG9mIG1lc3NhZ2UgYm9kaWVzIGlmIGl0IGlzIGp1c3QgYW4KICAgICAgICAvLyAgIGFjY291bnQgaW5ib3ggcm91dGUsIHdpdGggbm8gdGhyZWFkIHNlbGVjdGVkCiAgICAgICAgaWYgKHNwbGl0Lmxlbmd0aCA9PT0gNSAmJiBzcGxpdFs0XS5zdGFydHNXaXRoKCdhY2NvdW50LScpKSB7CiAgICAgICAgICAgIHRocmVhZElkID0gJyc7CiAgICAgICAgfQogICAgICAgIHJldHVybiBPYnNlcnZhYmxlLm9mKHRocmVhZElkKQogICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChpZCkgeyByZXR1cm4gISFpZDsgfSkKICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoaWQpIHsgcmV0dXJuIG1lc3NhZ2VCb2RpZXNGZXRjaChpZCk7IH0pOwogICAgfSk7Cn07CmV4cG9ydCBkZWZhdWx0IFtsb2NhdGlvbkNoYW5nZUZldGNoQm9kaWVzLCBmZXRjaEJvZGllcywgZmV0Y2hTaGFyZWRUaHJlYWRCb2RpZXNdOwo="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/messageBodies.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/messageBodies.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs';\nimport { Epic } from 'redux-observable';\nimport { LOCATION_CHANGE, LocationChangeAction } from 'react-router-redux';\n\nimport { StoreState,\n  Action,\n  ActionStatus,\n  MessageBody,\n  Thread,\n} from '@src/types/index';\n\nimport { Deps } from '@src/lib/epic';\n\nimport {\n  MESSAGE_BODIES_FETCH,\n  messageBodiesFetch,\n  selectMessageBodies,\n  SHARED_THREAD_MESSAGE_BODIES_FETCH,\n  SharedThreadMessageBodiesFetchMeta,\n} from '@src/ducks/messageBodies';\n\nimport { getMessageBodies } from '@src/lib/models/messageBodies';\nimport Cache, { Stores } from '@src/lib/db';\nimport { difference } from 'lodash';\nimport { selectThread } from '@src/ducks/threads';\n\nexport const fetchBodies: Epic<Action<string, MessageBody[]>, StoreState, Deps> = (\n  action$, store, deps,\n) =>\n action$.ofType(MESSAGE_BODIES_FETCH)\n  .filter(action => action.status === ActionStatus.Start)\n  .flatMap((action) => {\n    const state = store.getState();\n    const foundThread = selectThread(state, action.meta);\n    return (!!foundThread ? Observable.of(foundThread) : Cache.get(Stores.Threads, action.meta))\n      .flatMap((thread?: Thread) => {\n        if (!thread) {\n          throw new Error('Thread not found in cache');\n        }\n        const messageIds = thread.messages.map(message => message.id);\n\n        // Preliminary cache check\n        const bodies: MessageBody[] = selectMessageBodies(state, thread.id);\n        if (bodies.length === thread.messages.length) {\n          const bodyIds = bodies.map(body => body.id);\n          if (difference(bodyIds, messageIds).length === 0) {\n            return Observable.of(bodies);\n          }\n        }\n\n        // Do Cache request if no state level items, then do api request if that fails.\n        return getMessageBodies(deps.threads, thread);\n      })\n      // Handle saving into database\n      .map((bodies) => {\n        if (!bodies || bodies.length === 0) {\n          throw new Error('Message bodies not found');\n        }\n        return messageBodiesFetch(action.meta, bodies);\n      })\n      .catch((e: Error) => {\n        return Observable.of(messageBodiesFetch(action.meta, e));\n      });\n  });\n\nconst fetchSharedThreadBodies:\n  Epic<Action<SharedThreadMessageBodiesFetchMeta|string, MessageBody[]>, StoreState, Deps>\n  = (action$, store, deps) =>\n    action$.ofType(SHARED_THREAD_MESSAGE_BODIES_FETCH)\n      .filter(action => action.status === ActionStatus.Start)\n      .flatMap((action: Action<SharedThreadMessageBodiesFetchMeta, MessageBody[]>) =>\n        deps.sharedThreads.getMessageBodies(action.meta.sharedThread, action.meta.thread)\n          .filter(bodies => !!bodies.length)\n          .map(bodies => messageBodiesFetch(action.meta.thread.id, bodies))\n          .catch(e => Observable.of(messageBodiesFetch(action.meta.thread.id, e))),\n      );\n\nexport const locationChangeFetchBodies: Epic<Action<string, MessageBody[]>, StoreState, Deps> =\n  (action$, store, deps) =>\n    action$\n      .ofType(LOCATION_CHANGE)\n      .debounceTime(200, deps.scheduler)\n      .flatMap((action) => {\n        const split = ((action as any) as LocationChangeAction).payload\n          .pathname.toLowerCase().split('/');\n        let threadId = '';\n\n        if (!(split.length < 5 || (split[3] ===  'lists' && split.length < 6))) {\n          threadId = split[split.length - 1];\n        }\n\n        if (split.length > 2 && split[1] === 'mentions') {\n          threadId = '';\n        }\n\n        // prevent fetching message bodies for draft routes\n        if (split.length > 3 && (split[3] === 'drafts' || split[3] === 'sendlater')) {\n          threadId = '';\n        }\n\n        // prevent fetching of message bodies if it is just an\n        //   account inbox route, with no thread selected\n        if (split.length === 5 && split[4].startsWith('account-')) {\n          threadId = '';\n        }\n\n        return Observable.of(threadId)\n          .filter(id => !!id)\n          .map(id => messageBodiesFetch(id));\n      });\n\nexport default [locationChangeFetchBodies, fetchBodies, fetchSharedThreadBodies];\n"]}]}