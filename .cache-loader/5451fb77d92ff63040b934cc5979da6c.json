{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/commit/CommitSync.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/commit/CommitSync.ts","mtime":1675280254123},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/commit/CommitSync.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/commit/CommitSync.ts"],"names":[],"mappings":"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","sourcesContent":["import { last, compact, values, uniq } from 'lodash';\nimport { Base64 } from 'js-base64';\n\nimport Cache, { Stores } from '@src/lib/db';\nimport { BasicAPI, BasicClient } from '@src/api/basic';\nimport { Observable, Observer, Subject, Subscription } from 'rxjs';\nimport { Combiner, rateLimiter } from '@src/lib/rx';\nimport { Backoff } from '@src/worker/Backoff';\nimport { ApiError, BatchResponseParameters } from '@src/api/base';\nimport {\n  HistoryObject,\n  Commit,\n  CommitStatus,\n  Thread,\n  Mailbox,\n  AttachmentMeta,\n  Attachment,\n  Draft,\n  DraftStatus,\n  PolymailStatusType,\n} from '@src/types';\nimport { computeThread, mailboxThreadsPredicate, patched } from '@src/lib/thread';\nimport { defaultDraft, failedDraft, patchedDraft } from '@src/lib/draft';\nimport {\n  sendDraftCreated,\n  sendDraftDeleted,\n  sendThreadUpdated,\n  sendThreadDeleted,\n  sendDraftAttachmentAdded,\n  sendDraftAttachmentAddFailed,\n  sendDraftSent,\n  sendDraftUpdated,\n  sendDraftSendFailed,\n  sendThreadMoveUndoCompleted,\n  sendMeUpdated,\n  sendAppStatusUpdate,\n} from '@src/worker/bridge/workerEvents';\nimport bus, { getBus, BusEvent, BusEventName } from '@src/worker/bus';\nimport { withScope, captureMessage, captureException } from '@sentry/browser';\nimport { DraftSendMeta } from '@src/ducks/drafts';\nimport { ProviderErrors } from '@src/lib/errors';\n\nexport const resetCommitStatuses = (): Observable<null> => {\n  return Cache.list<Commit>(Stores.Commits, commit => commit.status === CommitStatus.Processing)\n    .flatMap((commits: Commit[]) => {\n      return Cache.load(Stores.Commits, commits.map(c => ({ ...c, status: CommitStatus.Ready })));\n    });\n};\n\nexport const MAX_COMMITS_PER_BATCH = 20;\n\n// CommitSync continuously sends idempotent commits to the API.\nexport class CommitSync {\n  // State\n  readonly workerId: string;\n  isRunning: boolean;\n  fetchRatelimit: number;\n  resolveRatelimit: number;\n  private backoff: Backoff;\n  private cancelSignal: Subject<null>;\n  private retrigger: boolean;\n  private resourceBackoffs: {[key: string]: Backoff} = {};\n\n  // Dependencies\n  private api: BasicAPI;\n  private bus: Subject<BusEvent>;\n  private sub: Subscription;\n\n  constructor(api: BasicAPI = new BasicClient()) {\n    this.workerId = 'CommitSync';\n    this.isRunning = false;\n    // HACK(SHIN): Set backoff to 30 seconds until we have a better retry mechanism\n    this.backoff = new Backoff(this.workerId, 30);\n    this.cancelSignal = new Subject<null>();\n    this.retrigger = false;\n\n    // how often CommitSync fetches from cache\n    this.fetchRatelimit = 1500; // in milliseconds\\\n\n    // the rate limit how often we make calls to the api\n    this.resolveRatelimit = 1000; // in milliseconds\n\n    this.api = api;\n    this.bus = getBus();\n  }\n\n  init() {\n    // Listen for bus events\n    if (!this.sub) {\n      this.sub = this.bus.subscribe({\n        next: (event: BusEvent) => {\n          this.handleBusEvent(event);\n        },\n        error: (e: Error) => {\n          captureException(e);\n        },\n      });\n    }\n  }\n\n  deinit() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  // deleteItems is ignored by CommitSync as we want to retain\n  // commits on clearCache\n  clearCache(deleteItems: boolean): Observable<null> {\n    if (this.isRunning) {\n      this.cancelSignal.next(null);\n    }\n\n    // clearCache is triggered by HistorySync\n    // Don't want to clear commits this way\n    this.backoff.clearErrors();\n    return Observable.of(null);\n  }\n\n  // reset marks any commits in `Processing` status as `Ready`\n  reset(): Observable<null> {\n    return Observable.create((runner: Observer<null>) => {\n      const combiner = new Combiner<Commit[]>();\n      combiner.subscribe({\n        next: (commits: Commit[]) => {\n          Cache.load(\n            Stores.Commits,\n            commits\n              .filter(commit => commit.status === CommitStatus.Processing)\n              .map(commit => ({ ...commit, status: CommitStatus.Ready })),\n          ).subscribe({\n            error: (e: Error) => {\n              combiner.error(e);\n            },\n            complete: () => {\n              combiner.complete();\n            },\n          });\n        },\n        error: (e: Error) => {\n          runner.error(e);\n        },\n        complete: () => {\n          runner.next(null);\n          runner.complete();\n        },\n      });\n      combiner.run(\n        this.resolvePendingCommits()\n        .flatMap(() => this.fetch()),\n      );\n    });\n  }\n\n  run(): Observable<null> {\n    return Observable.create((runner: Observer<null>) => {\n      if (!this.backoff.isReady()) {\n        runner.next(null);\n        runner.complete();\n        return;\n      }\n      if (this.isRunning) {\n        runner.next(null);\n        runner.complete();\n        return;\n      }\n      this.isRunning = true;\n\n      // Throttle API calls\n      const resolveLimiter = rateLimiter<Commit[]>(this.resolveRatelimit);\n\n      const combiner = new Combiner<Commit[]>();\n      combiner.takeUntil(this.cancelSignal)\n        .flatMap((commits: Commit[]) => {\n\n          if (commits && commits.length === 0) {\n            // Status update false\n            sendAppStatusUpdate({\n              statusType: PolymailStatusType.Online,\n              commitsRemaining: commits.length,\n            });\n\n            combiner.complete();\n            return Observable.empty();\n          }\n\n          // Merge commits with the same resource type and id\n          return this.merge(commits);\n        })\n        .map((commits: Commit[]) => {\n          // Status update false\n          sendAppStatusUpdate({\n            statusType: PolymailStatusType.Syncing,\n            commitsRemaining: commits.length,\n          });\n\n          // Prioritize draft only commits\n          const draftTypeCommits = commits\n            .filter(c =>\n              [\n                HistoryObject.Draft,\n                HistoryObject.DraftAttachment,\n                HistoryObject.DraftAttachmentAppend,\n              ].indexOf(c.resource) > -1,\n            );\n\n          if (draftTypeCommits.length) {\n            return draftTypeCommits;\n          }\n\n          return commits;\n        })\n        .subscribe({\n          next: (commits: Commit[]) => {\n\n            // Handle processing all ready commits\n            if (commits.length <= MAX_COMMITS_PER_BATCH) {\n\n              resolveLimiter(this.resolve(commits.slice(0, MAX_COMMITS_PER_BATCH))).subscribe({\n                error: (e: Error) => {\n                  combiner.error(e);\n                },\n                complete: () => combiner.run(\n                  Observable.of(null)\n                    .delay(this.fetchRatelimit)\n                    .flatMap(() => this.resolvePendingCommits())\n                    .flatMap(() => this.fetch()),\n                ),\n              });\n            } else {\n\n              resolveLimiter(this.resolve(commits.slice(0, MAX_COMMITS_PER_BATCH))).subscribe({\n                error: (e: Error) => {\n                  combiner.error(e);\n                },\n                complete: () => {\n                  // Recurse\n                  return combiner.run(\n                    Observable.of(commits.splice(MAX_COMMITS_PER_BATCH)),\n                  );\n                },\n              });\n            }\n          },\n          error: (e: Error) => {\n\n            this.isRunning = false;\n\n            if ((e as ApiError).code === 401) {\n              sendMeUpdated();\n            }\n\n            this.backoff.setError(e);\n            runner.error(e);\n          },\n          complete: () => {\n            this.isRunning = false;\n\n            this.backoff.clearErrors();\n            runner.next(null);\n            runner.complete();\n\n            // Handle retrigger\n            if (this.retrigger) {\n              this.retrigger = false;\n              bus.triggerSync(this.workerId);\n            }\n          },\n        });\n\n      // Buffer initial fetch because it's common for commits to be submitted\n      // together. And we want to resolve after the batch has been submitted\n      // rather than on the first one.\n      combiner.run(Observable.of(null)\n        .delay(this.fetchRatelimit)\n        .flatMap(() => this.resolvePendingCommits())\n        .flatMap(() => this.fetch()),\n      );\n    });\n  }\n\n  // TODO(SHIN): Existing: DELETE -> POST/PATCH not being handled (resolved on 404 anyways)\n  merge(commits: Commit[]): Observable<Commit[]> {\n    const toSave: Commit[] = [];\n    const toDelete: Commit[] = [];\n    const unique = {};\n\n    commits.forEach((commit) => {\n      const key = commit.resource + commit.resourceHash;\n\n      // Merge multiple commits for the same resource\n      if (key in unique) {\n        const existing = unique[key];\n\n        if ((existing.method === 'POST' || existing.method === 'PATCH') &&\n             commit.method === 'PATCH'\n        ) {\n\n          // If create -> update or update -> update, then merge into existing commit\n          existing.payload = {\n            ...existing.payload,\n            ...commit.payload,\n          };\n\n          // Handles undo payload merges if undoPayload was specified\n          if (commit.undoPayload) {\n            existing.undoPayload = {\n              ...commit.undoPayload,\n            };\n          }\n\n          // Let undoable if commit should be undoable\n          if (commit.undoable) {\n            existing.undoable = commit.undoable;\n          }\n\n          toSave.push(existing);\n          toDelete.push(commit);\n\n          unique[key] = existing;\n\n        } else if (existing.method === 'PATCH' && commit.method === 'POST') {\n\n          // Handles draft save coming after DRAFT_UPDATE\n          // HACK(SHIN): Temporary solution for sending draft when it hasn't been updated to server\n          existing.method = 'POST';\n\n          toSave.push(existing);\n          toDelete.push(commit);\n\n          unique[key] = commit;\n\n        } else if (existing.method === 'PATCH' && commit.method === 'DELETE') {\n\n          // If create -> delete or update -> delete, then merge into new commit\n          toDelete.push(existing);\n          toSave.push(commit);\n\n          unique[key] = commit;\n\n        } else if (existing.method === 'POST' && commit.method === 'DELETE') {\n\n          // If create -> delete, then delete\n          toDelete.push(existing);\n          toDelete.push(commit);\n\n          delete unique[key];\n\n        } else {\n          // Do not merge forward events\n          const forwardHandler = existing.method === 'POST' && commit.method === existing.method &&\n          existing.resource === HistoryObject.DraftAttachmentAppend &&\n          commit.resource === existing.resource;\n          if (forwardHandler) {\n            return;\n          }\n\n          // Delete -> Delete, Delete -> Update, Delete -> Create cases should never happen\n          withScope((scope) => {\n            // Sanitization for Draft Commits\n            if (commit.store === Stores.Drafts) {\n              const limitedExisting = {\n                ...existing,\n                payload: {\n                  ...existing.payload,\n                  to: [],\n                  cc: [],\n                  bcc: [],\n                  body: '',\n                  attachments: [],\n                },\n              };\n\n              const limitedCommit = {\n                ...commit,\n                payload: {\n                  ...commit.payload,\n                  to: [],\n                  cc: [],\n                  bcc: [],\n                  body: '',\n                  attachments: [],\n                },\n              };\n              scope.setExtras({ existing: limitedExisting, commit: limitedCommit });\n            } else {\n              scope.setExtras({ existing, commit });\n            }\n\n            captureMessage('programmer: invalid commit merge');\n          });\n        }\n        return;\n      }\n\n      // Add to set if this commit is not already found\n      unique[key] = commit;\n    });\n\n    // Convert object into an array\n    const processedCommits: Commit[] = [];\n    Object.keys(unique).forEach(key => processedCommits.push(unique[key]));\n\n    const toSaveHandler = () => toSave.length\n      ? Cache.load(Stores.Commits, toSave)\n      : Observable.of(null);\n\n    const toDeleteKeys = compact(toDelete.map(commit => commit.id));\n    const toDeleteHandler = () => toDeleteKeys.length\n      ? Cache.deleteBatch(Stores.Commits, toDeleteKeys)\n      : Observable.of(null);\n\n    // Return processedCommits commits only after we finish saving to cache\n    return toSaveHandler()\n      .flatMap(() => toDeleteHandler())\n      .flatMap(() => Observable.of(processedCommits));\n  }\n\n  // UndoMove creates a reversed, not-undoable commit, and resolves the undoable comit.\n  undoMove = (box: Mailbox): Observable<any> => {\n    // Cancel any existing resolves before processing undo.\n    if (this.isRunning) {\n      this.cancelSignal.next(null);\n    }\n\n    return Cache.list(Stores.Commits, (commit: Commit) => {\n      return commit.undoable\n        && commit.undoPayload\n        && mailboxThreadsPredicate(box, { ...commit.undoPayload, account: commit.account });\n    })\n    .filter((commits: Commit[]) => commits.length > 0)\n    .flatMap((commits: Commit[]) => {\n      const lastCommit = last(commits);\n      if (!lastCommit) {\n        return Observable.of(null);\n      }\n      const undoCommit = {\n        ...lastCommit,\n        undoable: false,\n        status: CommitStatus.Ready,\n        payload: lastCommit.undoPayload,\n        created: new Date(),\n      };\n      lastCommit.undoable = false;\n      lastCommit.status = CommitStatus.Complete;\n      delete undoCommit.id;\n\n      let updatedThread: Thread;\n\n      return Cache\n        .save(Stores.Commits, lastCommit)\n        .flatMap(() => Cache.get(Stores.Threads, lastCommit.resourceId))\n        .flatMap((thread: Thread) => {\n          updatedThread = patched(thread, undoCommit);\n          return Cache.save(Stores.Commits, undoCommit);\n        })\n        .flatMap(() => Cache.save(Stores.Threads, updatedThread))\n        .do(() => {\n          sendThreadMoveUndoCompleted(box, updatedThread);\n          sendThreadUpdated(updatedThread);\n          bus.updateMailCount(updatedThread.account);\n\n          // Emit list unread if the updated thread is unread and in a list\n          if (updatedThread.list && !updatedThread.read) {\n            bus.updateListUnreadCount(updatedThread.account, updatedThread.list);\n          }\n        });\n    });\n  }\n\n  // Resolves any pending draft send commits into ready if no other commits for draft\n  resolvePendingCommits(): Observable<null> {\n    // Check for matching draft send requests\n    let pendingSendCommits: Commit[] = [];\n    let pendingSendNowCommits: Commit[] = [];\n    return this.fetchPendingCommits().flatMap((commits) => {\n\n      // Set pending draft commits first then fetch all unresolved\n      pendingSendCommits = commits.filter(commit =>\n        commit.resource === HistoryObject.Draft && commit.route.endsWith('send'));\n\n      // Set pending send now commits\n      pendingSendNowCommits = commits.filter(commit =>\n        commit.resource === HistoryObject.Draft && commit.resourceHash.endsWith('-send-now'),\n      );\n      return this.fetchUnresolvedCommits();\n    })\n      .flatMap((unresolvedCommits) => {\n        // Check for any ongoing or failed requests\n        const unresolvedCommitsMap: { [key: string]: number } = unresolvedCommits.reduce(\n          (dict, next) => {\n\n            if (next.resourceHash.endsWith('send-now')) {\n              return dict;\n            }\n\n            const matchInt = dict[next.resourceId];\n            dict[next.resourceId] = matchInt && matchInt + 1 || 1;\n            return dict;\n          },\n          {},\n        );\n\n        // Check for failed commits\n        const failedCommitsCount: { [key: string]: number } = {};\n        const failedCommitsMap: { [key: string]: Commit } = unresolvedCommits.reduce(\n          (dict, next) => {\n            if (next.status !== CommitStatus.Error) {\n              return dict;\n            }\n\n            // Add any failed commits\n            const matchInt = failedCommitsCount[next.resourceId];\n            failedCommitsCount[next.resourceId] = matchInt && matchInt + 1 || 1;\n            dict[next.resourceId] = next;\n            return dict;\n          },\n          {},\n        );\n\n        // Handle Saving update requests to either failed or ready\n        const updateCommits: {[ resourceId: string]: Commit } = {};\n        let deleteIds: number[] = [];\n\n        // Removes any duplicate pending draft commits so no limbo state occurs\n        const pendingSendCommitsDict: {\n          [resourceId: string]: Commit,\n        } = pendingSendCommits.reduce(\n          (dict, c) => {\n            const found = dict[c.resourceId];\n            if (found && c.id) {\n              deleteIds = deleteIds.concat([c.id]);\n              return dict;\n            }\n\n            dict[c.resourceId] = c;\n            return dict;\n          },\n          {},\n        );\n\n        // Removes any duplicate pending draft commits so no limbo state occurs\n        const pendingSendNowCommitsDict: {\n          [resourceId: string]: Commit,\n        } = pendingSendNowCommits.reduce(\n          (dict, c) => {\n            const found = dict[c.resourceId];\n            if (found && c.id) {\n              deleteIds = deleteIds.concat([c.id]);\n              return dict;\n            }\n\n            dict[c.resourceId] = c;\n            return dict;\n          },\n          {},\n        );\n\n        // Loop through pending draft commits to see which ones we should turn off or delete\n        values(pendingSendCommitsDict)\n          .filter((each) => {\n            // We only want to process send handler\n            // when we have a single pending commit (unresolved - failed)\n            const unresolvedCommitsCount = unresolvedCommitsMap[each.resourceId] || 0;\n            const failedCount = failedCommitsCount[each.resourceId] || 0;\n            return unresolvedCommitsCount - failedCount === 1;\n          })\n          .forEach((commit) => {\n            const failed = failedCommitsMap[commit.resourceId];\n            const baseDraft = commit.rehydrateMeta && commit.rehydrateMeta.draft as Draft;\n\n            // For Failed draft send out a draft failed event\n            if (!!failed && baseDraft) {\n\n              // Generate error for commit\n              let error = failed.rehydrateMeta && failed.rehydrateMeta.error;\n              const backupMessage = error && (error.description || error.message) || undefined;\n              if ((!error || !(error instanceof Error) && backupMessage)) {\n                error = new Error(backupMessage);\n              }\n\n              // Handle draft failure error\n              this.handleDraftFailure(baseDraft, commit, error);\n\n              // Submit commit id for deletion\n              if (commit.id) {\n                deleteIds = deleteIds.concat([commit.id]);\n              }\n            }\n\n            // Otherwise update commit to ready state\n            const updated = ({\n              ...commit,\n              status: failed ? CommitStatus.Error : CommitStatus.Ready,\n            });\n            updateCommits[updated.resourceId] = updated;\n          });\n\n        // Loop through pending send now commits\n        values(pendingSendNowCommitsDict)\n          .forEach((commit) => {\n\n            // NOTE(SHIN): Using similar behavior as Draft send,\n            // testing outbox performance w/ changes for draftfailure error\n            // proper rehydrate meta access\n            const failed = failedCommitsMap[commit.resourceId];\n            const baseDraft = commit.rehydrateMeta && commit.rehydrateMeta as Draft;\n\n            // For Failed draft send out a draft failed event\n            if (!!failed && baseDraft) {\n\n              // Generate error for commit\n              let error = failed.rehydrateMeta && failed.rehydrateMeta.error;\n              const backupMessage = error && (error.description || error.message) || undefined;\n              if ((!error || !(error instanceof Error) && backupMessage)) {\n                error = new Error(backupMessage);\n              }\n\n              // Handle draft failure error\n              this.handleDraftFailure(baseDraft, commit, error);\n\n              // Submit commit id for deletion\n              if (commit.id) {\n                deleteIds = deleteIds.concat([commit.id]);\n              }\n            }\n\n            // Turn Ready\n            const canTurnReady = !(unresolvedCommitsMap[commit.resourceId] > 1)\n               || failedCommitsMap[commit.resourceId];\n\n            // Check for match in update commits or in pending send commits\n            const foundUpdateCommit = updateCommits[commit.resourceId] ||\n              pendingSendCommitsDict[commit.resourceId];\n            if (foundUpdateCommit) {\n              const modifiedPayload = {\n                ...foundUpdateCommit,\n                payload: {\n                  ...foundUpdateCommit.payload,\n                  delay: 0,\n                },\n              };\n\n              updateCommits[foundUpdateCommit.resourceId] = modifiedPayload;\n              if (commit.id) {\n                deleteIds = deleteIds.concat([commit.id]);\n              }\n            } else if (canTurnReady) { // If no match then turn send now commit status to ready\n              const sendNowReadyCommit = {\n                ...commit,\n                status: CommitStatus.Ready,\n              };\n              updateCommits[commit.resourceId] = sendNowReadyCommit;\n            }\n          });\n\n        const updateLength = Object.keys(updateCommits).length;\n\n        // Continue if no update requests\n        if (!updateLength && !deleteIds.length) {\n          return Observable.of(null);\n        }\n\n        // Retrigger since we made some commits ready state\n        if (!!updateLength) {\n          this.retrigger = true;\n        }\n\n        // Turn into requests to pass through Observable.zip\n        const updateRequests = !!updateLength\n          ? Cache.load(Stores.Commits, values(updateCommits))\n          : Observable.of(null);\n        const deleteRequests = uniq(deleteIds).length\n          ? Cache.deleteBatch(Stores.Commits, deleteIds)\n          : Observable.of(null);\n\n        // Handle loading update requests\n        return Observable.zip(\n          updateRequests,\n          deleteRequests,\n        ).flatMap(() => Observable.of(null));\n      });\n  }\n\n  // Resolves resolves a batch of commits with the API\n  private resolve(commits: Commit[]): Observable<any[]> {\n    return Observable.zip(\n\n      // Save processing state\n      ...commits.map((commit) => {\n        return Cache.save(Stores.Commits, { ...commit, status: CommitStatus.Processing });\n      }),\n    )\n    .flatMap(() => {\n      // HACK(SHIN): Use old batch request when only thread PATCH commits since this runs in\n      // parallel and causes HistorySync to receive responses with more batched pagination results\n      const threadCommitLength = commits\n        .filter(commit =>\n          commit.resource === HistoryObject.Thread && commit.method !== 'DELETE',\n        ).length;\n      const isOnlyThreadCommits = threadCommitLength === commits.length;\n      if (isOnlyThreadCommits) {\n        const threadRequests = commits.map((commit) => {\n          return {\n            method: commit.method,\n            url: commit.route,\n            body: Base64.encode(JSON.stringify(commit.payload)),\n          };\n        });\n        const threadBatchRequest = { requests: threadRequests };\n        return this.api.concurrentBatchRequest(threadBatchRequest);\n      }\n\n      // Make batch request\n      const requests = commits.map((commit) => {\n        return { method: commit.method, url: commit.route, body: JSON.stringify(commit.payload) };\n      });\n      const batchRequest = { requests };\n      return this.api.batchRequest(batchRequest);\n    })\n    .catch((e: Error) => { // Handle type error\n      // On batch request error, reset commits to try again.\n      const readyCommits = commits\n        .map(commit => Cache.save(Stores.Commits, { ...commit, status: CommitStatus.Ready }));\n      return Observable\n        .zip(...readyCommits)\n        .flatMap(() => Cache.get(Stores.Commits, commits[0].id))\n        .flatMap(() => Observable.throw(e));\n    })\n    .flatMap((responses) => {\n      return Observable.zip(...commits.map((commit, i) => {\n        return this.resolveLocal(commit, responses[i]);\n      }));\n    });\n  }\n\n  private resolveLocal(commit: Commit, response: BatchResponseParameters): Observable<null> {\n    switch (response.code) {\n      case 200:\n      case 201:\n\n        // Reset any backoffs for provider thread ops\n        if (commit.resource === HistoryObject.Thread) {\n          const { account, resourceHash } = commit;\n          if (account) {\n            delete this.resourceBackoffs[account];\n          }\n\n          delete this.resourceBackoffs[resourceHash];\n        }\n\n        // Handle Attachment Metas for append case\n        // HACK(SHIN): Sets cloudUrl to backup to the meta cloudUrl as a backup src\n        if (commit.resource === HistoryObject.DraftAttachmentAppend) {\n          if (commit.method === 'POST' && response.body && response.body.length) {\n            const attachments: Attachment[] = response.body;\n            const skeletonMeta: AttachmentMeta = commit.rehydrateMeta;\n            if (skeletonMeta) {\n              attachments.forEach(attachment =>\n                sendDraftAttachmentAdded(\n                  skeletonMeta,\n                  {\n                    ...attachment,\n                    cloudUrl: attachment.cloudUrl || skeletonMeta.cloudUrl || '',\n                  },\n                ),\n              );\n\n              return Cache.deleteSingle(Stores.Commits, commit.id);\n            }\n          }\n        }\n\n        // Specialized handling for DraftAttachments since there is a parent resource\n        if (commit.resource === HistoryObject.DraftAttachment) {\n          // If deleted then just process delete\n          // TODO(SHIN): Maybe push out a redux event\n          if (commit.method === 'DELETE' && commit.id) {\n            return Cache.deleteSingle(Stores.Commits, commit.id);\n          }\n\n          // On success emit out action completed\n          if (commit.method === 'POST' && response.body && commit.id) {\n            const skeletonMeta: AttachmentMeta = commit.rehydrateMeta;\n            if (skeletonMeta) {\n              // Sends attachment added completion\n              sendDraftAttachmentAdded(skeletonMeta, response.body);\n            }\n\n            // Delete commit once completed\n            return Cache.deleteSingle(Stores.Commits, commit.id);\n          }\n        }\n\n        // Handle successful deletions\n        if (commit.method === 'DELETE' && commit.id) {\n          return Cache.deleteSingle(commit.store, commit.resourceId)\n            .flatMap(() => {\n              switch (commit.resource) {\n                case HistoryObject.Draft:\n                  sendDraftDeleted(commit.resourceId);\n                  break;\n                case HistoryObject.Thread:\n                  sendThreadDeleted(commit.resourceId);\n                  // TODO(Shahan): Should call bus.updateMailCount\n                  // once we figure out how to get the account id\n                  // for the thread here.\n                  break;\n                default:\n              }\n              return Cache.deleteSingle(Stores.Commits, commit.id);\n            });\n        }\n\n        // Apply defaults\n        let patchedResponse = response.body;\n        switch (commit.resource) {\n          case HistoryObject.Draft:\n            patchedResponse = defaultDraft(response.body);\n            break;\n\n          case HistoryObject.Thread:\n            patchedResponse = computeThread(response.body);\n            break;\n\n          default:\n        }\n\n        // We probably want to abstract the entire draft commit handling outside\n        // On draft update requests, we query the cache to apply any optimistic properties needed\n        // TODO(SHIN): We MAY need some other optimistic properties\n        // (attachments, later date, follow up, etc)\n        const isDraftUpdate = commit.resource === HistoryObject.Draft && commit.method === 'PATCH';\n        const isDraftCreate = commit.resource === HistoryObject.Draft && commit.method === 'POST' &&\n          commit.resourceHash === commit.resourceId;\n        const isDraftSend = commit.resource === HistoryObject.Draft &&\n          commit.resourceHash.endsWith('send');\n\n        const patchOptimistic: Observable<null> = Cache.get(\n          commit.store,\n          patchedResponse.id,\n        ).flatMap((d: Draft|undefined) => {\n          if (!d) {\n            return Cache.save(commit.store, patchedResponse);\n          }\n\n          // Drop requests with older version\n          if (d.version > patchedResponse.version) {\n            return Observable.of(null);\n          }\n\n          // Save last sent draft if version is higher or matches\n          if (isDraftSend) {\n            return Cache.save(commit.store, patchedResponse);\n          }\n\n          // Always overwrite and save into indexeddb if version is greater\n          if (patchedResponse.version > d.version) {\n            return Cache.save(commit.store, patchedResponse);\n          }\n\n          // Scheduled can also get overridden\n          // TODO(SHIN): May need to handle other properties as well\n          if (d.status === DraftStatus.Staged || d.status === DraftStatus.Scheduled) {\n            patchedResponse = patchedDraft(patchedResponse, d);\n          }\n\n          return Cache.save(commit.store, patchedResponse);\n        });\n        let patchSaveRequest = Cache.save(commit.store, patchedResponse);\n        if (isDraftUpdate || isDraftCreate || isDraftSend) {\n          patchSaveRequest = patchOptimistic;\n        }\n\n        // Handle successful create / updates\n        return patchSaveRequest\n          .flatMap(() => {\n\n            const draftPostRequest = commit.resource === HistoryObject.Draft &&\n              commit.method === 'POST';\n\n            // Draft Created Emission\n            if (draftPostRequest && !commit.resourceHash.endsWith('send')) {\n              sendDraftCreated(patchedResponse);\n            }\n\n            // Draft Send Emission\n            if (draftPostRequest && commit.resourceHash.endsWith('send')) {\n              sendDraftSent({ draft: patchedResponse, toggleArchive: false });\n              sendDraftUpdated(patchedResponse);\n            }\n\n            // Handle patching send nows\n            if (commit.resourceHash.endsWith('send-now')) {\n              sendDraftUpdated(patchedResponse);\n            }\n\n            // Delete Draft Commits when completed\n            if (commit.resource === HistoryObject.Draft && commit.id) {\n              return Cache.deleteSingle(Stores.Commits, commit.id);\n            }\n\n            return Cache.save(Stores.Commits, {\n              ...commit,\n              status: CommitStatus.Complete,\n            });\n          });\n\n      case 404:\n\n        return Cache.deleteSingle(commit.store, commit.resourceId)\n          .flatMap(() => {\n            switch (commit.resource) {\n              case HistoryObject.Draft:\n                sendDraftDeleted(commit.resourceId);\n\n                // Return delte commit on 404\n                return Cache.deleteSingle(Stores.Commits, commit.id);\n\n              case HistoryObject.Thread:\n                sendThreadDeleted(commit.resourceId);\n                break;\n\n              default:\n            }\n            return Cache.save(Stores.Commits, {\n              ...commit,\n              status: CommitStatus.Complete,\n            });\n          });\n\n      case 409: // For 409, version was not up to date so we drop the commit.\n\n        return Cache.deleteSingle(Stores.Commits, commit.id);\n\n      case 400:\n\n        const errorBody = response.body;\n\n        // When Attachment/Append failed emit attachment failed event\n        if (\n          [HistoryObject.DraftAttachment, HistoryObject.DraftAttachmentAppend]\n          .indexOf(commit.resource) >= 0\n        ) {\n          const meta = commit.rehydrateMeta;\n          if (meta) {\n            return Cache.save(Stores.Commits, {\n              ...commit,\n              status: CommitStatus.Error,\n              undoable: false,\n              rehydrateMeta: {\n                ...commit.rehydrateMeta,\n                error: errorBody,\n              },\n            }).flatMap(() => {\n              // Handle emission of failed attachment\n              sendDraftAttachmentAddFailed(meta, errorBody);\n              return Observable.of(null);\n            });\n          }\n        }\n\n        // Submit Draft Send Fail\n        if (commit.resource === HistoryObject.Draft) {\n\n          // Send draft failed if send case\n          if (commit.resourceHash.endsWith('send')) {\n            const meta = commit.rehydrateMeta as DraftSendMeta;\n            if (meta) {\n              // Handle failure and delete commit\n              this.handleDraftFailure(meta.draft, commit, errorBody);\n            }\n          }\n\n          // Delete all other draft commits on error\n          return Cache.deleteSingle(Stores.Commits, commit.id);\n        }\n\n        // TODO(Jeff): Handle undo logic\n        return Cache.save(Stores.Commits, {\n          ...commit,\n          status: CommitStatus.Error,\n          undoable: false,\n          rehydrateMeta: {\n            ...commit.rehydrateMeta,\n            error: errorBody,\n          },\n        });\n\n      default: {\n        const errBody = response.body as ApiError;\n        let isProviderError = false;\n\n        // Handle increments for expo backoff mechanism\n        switch (errBody.description) {\n          case ProviderErrors.ProviderError: {\n            const { resourceHash } = commit;\n            const backoff = this.resourceBackoffs[resourceHash] || new Backoff(resourceHash);\n            backoff.minPower = 8;\n            backoff.minSecs = 120;\n            backoff.maxSecs = 1800;\n            backoff.setError(new ApiError(response.code, errBody.description));\n            this.resourceBackoffs[resourceHash] = backoff;\n            isProviderError = true;\n\n            // If received more than 3 errors delete on provider error fail\n            // HACK(SHIN): Currently deleting vs undoing provider 500 errors on > 4x attempts.\n            // This separates concerns between provider/API and allows API to power through.\n            // Previously CommitSync was being completely blocked. We delete instead of undo bc\n            // of potentially large volume of undos and bringing server side instead\n            if (backoff.numErrors > 4) {\n\n              // Remove resource backoff\n              delete this.resourceBackoffs[resourceHash];\n\n              // Delete commit\n              return Cache.deleteSingle(Stores.Commits, commit.id);\n            }\n            break;\n          }\n          case ProviderErrors.ProviderRateLimit: {\n            const { account } = commit;\n            if (account) {\n              const backoff = this.resourceBackoffs[account] || new Backoff(account);\n              backoff.minPower = 7;\n              backoff.minSecs = 60;\n              backoff.maxSecs = 1800;\n              backoff.setError(new ApiError(response.code, errBody.description));\n              this.resourceBackoffs[account] = backoff;\n              isProviderError = true;\n            }\n            break;\n          }\n          default: break;\n        }\n\n        // TODO(SHIN): Handle removal of commit if backoffs exceed max limit\n        return Cache.save(Stores.Commits, {\n          ...commit,\n          status: CommitStatus.Ready,\n        })\n        .flatMap((r) => {\n          // Capture upstream if not provider error\n          if (!isProviderError) {\n            throw new Error('Commit failed ' + response.code + response.body);\n          }\n\n          return Observable.of(r);\n        });\n      }\n    }\n  }\n\n  // Fetch retrieves a page of commits from the commit log to process\n  private fetch(): Observable<Commit[]> {\n    this.retrigger = false;\n    return Cache.list(Stores.Commits, (commit: Commit) => {\n      return commit.status === CommitStatus.Ready;\n    }).map((fetchedCommits) => {\n      const commits = fetchedCommits.filter((c) => {\n\n        // NOTE(SHIN): We filter out any Thread Operations that communicate with provider\n        // This allows us to continue Running CommitSync while handling API commits\n        // We only filter out commits that are for Thread Resources\n        if (c.resource === HistoryObject.Thread) {\n          const resourceBackoff = this.resourceBackoffs[c.resourceHash];\n          if (resourceBackoff) {\n            if (!resourceBackoff.isReady()) {\n              return false;\n            }\n          }\n\n          if (c.account) {\n            const accountBackoff = this.resourceBackoffs[c.account];\n            if (accountBackoff) {\n              if (!accountBackoff.isReady()) {\n                return false;\n              }\n            }\n          }\n        }\n\n        return true;\n      });\n\n      return commits;\n    });\n  }\n\n  // Fetch retrieves a page of commits from the commit log to process\n  private fetchPendingCommits(): Observable<Commit[]> {\n    const pendingCommits = Cache.list(Stores.Commits, (commit: Commit) => {\n      return commit.status === CommitStatus.Pending;\n    });\n\n    return pendingCommits;\n  }\n\n  // Fetch all unresolved commits\n  private fetchUnresolvedCommits(): Observable<Commit[]> {\n    const allUnresolvedCommits = Cache.list(Stores.Commits, (commit: Commit) => {\n      return [CommitStatus.Complete].indexOf(commit.status) === -1;\n    });\n    return allUnresolvedCommits;\n  }\n\n  // handleDraftFailure handles side effects for draft save and worker events for failed draft\n  private handleDraftFailure = (start: Draft, commit: Commit, error: Error|undefined) => {\n\n    // Set error or create if doesn't exist\n    const finalError = error || new Error(\n      'We couldn\\'t send this draft. Please fix the errors and try again.',\n    );\n\n    // Convert necessary properties for failed drafts\n    const converted = failedDraft(commit, defaultDraft(start), finalError);\n\n    // Save into cache and emit worker events\n    Cache.save(Stores.Drafts, converted).subscribe();\n    sendDraftUpdated(converted);\n    sendDraftSendFailed(\n      { draft: converted, toggleArchive: false },\n      finalError,\n    );\n  }\n\n  private handleBusEvent(event: BusEvent) {\n    switch (event.name) {\n      case BusEventName.ClearErrors:\n        this.backoff.clearErrors();\n        break;\n\n      case BusEventName.CancelSync:\n        if (event.data.workerId && event.data.workerId !== this.workerId) {\n          break;\n        }\n        this.cancelSignal.next(null);\n        return;\n\n      case BusEventName.TriggerSync:\n        if (event.data.workerId && event.data.workerId !== this.workerId) {\n          break;\n        }\n        if (this.isRunning) {\n          this.retrigger = true;\n          return;\n        }\n        this.run().subscribe({\n          error: (e) => {\n            // tslint:disable-next-line:no-console\n            console.error(e);\n          },\n        });\n        break;\n\n      case BusEventName.UndoMove:\n        if (event.data.box) {\n          this.undoMove(event.data.box)\n            .flatMap(() => this.run())\n            .subscribe();\n        }\n        break;\n\n      case BusEventName.HistoryClearCache:\n        this.clearCache(false).subscribe();\n        break;\n\n      default:\n        break;\n    }\n  }\n}\n\nexport default CommitSync;\n"]}]}