{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Threads/components/ThreadList/components/InfiniteThreadList/ThreadsDataSource.tsx","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Threads/components/ThreadList/components/InfiniteThreadList/ThreadsDataSource.tsx","mtime":1675280254118},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkgewogICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikgewogICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwKICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fAogICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTsKICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTsKICAgIH07CiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHsKICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpOwogICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfQogICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTsKICAgIH07Cn0pKCk7CmltcG9ydCB7IEhpc3RvcnlPYmplY3QsIE1haWxib3hUeXBlLCBEcmFmdFN0YXR1cywgfSBmcm9tICdAc3JjL3R5cGVzJzsKaW1wb3J0IERhdGFTb3VyY2UgZnJvbSAnQHNyYy9saWIvRGF0YVNvdXJjZSc7CmltcG9ydCB7IGdldEFjdGlvbnMsIEFjdGlvbkRpc3BhdGNoZXJUeXBlLCB9IGZyb20gJ0BzcmMvbGliL0FjdGlvbkRpc3BhdGNoZXInOwppbXBvcnQgeyBwYXRjaGVkLCBtYWlsYm94VGhyZWFkc1ByZWRpY2F0ZSB9IGZyb20gJ0BzcmMvbGliL3RocmVhZCc7CmltcG9ydCB7IHRocmVhZERhdGFTb3VyY2VJdGVtLCBkcmFmdERhdGFTb3VyY2VJdGVtLCB9IGZyb20gJy4vVGhyZWFkc0RhdGFTb3VyY2VJdGVtJzsKaW1wb3J0IHsgbG9jYWxUaHJlYWRTZWFyY2hQcmVkaWNhdGUgfSBmcm9tICdAc3JjL2xpYi9zZWFyY2gnOwppbXBvcnQgeyBpc0VxdWFsIH0gZnJvbSAnbG9kYXNoJzsKaW1wb3J0IHsgaXNEcmFmdEJveCB9IGZyb20gJ0BzcmMvbGliL21haWxib3gnOwppbXBvcnQgeyBpc0RyYWZ0T3V0Ym94IH0gZnJvbSAnQHNyYy9saWIvZHJhZnQnOwp2YXIgVGhyZWFkc0RhdGFTb3VyY2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7CiAgICBfX2V4dGVuZHMoVGhyZWFkc0RhdGFTb3VyY2UsIF9zdXBlcik7CiAgICBmdW5jdGlvbiBUaHJlYWRzRGF0YVNvdXJjZSgpIHsKICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzOwogICAgICAgIC8vIElkZW50aWZ5IGNyaXRlcmlhIG9mIHdoYXQgbWFpbGJveCBwcm9lcHJ0aWVzIHNob3VsZCBjaGFuZ2UgdG8gcmVmcmVzaCBsaXN0CiAgICAgICAgX3RoaXMubW9kZUhhc0NoYW5nZWQgPSBmdW5jdGlvbiAob2xkTW9kZSwgbmV3TW9kZSkgewogICAgICAgICAgICAvLyBDbGVhciBkYXRhc291cmNlIGlmIG1vZGUgaGFzIGNoYW5nZWQKICAgICAgICAgICAgdmFyIG9sZE1vZGVDb21wYXJpc29uID0gewogICAgICAgICAgICAgICAgdHlwZTogb2xkTW9kZS50eXBlLAogICAgICAgICAgICAgICAgbGlzdDogb2xkTW9kZS5saXN0LAogICAgICAgICAgICAgICAgYWNjb3VudDogb2xkTW9kZS5hY2NvdW50LAogICAgICAgICAgICAgICAgc3RhcnJlZDogb2xkTW9kZS5zdGFycmVkLAogICAgICAgICAgICAgICAgc2VudDogb2xkTW9kZS5zZW50LAogICAgICAgICAgICAgICAgZm9sbG93VXA6IG9sZE1vZGUuZm9sbG93VXAsCiAgICAgICAgICAgICAgICByZWFkOiBvbGRNb2RlLnJlYWQsCiAgICAgICAgICAgICAgICBxdWVyeTogb2xkTW9kZS5xdWVyeSwKICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1zOiBvbGRNb2RlLnF1ZXJ5UGFyYW1zLAogICAgICAgICAgICAgICAgaHlkcmF0ZUNvdW50OiBvbGRNb2RlLmh5ZHJhdGVDb3VudCwKICAgICAgICAgICAgfTsKICAgICAgICAgICAgdmFyIG5ld01vZGVDb21wYXJpc29uID0gewogICAgICAgICAgICAgICAgdHlwZTogbmV3TW9kZS50eXBlLAogICAgICAgICAgICAgICAgbGlzdDogbmV3TW9kZS5saXN0LAogICAgICAgICAgICAgICAgYWNjb3VudDogbmV3TW9kZS5hY2NvdW50LAogICAgICAgICAgICAgICAgc3RhcnJlZDogbmV3TW9kZS5zdGFycmVkLAogICAgICAgICAgICAgICAgc2VudDogbmV3TW9kZS5zZW50LAogICAgICAgICAgICAgICAgZm9sbG93VXA6IG5ld01vZGUuZm9sbG93VXAsCiAgICAgICAgICAgICAgICByZWFkOiBuZXdNb2RlLnJlYWQsCiAgICAgICAgICAgICAgICBxdWVyeTogbmV3TW9kZS5xdWVyeSwKICAgICAgICAgICAgICAgIHF1ZXJ5UGFyYW1zOiBuZXdNb2RlLnF1ZXJ5UGFyYW1zLAogICAgICAgICAgICAgICAgaHlkcmF0ZUNvdW50OiBuZXdNb2RlLmh5ZHJhdGVDb3VudCwKICAgICAgICAgICAgfTsKICAgICAgICAgICAgcmV0dXJuICFpc0VxdWFsKG9sZE1vZGVDb21wYXJpc29uLCBuZXdNb2RlQ29tcGFyaXNvbik7CiAgICAgICAgfTsKICAgICAgICAvLyBJZGVudGlmaWVzIGlmIGRhdGFzb3VyY2Ugc2hvdWxkIGNvbnRhaW4gb2JqZWN0CiAgICAgICAgX3RoaXMuY29udGFpbnNEcmFmdCA9IGZ1bmN0aW9uIChkcmFmdCkgewogICAgICAgICAgICB2YXIgbW9kZSA9IF90aGlzLnByb3BzLm1vZGU7CiAgICAgICAgICAgIHN3aXRjaCAobW9kZS50eXBlKSB7CiAgICAgICAgICAgICAgICBjYXNlIE1haWxib3hUeXBlLkRyYWZ0czoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZHJhZnQuc3RhdHVzID09PSBEcmFmdFN0YXR1cy5EcmFmdDsKICAgICAgICAgICAgICAgIGNhc2UgTWFpbGJveFR5cGUuU2VuZExhdGVyOgogICAgICAgICAgICAgICAgICAgIHJldHVybiBkcmFmdC5zdGF0dXMgPT09IERyYWZ0U3RhdHVzLlNjaGVkdWxlZDsKICAgICAgICAgICAgICAgIGNhc2UgTWFpbGJveFR5cGUuT3V0Ym94OgogICAgICAgICAgICAgICAgICAgIHJldHVybiBpc0RyYWZ0T3V0Ym94KGRyYWZ0KTsKICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgLy8gVE9ETyhTSElOKTogVXBkYXRlIGluIHRlcm1zIG9mIG11bHRpcGxlIGZpbHRlcnMgYmVpbmcgc2V0IChzZW50ICYgdW5yZWFkKS4KICAgICAgICBfdGhpcy5jb250YWluc1RocmVhZCA9IGZ1bmN0aW9uICh0aHJlYWQpIHsKICAgICAgICAgICAgdmFyIF9hOwogICAgICAgICAgICB2YXIgbW9kZSA9IF90aGlzLnByb3BzLm1vZGU7CiAgICAgICAgICAgIHZhciBpc1NlYXJjaGluZyA9IG1vZGUucXVlcnkgJiYgbW9kZS5xdWVyeSAhPT0gJyc7CiAgICAgICAgICAgIHZhciBoYXNGaWx0ZXIgPSBtb2RlLnN0YXJyZWQgIT09IHVuZGVmaW5lZCB8fCBtb2RlLnJlYWQgIT09IHVuZGVmaW5lZDsKICAgICAgICAgICAgLy8gSGFuZGxlIHF1ZXJ5IHNlYXJjaAogICAgICAgICAgICBpZiAoaXNTZWFyY2hpbmcpIHsKICAgICAgICAgICAgICAgIGlmIChfdGhpcy5zdGF0ZS5sb2NhdGlvbnNbdGhyZWFkLmlkXSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvLyBPcHRpbWl6ZWQgcXVlcnkgY2hlY2sKICAgICAgICAgICAgICAgIGlmICghIW1vZGUucXVlcnkgJiYgISF0aHJlYWQucXVlcnkpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgcXVlcnlDaGVjayA9IChfYSA9IHt9LAogICAgICAgICAgICAgICAgICAgICAgICBfYVttb2RlLnF1ZXJ5XSA9IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICAgIF9hKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gISFxdWVyeUNoZWNrW3RocmVhZC5xdWVyeV07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gbG9jYWxUaHJlYWRTZWFyY2hQcmVkaWNhdGUobW9kZSwgdGhyZWFkKTsKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyBBbGxvdyBmbGFnIGNoYW5nZXMgdG8gZ28gdGhyb3VnaCB3aXRoIHVwZGF0ZSB3aGVuIGEgZmlsdGVyIGlzIHNldAogICAgICAgICAgICBpZiAoaGFzRmlsdGVyICYmIF90aGlzLnN0YXRlLmxvY2F0aW9uc1t0aHJlYWQuaWRdICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgIHJldHVybiBtYWlsYm94VGhyZWFkc1ByZWRpY2F0ZShtb2RlLCB0aHJlYWQsIHRydWUpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBtYWlsYm94VGhyZWFkc1ByZWRpY2F0ZShtb2RlLCB0aHJlYWQpOwogICAgICAgIH07CiAgICAgICAgX3RoaXMuaGFuZGxlRHJhZnRBY3Rpb24gPSBmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICAgICAgdmFyIHJlc291cmNlID0gZXZlbnQucmVzb3VyY2U7CiAgICAgICAgICAgIC8vIERvIG5vdGhpbmcgaWYgaGlzdG9yeSBvYmplY3QgdHlwZSBkb2VzIG5vdCBtYXRjaAogICAgICAgICAgICBpZiAoZXZlbnQucmVzb3VyY2VUeXBlICE9PSBIaXN0b3J5T2JqZWN0LkRyYWZ0KSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8gSGFuZGxlIGluc2VydGlvbnMgJiBkZWxldGlvbnMgZnJvbSBoaXN0b3J5IGV2ZW50cwogICAgICAgICAgICAvLyBIYW5kbGUgYmF0Y2ggdXBkYXRlcwogICAgICAgICAgICBpZiAoZXZlbnQudHlwZSA9PT0gQWN0aW9uRGlzcGF0Y2hlclR5cGUuQmF0Y2gpIHsKICAgICAgICAgICAgICAgIGlmICghZXZlbnQucmVzb3VyY2VzKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy8gQmF0Y2ggdXBkYXRlcwogICAgICAgICAgICAgICAgdmFyIHJlc291cmNlcyA9IGV2ZW50LnJlc291cmNlczsKICAgICAgICAgICAgICAgIHZhciBjb250YWluc18xID0gW107CiAgICAgICAgICAgICAgICB2YXIgcmVtb3ZlXzEgPSBbXTsKICAgICAgICAgICAgICAgIHJlc291cmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChkcmFmdCkgewogICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5jb250YWluc0RyYWZ0KGRyYWZ0KSkgewogICAgICAgICAgICAgICAgICAgICAgICBjb250YWluc18xLnB1c2goZHJhZnQpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlXzEucHVzaChkcmFmdC5pZCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAvLyBCYXRjaCByZW1vdmFscwogICAgICAgICAgICAgICAgcmVtb3ZlXzEuZm9yRWFjaChmdW5jdGlvbiAoaWQpIHsgcmV0dXJuIF90aGlzLnJlbW92ZShpZCk7IH0pOwogICAgICAgICAgICAgICAgX3RoaXMudXBkYXRlSXRlbXMoY29udGFpbnNfMS5tYXAoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGRyYWZ0RGF0YVNvdXJjZUl0ZW0oZCk7IH0pKTsKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyBIYW5kbGUgYWRkaW5nIG9yIHJlbW92aW5nIGRyYWZ0CiAgICAgICAgICAgIGlmIChyZXNvdXJjZSkgewogICAgICAgICAgICAgICAgaWYgKF90aGlzLmNvbnRhaW5zRHJhZnQocmVzb3VyY2UpKSB7CiAgICAgICAgICAgICAgICAgICAgX3RoaXMudXBkYXRlSXRlbShkcmFmdERhdGFTb3VyY2VJdGVtKHJlc291cmNlKSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBfdGhpcy5yZW1vdmUocmVzb3VyY2UuaWQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIEhhbmRsZXMgZGVsZXRlIGV2ZW50cwogICAgICAgICAgICBpZiAoZXZlbnQudHlwZSA9PT0gQWN0aW9uRGlzcGF0Y2hlclR5cGUuRGVsZXRlZCAmJiBldmVudC5pZCkgewogICAgICAgICAgICAgICAgX3RoaXMucmVtb3ZlKGV2ZW50LmlkKTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgLy8gQ3VzdG9tIGFjdGlvbiBoYW5kbGVyCiAgICAgICAgX3RoaXMuaGFuZGxlQWN0aW9uID0gZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgICAgICAgIHZhciBtb2RlID0gX3RoaXMucHJvcHMubW9kZTsKICAgICAgICAgICAgdmFyIHJlc291cmNlID0gZXZlbnQucmVzb3VyY2UsIGNvbW1pdCA9IGV2ZW50LmNvbW1pdDsKICAgICAgICAgICAgLy8gRG8gbm90aGluZyBpZiBoaXN0b3J5IG9iamVjdCB0eXBlIGRvZXMgbm90IG1hdGNoCiAgICAgICAgICAgIGlmIChldmVudC5yZXNvdXJjZVR5cGUgIT09IEhpc3RvcnlPYmplY3QuVGhyZWFkKSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8gSGFuZGxlIGJhdGNoIHVwZGF0ZXMKICAgICAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09IEFjdGlvbkRpc3BhdGNoZXJUeXBlLkJhdGNoICYmIGV2ZW50LnJlc291cmNlcykgewogICAgICAgICAgICAgICAgdmFyIGNvbnRhaW5zXzIgPSBbXTsKICAgICAgICAgICAgICAgIHZhciByZW1vdmVfMiA9IFtdOwogICAgICAgICAgICAgICAgdmFyIHJlc291cmNlcyA9IGV2ZW50LnJlc291cmNlczsKICAgICAgICAgICAgICAgIHJlc291cmNlcy5mb3JFYWNoKGZ1bmN0aW9uICh0aHJlYWQpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuY29udGFpbnNUaHJlYWQodGhyZWFkKSkgewogICAgICAgICAgICAgICAgICAgICAgICBjb250YWluc18yLnB1c2godGhyZWFkKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZV8yLnB1c2godGhyZWFkLmlkKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIC8vIEJhdGNoIHVwZGF0ZXMKICAgICAgICAgICAgICAgIF90aGlzLnVwZGF0ZUl0ZW1zKGNvbnRhaW5zXzIubWFwKGZ1bmN0aW9uICh0KSB7IHJldHVybiB0aHJlYWREYXRhU291cmNlSXRlbSh0LCBtb2RlKTsgfSkpOwogICAgICAgICAgICAgICAgLy8gQmF0Y2ggcmVtb3ZhbHMKICAgICAgICAgICAgICAgIHJlbW92ZV8yLmZvckVhY2goZnVuY3Rpb24gKGlkKSB7IHJldHVybiBfdGhpcy5yZW1vdmUoaWQpOyB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyBIYW5kbGVzIFRocmVhZCBNb3ZlIFVuZG8KICAgICAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09IEFjdGlvbkRpc3BhdGNoZXJUeXBlLlVuZG8gJiYgcmVzb3VyY2UpIHsKICAgICAgICAgICAgICAgIGlmIChfdGhpcy5jb250YWluc1RocmVhZChyZXNvdXJjZSkpIHsKICAgICAgICAgICAgICAgICAgICAvLyBDbGVhciB1bmRvIGNvbXBsZXRpb25zIGFuZCBwcm9jZXNzIGV2ZW50CiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLmNvbnRhaW5zVGhyZWFkKHJlc291cmNlKSkgewogICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5yZW1vdmUocmVzb3VyY2UuaWQpOwogICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy51cGRhdGVJdGVtKHRocmVhZERhdGFTb3VyY2VJdGVtKHJlc291cmNlLCBtb2RlKSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5yZW1vdmUocmVzb3VyY2UuaWQpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBfdGhpcy5wcm9wcy5vblVuZG9Db21wbGV0ZShyZXNvdXJjZSk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIEhhbmRsZXMgZGVsZXRlIGV2ZW50cwogICAgICAgICAgICBpZiAoZXZlbnQudHlwZSA9PT0gQWN0aW9uRGlzcGF0Y2hlclR5cGUuRGVsZXRlZCAmJiBldmVudC5pZCkgewogICAgICAgICAgICAgICAgX3RoaXMucmVtb3ZlKGV2ZW50LmlkKTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyBIYW5kbGUgaW5zZXJ0aW9ucyAmIGRlbGV0aW9ucyBmcm9tIGhpc3RvcnkgZXZlbnRzCiAgICAgICAgICAgIGlmIChyZXNvdXJjZSAmJiAhY29tbWl0KSB7CiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuY29udGFpbnNUaHJlYWQocmVzb3VyY2UpKSB7CiAgICAgICAgICAgICAgICAgICAgX3RoaXMudXBkYXRlSXRlbSh0aHJlYWREYXRhU291cmNlSXRlbShyZXNvdXJjZSwgbW9kZSkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVtb3ZlKHJlc291cmNlLmlkKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAvLyBIYW5kbGVzIHVzZXItaW5pdGlhdGVkIG1vdmVzCiAgICAgICAgICAgIGlmIChjb21taXQpIHsKICAgICAgICAgICAgICAgIC8vIE9ubHkgcHJvY2VzcyBjb21taXRzIGZvciBpdGVtcyB0aGF0IGV4aXN0CiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBfdGhpcy5zdGF0ZS5sb2NhdGlvbnNbY29tbWl0LnJlc291cmNlSWRdOwogICAgICAgICAgICAgICAgaWYgKGluZGV4ID49IDApIHsKICAgICAgICAgICAgICAgICAgICAvLyBQYXRjaCB0aHJlYWQgYW5kIHVwZGF0ZSBpbW1lZGlhdGVseSBpZiB0aHJlYWQgc3RpbGwgc2hvdWxkIHN0YXkKICAgICAgICAgICAgICAgICAgICB2YXIgZm91bmQgPSBfdGhpcy5zdGF0ZS5pdGVtc1tpbmRleF0ucmVzb3VyY2U7CiAgICAgICAgICAgICAgICAgICAgdmFyIHBhdGNoZWRUaHJlYWQgPSBwYXRjaGVkKGZvdW5kLCBjb21taXQpOwogICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5jb250YWluc1RocmVhZChwYXRjaGVkVGhyZWFkKSkgewogICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy51cGRhdGVJdGVtKHRocmVhZERhdGFTb3VyY2VJdGVtKHBhdGNoZWRUaHJlYWQsIG1vZGUpKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBfdGhpcy5wcm9wcy5vbkNvbW1pdChjb21taXQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICBfdGhpcy5yZWh5ZHJhdGUgPSBmYWxzZTsKICAgICAgICByZXR1cm4gX3RoaXM7CiAgICB9CiAgICAvLyBPbmx5IGhhbmRsZSBhY3Rpb25zIGlmIG1vZGUgaXMgb2YgdGhyZWFkIHR5cGUKICAgIFRocmVhZHNEYXRhU291cmNlLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICAgIHZhciB0eXBlID0gdGhpcy5wcm9wcy5tb2RlLnR5cGU7CiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24gPSBnZXRBY3Rpb25zKCkKICAgICAgICAgICAgLnN1YnNjcmliZShmdW5jdGlvbiAoZXZlbnQpIHsgcmV0dXJuIGlzRHJhZnRCb3godHlwZSkKICAgICAgICAgICAgPyBfdGhpcy5oYW5kbGVEcmFmdEFjdGlvbihldmVudCkKICAgICAgICAgICAgOiAoX3RoaXMuaGFuZGxlQWN0aW9uKGV2ZW50KSk7IH0pOwogICAgICAgIC8vIEFwcGVuZCBpdGVtcyBvbiBtb3VudCBmb3IgZmlyc3QgbG9hZAogICAgICAgIHRoaXMuYXBwZW5kU29ydGVkSXRlbXModGhpcy5wcm9wcy5pdGVtcyk7CiAgICB9OwogICAgLy8gUmVtb3ZlcyBzdWJzY3JpcHRpb24gd2hlbiB1bm1vdW50ZWQKICAgIFRocmVhZHNEYXRhU291cmNlLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpOwogICAgfTsKICAgIC8vIEZldGNoIHRocmVhZHMKICAgIFRocmVhZHNEYXRhU291cmNlLnByb3RvdHlwZS5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIChuZXh0UHJvcHMpIHsKICAgICAgICBpZiAodGhpcy5tb2RlSGFzQ2hhbmdlZCh0aGlzLnByb3BzLm1vZGUsIG5leHRQcm9wcy5tb2RlKSkgewogICAgICAgICAgICB0aGlzLmNsZWFyKCk7CiAgICAgICAgICAgIHRoaXMucmVoeWRyYXRlID0gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgLy8gSWYgbmV3IGl0ZW1zIChhbHJlYWR5IHNvcnRlZCkgaHlkcmF0ZSBkYXRhc291cmNlLgogICAgICAgIGlmICh0aGlzLnJlaHlkcmF0ZSAmJiB0aGlzLnByb3BzLml0ZW1zICYmIG5leHRQcm9wcy5pdGVtcyAmJgogICAgICAgICAgICB0aGlzLnN0YXRlLml0ZW1zLmxlbmd0aCA9PT0gMCAmJiBuZXh0UHJvcHMuaXRlbXMubGVuZ3RoID4gMCkgewogICAgICAgICAgICB0aGlzLmFwcGVuZFNvcnRlZEl0ZW1zKG5leHRQcm9wcy5pdGVtcyk7CiAgICAgICAgICAgIHRoaXMucmVoeWRyYXRlID0gZmFsc2U7CiAgICAgICAgfQogICAgfTsKICAgIHJldHVybiBUaHJlYWRzRGF0YVNvdXJjZTsKfShEYXRhU291cmNlKSk7CmV4cG9ydCBkZWZhdWx0IFRocmVhZHNEYXRhU291cmNlOwo="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Threads/components/ThreadList/components/InfiniteThreadList/ThreadsDataSource.tsx","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Threads/components/ThreadList/components/InfiniteThreadList/ThreadsDataSource.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Subscription } from 'rxjs';\n\nimport {\n  Thread,\n  Draft,\n  Mailbox,\n  Commit,\n  HistoryObject,\n  MailboxType,\n  DraftStatus,\n} from '@src/types';\nimport DataSource, { DataSourceItem } from '@src/lib/DataSource';\nimport { getActions,\n  ActionDispatcherEvent,\n  ActionDispatcherType,\n} from '@src/lib/ActionDispatcher';\nimport { patched, mailboxThreadsPredicate } from '@src/lib/thread';\nimport {\n  threadDataSourceItem,\n  ThreadsDataSourceItemTypes,\n  draftDataSourceItem,\n} from './ThreadsDataSourceItem';\nimport { localThreadSearchPredicate } from '@src/lib/search';\nimport { isEqual } from 'lodash';\nimport { isDraftBox } from '@src/lib/mailbox';\nimport { isDraftOutbox } from '@src/lib/draft';\n\ninterface ThreadsDataSourceItemProps {\n  items: Array<DataSourceItem<Thread | Draft>>;\n  mode: Mailbox;\n  onCommit: (commit: Commit) => void;\n  onUndoComplete: (thread: Thread) => void;\n}\n\nclass ThreadsDataSource extends DataSource<ThreadsDataSourceItemTypes, ThreadsDataSourceItemProps> {\n  subscription: Subscription;\n  rehydrate: boolean;\n  constructor() {\n    super();\n    this.rehydrate = false;\n  }\n\n  // Only handle actions if mode is of thread type\n  componentDidMount() {\n    const type = this.props.mode.type;\n    this.subscription = getActions()\n      .subscribe(\n        event => isDraftBox(type)\n          ? this.handleDraftAction(event)\n          : (this.handleAction(event)),\n      );\n\n    // Append items on mount for first load\n    this.appendSortedItems(this.props.items);\n  }\n\n  // Removes subscription when unmounted\n  componentWillUnmount() {\n    this.subscription.unsubscribe();\n  }\n\n  // Fetch threads\n  UNSAFE_componentWillReceiveProps(nextProps: ThreadsDataSourceItemProps) {\n    if (this.modeHasChanged(this.props.mode, nextProps.mode)) {\n      this.clear();\n      this.rehydrate = true;\n    }\n\n    // If new items (already sorted) hydrate datasource.\n    if (this.rehydrate && this.props.items && nextProps.items &&\n      this.state.items.length === 0 && nextProps.items.length > 0) {\n      this.appendSortedItems(nextProps.items);\n      this.rehydrate = false;\n    }\n  }\n\n  // Identify criteria of what mailbox proeprties should change to refresh list\n  modeHasChanged = (oldMode: Mailbox, newMode: Mailbox): boolean => {\n    // Clear datasource if mode has changed\n    const oldModeComparison: Mailbox = {\n      type: oldMode.type,\n      list: oldMode.list,\n      account: oldMode.account,\n      starred: oldMode.starred,\n      sent: oldMode.sent,\n      followUp: oldMode.followUp,\n      read: oldMode.read,\n      query: oldMode.query,\n      queryParams: oldMode.queryParams,\n      hydrateCount: oldMode.hydrateCount,\n    };\n    const newModeComparison: Mailbox = {\n      type: newMode.type,\n      list: newMode.list,\n      account: newMode.account,\n      starred: newMode.starred,\n      sent: newMode.sent,\n      followUp: newMode.followUp,\n      read: newMode.read,\n      query: newMode.query,\n      queryParams: newMode.queryParams,\n      hydrateCount: newMode.hydrateCount,\n    };\n    return !isEqual(oldModeComparison, newModeComparison);\n  }\n\n  // Identifies if datasource should contain object\n  containsDraft = (draft: Draft): boolean => {\n    const { mode } = this.props;\n    switch (mode.type) {\n      case MailboxType.Drafts:\n        return draft.status === DraftStatus.Draft;\n      case MailboxType.SendLater:\n        return draft.status === DraftStatus.Scheduled;\n      case MailboxType.Outbox:\n        return isDraftOutbox(draft);\n      default: return false;\n    }\n  }\n\n  // TODO(SHIN): Update in terms of multiple filters being set (sent & unread).\n  containsThread = (thread: Thread): boolean => {\n    const { mode } = this.props;\n    const isSearching = mode.query && mode.query !== '';\n    const hasFilter = mode.starred !== undefined || mode.read !== undefined;\n\n    // Handle query search\n    if (isSearching) {\n      if (this.state.locations[thread.id] !== undefined) {\n        return true;\n      }\n\n      // Optimized query check\n      if (!!mode.query && !!thread.query) {\n        const queryCheck = {\n          [mode.query]: true,\n        };\n\n        return !!queryCheck[thread.query];\n      }\n\n      return localThreadSearchPredicate(mode, thread);\n    }\n\n    // Allow flag changes to go through with update when a filter is set\n    if (hasFilter && this.state.locations[thread.id] !== undefined) {\n      return mailboxThreadsPredicate(mode, thread, true);\n    }\n\n    return mailboxThreadsPredicate(mode, thread);\n  }\n\n  handleDraftAction = (event: ActionDispatcherEvent) => {\n    const { resource } = event;\n    // Do nothing if history object type does not match\n    if (event.resourceType !== HistoryObject.Draft) {\n      return;\n    }\n    // Handle insertions & deletions from history events\n    // Handle batch updates\n    if (event.type === ActionDispatcherType.Batch) {\n      if (!event.resources) {\n        return;\n      }\n\n      // Batch updates\n      const resources = event.resources as Draft[];\n      const contains: Draft[] = [];\n      const remove: string[] = [];\n      resources.forEach((draft) => {\n        if (this.containsDraft(draft)) {\n          contains.push(draft);\n        } else {\n          remove.push(draft.id);\n        }\n      });\n\n      // Batch removals\n      remove.forEach(id => this.remove(id));\n      this.updateItems(contains.map(d => draftDataSourceItem(d)));\n    }\n\n    // Handle adding or removing draft\n    if (resource) {\n      if (this.containsDraft(resource as Draft)) {\n        this.updateItem(draftDataSourceItem(resource as Draft));\n      } else {\n        this.remove(resource.id);\n      }\n    }\n\n    // Handles delete events\n    if (event.type === ActionDispatcherType.Deleted && event.id) {\n      this.remove(event.id);\n      return;\n    }\n  }\n\n  // Custom action handler\n  handleAction = (event: ActionDispatcherEvent) => {\n    const { mode } = this.props;\n    const { resource, commit } = event;\n\n    // Do nothing if history object type does not match\n    if (event.resourceType !== HistoryObject.Thread) {\n      return;\n    }\n\n    // Handle batch updates\n    if (event.type === ActionDispatcherType.Batch && event.resources) {\n      const contains: Thread[] = [];\n      const remove: string[] = [];\n      const resources = event.resources as Thread[];\n      resources.forEach((thread: Thread) => {\n\n        if (this.containsThread(thread)) {\n          contains.push(thread);\n        } else {\n          remove.push(thread.id);\n        }\n      });\n\n      // Batch updates\n      this.updateItems(contains.map(t => threadDataSourceItem(t, mode)));\n\n      // Batch removals\n      remove.forEach(id => this.remove(id));\n    }\n\n    // Handles Thread Move Undo\n    if (event.type === ActionDispatcherType.Undo && resource) {\n      if (this.containsThread(resource as Thread)) {\n        // Clear undo completions and process event\n        if (this.containsThread(resource as Thread)) {\n          this.remove(resource.id);\n          this.updateItem(threadDataSourceItem(resource as Thread, mode));\n        } else {\n          this.remove(resource.id);\n        }\n        this.props.onUndoComplete(resource as Thread);\n        return;\n      }\n    }\n\n    // Handles delete events\n    if (event.type === ActionDispatcherType.Deleted && event.id) {\n      this.remove(event.id);\n      return;\n    }\n\n    // Handle insertions & deletions from history events\n    if (resource && !commit) {\n      if (this.containsThread(resource as Thread)) {\n        this.updateItem(threadDataSourceItem(resource as Thread, mode));\n      } else {\n        this.remove(resource.id);\n      }\n    }\n\n    // Handles user-initiated moves\n    if (commit) {\n\n      // Only process commits for items that exist\n      const index = this.state.locations[commit.resourceId];\n      if (index >= 0) {\n\n        // Patch thread and update immediately if thread still should stay\n        const found = this.state.items[index].resource;\n        const patchedThread = patched(found, commit);\n        if (this.containsThread(patchedThread)) {\n          this.updateItem(threadDataSourceItem(patchedThread, mode));\n          return;\n        }\n        this.props.onCommit(commit);\n      }\n    }\n  }\n}\n\nexport default ThreadsDataSource;\n"]}]}