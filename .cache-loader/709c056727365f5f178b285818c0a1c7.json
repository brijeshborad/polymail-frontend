{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/models/sequenceStageInstances.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/models/sequenceStageInstances.ts","mtime":1675280254067},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkgewogICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHsKICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHsKICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTsKICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKQogICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07CiAgICAgICAgfQogICAgICAgIHJldHVybiB0OwogICAgfTsKICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9OwppbXBvcnQgeyBBdHRhY2htZW50TWV0YVN0YXR1cyB9IGZyb20gJ0BzcmMvdHlwZXMnOwppbXBvcnQgeyBGYWtlRE9NIH0gZnJvbSAnQHNyYy9saWIvaHRtbCc7CmltcG9ydCB7IHJhbmdlIH0gZnJvbSAnbG9kYXNoJzsKZXhwb3J0IHZhciBhcHBseVNlcXVlbmNlU3RhZ2VJbnN0YW5jZURlZmF1bHRzID0gZnVuY3Rpb24gKHNlcXVlbmNlU3RhZ2VJbnN0YW5jZSkgewogICAgdmFyIGNyZWF0ZWQgPSBzZXF1ZW5jZVN0YWdlSW5zdGFuY2UuY3JlYXRlZCA/CiAgICAgICAgbmV3IERhdGUoc2VxdWVuY2VTdGFnZUluc3RhbmNlLmNyZWF0ZWQpIDogbmV3IERhdGUoKTsKICAgIHZhciB1cGRhdGVkID0gc2VxdWVuY2VTdGFnZUluc3RhbmNlLnVwZGF0ZWQgPwogICAgICAgIG5ldyBEYXRlKHNlcXVlbmNlU3RhZ2VJbnN0YW5jZS51cGRhdGVkKSA6IG5ldyBEYXRlKCk7CiAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIHNlcXVlbmNlU3RhZ2VJbnN0YW5jZSksIHsgY3JlYXRlZDogY3JlYXRlZCwKICAgICAgICB1cGRhdGVkOiB1cGRhdGVkIH0pOwp9OwovLyBJZGVudGlmaWVzIGFueSBpbmxpbmUgb3IgY2xvdWQgYXR0YWNobWVudHMgdGhhdCBuZWVkIHRvIGJlIGRlbGV0ZWQKZXhwb3J0IHZhciBzdGFnZUluc3RhbmNlQXR0YWNobWVudHNUb0RlbGV0ZSA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgYXR0YWNobWVudHMsIG1ldGFzKSB7CiAgICB2YXIgYm9keSA9IGluc3RhbmNlLmJvZHk7CiAgICB2YXIgZGVsZXRlTWV0YXMgPSBbXTsKICAgIHZhciBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7CiAgICB2YXIgZG9jID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyhib2R5LCAndGV4dC9odG1sJyk7CiAgICB2YXIgaW5saW5lQXR0YWNobWVudHMgPSBhdHRhY2htZW50cy5maWx0ZXIoZnVuY3Rpb24gKGF0dGFjaG1lbnQpIHsgcmV0dXJuIGF0dGFjaG1lbnQuaW5saW5lOyB9KTsKICAgIHZhciBpbmxpbmVNZXRhcyA9IG1ldGFzLmZpbHRlcihmdW5jdGlvbiAoYXR0YWNobWVudCkgeyByZXR1cm4gYXR0YWNobWVudC5pbmxpbmU7IH0pOwogICAgdmFyIGlubGluZUlkcyA9IGlubGluZUF0dGFjaG1lbnRzCiAgICAgICAgLm1hcChmdW5jdGlvbiAoYXR0YWNobWVudCkgeyByZXR1cm4gYXR0YWNobWVudC5pZDsgfSkKICAgICAgICAuY29uY2F0KGlubGluZU1ldGFzLm1hcChmdW5jdGlvbiAobWV0YSkgeyByZXR1cm4gbWV0YS5hdHRhY2htZW50OyB9KSk7CiAgICB2YXIgY2xvdWRBdHRhY2htZW50cyA9IGF0dGFjaG1lbnRzLmZpbHRlcihmdW5jdGlvbiAoYXR0YWNobWVudCkgeyByZXR1cm4gYXR0YWNobWVudC5jbG91ZDsgfSk7CiAgICB2YXIgY2xvdWRNZXRhcyA9IG1ldGFzLmZpbHRlcihmdW5jdGlvbiAoYXR0YWNobWVudCkgeyByZXR1cm4gYXR0YWNobWVudC5jbG91ZDsgfSk7CiAgICB2YXIgY2xvdWRJZHMgPSBjbG91ZEF0dGFjaG1lbnRzCiAgICAgICAgLm1hcChmdW5jdGlvbiAoYXR0YWNobWVudCkgeyByZXR1cm4gYXR0YWNobWVudC5pZDsgfSkKICAgICAgICAuY29uY2F0KGNsb3VkTWV0YXMubWFwKGZ1bmN0aW9uIChtZXRhKSB7IHJldHVybiBtZXRhLmF0dGFjaG1lbnQ7IH0pKTsKICAgIGNsb3VkSWRzCiAgICAgICAgLmZvckVhY2goZnVuY3Rpb24gKGlkKSB7CiAgICAgICAgdmFyIGZvdW5kID0gZG9jLnF1ZXJ5U2VsZWN0b3JBbGwoIiNkYXRhLXBtLWF0dGFjaG1lbnQtaWQtIiArIGlkKTsKICAgICAgICBpZiAoZm91bmQubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICAgIC8vIEFkZCByZXF1ZXN0IHRvIHJlbW92ZSBhdHRhY2htZW50IGZyb20gZHJhZnQKICAgICAgICAgICAgZGVsZXRlTWV0YXMucHVzaCh7CiAgICAgICAgICAgICAgICByZXNvdXJjZUlkOiBpbnN0YW5jZS5pZCwKICAgICAgICAgICAgICAgIHN0YWdlOiBpbnN0YW5jZS5zdGFnZSwKICAgICAgICAgICAgICAgIHNlcXVlbmNlOiBpbnN0YW5jZS5zZXF1ZW5jZSwKICAgICAgICAgICAgICAgIGF0dGFjaG1lbnQ6IGlkLAogICAgICAgICAgICAgICAgc3RhdHVzOiBBdHRhY2htZW50TWV0YVN0YXR1cy5EZWxldGUsCiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgIH0pOwogICAgaW5saW5lSWRzCiAgICAgICAgLmZvckVhY2goZnVuY3Rpb24gKGlkKSB7CiAgICAgICAgdmFyIGZvdW5kID0gZG9jLnF1ZXJ5U2VsZWN0b3JBbGwoIiNwbS1pbmxpbmUtaWQtIiArIGlkKTsKICAgICAgICBpZiAoZm91bmQubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICAgIGRlbGV0ZU1ldGFzLnB1c2goewogICAgICAgICAgICAgICAgcmVzb3VyY2VJZDogaW5zdGFuY2UuaWQsCiAgICAgICAgICAgICAgICBzdGFnZTogaW5zdGFuY2Uuc3RhZ2UsCiAgICAgICAgICAgICAgICBzZXF1ZW5jZTogaW5zdGFuY2Uuc2VxdWVuY2UsCiAgICAgICAgICAgICAgICBhdHRhY2htZW50OiBpZCwKICAgICAgICAgICAgICAgIHN0YXR1czogQXR0YWNobWVudE1ldGFTdGF0dXMuRGVsZXRlLAogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICB9KTsKICAgIHJldHVybiBkZWxldGVNZXRhczsKfTsKZXhwb3J0IHZhciBhcHBseVRlbXBsYXRlVG9TdGFnZUluc3RhbmNlID0gZnVuY3Rpb24gKGluc3RhbmNlLCB0ZW1wbGF0ZSwgaGVhZGVycywgbmV3VGhyZWFkKSB7CiAgICB2YXIgdXBkYXRlZCA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBpbnN0YW5jZSksIHsgdGVtcGxhdGU6IHRlbXBsYXRlLmlkIH0pOwogICAgLy8gcHJlc2VydmUgc2lnbmF0dXJlCiAgICB2YXIgY29udGFpbmVyID0gRmFrZURPTSgpLmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgY29udGFpbmVyLmlubmVySFRNTCA9IGluc3RhbmNlLmJvZHk7CiAgICB2YXIgc2lnbmF0dXJlID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyNwc2lnbmF0dXJlJyk7CiAgICB2YXIgd3JhcHBlciA9IEZha2VET00oKS5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgIHdyYXBwZXIuaW5uZXJIVE1MID0gdGVtcGxhdGUuYm9keTsKICAgIGlmIChzaWduYXR1cmUpIHsKICAgICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2JyJykpOwogICAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnInKSk7CiAgICAgICAgd3JhcHBlci5hcHBlbmRDaGlsZChzaWduYXR1cmUpOwogICAgfQogICAgLy8gU2V0IHBsYWNlaG9sZGVycyB2YWx1ZQogICAgdmFyIHBsYWNlaG9sZGVycyA9IHdyYXBwZXIucXVlcnlTZWxlY3RvckFsbCgnLmRhdGEtcG0tdmFyJyk7CiAgICBpZiAocGxhY2Vob2xkZXJzLmxlbmd0aCA+IDApIHsKICAgICAgICByYW5nZShwbGFjZWhvbGRlcnMubGVuZ3RoKQogICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChpLCBuKSB7IHJldHVybiBwbGFjZWhvbGRlcnMuaXRlbShuKTsgfSkKICAgICAgICAgICAgLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHsKICAgICAgICAgICAgaWYgKGhlYWRlcnMuaW5kZXhPZihlbGVtZW50LmlubmVySFRNTCkgPT09IC0xKSB7CiAgICAgICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1wbS1uby12YXJpYWJsZScsICcxJyk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0KICAgIHVwZGF0ZWQuYm9keSA9IHdyYXBwZXIuaW5uZXJIVE1MOwogICAgaWYgKHRlbXBsYXRlLnN1YmplY3QgJiYgbmV3VGhyZWFkKSB7CiAgICAgICAgdXBkYXRlZC5zdWJqZWN0ID0gdGVtcGxhdGUuc3ViamVjdDsKICAgIH0KICAgIHJldHVybiB1cGRhdGVkOwp9Owo="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/models/sequenceStageInstances.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/models/sequenceStageInstances.ts"],"names":[],"mappings":"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","sourcesContent":["import { SequenceStageInstance } from '@src/types/sequences';\nimport { AttachmentMeta, Attachment, AttachmentMetaStatus, Template } from '@src/types';\nimport { SequenceStageInstanceAttachmentMeta } from '@src/ducks/sequenceStageInstances';\nimport { FakeDOM } from '@src/lib/html';\nimport { range } from 'lodash';\n\nexport const applySequenceStageInstanceDefaults =\n  (sequenceStageInstance: SequenceStageInstance): SequenceStageInstance => {\n    const created = sequenceStageInstance.created ?\n      new Date(sequenceStageInstance.created) : new Date();\n    const updated = sequenceStageInstance.updated ?\n      new Date(sequenceStageInstance.updated) : new Date();\n\n    return {\n      ...sequenceStageInstance,\n\n      created,\n      updated,\n    };\n  };\n\n// Identifies any inline or cloud attachments that need to be deleted\nexport const stageInstanceAttachmentsToDelete = (instance: SequenceStageInstance,\n                                                 attachments: Attachment[],\n                                                 metas: AttachmentMeta[],\n): SequenceStageInstanceAttachmentMeta[] => {\n  const body = instance.body;\n  const deleteMetas: SequenceStageInstanceAttachmentMeta[] = [];\n\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(body, 'text/html');\n  const inlineAttachments = attachments.filter(attachment => attachment.inline);\n  const inlineMetas = metas.filter(attachment => attachment.inline);\n  const inlineIds = inlineAttachments\n    .map(attachment => attachment.id)\n    .concat(inlineMetas.map(meta => meta.attachment));\n\n  const cloudAttachments = attachments.filter(attachment => attachment.cloud);\n  const cloudMetas = metas.filter(attachment => attachment.cloud);\n  const cloudIds = cloudAttachments\n    .map(attachment => attachment.id)\n    .concat(cloudMetas.map(meta => meta.attachment));\n\n  cloudIds\n    .forEach((id) => {\n      const found = doc.querySelectorAll(`#data-pm-attachment-id-${id}`);\n      if (found.length === 0) {\n        // Add request to remove attachment from draft\n        deleteMetas.push({\n          resourceId: instance.id,\n          stage: instance.stage,\n          sequence: instance.sequence,\n          attachment: id,\n          status: AttachmentMetaStatus.Delete,\n        });\n      }\n    });\n\n  inlineIds\n    .forEach((id) => {\n      const found = doc.querySelectorAll(`#pm-inline-id-${id}`);\n      if (found.length === 0) {\n        deleteMetas.push({\n          resourceId: instance.id,\n          stage: instance.stage,\n          sequence: instance.sequence,\n          attachment: id,\n          status: AttachmentMetaStatus.Delete,\n        });\n      }\n    });\n\n  return deleteMetas;\n};\n\nexport const applyTemplateToStageInstance = (\n  instance: SequenceStageInstance,\n  template: Template,\n  headers: string[],\n  newThread: boolean,\n): SequenceStageInstance => {\n  const updated = { ...instance, template: template.id };\n\n  // preserve signature\n  const container = FakeDOM().createElement('div');\n  container.innerHTML = instance.body;\n  const signature = container.querySelector('#psignature');\n\n  const wrapper = FakeDOM().createElement('div');\n  wrapper.innerHTML = template.body;\n  if (signature) {\n    wrapper.appendChild(document.createElement('br'));\n    wrapper.appendChild(document.createElement('br'));\n    wrapper.appendChild(signature);\n  }\n\n  // Set placeholders value\n  const placeholders = wrapper.querySelectorAll('.data-pm-var');\n  if (placeholders.length > 0) {\n    range(placeholders.length)\n      .map((i, n) => placeholders.item(n))\n      .forEach((element) => {\n        if (headers.indexOf(element.innerHTML) === -1) {\n          element.setAttribute('data-pm-no-variable', '1');\n        }\n      });\n  }\n\n  updated.body = wrapper.innerHTML;\n\n  if (template.subject && newThread) {\n    updated.subject = template.subject;\n  }\n\n  return updated;\n};\n"]}]}