{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/leftSidebar.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/leftSidebar.ts","mtime":1675280254056},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIF9hOwppbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7CmltcG9ydCB7IEFjdGlvblN0YXR1cyB9IGZyb20gJ0BzcmMvdHlwZXMnOwppbXBvcnQgeyBMT0NBVElPTl9DSEFOR0UgfSBmcm9tICdyZWFjdC1yb3V0ZXItcmVkdXgnOwppbXBvcnQgeyBOYXZiYXJUYWIgfSBmcm9tICdAc3JjL3R5cGVzL2xlZnRTaWRlYmFyJzsKaW1wb3J0IHsgbGVmdFNpZGViYXJUYWJTZWxlY3QsIGxlZnRTaWRlYmFyQWNjb3VudFNlbGVjdCwgTEVGVF9TSURFQkFSX1RPR0dMRSwgbGVmdFNpZGViYXJDb2xsYXBzZSwgfSBmcm9tICdAc3JjL2R1Y2tzL2xlZnRTaWRlYmFyJzsKdmFyIHBhdGhzID0gKF9hID0ge30sCiAgICBfYVtOYXZiYXJUYWIuQ2FtcGFpZ25zXSA9IC9jYW1wYWlnbnMvaWcsCiAgICBfYVtOYXZiYXJUYWIuQW5hbHl0aWNzXSA9IC9hbmFseXRpY3MvaWcsCiAgICBfYVtOYXZiYXJUYWIuU2VxdWVuY2VzXSA9IC9zZXF1ZW5jZXMvaWcsCiAgICBfYVtOYXZiYXJUYWIuTWVudGlvbnNdID0gL21lbnRpb25zL2lnLAogICAgX2FbTmF2YmFyVGFiLlNoYXJlZFRocmVhZHNdID0gL3NoYXJlZFRocmVhZHMvaWcsCiAgICBfYVtOYXZiYXJUYWIuVGVtcGxhdGVzXSA9IC90ZW1wbGF0ZXMvaWcsCiAgICBfYVtOYXZiYXJUYWIuVW5zdWJzY3JpYmVyXSA9IC91bnN1YnNjcmliZXIvaWcsCiAgICBfYVtOYXZiYXJUYWIuU2NoZWR1bGluZ10gPSAvY2FsZW5kYXJzL2lnLAogICAgX2EpOwp2YXIgbGVmdFNpZGViYXJUYWJTZWxlY3RFcGljID0gZnVuY3Rpb24gKGFjdGlvbiQsIHN0b3JlLCBkZXBzKSB7CiAgICByZXR1cm4gYWN0aW9uJC5vZlR5cGUoTE9DQVRJT05fQ0hBTkdFKQogICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGFjdGlvbikgewogICAgICAgIHZhciBwYXRoID0gYWN0aW9uLnBheWxvYWQucGF0aG5hbWUudG9Mb3dlckNhc2UoKTsKICAgICAgICBpZiAocGF0aC5tYXRjaCgvXlwvc2V0dGluZ3MvaSkpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0pCiAgICAgICAgLmZsYXRNYXAoZnVuY3Rpb24gKGFjdGlvbikgewogICAgICAgIHZhciBzZWxlY3RlZFRhYiA9IE5hdmJhclRhYi5NYWlsOwogICAgICAgIHZhciBwYXRoID0gYWN0aW9uLnBheWxvYWQucGF0aG5hbWUudG9Mb3dlckNhc2UoKTsKICAgICAgICBPYmplY3Qua2V5cyhwYXRocykuZm9yRWFjaChmdW5jdGlvbiAodGFiKSB7CiAgICAgICAgICAgIGlmIChwYXRoLm1hdGNoKHBhdGhzW3RhYl0pKSB7CiAgICAgICAgICAgICAgICBzZWxlY3RlZFRhYiA9IHRhYjsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIHZhciBhY3Rpb25zID0gWwogICAgICAgICAgICBPYnNlcnZhYmxlLm9mKGxlZnRTaWRlYmFyVGFiU2VsZWN0KHNlbGVjdGVkVGFiKSksCiAgICAgICAgXTsKICAgICAgICBpZiAocGF0aC5zdGFydHNXaXRoKCcvbWFpbCcpKSB7CiAgICAgICAgICAgIHZhciBzcGxpdCA9IHBhdGguc3BsaXQoJy8nKTsKICAgICAgICAgICAgaWYgKHNwbGl0Lmxlbmd0aCA+IDIpIHsKICAgICAgICAgICAgICAgIHZhciBhY2NvdW50ID0gcGF0aC5zcGxpdCgnLycpWzJdLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgICAgICAgICBhY3Rpb25zLnB1c2goT2JzZXJ2YWJsZS5vZihsZWZ0U2lkZWJhckFjY291bnRTZWxlY3QoYWNjb3VudCAmJiBhY2NvdW50ICE9PSAnYWxsJyA/IGFjY291bnQgOiB1bmRlZmluZWQpKSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIE9ic2VydmFibGUubWVyZ2UuYXBwbHkoT2JzZXJ2YWJsZSwgYWN0aW9ucyk7CiAgICB9KTsKfTsKdmFyIGxlZnRTaWRlYmFyVG9nZ2xlRXBpYyA9IGZ1bmN0aW9uIChhY3Rpb24kLCBzdG9yZSwgZGVwcykgeyByZXR1cm4gYWN0aW9uJAogICAgLm9mVHlwZShMRUZUX1NJREVCQVJfVE9HR0xFKQogICAgLmZpbHRlcihmdW5jdGlvbiAoYWN0aW9uKSB7IHJldHVybiBhY3Rpb24uc3RhdHVzID09PSBBY3Rpb25TdGF0dXMuU3RhcnQ7IH0pCiAgICAubWFwKGZ1bmN0aW9uICgpIHsKICAgIHZhciBzdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7CiAgICB2YXIgbmV3Q29sbGFwc2VkU3RhdGUgPSAhc3RhdGUubGVmdFNpZGViYXIuY29sbGFwc2VkOwogICAgcmV0dXJuIGxlZnRTaWRlYmFyQ29sbGFwc2UobmV3Q29sbGFwc2VkU3RhdGUpOwp9KTsgfTsKZXhwb3J0IGRlZmF1bHQgWwogICAgbGVmdFNpZGViYXJUYWJTZWxlY3RFcGljLAogICAgbGVmdFNpZGViYXJUb2dnbGVFcGljLApdOwo="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/leftSidebar.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/leftSidebar.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs';\nimport { Epic } from 'redux-observable';\nimport { Deps } from '@src/lib/epic';\n\nimport { Action, StoreState, ActionStatus } from '@src/types';\nimport { LocationChangeAction, LOCATION_CHANGE } from 'react-router-redux';\nimport { NavbarTab } from '@src/types/leftSidebar';\nimport {\n  leftSidebarTabSelect, leftSidebarAccountSelect,\n  LEFT_SIDEBAR_TOGGLE, leftSidebarCollapse,\n} from '@src/ducks/leftSidebar';\n\nconst paths = {\n  [NavbarTab.Campaigns]: /campaigns/ig,\n  [NavbarTab.Analytics]: /analytics/ig,\n  [NavbarTab.Sequences]: /sequences/ig,\n  [NavbarTab.Mentions]: /mentions/ig,\n  [NavbarTab.SharedThreads]: /sharedThreads/ig,\n  [NavbarTab.Templates]: /templates/ig,\n  [NavbarTab.Unsubscriber]: /unsubscriber/ig,\n  [NavbarTab.Scheduling]: /calendars/ig,\n};\n\nconst leftSidebarTabSelectEpic: Epic<Action<any, any>, StoreState, Deps> =\n(action$, store, deps) =>\n  action$.ofType(LOCATION_CHANGE)\n    .filter((action) => {\n      const path = ((action as any) as LocationChangeAction).payload.pathname.toLowerCase();\n      if (path.match(/^\\/settings/i)) {\n        return false;\n      }\n\n      return true;\n    })\n    .flatMap((action) => {\n      let selectedTab = NavbarTab.Mail;\n      const path = ((action as any) as LocationChangeAction).payload.pathname.toLowerCase();\n\n      Object.keys(paths).forEach((tab) => {\n        if (path.match(paths[tab])) {\n          selectedTab = tab as NavbarTab;\n        }\n      });\n\n      const actions: Array<Observable<Action<any, any>>> = [\n        Observable.of(leftSidebarTabSelect(selectedTab)),\n      ];\n      if (path.startsWith('/mail')) {\n        const split = path.split('/');\n        if (split.length > 2) {\n          const account = path.split('/')[2].toLowerCase();\n          actions.push(Observable.of(leftSidebarAccountSelect(\n            account && account !== 'all' ? account : undefined,\n          )));\n        }\n      }\n\n      return Observable.merge(...actions);\n    });\n\nconst leftSidebarToggleEpic: Epic<Action<boolean, undefined>, StoreState, Deps> =\n(action$, store, deps) => action$\n  .ofType(LEFT_SIDEBAR_TOGGLE)\n    .filter(action => action.status === ActionStatus.Start)\n    .map(() => {\n      const state = store.getState();\n      const newCollapsedState = !state.leftSidebar.collapsed;\n      return leftSidebarCollapse(newCollapsedState);\n    });\nexport default [\n  leftSidebarTabSelectEpic,\n  leftSidebarToggleEpic,\n];\n"]}]}