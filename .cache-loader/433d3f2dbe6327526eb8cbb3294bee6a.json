{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/threads.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/threads.ts","mtime":1675280254059},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/threads.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/threads.ts"],"names":[],"mappings":"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","sourcesContent":["import { MiddlewareAPI } from 'redux';\nimport { orderBy, last, uniqBy, flatten } from 'lodash';\nimport { Observable } from 'rxjs';\nimport { Epic } from 'redux-observable';\nimport { submitCommit, createThreadCommit } from '@src/lib/commit';\nimport Cache, { Stores } from '@src/lib/db';\nimport { getQueryVariable } from '@src/lib/query';\n\nimport { activitySelect } from '@src/ducks/activityFeed';\nimport {\n  patched,\n  matchesThread,\n  computeThread,\n  mailboxThreadsPredicate,\n  listThreadsByBox,\n  listThreadsByAccountBox,\n  listThreadsByList,\n  listThreadsByAccountList,\n  listThreadsSent,\n  listThreadsAccountSent,\n  listThreadsByEmail,\n  listThreadsStarred,\n  listThreadsFollowUp,\n  THREAD_LIST_SIZE,\n  listThreadsAccountStarred,\n} from '@src/lib/thread';\n\nimport {\n  parseQueryParams,\n  localThreadSearch,\n  providerThreadSearch,\n} from '@src/lib/search';\n\nimport {\n  StoreState,\n  Action,\n  ActionStatus,\n  Thread,\n  ThreadBox,\n  Mailbox,\n  MailboxType,\n  Commit,\n  Activity,\n  ThreadCommitMeta,\n  MessageBody,\n  AccountType,\n  Message,\n  Draft,\n} from '@src/types/index';\nimport {\n  RightSidebarTab,\n  RightSidebarSubTab,\n} from '@src/types/rightSidebar';\n\nimport { LOCATION_CHANGE, LocationChangeAction } from 'react-router-redux';\n\nimport {\n  threadSelect, THREAD_SELECT,\n  THREAD_LIST, threadList,\n  THREAD_UPDATE, threadUpdate,\n  THREADS_SELECTED_CONTACT, threadsSelectedContact,\n  THREADS_SEARCH, threadsSearch,\n  THREAD_FETCH, threadFetch,\n  THREAD_COMMITS_SUBMIT, threadCommitsSubmit,\n  contactThreadSelect,\n  CONTACT_THREAD_SELECT,\n  THREAD_SINGLE,\n  threadDelete,\n  threadSwipeIdSet,\n  attachmentDownloadProgressClear,\n  selectThread as selectThreadSelector,\n  threadSingle,\n  selectActivityThread,\n  ThreadSearchPayload, THREAD_DISABLE_TRACK, threadDisableTrack,\n} from '@src/ducks/threads';\n\nimport { messageBodiesFetch, sharedThreadMessageBodiesFetch } from '@src/ducks/messageBodies';\n\nimport {\n  DRAFT_SEND,\n  selectOptimisticMessagesForThread,\n  draftSelect,\n  selectSendingDrafts,\n} from '@src/ducks/drafts';\nimport { Deps } from '@src/lib/epic';\nimport { contactSelect } from '@src/ducks/contacts';\nimport { mailboxSelect, MAILBOX_SELECT } from '@src/ducks/mailbox';\nimport { recordEvent, UserEvents } from '@src/lib/analytics';\nimport { toThread } from '@src/lib/draft';\nimport { calendarEventGet } from '@src/ducks/calendars';\nimport {\n  sharedThreadSelectByThread,\n  selectSharedThread,\n  sharedThreadActivityClear,\n} from '@src/ducks/sharedThreads';\nimport { draftSendAndArchiveEpic } from '@src/epics/drafts';\nimport { newLocalThreadSearch } from '@src/lib/searchDb';\nimport { getSearchDbConfig } from '@src/lib/device';\nimport { isDraftBox } from '@src/lib/mailbox';\nimport { captureException } from '@sentry/browser';\nimport { ConfirmationError, ConfirmationPositon, toastSet } from '@src/ducks/toasts';\n\nexport const isMailboxUpdateAction = (action: Action<any, any>) => {\n  const types = [THREAD_LIST, LOCATION_CHANGE, THREADS_SEARCH];\n\n  return !!types.filter(type => action.type === type).length;\n};\n\n// Observable that returns threadList action for a given Mailbox\nfunction mailboxList(mailbox: Mailbox, store: MiddlewareAPI<StoreState>) {\n  // Don't need to fetch threads from indexed db if viewing drafts\n  if (isDraftBox(mailbox.type)) {\n    return Observable.concat(\n      Observable.of(mailboxSelect(mailbox, mailbox)),\n      Observable.of(threadList(false, [])),\n    );\n  }\n\n  // Do not update mailbox threads when in query mode\n  const mailboxThreads = store.getState().mailboxThreads.data;\n  if (mailbox.query && mailbox.query !== '' && mailboxThreads) {\n    return Observable.concat(\n      Observable.of(mailboxSelect(mailbox, mailbox)),\n      Observable.of(threadList(false, mailboxThreads)),\n    );\n  }\n\n  // Predicate Filters, need to run unread filtering at db level\n  const predicateFilter = (thread: Thread) => mailboxThreadsPredicate(mailbox, thread);\n\n  // Handle MailboxBox and List filters\n  let listThreads: Observable<Thread[]>;\n  if (mailbox.type === MailboxType.Inbox) {\n    listThreads = mailbox.account ?\n      listThreadsByAccountBox(mailbox.account, ThreadBox.Inbox, undefined, predicateFilter) :\n      listThreadsByBox(ThreadBox.Inbox, undefined, predicateFilter);\n\n  } else if (mailbox.type === MailboxType.Archive) {\n    listThreads = mailbox.account ?\n      listThreadsByAccountBox(mailbox.account, ThreadBox.Archive, undefined, predicateFilter) :\n      listThreadsByBox(ThreadBox.Archive, undefined, predicateFilter);\n\n  } else if (mailbox.type === MailboxType.Later) {\n    listThreads = mailbox.account ?\n      listThreadsByAccountBox(mailbox.account, ThreadBox.Later, undefined, predicateFilter) :\n      listThreadsByBox(ThreadBox.Later, undefined, predicateFilter);\n\n  } else if (mailbox.type === MailboxType.Spam) {\n    listThreads = mailbox.account ?\n      listThreadsByAccountBox(mailbox.account, ThreadBox.Spam, undefined, predicateFilter) :\n      listThreadsByBox(ThreadBox.Spam, undefined, predicateFilter);\n\n  } else if (mailbox.type === MailboxType.Trash) {\n    listThreads = mailbox.account ?\n      listThreadsByAccountBox(mailbox.account, ThreadBox.Trash, undefined, predicateFilter) :\n      listThreadsByBox(ThreadBox.Trash, undefined, predicateFilter);\n\n  } else if (mailbox.list) {\n    listThreads = mailbox.account ?\n      listThreadsByAccountList(mailbox.account, mailbox.list, undefined, predicateFilter) :\n      listThreadsByList(mailbox.list, undefined, predicateFilter);\n\n  } else if (mailbox.sent) {\n    listThreads = mailbox.account ?\n      listThreadsAccountSent(mailbox.account, undefined, predicateFilter) :\n      listThreadsSent(undefined, predicateFilter);\n\n  } else if (mailbox.starred) {\n    listThreads = mailbox.account ?\n      listThreadsAccountStarred(mailbox.account, predicateFilter) :\n      listThreadsStarred(predicateFilter);\n\n  // tslint:disable-next-line\n  } else if (mailbox.followUp) {\n    listThreads = listThreadsFollowUp(predicateFilter);\n\n  } else {\n\n    // Slow full index scan. Avoid if possible.\n    listThreads = Cache.list<Thread>(Stores.Threads, predicateFilter);\n  }\n\n  // Perform list operation on db\n  return listThreads\n    .map((threads) => {\n      // Filter\n      // Add optimistics\n      const sendingDrafts: Draft[] = selectSendingDrafts(store.getState())\n        .filter((draft: Draft) => !draft.threadV2);\n      sendingDrafts\n        .forEach((draft) => {\n          const thread = toThread(draft, store.getState().accounts);\n          if (mailboxThreadsPredicate(mailbox, thread)) {\n            threads.push(thread);\n          }\n        });\n\n      // Patch in optimistic messages\n      const optimisticThreads = threads.map((thread) => {\n        const messages = uniqBy(\n          thread.messages.concat(selectOptimisticMessagesForThread(store.getState(), thread.id)),\n          'rfcId',\n        );\n        return { ...thread, messages };\n      });\n\n      // Handle Sent folder sort\n      if (mailbox.sent) {\n        return orderBy(\n          optimisticThreads.map(thread => computeThread(thread)), t => t.lastSent, 'desc',\n        );\n      }\n\n      // Sort\n      switch (mailbox.type) {\n        case MailboxType.Inbox:\n          return orderBy(\n            optimisticThreads.map(thread => computeThread(thread)), t => t.sort, 'desc',\n          );\n        case MailboxType.Later:\n          return orderBy(\n            optimisticThreads.map(thread => computeThread(thread)), t => t.sort, 'asc',\n          );\n        default:\n          return orderBy(\n            optimisticThreads.map(thread => computeThread(thread)), t => t.internal, 'desc',\n          );\n      }\n    })\n    .flatMap(threads => Observable.concat(\n      Observable.of(mailboxSelect(mailbox, mailbox)),\n      Observable.of(threadList(false, threads)),\n    ))\n    .catch((e: Error) => Observable.of(threadList(false, e)));\n}\n\nconst mailboxSelectEpic: Epic<Action<Mailbox|boolean, any>, StoreState> = action$ =>\n  action$\n  .ofType(MAILBOX_SELECT)\n  .filter(action => action.status === ActionStatus.Start)\n  .map(action => threadList(false));\n\n// handle location change based updates to selected mailbox\nconst locationChangeUpdateMailbox: Epic<Action<any, any>, StoreState, Deps> =\n  (action$, store, deps) =>\n    action$.ofType(LOCATION_CHANGE)\n      .filter((action) => {\n        const path = ((action as any) as LocationChangeAction).payload.pathname.toLowerCase();\n        const split = path.split('/');\n        if (split[3] && split[3] === 'compose') {\n          return false;\n        }\n        return path.startsWith('/mail') || path === '/';\n      })\n      .debounceTime(200, deps.scheduler)\n      .map((action) => {\n        // Convert the route into a Mailbox model\n        const mailbox: Mailbox = {\n          type: MailboxType.Any,\n        };\n\n        const routeAction = (action as any) as LocationChangeAction;\n        if (routeAction.payload.pathname === '/') {\n          mailbox.type = MailboxType.Inbox;\n        }\n\n        const path = routeAction.payload.pathname.split('/');\n\n        const selectedAccount = (path[2] || 'all').toLowerCase();\n        const account = (path[4] || '').toLowerCase();\n        const box = (path[3] || 'inbox').toLowerCase();\n\n        if (selectedAccount !== 'all' || account.startsWith('account-')) {\n          mailbox.account = selectedAccount !== 'all' ? selectedAccount\n            : account.slice(account.indexOf('-') + 1);\n        }\n\n        // Set query parameter according to filter\n        const unreadQuery = getQueryVariable('unread', routeAction.payload.search);\n        if (unreadQuery) {\n          mailbox.read = false;\n        }\n\n        switch (box) {\n          case 'inbox':\n            mailbox.type = MailboxType.Inbox;\n            break;\n          case 'archive':\n            mailbox.type = MailboxType.Archive;\n            break;\n          case 'later':\n            mailbox.type = MailboxType.Later;\n            break;\n          case 'spam':\n            mailbox.type = MailboxType.Spam;\n            break;\n          case 'trash':\n            mailbox.type = MailboxType.Trash;\n            break;\n          case 'starred':\n            mailbox.starred = true;\n            break;\n          case 'lists':\n            mailbox.list = path[4] || '';\n            break;\n          case 'sendlater':\n            mailbox.type = MailboxType.SendLater;\n            break;\n          case 'sent':\n            mailbox.sent = true;\n            break;\n          case 'followup':\n            mailbox.followUp = true;\n            break;\n          case 'outbox':\n            mailbox.type = MailboxType.Outbox;\n            break;\n          case 'drafts':\n            mailbox.type = MailboxType.Drafts;\n            break;\n          default:\n            break;\n        }\n        const mailboxPropsToCheck = [\n          'type',\n          'list',\n          'account',\n          'starred',\n        ];\n        let isEqual = true;\n        mailboxPropsToCheck.forEach((p) => {\n          if (mailbox[p] !== store.getState().mailbox[p]) {\n            isEqual = false;\n          }\n        });\n\n        const query =\n          // explicit query param\n          (routeAction.payload.search && getQueryVariable('query', routeAction.payload.search)) ||\n          // preserve query if same mailbox\n          (isEqual && store.getState().mailbox.query);\n\n        if (query) {\n          mailbox.query = query;\n\n          // preserve query params if it's the same query\n          mailbox.queryParams = store.getState().mailbox.query === query ?\n            mailbox.queryParams = store.getState().mailbox.queryParams :\n            mailbox.queryParams = parseQueryParams(query, store.getState().lists);\n        }\n\n        return mailbox;\n      })\n      .filter((mailbox) => {\n        const mailboxPropsToCheck = [\n          'type',\n          'query',\n          'queryParams',\n          'list',\n          'account',\n          'starred',\n          'sent',\n          'followUp',\n        ];\n        // If Mailbox didn't change, don't want to refetch\n        const currentMailbox = store.getState().mailbox;\n\n        let isEqual = true;\n        mailboxPropsToCheck.forEach((p) => {\n          if (mailbox[p] !== currentMailbox[p]) {\n            isEqual = false;\n          }\n        });\n\n        return !isEqual;\n      })\n      .flatMap((mailbox) => {\n        // Handle search mode\n        if (mailbox.query && mailbox.query !== '') {\n          return Observable.concat(\n            // Always update malibox on location change.\n            Observable.of(mailboxSelect(mailbox, mailbox)),\n            Observable.of(threadsSearch({ query: mailbox.query })),\n          );\n        }\n        return Observable.concat(\n          // Always update malibox on location change.\n          Observable.of(mailboxSelect(mailbox, mailbox)),\n          Observable.of(threadList(false)),\n        );\n      });\n\nconst contactThreads: Epic<Action<string, Thread[]>, StoreState> = (action$, store, deps) =>\n action$.ofType(THREADS_SELECTED_CONTACT)\n  .filter(action => action.status === ActionStatus.Start)\n  .flatMap(action =>\n    listThreadsByEmail(action.meta, THREAD_LIST_SIZE)\n      .map(threads => threadsSelectedContact(action.meta, threads))\n      .catch((e: Error) => Observable.of(threadsSelectedContact(action.meta, e))\n      .takeUntil(\n        action$\n          .ofType(THREADS_SELECTED_CONTACT))\n          .filter(a => a.status === ActionStatus.Start),\n      ),\n  );\n\n// handle refreshing of list of threads from cache for selected mailbox\nconst updateMailboxThreads: Epic<Action<any, any>, StoreState, Deps> =\n  (action$, store, deps) =>\n     action$\n      .ofType(THREAD_LIST)\n      .filter(action => action.status === ActionStatus.Start)\n      .debounceTime(200, deps.scheduler)\n      .flatMap(() =>\n        mailboxList(store.getState().mailbox, store)\n          .takeUntil(action$.filter(isMailboxUpdateAction)),\n      );\n\n// handle selecting the correct thread to display\nconst locationChangeSelectThread:\n  Epic<Action<any, any>, StoreState>\n  = (action$, store) =>\n  action$\n    .ofType(LOCATION_CHANGE)\n    .map((action: any): string[] => {\n      return (action as LocationChangeAction).payload.pathname.toLowerCase().split('/');\n    })\n    // Do not handle outside boxes\n    .filter(split => (['drafts', 'sendlater', 'outbox'].indexOf(split[3]) === -1))\n    .map((split: string[]): string => {\n      if (split.length < 5) {\n        return '';\n      }\n\n      if (split[3] ===  'lists' && split.length < 6) {\n        return '';\n      }\n\n      if (split[1] === 'popout' && split[2] === 'threads') {\n        return split[3];\n      }\n\n      if (split[1] === 'mentions' || split[1] === 'public') {\n        return '';\n      }\n\n      return split[split.length - 1];\n    })\n    .flatMap((idString) => {\n\n      // Override account-id for box selection to select empty thread\n      let threadId = idString;\n      if (idString.startsWith('account')) {\n        threadId = '';\n      }\n\n      // This is when selecting otpimistic and in outbox\n      const actions = [\n        Observable.of(draftSelect('', null)),\n        Observable.of(threadSelect(threadId)),\n      ];\n\n      const { selectedSharedThread, sharedThreads } = store.getState();\n      const sharedThreadThreadId = selectedSharedThread && sharedThreads[selectedSharedThread] &&\n        sharedThreads[selectedSharedThread].data &&\n        sharedThreads[selectedSharedThread].data!.thread;\n      if (threadId && (threadId !== sharedThreadThreadId || !sharedThreadThreadId)) {\n        actions.push(Observable.of(sharedThreadSelectByThread(threadId)));\n      }\n\n      return Observable.merge(\n        ...actions,\n      );\n    });\n\n// thread select handling\nconst selectThread: Epic<Action<string|{}|undefined|null, Thread|Activity|null>, StoreState, Deps> =\n(action$, store, deps) =>\n  action$\n    .ofType(THREAD_SELECT)\n    .filter(action => action.status === ActionStatus.Start)\n    .debounceTime(200, deps.scheduler)\n    .flatMap((action: Action<string, Thread|null>) => {\n      // track if fetched from server, happens when not found in cache\n      let haveFreshThread = false;\n\n      const clearActions = Observable.merge(\n        Observable.of(threadSelect('', null)),\n        Observable.of(sharedThreadActivityClear(null)),\n      );\n\n      // Handle clearing if selecting nothing\n      if (action.meta === '') {\n        return clearActions;\n      }\n\n      return Observable.of(null)\n        .flatMap(() => {\n          const state = store.getState();\n          let foundThread = selectThreadSelector(state, action.meta);\n          const sharedThreadId = state.selectedSharedThread;\n          const sharedThread = sharedThreadId && selectSharedThread(state, sharedThreadId);\n          const isUserThread = sharedThread && state.me && state.me.data ?\n            state.me.data.id === sharedThread.user : undefined;\n\n          if (sharedThread && !isUserThread) {\n            foundThread = selectActivityThread(state, action.meta);\n          }\n\n          if (foundThread) {\n            return Observable.of(foundThread);\n          }\n\n          return Cache.get(Stores.Threads, action.meta);\n        })\n        .flatMap((thread?: Thread) => {\n          // fetch from server if not found\n          if (!thread && !!action.meta) {\n            return deps.threads.get(action.meta)\n              .flatMap((freshThread) => {\n                haveFreshThread = true;\n                return Cache.save(Stores.Threads, freshThread).map(() => freshThread);\n              })\n              .catch(() => Observable.of(undefined));\n          }\n\n          return Observable.of(thread);\n        })\n        .flatMap((thread?: Thread) => {\n          const state = store.getState();\n          if (!thread) {\n            return clearActions;\n          }\n\n          const sharedThreadId = state.selectedSharedThread;\n          const sharedThread = sharedThreadId &&\n            selectSharedThread(state, sharedThreadId);\n          const isUserThread = sharedThread && state.me && state.me.data\n            ? state.me.data.id === sharedThread.user : true;\n          const messages = isUserThread ? uniqBy(\n            thread.messages.concat(selectOptimisticMessagesForThread(state, thread.id)),\n            'rfcId',\n          ) : thread.messages;\n\n          // Recompute thread\n          const patchedThread: Thread = computeThread({ ...thread, messages });\n          const messageBodies = state.messageBodies[patchedThread.id];\n\n          if (!messageBodies && sharedThreadId && !isUserThread) {\n            return Observable.merge(\n              Observable.of(threadSelect(patchedThread.id, patchedThread)),\n              Observable.of(sharedThreadMessageBodiesFetch({\n                sharedThread: sharedThreadId,\n                thread: patchedThread,\n              })),\n              Observable.of(sharedThreadActivityClear(null)),\n            );\n          }\n\n          const selectedActivity = state.selectedActivity;\n          const selectedContactThread = state.selectedContactThread;\n          const activityTabShown = state.rightSidebar.tab === RightSidebarTab.Activity;\n          const conversationTabShown = state.rightSidebar.tab === RightSidebarTab.Contact\n            && state.rightSidebar.subTab === RightSidebarSubTab.Conversation;\n          const actions: Array<Observable<Action<any, any>>> = [\n            Observable.of(sharedThreadActivityClear(null)),\n            Observable.of(threadSelect(patchedThread.id, patchedThread)),\n            Observable.of(attachmentDownloadProgressClear(null)),\n            Observable.of(activitySelect(\n              activityTabShown && selectedActivity && thread\n              && thread.id === selectedActivity.thread ?\n              selectedActivity : undefined,\n            )),\n            Observable.of(contactThreadSelect(\n              conversationTabShown && selectedContactThread &&\n              thread.id === selectedContactThread.id ?\n                selectedContactThread : undefined,\n            )),\n          ];\n\n          // handle fresh thread (fetched from server)\n          if (haveFreshThread) {\n            actions.push(Observable.of(threadSingle(thread)));\n          }\n\n          const lastMessage = last(thread.messages);\n\n          const mailbox = store.getState().mailbox;\n          if (mailbox && lastMessage && !isDraftBox(mailbox.type)) {\n            actions.push(\n              Observable.of(contactSelect(lastMessage.sent ? lastMessage.to[0] : lastMessage.from)),\n            );\n          }\n\n          if (!messageBodies) {\n            actions.push(\n              Observable.of(messageBodiesFetch(patchedThread.id)),\n            );\n          }\n\n          const calendarEventMessages = thread.messages.filter(m => !!m.calendarEvent);\n          const latestCalendarEventMessage = last(calendarEventMessages);\n          if (latestCalendarEventMessage && latestCalendarEventMessage.calendarEvent) {\n            actions.push(\n              Observable.of(calendarEventGet(latestCalendarEventMessage.calendarEvent)),\n            );\n          } else {\n            actions.push(\n              Observable.of(calendarEventGet('', null)),\n            );\n          }\n\n          return Observable.merge(\n            ...actions,\n          );\n        });\n    });\n\nexport const searchThreads: Epic<\n  Action<any, ThreadSearchPayload|Mailbox|Thread[]>, StoreState\n> = (action$, store, deps) =>\n  action$\n    .ofType(THREADS_SEARCH)\n    .filter(action => (action.status === ActionStatus.Start))\n    .flatMap((action) => {\n      const mailbox = store.getState().mailbox;\n      const isOffline = !store.getState().isOnline;\n\n      // Refresh threads list when a user is typing in the search box\n      // and backspaces until the search box is empty.\n      if (!action.meta || action.meta.query === '') {\n        return Observable.concat(\n          Observable.of(mailboxSelect(mailbox, mailbox)),\n          Observable.of(threadList(false)),\n        );\n      }\n\n      const mailAccounts = store.getState().accounts\n        .filter(a => a.type !== AccountType.Alias);\n\n      // Use local search if SearchDB is enabled\n      let searchMechanisms = getSearchDbConfig().enabled\n      ? [newLocalThreadSearch(mailbox)\n          .catch((e) => {\n            // Log errors where searchDB fetch has failed\n            // tslint:disable-next-line:no-console\n            console.error(e);\n            captureException(e);\n\n            // But allow empty to work in order to not fail backup mechanisms\n            return Observable.of([]);\n          })\n          .map(r => ({ provider: false, threads: r }))]\n      : [];\n\n      // Add provider search on complete search\n      if (mailbox.providerSearch) {\n        searchMechanisms = searchMechanisms.concat(\n          providerThreadSearch(deps.threads, mailbox)\n            .catch((e) => {\n              // Log errors where searchDB fetch has failed\n              // tslint:disable-next-line:no-console\n              console.error(e);\n              captureException(e);\n\n              // Do backup if offline and no searchdb config\n              if (isOffline && !getSearchDbConfig().enabled) {\n                const backupSearches = mailAccounts.map((a) => {\n                  return localThreadSearch({\n                    ...mailbox,\n                    account: a.id,\n                  })\n                  .catch(err => []);\n                });\n\n                return Observable\n                  .zip(...backupSearches)\n                  .map(results => flatten(results));\n              }\n\n              // But allow empty to work in order to not fail backup mechanisms\n              return Observable.of([]);\n            })\n            .map((r => ({ provider: true, threads: r }))),\n        );\n\n        // Trigger Old Search mechanism for IMAP accounts in place of provider search\n        mailAccounts\n          .filter((a) => {\n            if (mailbox.account) {\n              return mailbox.account === a.id;\n            }\n\n            return [AccountType.IMAP, AccountType.iCloud].indexOf(a.type) > -1;\n          })\n          .forEach((a) => {\n            const oldAccountResults = localThreadSearch({\n                ...mailbox,\n                account: a.id,\n              })\n              .catch((e) => {\n                // Log errors where searchDB fetch has failed\n                // tslint:disable-next-line:no-console\n                console.error(e);\n                captureException(e);\n\n                // But allow empty to work in order to not fail backup mechanisms\n                return Observable.of([]);\n              })\n              .map(r => ({ provider: false, threads: r }));\n            searchMechanisms.push(oldAccountResults);\n            return;\n          });\n      }\n\n      return Observable.merge(...searchMechanisms)\n        .map((payload: ThreadSearchPayload) => {\n          const mailboxQuery = store.getState().mailbox.query;\n          return {\n            ...payload,\n            threads: payload.threads.map(thread => ({ ...thread, query: mailboxQuery })),\n          };\n        })\n        .map((payload: ThreadSearchPayload) => threadsSearch(action.meta, payload))\n        .takeUntil(\n          action$.ofType(THREADS_SEARCH)\n            .filter(a => a.status === ActionStatus.Start),\n        );\n    });\n\nexport const fetchThread: Epic<Action<string, Thread>, StoreState> = (action$, store) =>\n  action$\n    .ofType(THREAD_FETCH)\n    .filter(action => action.status === ActionStatus.Start)\n    .flatMap(action =>\n      Cache.get(Stores.Threads, action.meta)\n        .map((thread: Thread) => {\n          if (!thread) {\n            throw new Error('Thread not found in cache');\n          }\n\n          return threadFetch(action.meta, thread);\n        })\n        .catch((e: Error) => Observable.of(threadFetch(action.meta, e))),\n    );\n\n// Handles thread patches. Called from ThreadCommitSubmit, should not be called directly\nconst updateThread: Epic<Action<Commit, Thread>, StoreState> = (action$, store) => {\n  return action$\n    .ofType(THREAD_UPDATE)\n    .filter(action => action.status === ActionStatus.Start)\n    .flatMap((action: any) => {\n      const state = store.getState();\n      const commit: Commit = action.meta;\n      const foundThread = selectThreadSelector(state, commit.resourceId);\n      return (!!foundThread\n          ? Observable.of(foundThread)\n          : Cache.get(Stores.Threads, commit.resourceId)\n        )\n        .flatMap((thread: Thread) => {\n          if (!thread) {\n            throw new Error('Thread not found in cache');\n          }\n\n          const updatedThread = computeThread(patched(thread, commit));\n\n          // Handle updates with computed thread\n          const optimisticMessages: Message[] = selectOptimisticMessagesForThread(\n            store.getState(),\n            updatedThread.id,\n          );\n\n          // Append any necessary optimistic messages\n          // TODO(SHIN): Implement deduplication using rfcId\n          if (optimisticMessages.length) {\n            const allMessages = uniqBy(updatedThread.messages.concat(optimisticMessages), 'rfcId');\n            updatedThread.messages = allMessages;\n          }\n\n          return Cache\n            .save(Stores.Threads, updatedThread)\n            .flatMap(() => Observable.of(threadUpdate(commit, updatedThread)));\n        });\n    });\n};\n\n// Thread updates should update selected thread\nexport const selectedThreadUpdated: Epic<Action<Commit|string, MessageBody[]>, StoreState> =\n  (action$, store) =>\n    action$\n      .ofType(THREAD_UPDATE)\n      .filter(action => action.status === ActionStatus.Success)\n      .filter((action: any) => {\n        const state = store.getState();\n        const existingThread = state.selectedThread;\n        return existingThread && matchesThread(existingThread, action.payload) || false;\n      })\n      .map(action => messageBodiesFetch(action.payload.id));\n\n// Thread updates should update selected thread\nexport const selectedThreadSingle: Epic<Action<Thread|string, MessageBody[]>, StoreState> =\n  (action$, store) =>\n    action$\n      .ofType(THREAD_SINGLE)\n      .filter(action => action.status === ActionStatus.Start)\n      .filter((action: any) => {\n        const state = store.getState();\n        const existingThread = state.selectedThread;\n        return existingThread && matchesThread(existingThread, action.meta) || false;\n      })\n      .map((action: any) => {\n        return messageBodiesFetch(action.meta.id);\n      });\n\n// Handles emitting thread update events\nexport const updateThreads: Epic<Action<\n  ThreadCommitMeta|Commit, Thread|undefined\n>, StoreState, Deps> = (action$, store, deps) => {\n  return action$\n    .ofType(THREAD_COMMITS_SUBMIT)\n    .filter(action => action.status === ActionStatus.Start)\n    .filter((action: any) => {\n      const state = store.getState();\n      return state.selectedIds.size > 0 || !!action.meta.singleResource ||\n        !!state.threadSwipeId ||\n        !!(state.selectedThread && state.selectedThread.id);\n    })\n    // Track Thread Operations and Read/Unread\n    .do((action: Action<ThreadCommitMeta, Thread>) => {\n\n      // Track Thread Operation Events\n      if (action.meta.box) {\n        recordEvent(UserEvents.ThreadOperation, { box: action.meta.box });\n      } else if (action.meta.when) {\n        recordEvent(UserEvents.ThreadOperation, { box: ThreadBox.Later });\n      } else if (action.meta.label) {\n        recordEvent(UserEvents.ThreadOperation, { box: ThreadBox.List });\n      }\n\n      // Track Read Events\n      if (action.meta.read !== undefined) {\n        action.meta.read\n          ? recordEvent(UserEvents.ThreadRead)\n          : recordEvent(UserEvents.ThreadUnread);\n      }\n\n      // Track Mute Events\n      if (action.meta.muted !== undefined) {\n        action.meta.muted\n          ? recordEvent(UserEvents.ThreadMuted)\n          : recordEvent(UserEvents.ThreadUnmuted);\n      }\n    })\n    .flatMap((action: Action<ThreadCommitMeta, null>) => {\n      const state = store.getState();\n      const selectedThreadId = state.selectedThread && state.selectedThread.id;\n      let threadIds = action.meta.singleResource\n        ? [action.meta.singleResource]\n        : Array.from(state.selectedIds.keys());\n\n      // Add selectedThreadId if threadIds length does not exist\n      if (!action.meta.singleResource && selectedThreadId && threadIds.length === 0) {\n        threadIds = [selectedThreadId];\n      }\n\n      // Do single resource if swipe was activated\n      if (state.threadSwipeId) {\n        threadIds = [state.threadSwipeId];\n      }\n\n      const threadUpdates = threadIds.map((id: string) => {\n        const foundThread = selectThreadSelector(state, id);\n        return (!!foundThread ? Observable.of(foundThread) : Cache.get(Stores.Threads, id))\n          .map((thread: Thread) => createThreadCommit(thread, action.meta))\n          .filter((commit: Commit) => commit !== undefined)\n          .map(commit => ({ ...commit, created: deps.now() }))\n          .flatMap((commit: Commit) =>\n            submitCommit(commit).map(() => {\n              if (commit.method === 'DELETE') {\n                return threadDelete(commit.resourceId);\n              }\n              return threadUpdate(commit) as Action<any, any>;\n            }));\n      });\n\n      // Unset swipe id if exists\n      if (state.threadSwipeId) {\n        threadUpdates.unshift(Observable.of(threadSwipeIdSet(null)));\n      }\n\n      threadUpdates.unshift(Observable.of(threadCommitsSubmit(action.meta, null)));\n\n      return Observable.merge(...threadUpdates);\n    });\n};\n\nexport const draftSendUpdateSelectedThread: Epic<Action<any, any>, StoreState> = (action$, store) =>\n    action$\n      .ofType(DRAFT_SEND)\n      .filter((action) => {\n        if (action.status !== ActionStatus.Success) {\n          return false;\n        }\n\n        const existingThread = store.getState().selectedThread;\n        if (existingThread && existingThread.id === action.payload.threadV2) {\n          return true;\n        }\n\n        return false;\n      })\n      .map(action => threadSelect(action.payload.threadV2));\n\nexport const selectContactThread:\n  Epic<Action<Activity|undefined|Thread, Activity|Thread>, StoreState> = action$ =>\n  action$\n    .ofType(CONTACT_THREAD_SELECT)\n    .filter(action => action.status === ActionStatus.Start)\n    .filter(action => action.meta !== undefined)\n    .flatMap(action =>\n      Observable.of(activitySelect(undefined))\n        .takeUntil(action$.ofType(CONTACT_THREAD_SELECT)),\n    );\n\nexport const disableTrackEpic: Epic<\n  Action<string|Error|null, Thread|null>, StoreState, Deps\n> = (action$, store, deps) =>\n  action$\n    .ofType(THREAD_DISABLE_TRACK)\n    .filter(action => action.status === ActionStatus.Start)\n    .flatMap((action: Action<string, Thread>) =>\n      deps.threads\n        .disableTrack(action.meta)\n        .flatMap(r => Observable.merge(\n          Observable.of(threadDisableTrack(action.meta, r)),\n          Observable.of(toastSet(\n            new ConfirmationError(\n              'Tracking has been disabled for this conversation',\n              true,\n              ConfirmationPositon.TopCenter,\n            ),\n          ),\n        )))\n        .catch((e: Error) => {\n          return Observable.merge(\n            Observable.of(threadDisableTrack(action.meta, e)),\n            Observable.of(toastSet(new Error(`Failed to update tracking settings: ${e.message}`))),\n          );\n        }));\n\nexport default [\n  updateMailboxThreads,\n  locationChangeUpdateMailbox,\n  locationChangeSelectThread,\n  selectedThreadUpdated,\n  selectedThreadSingle,\n  selectThread,\n  updateThread,\n  updateThreads,\n  contactThreads,\n  searchThreads,\n  fetchThread,\n  draftSendUpdateSelectedThread,\n  selectContactThread,\n  mailboxSelectEpic,\n  draftSendAndArchiveEpic,\n  disableTrackEpic,\n];\n"]}]}