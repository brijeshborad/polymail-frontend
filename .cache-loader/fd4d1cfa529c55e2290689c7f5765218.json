{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/components/ThreadDetail/ThreadDetail.tsx","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/components/ThreadDetail/ThreadDetail.tsx","mtime":1675280254036},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/components/ThreadDetail/ThreadDetail.tsx","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/components/ThreadDetail/ThreadDetail.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport { forEach, last, findIndex, concat } from 'lodash';\nimport CustomLoader from 'react-loaders';\nimport Loader from '@src/components/Loader/Loader';\nimport classnames from 'classnames';\n\nimport {\n  Thread,\n  MessageBody,\n  Me,\n  Account,\n  CommandControlType,\n  ThreadCommitMeta,\n  ThreadBox,\n  FilterBox,\n  Draft,\n  Preferences,\n  List,\n  CalendarEvent,\n  CalendarEventStatus,\n  Resource,\n  Message,\n  Action,\n} from '@src/types';\nimport {\n  Comment,\n  Cell,\n  CellType,\n  SharedThread,\n  SharedThreadActivityType,\n  SharedThreadActivity,\n} from '@src/types/sharedThreads';\n\nimport ThreadDetailHeader from './components/ThreadDetailHeader';\nimport CollapsedCell from './components/Cell/CollapsedCell';\nimport ExpandedCell from './components/Cell/ExpandedCell';\nimport Composer from './components/Composer';\nimport UndoSendPopup from './components/UndoSendPopup';\n\nimport './ThreadDetail.scss';\n// tslint:disable-next-line:max-line-length\nimport CalendarInviteBar from '@src/components/ThreadDetail/components/CalendarInviteBar';\nimport CommentCell from '@src/components/Cells/CommentCell';\nimport Close from '@src/components/Icons/Close.svg';\n\n// tslint:disable-next-line:max-line-length\nimport SharedThreadErrorPage from '@src/routes/PublicSharedThreads/components/SharedThreadErrorPage';\nimport { AsanaTask } from '@src/types/asana';\nimport AsanaTaskCell from '@src/components/Cells/AsanaTaskCell';\nimport { getFollowUpReminderDisplayString } from '@src/lib/thread';\nimport HoverTip from '@src/components/Base/HoverTip';\nimport { SharedThreadActivityCreateMeta, PING_INTERVAL } from '@src/ducks/sharedThreads';\nimport TypingCell, { TypingType } from '@src/components/Cells/TypingCell/TypingCell';\nimport Resizable, { NumberSize } from 're-resizable';\nimport { Filter } from '@src/types/filters';\nimport { hotkeyUpdate, hotkeySuggest } from '@src/ducks/hotkeys';\nimport { checkNextHotkeyChange, getHotkeyByName, HotkeyAction } from '@src/lib/hotkeys';\nimport { isDraftSending } from '@src/lib/draft';\nimport SharedDraftCell from './components/Cell/SharedDraftCell';\nimport KeyboardSymbol from '../Base/KeyboardSymbol/KeyboardSymbol';\n\nexport interface Props {\n  onThreadDelete?: () => void;\n}\nexport interface StateProps {\n  thread?: Thread;\n  bodies: MessageBody[];\n  me?: Me;\n  accounts?: Account[];\n  draft?: Draft;\n  selectedDraft?: string;\n  preferences?: Preferences;\n  unsubscribeLink?: string;\n  noBranding: boolean;\n  error?: Error;\n  initialSyncing?: boolean;\n  lists: List[];\n  selectedCalendarEvent?: CalendarEvent;\n  comments?: Comment[];\n  hideActions?: boolean;\n  selectedSharedThread?: Resource<SharedThread>;\n  tasks?: AsanaTask[];\n  replying: SharedThreadActivity[];\n  commenting: SharedThreadActivity[];\n  blockFilter?: Filter;\n  sharedThreadDraft?: Draft;\n  hotkeyActions?: { [key: string]: number };\n}\n\nexport interface DispatchProps {\n  commandControlShow: (type: CommandControlType) => void;\n  submitCommitMeta: (commitMeta: ThreadCommitMeta) => void;\n  createSharedThreadActivity: (meta: SharedThreadActivityCreateMeta) => void;\n  dispatchAction: (action: Action<any, any>) => void;\n}\n\ninterface State {\n  expandedKeys: { [id: string]: boolean; };\n  cells: Cell[];\n  hasOptimistic: boolean;\n  composerHeight?: number;\n  lastExpanded?: string;\n  scrolled: boolean;\n}\n\nclass ThreadDetail extends React.PureComponent<StateProps & Props & DispatchProps, State> {\n  private timeout: NodeJS.Timer;\n  private readTimeout: NodeJS.Timer;\n  private ref: HTMLDivElement;\n  private viewInterval: NodeJS.Timer;\n\n  constructor(props: Props & StateProps & DispatchProps) {\n    super(props);\n\n    this.state = {\n      expandedKeys: {},\n      cells: this.getCells(props),\n      hasOptimistic: this.getHasOptimistic(props.thread),\n      scrolled: false,\n    };\n  }\n\n  recordView = () => {\n    const { selectedSharedThread, createSharedThreadActivity } = this.props;\n\n    if (selectedSharedThread && selectedSharedThread.data && selectedSharedThread.data.id) {\n      createSharedThreadActivity({\n        type: SharedThreadActivityType.View,\n        sharedThread: selectedSharedThread.data.id,\n      });\n    }\n  }\n\n  componentDidMount() {\n    const { thread, draft } = this.props;\n    if (thread) {\n      const expandedMessages = thread.messages.filter(m => !m.read).map(m => m.id);\n      let scrollTo: string = '';\n\n      // Detect last message reference we want to scroll to on initial render\n      if (draft && draft.message) {\n        expandedMessages.push(draft.message);\n        scrollTo = draft.message;\n      } else if (expandedMessages.length) {\n        scrollTo = expandedMessages[0];\n      } else if (thread.messages.length) {\n        const lastMessage = last(thread.messages);\n\n        if (lastMessage) {\n          scrollTo = lastMessage.id;\n        }\n      }\n\n      this.processCellCollapseStates(thread, expandedMessages, scrollTo);\n    }\n\n    this.viewInterval = global.setInterval(\n      this.recordView, PING_INTERVAL,\n    );\n  }\n\n  componentWillUnmount() {\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n    }\n\n    if (this.readTimeout) {\n      clearTimeout(this.readTimeout);\n    }\n\n    if (this.viewInterval) {\n      clearInterval(this.viewInterval);\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: StateProps & DispatchProps) {\n    // Return focus to top level when draft has been removed\n    if (!nextProps.draft && this.props.draft && this.ref) {\n      const node = this.ref;\n      if (node && node instanceof HTMLElement) {\n        document.body.focus();\n      }\n    }\n\n    // Do nothing if thread is not passed in\n    if (!nextProps.thread) {\n      return;\n    }\n\n    let expandedMessages: string[] = nextProps.thread.messages.filter(m => !m.read).map(m => m.id);\n    let scrollTo: string = '';\n    // Handle changes to thread\n    if (!this.props.thread || this.props.thread.id !== nextProps.thread.id) {\n      this.handleReadStatus(nextProps.thread);\n      this.setState({ scrolled: false });\n    }\n\n    // scroll to new reply\n    const lastMessage = nextProps.thread.messages.length && last(nextProps.thread.messages);\n    const sameMessageLength = this.props.thread && nextProps.thread &&\n        this.props.thread.messages.length === nextProps.thread.messages.length;\n    const hasOptimistic = this.getHasOptimistic(nextProps.thread);\n    if (hasOptimistic && !sameMessageLength) {\n      this.setState({ scrolled: false });\n    }\n\n    if (!this.state.scrolled) {\n      if (nextProps.draft && nextProps.draft.message) {\n        scrollTo = nextProps.draft.message;\n      } else if (hasOptimistic && lastMessage) {\n        scrollTo = lastMessage.id;\n      } else if (expandedMessages.length) {\n        scrollTo = expandedMessages[0];\n      } else if (lastMessage) {\n        scrollTo = lastMessage.id;\n      }\n    }\n\n    // Handle new messages -> expand them automatically\n    if (this.props.thread && nextProps.thread && nextProps.thread.id === this.props.thread.id) {\n      const oldMessages: { [id: string]: boolean } = {};\n\n      this.props.thread.messages.forEach((message) => {\n        oldMessages[message.id] = true && message.read;\n      });\n\n      expandedMessages = nextProps.thread.messages\n        .filter(message => !oldMessages[message.id])\n        .map(message => message.id);\n    }\n\n    // expand draft message\n    const newDraft = nextProps.draft &&\n      (!this.props.draft || nextProps.draft.id !== this.props.draft.id);\n    if (newDraft) {\n      this.setState({ composerHeight: undefined });\n      if (nextProps.draft && nextProps.draft.message) {\n        expandedMessages.push(nextProps.draft.message);\n      }\n    }\n\n    // preserve expanded cells\n    if (this.state.expandedKeys) {\n      forEach(this.state.expandedKeys, (value, key) => {\n        if (value && expandedMessages.indexOf(key) === -1) {\n          expandedMessages.push(key);\n        }\n      });\n    }\n\n    // Handle thread messages collapsed/uncollapsed state\n    if (nextProps.thread) {\n      this.processCellCollapseStates(nextProps.thread, expandedMessages, scrollTo);\n    }\n\n    if (nextProps.thread !== this.props.thread ||\n      nextProps.thread.messages !== this.props.thread.messages ||\n      nextProps.comments !== this.props.comments ||\n      nextProps.tasks !== this.props.tasks ||\n      nextProps.replying !== this.props.replying ||\n      nextProps.commenting !== this.props.commenting\n    ) {\n      this.setState({\n        cells: this.getCells(nextProps),\n        hasOptimistic,\n      });\n    }\n  }\n\n  componentDidUpdate(oldProps: StateProps) {\n    // Handles moving scroll position whenever new comments are loaded\n    const newComments = this.props.comments || [];\n    const oldComments = oldProps.comments || [];\n\n    if (newComments.length > oldComments.length && this.state.scrolled) {\n      const lastComment = last(newComments);\n      if (lastComment && this.ref) {\n        const cells = this.ref.getElementsByClassName('comment-cell');\n        const cell = Array.from(cells)\n          .filter((el: HTMLElement) => el.dataset.comment === lastComment.id)[0];\n        if (cell) {\n          const table = this.ref.getElementsByClassName('thread-detail-table');\n          if (table[0]) {\n            const val = (cell as any).offsetTop;\n            table[0].scrollTo({ top: val, behavior: 'smooth' });\n          }\n        }\n      }\n    }\n\n    const newTypingCells = concat(\n      this.props.replying.map(r => `r-${r.userId}`),\n      this.props.commenting.map(c => `c-${c.userId}`),\n    );\n    const oldTypingCells = concat(\n      oldProps.replying.map(r => `r-${r.userId}`),\n      oldProps.commenting.map(c => `c-${c.userId}`),\n    );\n    if (newTypingCells.join('') !== oldTypingCells.join('') && this.state.scrolled) {\n      const typingCells = this.ref && this.ref.getElementsByClassName('typing-cell');\n      if (typingCells && typingCells.length) {\n        const cell = typingCells[typingCells.length - 1];\n        if (cell) {\n          const table = this.ref.getElementsByClassName('thread-detail-table');\n          if (table[0]) {\n            const val = (cell as any).offsetTop;\n            table[0].scrollTo({ top: val, behavior: 'smooth' });\n          }\n        }\n      }\n    }\n\n    const oldActions = oldProps.hotkeyActions || {};\n    const newActions = this.props.hotkeyActions || {};\n    this.handleHotkeyActionsChange(oldActions, newActions);\n  }\n\n  handleHotkeyActionsChange = (\n    oldActions: { [action: string]: number },\n    newActions: { [action: string]: number },\n  ) => {\n    // Handle CC toggle\n    if (checkNextHotkeyChange(HotkeyAction.PopoutMessage, newActions, oldActions)) {\n      const { thread } = this.props;\n      const { expandedKeys, lastExpanded } = this.state;\n      if (!thread) {\n        return;\n      }\n      const expandedMessages = thread.messages.filter(m => !!expandedKeys[m.id]);\n      const lastExpandedId = lastExpanded ||\n        (expandedMessages.length && expandedMessages.slice(-1)[0].id) || undefined;\n      if (lastExpandedId && thread) {\n        const messageLink = `/popout/threads/${thread.id}/messages/${lastExpandedId}`;\n        window.open(messageLink, '_blank', 'height=500,width=800');\n      }\n    }\n  }\n\n  getHasOptimistic = (thread?: Thread) => {\n    if (!thread || !thread.messages.length) {\n      return false;\n    }\n\n    const lastMessage = last(thread.messages);\n    if (lastMessage) {\n      return !!lastMessage.optimistic;\n    }\n\n    return false;\n  }\n\n  getCells = (props: StateProps & DispatchProps) => {\n    if (props.thread) {\n      const messages: Cell[] = props.thread.messages.map(m => ({\n        type: CellType.Message,\n        date: m.internal,\n        data: m,\n      }));\n      const comments: Cell[] = (props.comments || []).map(c => ({\n        type: CellType.Comment,\n        date: c.created,\n        data: c,\n      }));\n      const tasks: Cell[] = (props.tasks || []).map(t => ({\n        type: CellType.Task,\n        date: t.created,\n        data: t,\n      }));\n      const replying: Cell[] = (props.replying || []).map(r => ({\n        type: CellType.Typing,\n        date: r.timestamp,\n        data: r,\n      }));\n      const commenting: Cell[] = (props.commenting || []).map(c => ({\n        type: CellType.Typing,\n        date: c.timestamp,\n        data: c,\n      }));\n\n      const drafts: Cell[] = (props.sharedThreadDraft && [props.sharedThreadDraft] || [])\n      .map(c => ({\n        type: CellType.Draft,\n        date: c.updated,\n        data: c,\n      }));\n\n      return messages.concat(comments).concat(tasks).sort((a, b) => {\n        if (a.date < b.date) {\n          return  -1;\n        }\n\n        if (a.date > b.date) {\n          return 1;\n        }\n\n        return 0;\n      }).concat(replying).concat(commenting).concat(drafts);\n    }\n\n    return [];\n  }\n\n  renderSharedDraftCell = () => {\n    return (\n      <SharedDraftCell />\n    );\n  }\n\n  // Gets DOM scroll offset for last comment\n  getLastCommentScrollPosition = (): number => {\n    const { comments } = this.props;\n    if (comments && comments.length) {\n      const lastComment = last(comments);\n      if (lastComment && this.ref) {\n        const cells = this.ref.getElementsByClassName('comment-cell');\n        const cell = Array.from(cells)\n          .filter((el: HTMLElement) => el.dataset.comment === lastComment.id)[0];\n        if (cell) {\n          const val = (cell as any).offsetTop;\n          return val;\n        }\n      }\n    }\n    return 0;\n  }\n\n  // Gets DOM scroll offset for last expanded message\n  getLastMessageScrollPosition = (): number => {\n    const { thread } = this.props;\n\n    if (!thread) {\n      return 0;\n    }\n\n    // Always show last id for now\n    const lastMessage = last(thread.messages);\n    const lastId = lastMessage && lastMessage.id || '';\n\n    const cells = this.ref.getElementsByClassName('expanded-cell');\n    const cell = Array.from(cells)\n      .filter((el: HTMLElement) => el.dataset.message === lastId)[0];\n    if (cell) {\n      const val = (cell as any).offsetTop;\n      return val;\n    }\n\n    return 0;\n  }\n\n  processCellCollapseStates = (thread: Thread, forceExpand?: string[], scrollTo?: string) => {\n    const expandedKeys = {};\n\n    thread.messages.forEach((message) => {\n      expandedKeys[message.id] = forceExpand && forceExpand.indexOf(message.id) > -1 ? true : false;\n    });\n\n    // Always show last id for now\n    const lastMessage = last(thread.messages);\n    const lastId = lastMessage && lastMessage.id || '';\n\n    expandedKeys[lastId] = true;\n\n    this.setState({ expandedKeys }, () => {\n      if (this.state.scrolled) {\n        return;\n      }\n\n      if (this.timeout) {\n        clearTimeout(this.timeout);\n      }\n\n      this.timeout = global.setTimeout(\n        () => {\n          const { draft } = this.props;\n          const draftMessageExists = draft && !!draft.message;\n          if (this.ref && scrollTo) {\n            const cells = this.ref.getElementsByClassName('expanded-cell');\n            const cellsArray = Array.from(cells);\n            let cell = cellsArray\n              .filter((el: HTMLElement) => scrollTo ?\n                el.dataset.message === scrollTo : el.dataset.message === lastId)[0];\n\n            // Backup mechanism for scrollto location will use the last message if no match found\n            // NOTE(SHIN): Reference will be lost to draft message\n            // if message ID becomes out of date (optimistic)\n            if (!cell) {\n              cell = cellsArray\n              .filter((el: HTMLElement) => el.dataset.message === lastId)[0];\n            }\n\n            if (cell) {\n              this.setState({ scrolled: true });\n              const table = this.ref.getElementsByClassName('thread-detail-table');\n              if (table[0]) {\n                const collapsedCellHeight = 26;\n                const commentScrollPosition = this.getLastCommentScrollPosition()\n                  - collapsedCellHeight;\n                const messageScrollPosition = (cell as any).offsetTop - collapsedCellHeight;\n                const val = draftMessageExists\n                  ? messageScrollPosition\n                  : Math.max(commentScrollPosition, messageScrollPosition);\n\n                // NOTE(SHAHAN): Calculate whether we need to introduce a 300ms delay\n                // for a rare image edge-case with scrolling. This edge-case occurs\n                // when images with no height set exist above a comment, as it takes\n                // a bit of time for images to load, which would result in a jump otherwise\n                let containsImagesNoHeight = false;\n                if (commentScrollPosition > messageScrollPosition && !draftMessageExists) {\n                  const images = this.ref.querySelectorAll('.message-content img:not([height])');\n\n                  // tslint:disable-next-line: prefer-for-of\n                  for (let i = 0; i < images.length; i += 1) {\n                    const img = images[i];\n                    if (img.scrollHeight === 0 && !img.hasAttribute('data-pm-tracking')) {\n                      containsImagesNoHeight = true;\n                      break;\n                    }\n                  }\n                }\n\n                if (containsImagesNoHeight) {\n                  if (this.timeout) {\n                    clearTimeout(this.timeout);\n                  }\n\n                  this.timeout = global.setTimeout(\n                    () => {\n                      // The position may have moved, so recalculate based on where\n                      // the last comment scroll position is\n                      const newPosition = this.getLastCommentScrollPosition()\n                        - collapsedCellHeight;\n\n                      if (table && table[0]) {\n                        table[0].scrollTo({ top: newPosition, behavior: 'auto' });\n                      }\n                    },\n                    300,\n                  );\n                } else {\n                  table[0].scrollTo({ top: val, behavior: 'auto' });\n                }\n              }\n            }\n          }\n        },\n        0,\n      );\n    });\n  }\n\n  // Handles thread read on a 0.7 second timeout.\n  handleReadStatus = (thread: Thread) => {\n    const { submitCommitMeta } = this.props;\n    if (!thread.read) {\n      const threadId = thread.id;\n      if (this.readTimeout) {\n        clearTimeout(this.readTimeout);\n      }\n      this.readTimeout = global.setTimeout(\n        () => {\n          const currentThread = this.props.thread;\n          if (currentThread && !currentThread.read && currentThread.id === threadId) {\n            submitCommitMeta({ singleResource: thread.id, read: true });\n            return;\n          }\n        },\n        700,\n      );\n    }\n  }\n\n  handleCellExpand = (key: string) => {\n    const oldValue  = this.state.expandedKeys[key] || false;\n    const expandedKeys = { ...this.state.expandedKeys, [key]: !oldValue };\n    this.setState({ expandedKeys, lastExpanded: key });\n  }\n\n  handleActionClick = (box: ThreadBox | FilterBox | string) => {\n    const {\n      thread,\n      submitCommitMeta,\n      commandControlShow,\n      onThreadDelete,\n      hideActions,\n      dispatchAction,\n      blockFilter,\n    } = this.props;\n\n    if (hideActions) {\n      return;\n    }\n\n    // Handle single actions\n    switch (box) {\n      case ThreadBox.Later:\n        commandControlShow(CommandControlType.ReadLater);\n        dispatchAction(hotkeySuggest(HotkeyAction.ReadLater));\n        return;\n      case ThreadBox.List:\n        commandControlShow(CommandControlType.Label);\n        dispatchAction(hotkeySuggest(HotkeyAction.Label));\n        return;\n      case 'Block Sender': // Replaced behavior of blocks\n        if (blockFilter) {\n          dispatchAction(hotkeyUpdate(HotkeyAction.UnblockSender));\n        } else {\n          dispatchAction(hotkeyUpdate(HotkeyAction.BlockSender));\n        }\n        dispatchAction(hotkeySuggest(HotkeyAction.BlockSender));\n        return;\n      case 'Mute Conversation':\n        dispatchAction(hotkeySuggest(HotkeyAction.MuteConversation));\n        if (thread) {\n          submitCommitMeta({ singleResource: thread.id, muted: !thread.muted });\n        }\n        return;\n      default:\n        break;\n    }\n\n    // Handle flags\n    if (thread) {\n      switch (box) {\n        case FilterBox.Unread:\n          dispatchAction(hotkeySuggest(HotkeyAction.ToggleUnread));\n          submitCommitMeta({ read: !thread.read });\n          return;\n        case FilterBox.Starred:\n          dispatchAction(hotkeySuggest(HotkeyAction.ToggleStar));\n          submitCommitMeta({ starred: !thread.starred });\n          return;\n        case ThreadBox.Trash:\n          dispatchAction(hotkeySuggest(HotkeyAction.Trash));\n          if (thread.box === ThreadBox.Trash && onThreadDelete) {\n            onThreadDelete();\n            return;\n          }\n          break;\n        case ThreadBox.Archive:\n          dispatchAction(hotkeySuggest(HotkeyAction.Archive));\n          break;\n        default:\n          break;\n      }\n\n      // Handle box\n      const commitMeta = { box: box as ThreadBox };\n      submitCommitMeta(commitMeta);\n    }\n  }\n\n  renderCell = (key: string) => {\n    const { thread, bodies, hideActions } = this.props;\n    const collapsed = !this.state.expandedKeys[key];\n    const ExpandedCellConnect = ExpandedCell as any;\n    const CollapsedCellConnect = CollapsedCell as any;\n\n    if (thread) {\n      const message = thread.messages.filter(m => m.id === key)[0];\n      const body = bodies && bodies.filter(b => b.id === key)[0];\n\n      if (collapsed) {\n        return (\n          <CollapsedCellConnect\n            id={key}\n            onToggleExpand={this.handleCellExpand}\n            key={key}\n            message={message}\n          />\n        );\n      }\n      return (\n        <ExpandedCellConnect\n          onToggleExpand={this.handleCellExpand}\n          key={key}\n          message={message}\n          messageBody={body}\n          threadId={thread.id}\n          hideActions={hideActions}\n        />\n      );\n    }\n\n    return <div />;\n  }\n\n  renderComment = (cell: Cell) => {\n    const data = cell.data as Comment;\n\n    return <CommentCell comment={data} key={data.id} />;\n  }\n\n  renderTask = (cell: Cell) => {\n    const data = cell.data as AsanaTask;\n    return <AsanaTaskCell task={data} key={data.id} />;\n  }\n\n  renderTyping = (cell: Cell) => {\n    const data = cell.data as SharedThreadActivity;\n    if (!data.user) {\n      return null;\n    }\n\n    let type;\n    switch (data.type) {\n      case SharedThreadActivityType.Comment:\n        type = TypingType.Comment;\n        break;\n      case SharedThreadActivityType.Reply:\n        type = TypingType.Reply;\n        break;\n      default:\n        return null;\n    }\n\n    return (\n      <TypingCell\n        key={`${type}-${data.userId}`}\n        type={type}\n        user={{\n          firstName: data.user.firstName, photoUrl: data.user.photoUrl,\n        }}\n      />\n    );\n  }\n\n  renderNewDraft = () => {\n    const { thread, draft, me, accounts } = this.props;\n\n    if (draft && !!draft.threadV2 && !thread) {\n      return (\n        <div className=\"thread-detail\">\n          <div className=\"thread-detail-filler\" />\n          {this.renderComposer()}\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"thread-detail\" tabIndex={-1}>\n        {me && accounts &&\n          <Composer\n            me={me}\n            accounts={accounts}\n            thread={thread}\n            draft={draft}\n            showFullHeight\n          />\n        }\n      </div>\n    );\n  }\n\n  renderOptionDesc = (desc: string) => {\n    return desc.split('+').map((c, i) => (\n      <KeyboardSymbol\n        key={`${c}-${i}`}\n        character={c}\n      />\n    ));\n  }\n\n  renderHotkeysSection = () => {\n    const hotkeys = [\n      HotkeyAction.NewDraft,\n      HotkeyAction.ToggleCommandControl,\n      HotkeyAction.NavigationCenter,\n      HotkeyAction.KeyboardShortcutGuide,\n    ];\n\n    return (\n      <div className=\"hotkeys-section\">\n        {hotkeys\n          .map(h => getHotkeyByName(h))\n          .map(h => (\n            <div\n              className=\"hotkey-cell\"\n              key={`hotkey-info-${h?.name}`}\n            >\n              <div className=\"hotkey-title\">\n                {h?.name}\n              </div>\n              <div className=\"spacer\" />\n              {h?.text && (\n                <div className=\"hotkey-symbol\">\n                  {this.renderOptionDesc(h.text)}\n                </div>\n              )}\n            </div>\n          ))}\n      </div>\n    );\n  }\n\n  renderNoSelection = () => {\n    return (\n      <div className=\"thread-detail\">\n        <div className=\"thread-detail-no-thread\" tabIndex={-1}>\n          <div className=\"copy\">\n            No Conversation Selected\n          </div>\n          {this.renderHotkeysSection()}\n        </div>\n      </div>\n    );\n  }\n\n  renderInitialSyncing = () => {\n    const description = 'Feel free to do something else in the meantime, '\n      + 'we\\'ll let you know once your inbox is ready!';\n    return (\n      <div className=\"thread-detail\">\n        <div className=\"thread-detail-table\" tabIndex={-1}>\n          <div className=\"initial-sync\">\n            <CustomLoader\n              type=\"line-scale-pulse-out-rapid\"\n              innerClassName=\"custom-loader-inner\"\n              active\n            />\n            <div className=\"title\">\n              Creating your inbox...\n            </div>\n            <div className=\"description\">\n              {description}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  renderThreadLoading = () => (\n    <div className=\"thread-detail\">\n      <div className=\"thread-detail-table loading\" tabIndex={-1}>\n        <Loader />\n      </div>\n    </div>\n  )\n\n  // Show loading indicator when thread exists\n  renderBodiesLoading = (thread: Thread) => (\n    <div className=\"thread-detail\">\n      <ThreadDetailHeader\n        subject={thread.subject}\n        participants={thread.participants}\n        commandControlShow={this.props.commandControlShow}\n        onActionClick={this.handleActionClick}\n        thread={thread}\n        showUnsubscribe={!!this.props.unsubscribeLink}\n        me={this.props.me}\n        hideActions={this.props.hideActions}\n      />\n      <div className=\"thread-detail-table loading\" tabIndex={-1}>\n        <Loader />\n      </div>\n    </div>\n  )\n\n  // return this.renderError(thread, commandControlShow, unsubscribeLink, me);\n  renderError = (thread: Thread) => {\n    const { commandControlShow, me, unsubscribeLink, hideActions } = this.props;\n    return (\n      <div className=\"thread-detail\">\n        <ThreadDetailHeader\n          subject={thread.subject}\n          participants={thread.participants}\n          commandControlShow={commandControlShow}\n          onActionClick={this.handleActionClick}\n          thread={thread}\n          showUnsubscribe={!!unsubscribeLink}\n          me={me}\n          hideActions={hideActions}\n        />\n        <div className=\"thread-detail-table\" tabIndex={-1}>\n          <div className=\"error\">\n            <div className=\"error-title\">\n              Sorry, there was an issue loading this conversation\n          </div>\n            <div className=\"error-description\">\n              Please check your internet connection and try again\n          </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n    // return this.renderError(thread, commandControlShow, unsubscribeLink, me);\n  renderSharedThreadError = () => {\n    const { me, commandControlShow, unsubscribeLink, thread } = this.props;\n    return (\n      <div className=\"thread-detail\">\n        <ThreadDetailHeader\n          subject={'Conversation Not Found'}\n          participants={thread && thread.participants || []}\n          commandControlShow={commandControlShow}\n          onActionClick={this.handleActionClick}\n          thread={thread}\n          showUnsubscribe={!!unsubscribeLink}\n          me={me}\n          hideActions={true}\n        />\n        <div className=\"thread-detail-table\" tabIndex={-1}>\n          <SharedThreadErrorPage\n            email={me && me.email || ''}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  renderComposer = () => {\n    const {\n      me,\n      accounts,\n      thread,\n      draft,\n      selectedSharedThread,\n      hideActions,\n    } = this.props;\n    const { composerHeight } = this.state;\n\n    if (!me || !accounts) {\n      return (<div/>);\n    }\n\n    // Do not use resizable component when no draft or status is sending bc (optimistic)\n    if (!draft || isDraftSending(draft)) {\n      return (\n        <Composer\n          me={me}\n          accounts={accounts}\n          thread={thread}\n          draft={undefined}\n          onExpand={this.handleExpand}\n          hideActions={hideActions}\n          hideCommentEditor={selectedSharedThread && selectedSharedThread.data && me &&\n            me.team !== selectedSharedThread.data.team\n          }\n        />\n      );\n    }\n\n    return (\n      <Resizable\n        key={draft.id}\n        className={classnames('composer-resizable', { resized: !!composerHeight })}\n        enable={{\n          top: true,\n          right: false,\n          bottom: false,\n          left: false,\n          topRight: false,\n          bottomRight: false,\n          bottomLeft: false,\n          topLeft: false,\n        }}\n        handleClasses={{\n          top: 'composer-resize-handler',\n        }}\n        defaultSize={{\n          width: 'auto',\n          height: composerHeight || 'auto',\n        }}\n        onResize={this.handleComposerResizeStop}\n        onResizeStop={this.handleComposerResizeStop}\n      >\n        <Composer\n          me={me}\n          accounts={accounts}\n          thread={thread}\n          draft={draft}\n          onExpand={this.handleExpand}\n          hideActions={hideActions}\n          hideCommentEditor={selectedSharedThread && selectedSharedThread.data && me &&\n            me.team !== selectedSharedThread.data.team\n          }\n        />\n      </Resizable>\n    );\n  }\n\n  handleExpand = (message?: string) => {\n    if (!this.ref) {\n      return;\n    }\n\n    const cells = this.ref.getElementsByClassName('expanded-cell');\n    const cell = message ?\n      Array.from(cells).filter((el: HTMLElement) => el.dataset.message === message)[0]\n      : last(cells);\n\n    if (cell) {\n      if (this.timeout) {\n        clearTimeout(this.timeout);\n      }\n\n      this.timeout = global.setTimeout(\n        () => {\n          if (cell) {\n            (cell as HTMLElement).scrollIntoView({\n              behavior: 'auto',\n              block: 'start',\n              inline: 'nearest',\n            });\n          }\n        },\n        0,\n      );\n    }\n  }\n\n  handleRef = (ref: HTMLDivElement) => {\n    this.ref = ref;\n  }\n\n  handleRemoveFollowUpReminder = () => {\n    const { thread, submitCommitMeta } = this.props;\n\n    if (thread) {\n      submitCommitMeta({ singleResource: thread.id, waiting: null });\n    }\n  }\n\n  handleComposerResizeStop = (\n    event: MouseEvent,\n    direction: string,\n    refToElement: HTMLElement,\n    delta: NumberSize,\n  ) => {\n    if (refToElement.clientWidth) {\n      this.setState({ composerHeight: refToElement.clientWidth });\n    }\n  }\n\n  render() {\n    const {\n      thread,\n      me,\n      commandControlShow,\n      draft,\n      bodies,\n      unsubscribeLink,\n      error,\n      initialSyncing,\n      lists,\n      selectedCalendarEvent,\n      hideActions,\n      selectedSharedThread,\n    } = this.props;\n    const { cells, hasOptimistic, scrolled } = this.state;\n    const isOwner = !selectedSharedThread ||\n      (selectedSharedThread.data && me && selectedSharedThread.data.user === me.id);\n\n    // Render new draft\n    if (draft && !thread) {\n      return this.renderNewDraft();\n    }\n\n    // Shared thread error\n    if (selectedSharedThread && selectedSharedThread.error) {\n      return this.renderSharedThreadError();\n    }\n\n    if (!thread && initialSyncing) {\n      return this.renderInitialSyncing();\n    }\n\n    // Loading when selected shared thread\n    if (!thread && !!selectedSharedThread) {\n      return this.renderThreadLoading();\n    }\n\n    // No Thread Selected\n    if (!thread) {\n      return this.renderNoSelection();\n    }\n\n    // Error State\n    if (error) {\n      return this.renderError(thread);\n    }\n\n    // Loading State\n    if (bodies.length < 1) {\n      return this.renderBodiesLoading(thread);\n    }\n\n    const followUp = getFollowUpReminderDisplayString(thread);\n\n    return (\n      <div\n        tabIndex={-1}\n        className=\"thread-detail\"\n        ref={this.handleRef}\n      >\n        <ThreadDetailHeader\n          sharedThread={selectedSharedThread && selectedSharedThread.data}\n          subject={thread.subject}\n          participants={thread.participants}\n          commandControlShow={commandControlShow}\n          onActionClick={this.handleActionClick}\n          thread={thread}\n          showUnsubscribe={!!unsubscribeLink}\n          me={me}\n          lists={lists}\n          hideActions={hideActions}\n        />\n        {!!selectedCalendarEvent && isOwner &&\n          selectedCalendarEvent.status !== CalendarEventStatus.Cancelled &&\n          <CalendarInviteBar thread={thread} />}\n        {!!followUp && !hasOptimistic && <div className=\"follow-up-reminder\">\n          <div className=\"text\">\n            Remind me if no response by {followUp}\n          </div>\n          <HoverTip\n            bottom=\"-30px\"\n            right=\"5px\"\n            copy=\"Remove reminder\"\n            hotkeyAction={HotkeyAction.CancelFollowup}\n          >\n            <button className=\"remove\" onClick={this.handleRemoveFollowUpReminder}>\n              Remove reminder\n              <Close width=\"8px\" height=\"8px\" />\n            </button>\n          </HoverTip>\n        </div>}\n        <div className=\"thread-detail-table\"\n          style={{ visibility: scrolled ? 'visible' : 'hidden' }}>\n          {cells.map((cell) => {\n            if (cell.type === CellType.Message) {\n              if (findIndex(thread.messages, { id: (cell.data as Message).id }) === -1) {\n                return null;\n              }\n              return this.renderCell((cell.data as Message).id);\n            }\n\n            if (cell.type === CellType.Task) {\n              return this.renderTask(cell);\n            }\n\n            if (cell.type === CellType.Typing) {\n              return this.renderTyping(cell);\n            }\n\n            if (cell.type === CellType.Draft) {\n              return this.renderSharedDraftCell();\n            }\n\n            return this.renderComment(cell);\n          })}\n        </div>\n        <UndoSendPopup />\n        {this.renderComposer()}\n      </div>\n    );\n  }\n}\n\nexport default ThreadDetail;\n"]}]}