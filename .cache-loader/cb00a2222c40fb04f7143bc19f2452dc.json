{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Threads/components/ThreadList/index.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Threads/components/ThreadList/index.ts","mtime":1675280254118},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JzsKaW1wb3J0IHsgd2l0aFJvdXRlciB9IGZyb20gJ3JlYWN0LXJvdXRlcic7CmltcG9ydCB7IHRocmVhZHNTZWFyY2gsIHRocmVhZExpc3RXaWR0aFNldCB9IGZyb20gJ0BzcmMvZHVja3MvdGhyZWFkcyc7CmltcG9ydCB7IFJlc291cmNlU3RhdHVzLCBNYWlsYm94VHlwZSB9IGZyb20gJ0BzcmMvdHlwZXMnOwppbXBvcnQgeyBtYWlsYm94U2VsZWN0IH0gZnJvbSAnQHNyYy9kdWNrcy9tYWlsYm94JzsKaW1wb3J0IFRocmVhZExpc3QgZnJvbSAnLi9UaHJlYWRMaXN0JzsKaW1wb3J0IHsgaG90a2V5VXBkYXRlIH0gZnJvbSAnQHNyYy9kdWNrcy9ob3RrZXlzJzsKaW1wb3J0IHsgc2VsZWN0QWNjb3VudCB9IGZyb20gJ0BzcmMvZHVja3MvYWNjb3VudHMnOwppbXBvcnQgeyBzZWxlY3RTaG93Q29sbGFwc2VkTFNCIH0gZnJvbSAnQHNyYy9kdWNrcy9sZWZ0U2lkZWJhcic7CmltcG9ydCB7IHNlbGVjdEZhaWxlZERyYWZ0cyB9IGZyb20gJ0BzcmMvZHVja3MvZHJhZnRzJzsKdmFyIG1hcFN0YXRlVG9Qcm9wcyA9IGZ1bmN0aW9uIChzdGF0ZSwgb3duUHJvcHMpIHsKICAgIHZhciBzZWxlY3RlZEFjY291bnRJZCA9IHN0YXRlLm1haWxib3ggJiYgc3RhdGUubWFpbGJveC5hY2NvdW50OwogICAgdmFyIHNlbGVjdGVkQWNjb3VudDsKICAgIGlmIChzZWxlY3RlZEFjY291bnRJZCkgewogICAgICAgIHNlbGVjdGVkQWNjb3VudCA9IHNlbGVjdEFjY291bnQoc3RhdGUsIHNlbGVjdGVkQWNjb3VudElkKTsKICAgIH0KICAgIHJldHVybiB7CiAgICAgICAgbGlzdHM6IHN0YXRlLmxpc3RzLAogICAgICAgIHF1ZXJ5OiBzdGF0ZS5tYWlsYm94LnF1ZXJ5IHx8ICcnLAogICAgICAgIHRocmVhZHM6IHN0YXRlLm1haWxib3hUaHJlYWRzICYmIHN0YXRlLm1haWxib3hUaHJlYWRzLmRhdGEgfHwgW10sCiAgICAgICAgc2VsZWN0ZWRUaHJlYWQ6IHN0YXRlLnNlbGVjdGVkVGhyZWFkLAogICAgICAgIHNlbGVjdGVkTWFpbGJveDogc3RhdGUubWFpbGJveCwKICAgICAgICBsb2FkaW5nOiBzdGF0ZS5tYWlsYm94VGhyZWFkcy5zdGF0dXMgPT09IFJlc291cmNlU3RhdHVzLkxvYWRpbmcsCiAgICAgICAgaG90a2V5QWN0aW9uczogc3RhdGUuaG90a2V5QWN0aW9ucywKICAgICAgICB3aWR0aDogc3RhdGUudGhyZWFkTGlzdFdpZHRoLAogICAgICAgIGJhbm5lcjogc3RhdGUuYmFubmVyLAogICAgICAgIHNlbGVjdGVkQWNjb3VudDogc2VsZWN0ZWRBY2NvdW50LAogICAgICAgIGxzYkNvbGxhcHNlZDogc2VsZWN0U2hvd0NvbGxhcHNlZExTQihzdGF0ZSksCiAgICAgICAgZmFpbGVkRHJhZnRzQ291bnQ6IHN0YXRlLm1haWxib3ggJiYgc3RhdGUubWFpbGJveC50eXBlID09PSBNYWlsYm94VHlwZS5PdXRib3ggJiYKICAgICAgICAgICAgc2VsZWN0RmFpbGVkRHJhZnRzKHN0YXRlKS5sZW5ndGggfHwgdW5kZWZpbmVkLAogICAgfTsKfTsKdmFyIG1hcERpc3BhdGNoVG9Qcm9wcyA9IGZ1bmN0aW9uIChkaXNwYXRjaCkgeyByZXR1cm4gKHsKICAgIHNlYXJjaFRocmVhZHM6IGZ1bmN0aW9uIChtZXRhKSB7IHJldHVybiBkaXNwYXRjaCh0aHJlYWRzU2VhcmNoKG1ldGEpKTsgfSwKICAgIHVwZGF0ZU1haWxib3g6IGZ1bmN0aW9uIChtYWlsYm94KSB7IHJldHVybiBkaXNwYXRjaChtYWlsYm94U2VsZWN0KG1haWxib3gpKTsgfSwKICAgIHVwZGF0ZUhvdGtleTogZnVuY3Rpb24gKGFjdGlvbikgeyByZXR1cm4gZGlzcGF0Y2goaG90a2V5VXBkYXRlKGFjdGlvbikpOyB9LAogICAgc2V0V2lkdGg6IGZ1bmN0aW9uICh3aWR0aCkgeyByZXR1cm4gZGlzcGF0Y2godGhyZWFkTGlzdFdpZHRoU2V0KHdpZHRoKSk7IH0sCn0pOyB9OwpleHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKSh3aXRoUm91dGVyKFRocmVhZExpc3QpKTsK"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Threads/components/ThreadList/index.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Threads/components/ThreadList/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAY,MAAM,aAAa,CAAC;AAChD,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAC1C,OAAO,EAAE,aAAa,EAAE,kBAAkB,EAAE,MAAM,oBAAoB,CAAC;AACvE,OAAO,EAAc,cAAc,EAAE,WAAW,EAAE,MAAM,YAAY,CAAC;AACrE,OAAO,EAAE,aAAa,EAAE,MAAM,oBAAoB,CAAC;AACnD,OAAO,UAAoC,MAAM,cAAc,CAAC;AAChE,OAAO,EAAE,YAAY,EAAE,MAAM,oBAAoB,CAAC;AAClD,OAAO,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAC;AACpD,OAAO,EAAE,sBAAsB,EAAE,MAAM,wBAAwB,CAAC;AAChE,OAAO,EAAE,kBAAkB,EAAE,MAAM,mBAAmB,CAAC;AAEvD,IAAM,eAAe,GAAG,UAAC,KAAiB,EAAE,QAAe;IACzD,IAAM,iBAAiB,GAAG,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC;IACjE,IAAI,eAAe,CAAC;IACpB,IAAI,iBAAiB,EAAE;QACrB,eAAe,GAAG,aAAa,CAAC,KAAK,EAAE,iBAAiB,CAAC,CAAC;KAC3D;IAED,OAAO;QACL,KAAK,EAAE,KAAK,CAAC,KAAK;QAClB,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE;QAChC,OAAO,EAAE,KAAK,CAAC,cAAc,IAAI,KAAK,CAAC,cAAc,CAAC,IAAI,IAAI,EAAE;QAChE,cAAc,EAAE,KAAK,CAAC,cAAc;QACpC,eAAe,EAAE,KAAK,CAAC,OAAO;QAC9B,OAAO,EAAE,KAAK,CAAC,cAAc,CAAC,MAAM,KAAK,cAAc,CAAC,OAAO;QAC/D,aAAa,EAAE,KAAK,CAAC,aAAa;QAClC,KAAK,EAAE,KAAK,CAAC,eAAe;QAC5B,MAAM,EAAE,KAAK,CAAC,MAAM;QACpB,eAAe,iBAAA;QACf,YAAY,EAAE,sBAAsB,CAAC,KAAK,CAAC;QAC3C,iBAAiB,EAAE,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,KAAK,WAAW,CAAC,MAAM;YAC3E,kBAAkB,CAAC,KAAK,CAAC,CAAC,MAAM,IAAI,SAAS;KAChD,CAAC;AACJ,CAAC,CAAC;AAEF,IAAM,kBAAkB,GAAG,UAAC,QAA8B,IAAoB,OAAA,CAAC;IAC7E,aAAa,EAAE,UAAA,IAAI,IAAI,OAAA,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,EAA7B,CAA6B;IACpD,aAAa,EAAE,UAAA,OAAO,IAAI,OAAA,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,EAAhC,CAAgC;IAC1D,YAAY,EAAE,UAAA,MAAM,IAAI,OAAA,QAAQ,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,EAA9B,CAA8B;IACtD,QAAQ,EAAE,UAAA,KAAK,IAAI,OAAA,QAAQ,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,EAAnC,CAAmC;CACvD,CAAC,EAL4E,CAK5E,CAAC;AAEH,eAAe,OAAO,CAAC,eAAe,EAAE,kBAAkB,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC","sourcesContent":["import { connect, Dispatch } from 'react-redux';\nimport { withRouter } from 'react-router';\nimport { threadsSearch, threadListWidthSet } from '@src/ducks/threads';\nimport { StoreState, ResourceStatus, MailboxType } from '@src/types';\nimport { mailboxSelect } from '@src/ducks/mailbox';\nimport ThreadList, { DispatchProps, Props } from './ThreadList';\nimport { hotkeyUpdate } from '@src/ducks/hotkeys';\nimport { selectAccount } from '@src/ducks/accounts';\nimport { selectShowCollapsedLSB } from '@src/ducks/leftSidebar';\nimport { selectFailedDrafts } from '@src/ducks/drafts';\n\nconst mapStateToProps = (state: StoreState, ownProps: Props): any => {\n  const selectedAccountId = state.mailbox && state.mailbox.account;\n  let selectedAccount;\n  if (selectedAccountId) {\n    selectedAccount = selectAccount(state, selectedAccountId);\n  }\n\n  return {\n    lists: state.lists,\n    query: state.mailbox.query || '',\n    threads: state.mailboxThreads && state.mailboxThreads.data || [],\n    selectedThread: state.selectedThread,\n    selectedMailbox: state.mailbox,\n    loading: state.mailboxThreads.status === ResourceStatus.Loading,\n    hotkeyActions: state.hotkeyActions,\n    width: state.threadListWidth,\n    banner: state.banner,\n    selectedAccount,\n    lsbCollapsed: selectShowCollapsedLSB(state),\n    failedDraftsCount: state.mailbox && state.mailbox.type === MailboxType.Outbox &&\n      selectFailedDrafts(state).length || undefined,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<StoreState>): DispatchProps => ({\n  searchThreads: meta => dispatch(threadsSearch(meta)),\n  updateMailbox: mailbox => dispatch(mailboxSelect(mailbox)),\n  updateHotkey: action => dispatch(hotkeyUpdate(action)),\n  setWidth: width => dispatch(threadListWidthSet(width)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(ThreadList));\n"]}]}