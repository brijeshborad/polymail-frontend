{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/activityFeed.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/activityFeed.ts","mtime":1675280254054},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnOwppbXBvcnQgQ2FjaGUsIHsgU3RvcmVzIH0gZnJvbSAnQHNyYy9saWIvZGInOwppbXBvcnQgeyBBY3Rpb25TdGF0dXMsIH0gZnJvbSAnQHNyYy90eXBlcyc7CmltcG9ydCB7IEFDVElWSVRZX0ZFRURfTElTVCwgYWN0aXZpdHlGZWVkTGlzdCwgQUNUSVZJVFlfU0VMRUNULCB9IGZyb20gJ0BzcmMvZHVja3MvYWN0aXZpdHlGZWVkJzsKaW1wb3J0IHsgY29udGFjdFRocmVhZFNlbGVjdCwgfSBmcm9tICdAc3JjL2R1Y2tzL3RocmVhZHMnOwppbXBvcnQgeyBEQl9SRUFEWSB9IGZyb20gJ0BzcmMvZHVja3MvZGInOwppbXBvcnQgeyBsYXN0IH0gZnJvbSAnbG9kYXNoJzsKLy8gREIgcmVhZHkgdHJpZ2dlcnMgbGlzdCBvZiBkcmFmdHMKdmFyIGRiUmVhZHlUcmlnZ2VyTGlzdEFjdGl2aXR5RmVlZCA9IGZ1bmN0aW9uIChhY3Rpb24kKSB7CiAgICByZXR1cm4gYWN0aW9uJAogICAgICAgIC5vZlR5cGUoREJfUkVBRFkpCiAgICAgICAgLm1hcChmdW5jdGlvbiAoKSB7IHJldHVybiBhY3Rpdml0eUZlZWRMaXN0KHt9KTsgfSk7Cn07CmV4cG9ydCB2YXIgcXVlcnlBY3Rpdml0aWVzID0gZnVuY3Rpb24gKHF1ZXJ5KSB7CiAgICB2YXIgcXVlcnlJbmRleCA9IHF1ZXJ5LnR5cGUgPT09IHVuZGVmaW5lZCA/ICdkYXRlJyA6ICd0eXBlX2RhdGUnOwogICAgdmFyIHJhbmdlID0gSURCS2V5UmFuZ2UuYm91bmQocXVlcnkudHlwZSA9PT0gdW5kZWZpbmVkID8gW25ldyBEYXRlKDApXSA6IFtEYXRlKCldLCBxdWVyeS50eXBlID09PSB1bmRlZmluZWQgPyBbRGF0ZSgpXSA6IFtxdWVyeS50eXBlLCBEYXRlKCldKTsKICAgIHZhciBmaWx0ZXI7CiAgICBpZiAocXVlcnkgJiYgcXVlcnkgIT09ICcnKSB7CiAgICAgICAgZmlsdGVyID0gZnVuY3Rpb24gKGFjdGl2aXR5KSB7CiAgICAgICAgICAgIHZhciBzdHJpbmdTZWFyY2hQcm9wZXJ0aWVzID0gWydyZWNpcGllbnQnLCAnc3ViamVjdCcsICd1cmwnLCAnZmlsZW5hbWUnXTsKICAgICAgICAgICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgICAgICAgICBpZiAocXVlcnlba2V5XSkgewogICAgICAgICAgICAgICAgICAgIGlmIChhY3Rpdml0eVtrZXldICE9PSB1bmRlZmluZWQgJiYgcXVlcnlba2V5XSAmJiBhY3Rpdml0eVtrZXldICE9PSBxdWVyeVtrZXldKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBmYWxzZSB9OwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSAncXVlcnknICYmIHF1ZXJ5W2tleV0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHF1ZXJ5U2FuaXRpemVkXzEgPSBxdWVyeVtrZXldLnRyaW0oKS50b0xvd2VyQ2FzZSgpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RyaW5nU2VhcmNoUHJvcGVydGllcy5maWx0ZXIoZnVuY3Rpb24gKHByb3BlcnR5KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWN0aXZpdHlbcHJvcGVydHldICYmIGFjdGl2aXR5W3Byb3BlcnR5XS50b0xvd2VyQ2FzZSgpLnNlYXJjaChxdWVyeVNhbml0aXplZF8xKSA+PSAwOwogICAgICAgICAgICAgICAgICAgICAgICB9KS5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBmYWxzZSB9OwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwogICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gcXVlcnkpIHsKICAgICAgICAgICAgICAgIHZhciBzdGF0ZV8xID0gX2xvb3BfMShrZXkpOwogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzdGF0ZV8xID09PSAib2JqZWN0IikKICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGVfMS52YWx1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9OwogICAgfQogICAgcmV0dXJuIENhY2hlLmxpc3RJbmRleChTdG9yZXMuQWN0aXZpdHlGZWVkLCBxdWVyeUluZGV4LCByYW5nZSwgdHJ1ZSwgMjAwMCwgZmlsdGVyKQogICAgICAgIC5tYXAoZnVuY3Rpb24gKGFjdGl2aXRpZXMpIHsgcmV0dXJuIGFjdGl2aXRpZXMucmVkdWNlKGZ1bmN0aW9uIChmaWx0ZXJlZCwgbmV4dCwgaW5kZXgpIHsKICAgICAgICAvLyBJZGVudGlmeSBwcmV2aW91cyBpdGVtCiAgICAgICAgdmFyIHByZXZpb3VzID0gbGFzdChmaWx0ZXJlZCk7CiAgICAgICAgaWYgKCFwcmV2aW91cykgewogICAgICAgICAgICByZXR1cm4gW25leHRdOwogICAgICAgIH0KICAgICAgICAvLyBEbyBub3QgcGFzcyBpZiBkdXBsaWNhdGUKICAgICAgICBpZiAobmV4dC50aHJlYWQgPT09IHByZXZpb3VzLnRocmVhZCAmJgogICAgICAgICAgICBuZXh0LnJlY2lwaWVudCA9PT0gcHJldmlvdXMucmVjaXBpZW50ICYmCiAgICAgICAgICAgIG5leHQudHlwZSA9PT0gcHJldmlvdXMudHlwZSkgewogICAgICAgICAgICByZXR1cm4gZmlsdGVyZWQ7CiAgICAgICAgfQogICAgICAgIC8vIE90aGVyd2lzZSBwYXNzIHRocm91Z2gKICAgICAgICByZXR1cm4gZmlsdGVyZWQuY29uY2F0KFtuZXh0XSk7CiAgICB9LCBbXSk7IH0pCiAgICAgICAgLm1hcChmdW5jdGlvbiAoYWN0aXZpdGllcykgeyByZXR1cm4gYWN0aXZpdGllcy5zbGljZSgwLCAxMDAwKTsgfSk7Cn07Ci8vIExpc3QgYWN0aXZpdHkgZmVlZCBmZXRjaGVzIGFsbCBhY3Rpdml0aWVzIGZyb20gY2FjaGUKZXhwb3J0IHZhciBsaXN0QWN0aXZpdHlGZWVkID0gZnVuY3Rpb24gKGFjdGlvbiQsIHN0b3JlLCBkZXBzKSB7CiAgICByZXR1cm4gYWN0aW9uJC5vZlR5cGUoQUNUSVZJVFlfRkVFRF9MSVNUKQogICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGFjdGlvbikgeyByZXR1cm4gYWN0aW9uLnN0YXR1cyA9PT0gQWN0aW9uU3RhdHVzLlN0YXJ0OyB9KQogICAgICAgIC5kZWJvdW5jZVRpbWUoMjAwLCBkZXBzLnNjaGVkdWxlcikKICAgICAgICAuZmxhdE1hcChmdW5jdGlvbiAoYWN0aW9uKSB7CiAgICAgICAgcmV0dXJuIHF1ZXJ5QWN0aXZpdGllcyhhY3Rpb24ubWV0YSkKICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoYWN0aXZpdGllcykgeyByZXR1cm4gYWN0aXZpdHlGZWVkTGlzdChhY3Rpb24ubWV0YSwgYWN0aXZpdGllcyk7IH0pCiAgICAgICAgICAgIC50YWtlVW50aWwoYWN0aW9uJC5vZlR5cGUoQUNUSVZJVFlfRkVFRF9MSVNUKQogICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChhKSB7IHJldHVybiBhLnN0YXR1cyA9PT0gQWN0aW9uU3RhdHVzLlN0YXJ0OyB9KSkKICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlKSB7IHJldHVybiBPYnNlcnZhYmxlLm9mKGFjdGl2aXR5RmVlZExpc3QoYWN0aW9uLm1ldGEsIGUpKTsgfSk7CiAgICB9KTsKfTsKZXhwb3J0IHZhciBzZWxlY3RBY3Rpdml0eSA9IGZ1bmN0aW9uIChhY3Rpb24kKSB7CiAgICByZXR1cm4gYWN0aW9uJC5vZlR5cGUoQUNUSVZJVFlfU0VMRUNUKQogICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGFjdGlvbikgeyByZXR1cm4gYWN0aW9uLnN0YXR1cyA9PT0gQWN0aW9uU3RhdHVzLlN0YXJ0OyB9KQogICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGFjdGlvbikgeyByZXR1cm4gYWN0aW9uLm1ldGEgIT09IHVuZGVmaW5lZDsgfSkKICAgICAgICAuZmxhdE1hcChmdW5jdGlvbiAoYWN0aW9uKSB7CiAgICAgICAgcmV0dXJuIE9ic2VydmFibGUub2YoY29udGFjdFRocmVhZFNlbGVjdCh1bmRlZmluZWQpKQogICAgICAgICAgICAudGFrZVVudGlsKGFjdGlvbiQub2ZUeXBlKEFDVElWSVRZX1NFTEVDVCkpOwogICAgfSk7Cn07CmV4cG9ydCB2YXIgb2hhaSA9IFsKICAgIGRiUmVhZHlUcmlnZ2VyTGlzdEFjdGl2aXR5RmVlZCwKICAgIGxpc3RBY3Rpdml0eUZlZWQsCiAgICBzZWxlY3RBY3Rpdml0eSwKXTsKZXhwb3J0IGRlZmF1bHQgWwogICAgZGJSZWFkeVRyaWdnZXJMaXN0QWN0aXZpdHlGZWVkLAogICAgbGlzdEFjdGl2aXR5RmVlZCwKICAgIHNlbGVjdEFjdGl2aXR5LApdOwo="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/activityFeed.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/activityFeed.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs';\nimport { Epic } from 'redux-observable';\nimport Cache, { Stores } from '@src/lib/db';\n\nimport {\n  StoreState,\n  Action,\n  ActionStatus,\n  Activity,\n  Thread,\n} from '@src/types';\n\nimport {\n  ACTIVITY_FEED_LIST, activityFeedList, ActivityFeedSearchMeta, ACTIVITY_SELECT,\n} from '@src/ducks/activityFeed';\nimport {\n  contactThreadSelect,\n} from '@src/ducks/threads';\n\nimport { DB_READY } from '@src/ducks/db';\nimport { last } from 'lodash';\nimport { Deps } from '@src/lib/epic';\n\n// DB ready triggers list of drafts\nconst dbReadyTriggerListActivityFeed: Epic<Action<ActivityFeedSearchMeta, Activity[]>, StoreState>\n  = action$ =>\n  action$\n    .ofType(DB_READY)\n    .map(() => activityFeedList({}));\n\nexport const queryActivities = (query: ActivityFeedSearchMeta) => {\n  const queryIndex = query.type === undefined ? 'date' : 'type_date';\n  const range = IDBKeyRange.bound(\n    query.type === undefined ? [new Date(0)] : [Date()],\n    query.type === undefined ? [Date()] : [query.type, Date()],\n  );\n\n  let filter;\n  if (query && query !== '') {\n    filter = (activity: Activity) => {\n      const stringSearchProperties = ['recipient', 'subject', 'url', 'filename'];\n\n      for (const key in query) {\n        if (query[key]) {\n          if (activity[key] !== undefined && query[key] && activity[key] !== query[key]) {\n            return false;\n          }\n\n          if (key === 'query' && query[key]) {\n            const querySanitized = query[key]!.trim().toLowerCase();\n            if (stringSearchProperties.filter(property =>\n              activity[property] && activity[property].toLowerCase().search(querySanitized) >= 0,\n            ).length === 0) {\n              return false;\n            }\n          }\n        }\n      }\n\n      return true;\n    };\n  }\n\n  return Cache.listIndex<Activity>(Stores.ActivityFeed, queryIndex, range, true, 2000, filter)\n    .map(activities => activities.reduce(\n      (filtered, next, index) => {\n        // Identify previous item\n        const previous = last(filtered);\n        if (!previous) {\n          return [next];\n        }\n\n        // Do not pass if duplicate\n        if (next.thread === previous.thread &&\n          next.recipient === previous.recipient &&\n          next.type === previous.type) {\n          return filtered;\n        }\n\n        // Otherwise pass through\n        return filtered.concat([next]);\n      },\n      [] as Activity[],\n    ))\n    .map(activities => activities.slice(0, 1000));\n};\n\n// List activity feed fetches all activities from cache\nexport const listActivityFeed: Epic<Action<ActivityFeedSearchMeta, Activity[]>, StoreState, Deps>\n  = (action$, store, deps) =>\n      action$.ofType(ACTIVITY_FEED_LIST)\n        .filter(action => action.status === ActionStatus.Start)\n        .debounceTime(200, deps.scheduler)\n        .flatMap(action =>\n          queryActivities(action.meta)\n            .map(activities => activityFeedList(action.meta, activities))\n            .takeUntil(action$.ofType(ACTIVITY_FEED_LIST)\n            .filter(a => a.status === ActionStatus.Start))\n            .catch(e => Observable.of(activityFeedList(action.meta, e))),\n        );\n\nexport const selectActivity: Epic<Action<Activity|undefined|Thread, Activity|Thread>, StoreState>\n  = action$ =>\n  action$.ofType(ACTIVITY_SELECT)\n    .filter(action => action.status === ActionStatus.Start)\n    .filter(action => action.meta !== undefined)\n    .flatMap(action =>\n      Observable.of(contactThreadSelect(undefined))\n        .takeUntil(action$.ofType(ACTIVITY_SELECT)),\n    );\n\nexport const ohai = [\n  dbReadyTriggerListActivityFeed,\n  listActivityFeed,\n  selectActivity,\n];\n\nexport default [\n  dbReadyTriggerListActivityFeed,\n  listActivityFeed,\n  selectActivity,\n];\n"]}]}