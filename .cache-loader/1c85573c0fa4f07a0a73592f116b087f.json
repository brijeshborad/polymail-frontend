{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/components/Cells/TrackCell/index.tsx","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/components/Cells/TrackCell/index.tsx","mtime":1675280253994},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IFRyYWNrQ2VsbCBmcm9tICcuL1RyYWNrQ2VsbCc7CmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7CmltcG9ydCB7IHNlbGVjdENvbnRhY3QsIGNvbnRhY3RTZWxlY3QsIGNvbnRhY3RHZXQgfSBmcm9tICdAc3JjL2R1Y2tzL2NvbnRhY3RzJzsKdmFyIG1hcFN0YXRlVG9Qcm9wcyA9IGZ1bmN0aW9uIChzdGF0ZSwgb3duUHJvcHMpIHsKICAgIHJldHVybiB7CiAgICAgICAgY29udGFjdDogc2VsZWN0Q29udGFjdChzdGF0ZSwgb3duUHJvcHMuZW1haWwpLAogICAgICAgIG1haWxib3g6IHN0YXRlLm1haWxib3gsCiAgICB9Owp9Owp2YXIgbWFwRGlzcGF0Y2hUb1Byb3BzID0gZnVuY3Rpb24gKGRpc3BhdGNoKSB7IHJldHVybiAoewogICAgc2VsZWN0Q29udGFjdDogZnVuY3Rpb24gKGVtYWlsKSB7IHJldHVybiBkaXNwYXRjaChjb250YWN0U2VsZWN0KGVtYWlsKSk7IH0sCiAgICBnZXRDb250YWN0OiBmdW5jdGlvbiAoZW1haWwpIHsgcmV0dXJuIGRpc3BhdGNoKGNvbnRhY3RHZXQoZW1haWwpKTsgfSwKfSk7IH07CmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMpKFRyYWNrQ2VsbCk7Cg=="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/components/Cells/TrackCell/index.tsx","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/components/Cells/TrackCell/index.tsx"],"names":[],"mappings":"AAAA,OAAO,SAAmC,MAAM,aAAa,CAAC;AAE9D,OAAO,EAAE,OAAO,EAAY,MAAM,aAAa,CAAC;AAGhD,OAAO,EAAE,aAAa,EAAE,aAAa,EAAE,UAAU,EAAE,MAAM,qBAAqB,CAAC;AAE/E,IAAM,eAAe,GAAG,UAAC,KAAiB,EAAE,QAAe;IACzD,OAAO;QACL,OAAO,EAAE,aAAa,CAAC,KAAK,EAAE,QAAQ,CAAC,KAAK,CAAC;QAC7C,OAAO,EAAE,KAAK,CAAC,OAAO;KACvB,CAAC;AACJ,CAAC,CAAC;AAEF,IAAM,kBAAkB,GAAG,UAAC,QAA8B,IAAoB,OAAA,CAAC;IAC7E,aAAa,EAAE,UAAC,KAAa,IAAK,OAAA,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,EAA9B,CAA8B;IAChE,UAAU,EAAE,UAAC,KAAa,IAAK,OAAA,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAA3B,CAA2B;CAC3D,CAAC,EAH4E,CAG5E,CAAC;AAEH,eAAe,OAAO,CAAC,eAAe,EAAE,kBAAkB,CAAC,CAAC,SAAS,CAAC,CAAC","sourcesContent":["import TrackCell, { Props, DispatchProps } from './TrackCell';\n\nimport { connect, Dispatch } from 'react-redux';\nimport { StoreState } from '@src/types';\n\nimport { selectContact, contactSelect, contactGet } from '@src/ducks/contacts';\n\nconst mapStateToProps = (state: StoreState, ownProps: Props): any => {\n  return {\n    contact: selectContact(state, ownProps.email),\n    mailbox: state.mailbox,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<StoreState>): DispatchProps => ({\n  selectContact: (email: string) => dispatch(contactSelect(email)),\n  getContact: (email: string) => dispatch(contactGet(email)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TrackCell);\n"]}]}