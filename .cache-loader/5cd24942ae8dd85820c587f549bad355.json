{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/cache.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/cache.ts","mtime":1675280254062},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkgewogICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHsKICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHsKICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTsKICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKQogICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07CiAgICAgICAgfQogICAgICAgIHJldHVybiB0OwogICAgfTsKICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9OwppbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7CmltcG9ydCB7IEFVVEhfVE9LRU5fTk9ORSwgZ2V0VG9rZW4gfSBmcm9tICdAc3JjL2FwaS9iYXNlJzsKaW1wb3J0IHsgZ2V0S2V5VmFsdWUsIHNhdmVLZXlWYWx1ZSB9IGZyb20gJy4vbW9kZWxzL2tleVZhbHVlJzsKaW1wb3J0IHsgZm52MWE2NGhleCB9IGZyb20gJy4vY3J5cHQnOwppbXBvcnQgeyBEQl9NSUdSQVRJT05fVkVSU0lPTiB9IGZyb20gJy4vZGInOwp2YXIgQ0xFQVJfQ0FDSEVfU1RBVFVTX0tFWSA9ICdjbGVhckNhY2hlU3RhdHVzJzsKZXhwb3J0IGZ1bmN0aW9uIGdldENsZWFyQ2FjaGVTdGF0dXMoKSB7CiAgICByZXR1cm4gZ2V0S2V5VmFsdWUoQ0xFQVJfQ0FDSEVfU1RBVFVTX0tFWSk7Cn0KZXhwb3J0IGZ1bmN0aW9uIGdldENyZWF0ZUNsZWFyQ2FjaGVTdGF0dXMoKSB7CiAgICByZXR1cm4gZ2V0Q2xlYXJDYWNoZVN0YXR1cygpLmZsYXRNYXAoZnVuY3Rpb24gKHN0YXR1cykgewogICAgICAgIC8vIEdlbmVyYXRlIGN1cnJlbnQgaGFzaAogICAgICAgIHZhciB0b2tlbiA9IGdldFRva2VuKCk7CiAgICAgICAgdmFyIGhhc2ggPSB0b2tlbiA9PT0gQVVUSF9UT0tFTl9OT05FID8gQVVUSF9UT0tFTl9OT05FIDogZm52MWE2NGhleCh0b2tlbik7CiAgICAgICAgLy8gU2F2ZSBuZXcgb3IgdXBkYXRlZCAgc3RhdHVzIGlmIG5lZWRlZAogICAgICAgIGlmICghc3RhdHVzIHx8IHN0YXR1cy5oYXNoICE9PSBoYXNoKSB7CiAgICAgICAgICAgIHZhciBuZXdTdGF0dXNfMSA9IGRlZmF1bHRDbGVhckNhY2hlU3RhdHVzKHN0YXR1cyk7CiAgICAgICAgICAgIC8vIEhhbmRsZSBoYXNoIGNoYW5nZSwgc3VjaCBhcyBkdXJpbmcgbG9naW4KICAgICAgICAgICAgaWYgKG5ld1N0YXR1c18xLmhhc2ggIT09IGhhc2gpIHsKICAgICAgICAgICAgICAgIG5ld1N0YXR1c18xLmhhc2ggPSBoYXNoOwogICAgICAgICAgICAgICAgbmV3U3RhdHVzXzEuY291bnRlciA9IDA7CiAgICAgICAgICAgICAgICBuZXdTdGF0dXNfMS5pZ25vcmVDb21taXRzID0gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHNhdmVDbGVhckNhY2hlU3RhdHVzKG5ld1N0YXR1c18xKS5tYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3U3RhdHVzXzE7IH0pOwogICAgICAgIH0KICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS5vZihzdGF0dXMpOwogICAgfSk7Cn0KZXhwb3J0IGZ1bmN0aW9uIHNhdmVDbGVhckNhY2hlU3RhdHVzKHN0YXR1cykgewogICAgcmV0dXJuIHNhdmVLZXlWYWx1ZShDTEVBUl9DQUNIRV9TVEFUVVNfS0VZLCBzdGF0dXMpOwp9CmV4cG9ydCBmdW5jdGlvbiBpbmNyZW1lbnRDbGVhckNhY2hlQ291bnRlcihpZ25vcmVDb21taXRzKSB7CiAgICByZXR1cm4gZ2V0Q2xlYXJDYWNoZVN0YXR1cygpCiAgICAgICAgLmZsYXRNYXAoZnVuY3Rpb24gKHN0YXR1cykgewogICAgICAgIHZhciBuZXdTdGF0dXMgPSBfX2Fzc2lnbihfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZGVmYXVsdENsZWFyQ2FjaGVTdGF0dXMoKSksIHN0YXR1cyksIHsgaWdub3JlQ29tbWl0czogaWdub3JlQ29tbWl0cyB9KTsKICAgICAgICAvLyBJbmNyZWFzZSBjb3VudGVyIGFuZCByZXR1cm4KICAgICAgICBpZiAobmV3U3RhdHVzLmNvbXBsZXRlZEhhc2ggIT09IEFVVEhfVE9LRU5fTk9ORSkgewogICAgICAgICAgICBuZXdTdGF0dXMuY291bnRlciArPSAxOwogICAgICAgIH0KICAgICAgICByZXR1cm4gc2F2ZUNsZWFyQ2FjaGVTdGF0dXMobmV3U3RhdHVzKS5tYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3U3RhdHVzOyB9KTsKICAgIH0pOwp9CmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0Q2xlYXJDYWNoZVN0YXR1cyhzdGF0dXMpIHsKICAgIC8vIEZpZ3VyZSBvdXQgaWYgbG9nZ2VkIG91dAogICAgdmFyIHRva2VuID0gZ2V0VG9rZW4oKTsKICAgIHZhciBoYXNoID0gQVVUSF9UT0tFTl9OT05FOwogICAgaWYgKHRva2VuICE9PSBBVVRIX1RPS0VOX05PTkUpIHsKICAgICAgICBoYXNoID0gZm52MWE2NGhleCh0b2tlbik7CiAgICB9CiAgICByZXR1cm4gX19hc3NpZ24oeyBoYXNoOiBoYXNoLCBjb3VudGVyOiAwLCBpZ25vcmVDb21taXRzOiBmYWxzZSwgY29tcGxldGVkSGFzaDogaGFzaCwgY29tcGxldGVkQ291bnRlcjogMCwgdmVyc2lvbjogREJfTUlHUkFUSU9OX1ZFUlNJT04gfSwgc3RhdHVzKTsKfQo="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/cache.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/cache.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAClC,OAAO,EAAE,eAAe,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AAE1D,OAAO,EAAE,WAAW,EAAE,YAAY,EAAE,MAAM,mBAAmB,CAAC;AAC9D,OAAO,EAAE,UAAU,EAAE,MAAM,SAAS,CAAC;AACrC,OAAO,EAAE,oBAAoB,EAAE,MAAM,MAAM,CAAC;AAE5C,IAAM,sBAAsB,GAAG,kBAAkB,CAAC;AAElD,MAAM,UAAU,mBAAmB;IACjC,OAAO,WAAW,CAAmB,sBAAsB,CAAC,CAAC;AAC/D,CAAC;AAED,MAAM,UAAU,yBAAyB;IACvC,OAAO,mBAAmB,EAAE,CAAC,OAAO,CAAC,UAAC,MAAM;QAE1C,wBAAwB;QACxB,IAAM,KAAK,GAAG,QAAQ,EAAE,CAAC;QACzB,IAAM,IAAI,GAAG,KAAK,KAAK,eAAe,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QAE7E,wCAAwC;QACxC,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,IAAI,EAAE;YACnC,IAAM,WAAS,GAAqB,uBAAuB,CAAC,MAAM,CAAC,CAAC;YAEpE,2CAA2C;YAC3C,IAAI,WAAS,CAAC,IAAI,KAAK,IAAI,EAAE;gBAC3B,WAAS,CAAC,IAAI,GAAG,IAAI,CAAC;gBACtB,WAAS,CAAC,OAAO,GAAG,CAAC,CAAC;gBACtB,WAAS,CAAC,aAAa,GAAG,KAAK,CAAC;aACjC;YAED,OAAO,oBAAoB,CAAC,WAAS,CAAC,CAAC,GAAG,CAAC,cAAM,OAAA,WAAS,EAAT,CAAS,CAAC,CAAC;SAC7D;QACD,OAAO,UAAU,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;AACL,CAAC;AAED,MAAM,UAAU,oBAAoB,CAAC,MAAwB;IAC3D,OAAO,YAAY,CAAmB,sBAAsB,EAAE,MAAM,CAAC,CAAC;AACxE,CAAC;AAED,MAAM,UAAU,0BAA0B,CAAC,aAAsB;IAC/D,OAAO,mBAAmB,EAAE;SACzB,OAAO,CAAC,UAAC,MAAM;QAEd,IAAM,SAAS,kCACV,uBAAuB,EAAE,GACzB,MAAM,KACT,aAAa,eAAA,GACd,CAAC;QAEF,8BAA8B;QAC9B,IAAI,SAAS,CAAC,aAAa,KAAK,eAAe,EAAE;YAC/C,SAAS,CAAC,OAAO,IAAI,CAAC,CAAC;SACxB;QAED,OAAO,oBAAoB,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,cAAM,OAAA,SAAS,EAAT,CAAS,CAAC,CAAC;IAC9D,CAAC,CAAC,CAAC;AACP,CAAC;AAED,MAAM,UAAU,uBAAuB,CAAC,MAAkC;IACxE,2BAA2B;IAC3B,IAAM,KAAK,GAAG,QAAQ,EAAE,CAAC;IACzB,IAAI,IAAI,GAAG,eAAe,CAAC;IAE3B,IAAI,KAAK,KAAK,eAAe,EAAE;QAC7B,IAAI,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;KAC1B;IAED,kBACE,IAAI,MAAA,EACJ,OAAO,EAAE,CAAC,EACV,aAAa,EAAE,KAAK,EACpB,aAAa,EAAE,IAAI,EACnB,gBAAgB,EAAE,CAAC,EACnB,OAAO,EAAE,oBAAoB,IAC1B,MAAM,EACT;AACJ,CAAC","sourcesContent":["import { Observable } from 'rxjs';\nimport { AUTH_TOKEN_NONE, getToken } from '@src/api/base';\nimport { ClearCacheStatus } from '@src/types';\nimport { getKeyValue, saveKeyValue } from './models/keyValue';\nimport { fnv1a64hex } from './crypt';\nimport { DB_MIGRATION_VERSION } from './db';\n\nconst CLEAR_CACHE_STATUS_KEY = 'clearCacheStatus';\n\nexport function getClearCacheStatus(): Observable<ClearCacheStatus|undefined> {\n  return getKeyValue<ClearCacheStatus>(CLEAR_CACHE_STATUS_KEY);\n}\n\nexport function getCreateClearCacheStatus(): Observable<ClearCacheStatus> {\n  return getClearCacheStatus().flatMap((status) => {\n\n    // Generate current hash\n    const token = getToken();\n    const hash = token === AUTH_TOKEN_NONE ? AUTH_TOKEN_NONE : fnv1a64hex(token);\n\n    // Save new or updated  status if needed\n    if (!status || status.hash !== hash) {\n      const newStatus: ClearCacheStatus = defaultClearCacheStatus(status);\n\n      // Handle hash change, such as during login\n      if (newStatus.hash !== hash) {\n        newStatus.hash = hash;\n        newStatus.counter = 0;\n        newStatus.ignoreCommits = false;\n      }\n\n      return saveClearCacheStatus(newStatus).map(() => newStatus);\n    }\n    return Observable.of(status);\n  });\n}\n\nexport function saveClearCacheStatus(status: ClearCacheStatus): Observable<null> {\n  return saveKeyValue<ClearCacheStatus>(CLEAR_CACHE_STATUS_KEY, status);\n}\n\nexport function incrementClearCacheCounter(ignoreCommits: boolean): Observable<ClearCacheStatus> {\n  return getClearCacheStatus()\n    .flatMap((status) => {\n\n      const newStatus: ClearCacheStatus = {\n        ...defaultClearCacheStatus(),\n        ...status,\n        ignoreCommits,\n      };\n\n      // Increase counter and return\n      if (newStatus.completedHash !== AUTH_TOKEN_NONE) {\n        newStatus.counter += 1;\n      }\n\n      return saveClearCacheStatus(newStatus).map(() => newStatus);\n    });\n}\n\nexport function defaultClearCacheStatus(status?: Partial<ClearCacheStatus>): ClearCacheStatus {\n  // Figure out if logged out\n  const token = getToken();\n  let hash = AUTH_TOKEN_NONE;\n\n  if (token !== AUTH_TOKEN_NONE) {\n    hash = fnv1a64hex(token);\n  }\n\n  return {\n    hash,\n    counter: 0,\n    ignoreCommits: false,\n    completedHash: hash,\n    completedCounter: 0,\n    version: DB_MIGRATION_VERSION,\n    ...status,\n  };\n}\n"]}]}