{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/salesforce.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/salesforce.ts","mtime":1675280254051},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/salesforce.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/salesforce.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,OAAO,MAAM,MAAM,qBAAqB,CAAC;AACzC,OAAO,MAAM,MAAM,QAAQ,CAAC;AAE5B,OAAO,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;AACxC,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AACnD,OAAO,EAAE,UAAU,EAAE,eAAe,EAAE,kBAAkB,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AAEpG,OAAO,EAIL,gBAAgB,EAGhB,oBAAoB,GAErB,MAAM,uBAAuB,CAAC;AAE/B,OAAO,EAAE,cAAc,EAAE,MAAM,YAAY,CAAC;AAC5C,OAAO,EAC6B,oBAAoB,GACvD,MAAM,+BAA+B,CAAC;AAEvC,MAAM,CACJ,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAAyB,EACzB,8BAA0B,EAC1B,sCAAkC,CAsCjC;AAEH,MAAM,CACJ,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAA6B,EAC7B,iCAA6B,EAC7B,yCAAqC,CAqFpC;AAEH,MAAM,CACJ,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAA2B,EAC3B,+BAA2B,EAC3B,uCAAmC,CAqFlC;AAEH,MAAM,CACJ,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAA8B,EAC9B,kCAA8B,EAC9B,0CAAsC,CA6BrC;AAEH,MAAM,CAAN,IAAkB,yBAKjB;AALD,WAAkB,yBAAyB;IACzC,0CAAa,CAAA;IACb,gDAAmB,CAAA;IACnB,gDAAmB,CAAA;IACnB,8CAAiB,CAAA;AACnB,CAAC,EALiB,yBAAyB,KAAzB,yBAAyB,QAK1C;AAQD,yBAAyB;AACzB,MAAM,CACJ,IAAA;;;;;;;;;;;;;;;;;;;;;;;;YAA8B,EAC9B,kCAA8B,EAC9B,0CAAsC,CA0BrC;AAEH,wBAAwB;AACxB,MAAM,CACJ,IAAA;;;;;;;;;;;;;YAA+B,EAC/B,mCAA+B,EAC/B,2CAAuC,CAWtC;AAEH,MAAM,CACJ,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAA+B,EAC/B,mCAA+B,EAC/B,2CAAuC,CA6BtC;AAUH,MAAM,CACJ,IAAA;;;;;;;;;;;;;;;;;;;;;;YAA+B,EAC/B,mCAA+B,EAC/B,2CAAuC,CAuBtC;AAEH,MAAM,CACJ,IAAA;;;;;;;;;;;;;YAA2B,EAC3B,+BAA2B,EAC3B,uCAAmC,CAWlC;AAEH,MAAM,CACJ,IAAA;;;;;;;;;;;;;YAA6B,EAC7B,iCAA6B,EAC7B,yCAAqC,CAWpC;AAYH,MAAM,CACJ,IAAA;;;;;;;;;;;;;;;;;;;;;;;;YAA4B,EAC5B,gCAA4B,EAC5B,wCAAoC,CAyBnC;AAEH,MAAM,CAAC,IAAM,qBAAqB,GAAG,cAAc,CACjD;IACE,UAAC,KAAK,EAAE,KAAK;QACX,IAAM,OAAO,GAAG,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAClD,IAAI,OAAO,IAAI,OAAO,CAAC,IAAI,EAAE;YAC3B,OAAO,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC;SAC3B;QACD,OAAO,EAAE,CAAC;IACZ,CAAC;CACF,EACD,UAAC,KAAgB,IAAK,OAAA,KAAK,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC;IACpC,IAAI,QAAQ,GAAG,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,KAAK,cAAc,EAAzB,CAAyB,CAAC,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,KAAK,EAAP,CAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IACpF,IAAI,QAAQ,GAAG,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,KAAK,cAAc,EAAzB,CAAyB,CAAC,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,KAAK,EAAP,CAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IAEpF,IAAI,QAAQ,GAAG,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,KAAK,aAAa,EAAxB,CAAwB,CAAC,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,KAAK,EAAP,CAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IACnF,IAAI,QAAQ,GAAG,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,KAAK,aAAa,EAAxB,CAAwB,CAAC,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,KAAK,EAAP,CAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IAEnF,IAAI,QAAQ,KAAK,EAAE,EAAE;QACnB,QAAQ,GAAG,SAAS,CAAC;KACtB;IACD,IAAI,QAAQ,KAAK,EAAE,EAAE;QACnB,QAAQ,GAAG,SAAS,CAAC;KACtB;IACD,IAAI,QAAQ,KAAK,EAAE,EAAE;QACnB,QAAQ,GAAG,SAAS,CAAC;KACtB;IACD,IAAI,QAAQ,KAAK,EAAE,EAAE;QACnB,QAAQ,GAAG,SAAS,CAAC;KACtB;IAED,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,EAAE;QAC1B,OAAO,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;KACpD;IACD,IAAI,CAAC,QAAQ,IAAI,QAAQ,EAAE;QACzB,OAAO,CAAC,CAAC,CAAC;KACX;IACD,IAAI,QAAQ,IAAI,CAAC,QAAQ,EAAE;QACzB,OAAO,CAAC,CAAC;KACV;IAED,IAAI,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,QAAQ,EAAE,KAAK,CAAC,EAAE;QAC5C,OAAO,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;KACpD;IAED,OAAO,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrD,CAAC,CAAC,EAnCoB,CAmCpB,EACF,SAAS,EACT,CAAC,YAAY,CAAC,CACf,CAAC;AAEF,eAAe;IACb,yBAAyB;IACzB,4BAA4B;IAC5B,0BAA0B;IAC1B,6BAA6B;IAC7B,8BAA8B;IAC9B,8BAA8B;IAC9B,4BAA4B;IAC5B,2BAA2B;IAC3B,0BAA0B;IAC1B,8BAA8B;IAC9B,6BAA6B;CAC9B,CAAC","sourcesContent":["import update from 'immutability-helper';\nimport moment from 'moment';\n\nimport { create } from '@src/lib/redux';\nimport { createSelector } from '@src/lib/selector';\nimport { resourceOk, resourceLoading, resourceRefreshing, resourceFailed } from '@src/lib/resource';\n\nimport {\n  SObjectType,\n  SFDCListView,\n  SObject,\n  SObjectFieldType,\n  SObjectField,\n  SalesforceSummary,\n  SalesforceTaskStatus,\n  SObjectSchema,\n} from '@src/types/salesforce';\n\nimport { ResourceStatus } from '@src/types';\nimport {\n  SequenceRecipientCreateRecipient, createDefaultHeaders,\n} from '@src/ducks/sequenceRecipients';\n\nexport const {\n  type: SALESFORCE_LISTVIEW,\n  action: salesforceListView,\n  reducer: salesforceListViewReducer,\n} = create<SObjectType, SFDCListView[]>('SALESFORCE_LISTVIEW', {\n  setup: (state, meta) => {\n    if (state.salesforce.listViews[meta]) {\n      return state;\n    }\n\n    const data = state.salesforce.listViews[meta] && state.salesforce.listViews[meta].data;\n    return update(state, {\n      salesforce: {\n        listViews: {\n          [meta]: { $set: resourceRefreshing(data || []) },\n        },\n      },\n    });\n  },\n\n  start: (state, meta) =>\n    update(state, {\n      salesforce: {\n        listViews: {\n          [meta]: {\n            status: { $set: ResourceStatus.Refreshing },\n          },\n        },\n      },\n    }),\n\n  success: (state, meta, payload) =>\n    update(state, {\n      salesforce: {\n        listViews: {\n          [meta]: {\n            $set: resourceOk(payload),\n          },\n        },\n      },\n    }),\n});\n\nexport const {\n  type: SALESFORCE_CONTACT_LIST,\n  action: salesforceContactList,\n  reducer: salesforceContactListReducer,\n} = create<string, SObject[]>('SALESFORCE_CONTACT_LIST', {\n  setup: (state, meta) => {\n    if (state.sequenceRecipientsAddState) {\n      return state;\n    }\n\n    return update(state, {\n      sequenceRecipientsAddState: {\n        $set: {\n          headers: createDefaultHeaders(state),\n          recipients: [],\n        },\n      },\n    });\n  },\n  start: (state, meta) =>\n    update(state, {\n      sequenceRecipientsAddState: {\n        headersToAdd: { $set: resourceLoading() },\n      },\n    }),\n  success: (state, meta, payload) => {\n    const recipients = state.sequenceRecipientsAddState &&\n      state.sequenceRecipientsAddState.recipients || [];\n    const sequence = state.selectedSequence;\n    let newRecipients: SequenceRecipientCreateRecipient[] = [];\n    let newHeaders: string[] = [];\n    let emailField: SObjectField | undefined;\n    let givenNameField: SObjectField | undefined;\n    let familyNameField: SObjectField | undefined;\n\n    if (sequence) {\n      let variables: any;\n      newRecipients = payload\n        .filter(s => s.fields.find(f => f.type === SObjectFieldType.Email))\n        .map((s) => {\n          variables = {};\n          s.fields.forEach((f) => {\n            if (f.displayName.toLowerCase() === 'first name' ||\n              f.displayName.toLowerCase() === 'firstname') {\n              givenNameField = f;\n            } else if (f.displayName.toLowerCase() === 'last name' ||\n              f.displayName.toLowerCase() === 'lastname') {\n              familyNameField = f;\n            }\n            variables[f.displayName.toLowerCase()] = f.displayValue || f.value || '';\n          });\n          emailField = s.fields.find(f => f.type === SObjectFieldType.Email);\n\n          return {\n            sequence,\n            email: emailField!.value,\n            variables,\n          };\n        });\n    }\n\n    if (newRecipients.length) {\n      newHeaders = Object.keys(newRecipients[0].variables!).map(h => h.toLowerCase());\n    }\n\n    return update(state, {\n      sequenceRecipientsAddState: {\n        $set: {\n          headers: state.sequenceRecipientsAddState!.headers,\n          recipients: newRecipients.map(r => resourceOk(r)).concat(recipients),\n          headersToAdd: resourceOk(newHeaders),\n          emailHeader: emailField ? emailField.displayName.toLowerCase() : undefined,\n          givenNameHeader: givenNameField ? givenNameField.displayName.toLowerCase() : undefined,\n          familyNameHeader: familyNameField ? familyNameField.displayName.toLowerCase() : undefined,\n        },\n      },\n    });\n  },\n\n  failure: (state, meta, error) =>\n    update(state, {\n      sequenceRecipientsAddState: {\n        $set: {\n          ...state.sequenceRecipientsAddState,\n          headersToAdd: undefined,\n        },\n      },\n    }),\n});\n\nexport const {\n  type: SALESFORCE_LEADS_LIST,\n  action: salesforceLeadsList,\n  reducer: salesforceLeadsListReducer,\n} = create<string, SObject[]>('SALESFORCE_LEADS_LIST', {\n  setup: (state, meta) => {\n    if (state.sequenceRecipientsAddState) {\n      return state;\n    }\n\n    return update(state, {\n      sequenceRecipientsAddState: {\n        $set: {\n          headers: createDefaultHeaders(state),\n          recipients: [],\n        },\n      },\n    });\n  },\n  start: (state, meta) =>\n    update(state, {\n      sequenceRecipientsAddState: {\n        headersToAdd: { $set: resourceLoading() },\n      },\n    }),\n  success: (state, meta, payload) => {\n    const recipients = state.sequenceRecipientsAddState &&\n      state.sequenceRecipientsAddState.recipients || [];\n    const sequence = state.selectedSequence;\n    let newRecipients: SequenceRecipientCreateRecipient[] = [];\n    let newHeaders: string[] = [];\n    let emailField: SObjectField | undefined;\n    let givenNameField: SObjectField | undefined;\n    let familyNameField: SObjectField | undefined;\n\n    if (sequence) {\n      let variables: any;\n      newRecipients = payload\n        .filter(s => s.fields.find(f => f.type === SObjectFieldType.Email))\n        .map((s) => {\n          variables = {};\n          emailField = s.fields.find(f => f.type === SObjectFieldType.Email);\n          s.fields.forEach((f) => {\n            if (f.displayName.toLowerCase() === 'first name' ||\n              f.displayName.toLowerCase() === 'firstname') {\n              givenNameField = f;\n            } else if (f.displayName.toLowerCase() === 'last name' ||\n              f.displayName.toLowerCase() === 'lastname') {\n              familyNameField = f;\n            }\n            variables[f.displayName.toLowerCase()] = f.displayValue || f.value || '';\n          });\n\n          return {\n            sequence,\n            email: emailField!.value,\n            variables,\n          };\n        });\n    }\n\n    if (newRecipients.length) {\n      newHeaders = Object.keys(newRecipients[0].variables!).map(h => h.toLowerCase());\n    }\n\n    return update(state, {\n      sequenceRecipientsAddState: {\n        $set: {\n          headers: state.sequenceRecipientsAddState!.headers,\n          recipients: newRecipients.map(r => resourceOk(r)).concat(recipients),\n          headersToAdd: resourceOk(newHeaders),\n          emailHeader: emailField ? emailField.displayName.toLowerCase() : undefined,\n          givenNameHeader: givenNameField ? givenNameField.displayName.toLowerCase() : undefined,\n          familyNameHeader: familyNameField ? familyNameField.displayName.toLowerCase() : undefined,\n        },\n      },\n    });\n  },\n\n  failure: (state, meta, error) =>\n    update(state, {\n      sequenceRecipientsAddState: {\n        $set: {\n          ...state.sequenceRecipientsAddState,\n          headersToAdd: undefined,\n        },\n      },\n    }),\n});\n\nexport const {\n  type: SALESFORCE_SUMMARY_FETCH,\n  action: salesforceSummaryFetch,\n  reducer: salesforceSummaryFetchReducer,\n} = create<string, SalesforceSummary>('SALESFORCE_SUMMARY_FETCH', {\n  start: (state, meta) => update(state, {\n    salesforce: {\n      summaries: {\n        [meta]: {\n          $set: resourceLoading(),\n        },\n      },\n    },\n  }),\n  success: (state, meta, payload) => update(state, {\n    salesforce: {\n      summaries: {\n        [meta]: {\n          $set: resourceOk(payload),\n        },\n      },\n    },\n  }),\n  failure: (state, meta, error) => update(state, {\n    salesforce: {\n      summaries: {\n        [meta]: {\n          $set: resourceFailed(error),\n        },\n      },\n    },\n  }),\n});\n\nexport const enum SalesforceSummaryMetaType {\n  Lead = 'lead',\n  Contact = 'contact',\n  Account = 'account',\n  Create = 'create',\n}\n\nexport interface SalesforceSummaryCreateMeta {\n  email: string;\n  type: SalesforceSummaryMetaType;\n  fields?: SObjectField[];\n}\n\n// Clears pending summary\nexport const {\n  type: SALESFORCE_PENDING_CLEAR,\n  action: salesforcePendingClear,\n  reducer: salesforcePendingClearReducer,\n} = create<SalesforceSummaryCreateMeta, null>('SALESFORCE_PENDING_CLEAR', {\n  start: (state, meta) => {\n    // Clear pending summaries and summaries if error recorded\n    if (state.salesforce.summaries[meta.email] && state.salesforce.summaries[meta.email].error) {\n      return update(state, {\n        salesforce: {\n          pendingSummaries: {\n            $unset: [meta.email],\n          },\n          summaries: {\n            $unset: [meta.email],\n          },\n        },\n      });\n    }\n\n    // Otherwise just clear pending\n    return update(state, {\n      salesforce: {\n        pendingSummaries: {\n          $unset: [meta.email],\n        },\n      },\n    });\n  },\n});\n\n// Clears pending update\nexport const {\n  type: SALESFORCE_PENDING_UPDATE,\n  action: salesforcePendingUpdate,\n  reducer: salesforcePendingUpdateReducer,\n} = create<SalesforceSummaryCreateMeta, null>('SALESFORCE_PENDING_UPDATE', {\n  start: (state, meta) => update(state, {\n    salesforce: {\n      pendingSummaries: {\n        [meta.email]: {\n          $set: meta,\n        },\n      },\n    },\n  }),\n});\n\nexport const {\n  type: SALESFORCE_SUMMARY_CREATE,\n  action: salesforceSummaryCreate,\n  reducer: salesforceSummaryCreateReducer,\n} = create<SalesforceSummaryCreateMeta, SalesforceSummary>('SALESFORCE_SUMMARY_CREATE', {\n  start: (state, meta) => update(state, {\n    salesforce: {\n      summaries: {\n        [meta.email]: {\n          $set: resourceLoading(),\n        },\n      },\n    },\n  }),\n  success: (state, meta, payload) => update(state, {\n    salesforce: {\n      summaries: {\n        [meta.email]: {\n          $set: resourceOk(payload),\n        },\n      },\n    },\n  }),\n  failure: (state, meta, error) => update(state, {\n    salesforce: {\n      summaries: {\n        [meta.email]: {\n          $set: resourceFailed(error),\n        },\n      },\n    },\n  }),\n});\n\nexport interface SalesforceSummaryUpdateMeta {\n  type: SalesforceSummaryMetaType;\n  id: string; // account id\n  email: string; // email address associated with lead or contact\n  name: string;\n  value: any;\n}\n\nexport const {\n  type: SALESFORCE_SUMMARY_UPDATE,\n  action: salesforceSummaryUpdate,\n  reducer: salesforceSummaryUpdateReducer,\n} = create<SalesforceSummaryUpdateMeta, SObject>('SALESFORCE_SUMMARY_UPDATE', {\n  success: (state, meta, payload) => {\n    // don't update state if have no SFDC data for email\n    const email = meta.email;\n    if (!state.salesforce.summaries[email] || !state.salesforce.summaries[email].data) {\n      return state;\n    }\n\n    return update(state, {\n      salesforce: {\n        summaries: {\n          [email]: {\n            data: {\n              [meta.type]: {\n                $set: payload,\n              },\n            },\n          },\n        },\n      },\n    });\n  },\n});\n\nexport const {\n  type: SALESFORCE_SCHEMA_GET,\n  action: salesforceSchemaGet,\n  reducer: salesforceSchemaGetReducer,\n} = create<SObjectType, SObjectSchema>('SALESFORCE_SCHEMA_GET', {\n  success: (state, meta, payload) => update(state, {\n    salesforce: {\n      schemas: {\n        [meta]: {\n          $set: payload,\n        },\n      },\n    },\n  }),\n});\n\nexport const {\n  type: SALESFORCE_LEAD_CONVERT,\n  action: salesforceLeadConvert,\n  reducer: salesforceLeadConvertReducer,\n} = create<string, SalesforceSummary>('SALESFORCE_LEAD_CONVERT', {\n  success: (state, meta, payload) => update(state, {\n    salesforce: {\n      summaries: {\n        [meta]: {\n          $set: resourceOk(payload),\n        },\n      },\n    },\n  }),\n});\n\nexport interface SalesforceTaskCreateMeta {\n  Email: string;\n\n  WhoId: string;\n  Subject: string;\n  Description?: string;\n  ActivityDate?: Date;\n  Status: SalesforceTaskStatus;\n}\n\nexport const {\n  type: SALESFORCE_TASK_CREATE,\n  action: salesforceTaskCreate,\n  reducer: salesforceTaskCreateReducer,\n} = create<SalesforceTaskCreateMeta, SObject>('SALESFORCE_TASK_CREATE', {\n  success: (state, meta, payload) => {\n    // don't update state if data for email is not on SF state\n    const email = meta.Email;\n    if (!state.salesforce.summaries[email] || !state.salesforce.summaries[email].data) {\n      return state;\n    }\n\n    // update state\n    const taskType = meta.Status === SalesforceTaskStatus.Completed ? 'activityHistory' : 'tasks';\n    return update(state, {\n      salesforce: {\n        summaries: {\n          [email]: {\n            data: {\n              [taskType]: {\n                $unshift: [payload],\n              },\n            },\n          },\n        },\n      },\n    });\n  },\n});\n\nexport const selectSalesforceTasks = createSelector<string, SObject[], SObject[]>(\n  [\n    (state, email) => {\n      const summary = state.salesforce.summaries[email];\n      if (summary && summary.data) {\n        return summary.data.tasks;\n      }\n      return [];\n    },\n  ],\n  (tasks: SObject[]) => tasks.sort((a, b) => {\n    let dueDateA = a.fields.filter(f => f.name === 'ActivityDate').map(f => f.value)[0];\n    let dueDateB = b.fields.filter(f => f.name === 'ActivityDate').map(f => f.value)[0];\n\n    let createdA = a.fields.filter(f => f.name === 'CreatedDate').map(f => f.value)[0];\n    let createdB = b.fields.filter(f => f.name === 'CreatedDate').map(f => f.value)[0];\n\n    if (dueDateA === '') {\n      dueDateA = undefined;\n    }\n    if (dueDateB === '') {\n      dueDateB = undefined;\n    }\n    if (createdA === '') {\n      createdA = undefined;\n    }\n    if (createdB === '') {\n      createdB = undefined;\n    }\n\n    if (!dueDateA && !dueDateB) {\n      return moment(createdA).isAfter(createdB) ? -1 : 1;\n    }\n    if (!dueDateB && dueDateA) {\n      return -1;\n    }\n    if (dueDateB && !dueDateA) {\n      return 1;\n    }\n\n    if (moment(dueDateA).isSame(dueDateB, 'day')) {\n      return moment(createdA).isAfter(createdB) ? 1 : -1;\n    }\n\n    return moment(dueDateA).isAfter(dueDateB) ? 1 : -1;\n  }),\n  undefined,\n  ['salesforce'],\n);\n\nexport default [\n  salesforceListViewReducer,\n  salesforceContactListReducer,\n  salesforceLeadsListReducer,\n  salesforceSummaryFetchReducer,\n  salesforceSummaryCreateReducer,\n  salesforceSummaryUpdateReducer,\n  salesforceLeadConvertReducer,\n  salesforceTaskCreateReducer,\n  salesforceSchemaGetReducer,\n  salesforcePendingUpdateReducer,\n  salesforcePendingClearReducer,\n];\n"]}]}