{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/salesforce.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/salesforce.ts","mtime":1675280254057},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/salesforce.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/salesforce.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs';\nimport { Epic } from 'redux-observable';\n\nimport { ActionStatus, Action, StoreState } from '@src/types';\n\nimport { Deps } from '@src/lib/epic';\n\nimport {\n  SALESFORCE_SUMMARY_FETCH, salesforceSummaryFetch,\n  SALESFORCE_SUMMARY_CREATE, SalesforceSummaryCreateMeta,\n  SalesforceSummaryMetaType, salesforceSummaryCreate,\n  SALESFORCE_TASK_CREATE, salesforceTaskCreate, SalesforceTaskCreateMeta,\n  SALESFORCE_LEAD_CONVERT, salesforceLeadConvert,\n  SALESFORCE_SUMMARY_UPDATE, SalesforceSummaryUpdateMeta, salesforceSummaryUpdate,\n  SALESFORCE_LISTVIEW,\n  salesforceListView,\n  SALESFORCE_CONTACT_LIST,\n  salesforceContactList,\n  salesforceLeadsList,\n  SALESFORCE_LEADS_LIST,\n  salesforceSchemaGet,\n  SALESFORCE_SCHEMA_GET,\n  salesforcePendingClear,\n} from '@src/ducks/salesforce';\n\nimport {\n  SFDCListView,\n  SObject,\n  SObjectType,\n  SalesforceSummary,\n  SObjectSchema,\n} from '@src/types/salesforce';\nimport { toastSet } from '@src/ducks/toasts';\nimport { SalesforceAPI } from '@src/api/salesforce';\n\nconst fetchSummary: Epic<Action<string, SalesforceSummary>, StoreState, Deps>\n  = (action$, store, deps) =>\n    action$.ofType(SALESFORCE_SUMMARY_FETCH)\n      .filter(action => action.status === ActionStatus.Start)\n      .flatMap(action =>\n        deps.salesforce.get(action.meta)\n          .map(result => salesforceSummaryFetch(action.meta, result))\n          .catch((e: Error) => Observable.of(salesforceSummaryFetch(action.meta, e))),\n      );\n\nconst createSummary: Epic<\n  Action<SalesforceSummaryCreateMeta, SalesforceSummary|null>, StoreState, Deps\n> = (action$, store, deps) =>\n    action$.ofType(SALESFORCE_SUMMARY_CREATE)\n      .filter(action => action.status === ActionStatus.Start)\n      .flatMap((action) => {\n        switch (action.meta.type) {\n          case SalesforceSummaryMetaType.Contact:\n            return deps.salesforce.createContact(action.meta)\n              .flatMap(result =>\n                Observable.merge(\n                  Observable.of(salesforceSummaryCreate(action.meta, result)),\n                  Observable.of(salesforcePendingClear(action.meta)),\n                ))\n              .catch((e: Error) => Observable.of(salesforceSummaryCreate(action.meta, e)));\n          case SalesforceSummaryMetaType.Lead:\n            return deps.salesforce.createLead(action.meta)\n              .flatMap(result =>\n                Observable.merge(\n                  Observable.of(salesforceSummaryCreate(action.meta, result)),\n                  Observable.of(salesforcePendingClear(action.meta)),\n                ))\n              .catch((e: Error) => Observable.of(salesforceSummaryCreate(action.meta, e)));\n          default:\n            return Observable.of(salesforceSummaryCreate(\n                action.meta,\n                new Error('Unknown Salesforce Type: ' + action.meta.type,\n            )));\n        }\n      });\n\nconst createTask: Epic<Action<SalesforceTaskCreateMeta|Error|null, SObject|null>, StoreState, Deps>\n    = (action$, store, deps) =>\n      action$.ofType(SALESFORCE_TASK_CREATE)\n        .filter(action => action.status === ActionStatus.Start)\n        .flatMap((action: Action<SalesforceTaskCreateMeta, SObject>) =>\n          deps.salesforce.createTask(action.meta)\n            .map(result => salesforceTaskCreate(action.meta, result))\n            .catch((e: Error) => Observable.of(toastSet(e))),\n        );\n\nconst leadConvert: Epic<Action<string|Error|null, SalesforceSummary|null>, StoreState, Deps>\n  = (action$, store, deps) =>\n    action$.ofType(SALESFORCE_LEAD_CONVERT)\n      .filter(action => action.status === ActionStatus.Start)\n      .flatMap((action: Action<string, SalesforceSummary>) =>\n        deps.salesforce.convertLeadToContact(action.meta)\n          .map(result => salesforceLeadConvert(action.meta, result))\n          .catch((e: Error) => Observable.of(toastSet(e))),\n      );\n\nconst updateFieldRequest = (\n  api: SalesforceAPI, meta: SalesforceSummaryUpdateMeta,\n): Observable<SObject> => {\n  switch (meta.type) {\n    case SalesforceSummaryMetaType.Account:\n      return api.updateAccount(meta.id, meta.name, meta.value);\n\n    case SalesforceSummaryMetaType.Contact:\n      return api.updateContact(meta.email, meta.name, meta.value);\n\n    case SalesforceSummaryMetaType.Lead:\n      return api.updateLead(meta.email, meta.name, meta.value);\n\n    default:\n      throw new Error(`unknown field type: ${meta.type}`);\n  }\n};\n\nconst updateSummary: Epic<\n  Action<SalesforceSummaryUpdateMeta|Error|null, SObject|null>, StoreState, Deps\n> = (action$, store, deps) =>\n  action$.ofType(SALESFORCE_SUMMARY_UPDATE)\n    .filter(action => action.status === ActionStatus.Start)\n    .flatMap((action: Action <SalesforceSummaryUpdateMeta, SObject>) =>\n      updateFieldRequest(deps.salesforce, action.meta)\n        .map(object => salesforceSummaryUpdate(action.meta, object))\n        .catch(e => Observable.of(toastSet(e))),\n    );\n\nconst listView: Epic<Action<SObjectType, SFDCListView[]>, StoreState, Deps>\n  = (action$, store, deps) =>\n    action$.ofType(SALESFORCE_LISTVIEW)\n      .filter(action => action.status === ActionStatus.Start)\n      .flatMap(action =>\n        deps.salesforce.listViews(action.meta)\n          .map(result => salesforceListView(action.meta, result))\n          .catch((e: Error) => Observable.of(salesforceListView(action.meta, e))),\n    );\n\nconst contactList: Epic<Action<string|Error|null, SObject[]|null>, StoreState, Deps>\n  = (action$, store, deps) =>\n    action$.ofType(SALESFORCE_CONTACT_LIST)\n      .filter(action => action.status === ActionStatus.Start)\n      .flatMap((action: Action<string, SObject[]>) =>\n        deps.salesforce.contacts(action.meta)\n          .map(result => salesforceContactList(action.meta, result))\n          .catch((e: Error) => Observable.merge(\n            Observable.of(toastSet(e)),\n            Observable.of(salesforceContactList(action.meta, e)),\n          )),\n      );\n\nconst leadsList: Epic<Action<string|Error|null, SObject[]|null>, StoreState, Deps>\n  = (action$, store, deps) =>\n    action$.ofType(SALESFORCE_LEADS_LIST)\n      .filter(action => action.status === ActionStatus.Start)\n      .flatMap((action: Action<string, SObject[]>) =>\n        deps.salesforce.leads(action.meta)\n          .map(result => salesforceLeadsList(action.meta, result))\n          .catch((e: Error) => Observable.merge(\n            Observable.of(toastSet(e)),\n            Observable.of(salesforceLeadsList(action.meta, e)),\n          )),\n    );\n\nexport const getSchemas: Epic<Action<\n  SObjectType|Error|null, SObjectSchema|null\n  >, StoreState, Deps>\n  = (action$, store, deps) =>\n    action$.ofType(SALESFORCE_SCHEMA_GET)\n      .filter(action => action.status === ActionStatus.Start)\n      .flatMap((action: Action<SObjectType, SObjectSchema>) =>\n        deps.salesforce.getSchema(action.meta)\n          .map(result => salesforceSchemaGet(action.meta, {\n            fields: result.filter(field => field.creatable),\n          }))\n          .catch((e: Error) => Observable.merge(\n            Observable.of(toastSet(e)),\n            Observable.of(salesforceSchemaGet(action.meta, e)),\n          )),\n    );\n\nexport default [\n  fetchSummary,\n  createSummary,\n  updateSummary,\n  createTask,\n  leadConvert,\n  listView,\n  contactList,\n  leadsList,\n  getSchemas,\n];\n"]}]}