{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Login/index.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Login/index.ts","mtime":1675280254081},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IExvZ2luIGZyb20gJy4vTG9naW4nOwppbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnOwppbXBvcnQgeyBhdXRoTG9naW4sIGF1dGhQYXNzd29yZFJlc2V0LCBhdXRoR2V0TG9naW5Ub2tlbiB9IGZyb20gJy4uLy4uL2R1Y2tzL2F1dGgnOwppbXBvcnQgeyBzZWxlY3RBY2NvdW50cyB9IGZyb20gJ0BzcmMvZHVja3MvYWNjb3VudHMnOwppbXBvcnQgeyB0b2FzdFNldCB9IGZyb20gJ0BzcmMvZHVja3MvdG9hc3RzJzsKaW1wb3J0IHsgYXV0aE9BdXRoTG9naW4gfSBmcm9tICdAc3JjL2R1Y2tzL2F1dGgnOwppbXBvcnQgeyBhcHBVbnN1YnNjcmliZXJTZXQgfSBmcm9tICdAc3JjL2R1Y2tzL2FwcCc7CnZhciBtYXBTdGF0ZVRvUHJvcHMgPSBmdW5jdGlvbiAoc3RhdGUpIHsgcmV0dXJuICh7CiAgICBsb2dnZWRJbjogc3RhdGUubG9nZ2VkSW4sCiAgICBhY2NvdW50czogc2VsZWN0QWNjb3VudHMoc3RhdGUpLAogICAgbG9hZGluZzogc3RhdGUuYXV0aFBlbmRpbmcgfHwgZmFsc2UsCiAgICBuZWVkc1RmYTogc3RhdGUudGZhTmVlZGVkLAp9KTsgfTsKdmFyIG1hcERpc3BhdGNoVG9Qcm9wcyA9IGZ1bmN0aW9uIChkaXNwYXRjaCkgeyByZXR1cm4gKHsKICAgIGxvZ2luOiBmdW5jdGlvbiAoZW1haWwsIHBhc3N3b3JkLCB0eXBlKSB7CiAgICAgICAgcmV0dXJuIGRpc3BhdGNoKGF1dGhMb2dpbih7IGVtYWlsOiBlbWFpbCwgcGFzc3dvcmQ6IHBhc3N3b3JkLCB0eXBlOiB0eXBlIH0pKTsKICAgIH0sCiAgICByZXNldFBhc3N3b3JkOiBmdW5jdGlvbiAoZW1haWwpIHsgcmV0dXJuIGRpc3BhdGNoKGF1dGhQYXNzd29yZFJlc2V0KGVtYWlsKSk7IH0sCiAgICBzZXRUb2FzdDogZnVuY3Rpb24gKGVycm9yKSB7IHJldHVybiBkaXNwYXRjaCh0b2FzdFNldChlcnJvcikpOyB9LAogICAgbG9naW5PQXV0aDogZnVuY3Rpb24gKG1ldGEpIHsgcmV0dXJuIGRpc3BhdGNoKGF1dGhPQXV0aExvZ2luKG1ldGEpKTsgfSwKICAgIHNldFVuc3Vic2NyaWJlclNpZ251cDogZnVuY3Rpb24gKG0pIHsgcmV0dXJuIGRpc3BhdGNoKGFwcFVuc3Vic2NyaWJlclNldChtKSk7IH0sCiAgICBnZXRMb2dpblRva2VuOiBmdW5jdGlvbiAoKSB7IHJldHVybiBkaXNwYXRjaChhdXRoR2V0TG9naW5Ub2tlbihudWxsKSk7IH0sCn0pOyB9OwpleHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShMb2dpbik7Cg=="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Login/index.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Login/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAA+B,MAAM,SAAS,CAAC;AACtD,OAAO,EAAE,OAAO,EAAY,MAAM,aAAa,CAAC;AAGhD,OAAO,EAAE,SAAS,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,MAAM,kBAAkB,CAAC;AACnF,OAAO,EAAE,cAAc,EAAE,MAAM,qBAAqB,CAAC;AAErD,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAC7C,OAAO,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC;AACjD,OAAO,EAAE,kBAAkB,EAAE,MAAM,gBAAgB,CAAC;AAEpD,IAAM,eAAe,GAAG,UAAC,KAAiB,IAAY,OAAA,CAAC;IACrD,QAAQ,EAAE,KAAK,CAAC,QAAQ;IACxB,QAAQ,EAAE,cAAc,CAAC,KAAK,CAAC;IAC/B,OAAO,EAAE,KAAK,CAAC,WAAW,IAAI,KAAK;IACnC,QAAQ,EAAE,KAAK,CAAC,SAAS;CAC1B,CAAC,EALoD,CAKpD,CAAC;AAEH,IAAM,kBAAkB,GAAG,UAAC,QAAuB,IAAoB,OAAA,CAAC;IACtE,KAAK,EAAE,UAAC,KAAa,EAAE,QAAgB,EAAE,IAAe;QACtD,OAAA,QAAQ,CAAC,SAAS,CAAC,EAAE,KAAK,OAAA,EAAE,QAAQ,UAAA,EAAE,IAAI,MAAA,EAAE,CAAC,CAAC;IAA9C,CAA8C;IAChD,aAAa,EAAE,UAAC,KAAa,IAAK,OAAA,QAAQ,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,EAAlC,CAAkC;IACpE,QAAQ,EAAE,UAAC,KAAY,IAAK,OAAA,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAzB,CAAyB;IACrD,UAAU,EAAE,UAAA,IAAI,IAAI,OAAA,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,EAA9B,CAA8B;IAClD,qBAAqB,EAAE,UAAC,CAAU,IAAK,OAAA,QAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,EAA/B,CAA+B;IACtE,aAAa,EAAE,cAAM,OAAA,QAAQ,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,EAAjC,CAAiC;CACvD,CAAC,EARqE,CAQrE,CAAC;AAEH,eAAe,OAAO,CAAC,eAAe,EAAE,kBAAkB,CAAC,CAAC,KAAK,CAAC,CAAC","sourcesContent":["import Login, { Props, DispatchProps } from './Login';\nimport { connect, Dispatch } from 'react-redux';\n\nimport { StoreState } from '@src/types';\nimport { authLogin, authPasswordReset, authGetLoginToken } from '../../ducks/auth';\nimport { selectAccounts } from '@src/ducks/accounts';\nimport { LoginType } from '@src/api/auth';\nimport { toastSet } from '@src/ducks/toasts';\nimport { authOAuthLogin } from '@src/ducks/auth';\nimport { appUnsubscriberSet } from '@src/ducks/app';\n\nconst mapStateToProps = (state: StoreState): Props => ({\n  loggedIn: state.loggedIn,\n  accounts: selectAccounts(state),\n  loading: state.authPending || false,\n  needsTfa: state.tfaNeeded,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>): DispatchProps => ({\n  login: (email: string, password: string, type: LoginType) =>\n    dispatch(authLogin({ email, password, type })),\n  resetPassword: (email: string) => dispatch(authPasswordReset(email)),\n  setToast: (error: Error) => dispatch(toastSet(error)),\n  loginOAuth: meta => dispatch(authOAuthLogin(meta)),\n  setUnsubscriberSignup: (m: boolean) => dispatch(appUnsubscriberSet(m)),\n  getLoginToken: () => dispatch(authGetLoginToken(null)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n"]}]}