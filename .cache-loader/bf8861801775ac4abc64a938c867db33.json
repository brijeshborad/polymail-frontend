{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/drafts.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/drafts.ts","mtime":1675280254048},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/drafts.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/drafts.ts"],"names":[],"mappings":"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","sourcesContent":["import { createSelector } from '@src/lib/selector';\nimport { orderBy, keyBy, filter, forIn, last, values, compact, findIndex, uniqBy } from 'lodash';\nimport update from 'immutability-helper';\n\nimport { create, createAction } from '@src/lib/redux';\nimport {\n  toMessage, toMessageBody,\n  Configuration, toThread,\n  isDraftSending, isDraftOutbox,\n} from '@src/lib/draft';\n\nimport { resourcePending, resourceOk, resourceFailed } from '@src/lib/resource';\nimport {\n  Resource,\n  ResourceStatus,\n  Draft,\n  DraftStatus,\n  StoreState,\n  AttachmentMeta,\n  Attachment,\n  Message,\n  MessageBody,\n  Account,\n  Template,\n  TimeBlock,\n} from '@src/types';\nimport { fnv1a32 } from '@src/lib/crypt';\n\nfunction createNesting(state: StoreState, draft: string): StoreState {\n  if (state.drafts[draft]) {\n    return state;\n  }\n\n  return update(state, {\n    drafts: {\n      [draft]: {\n        $set: resourcePending(),\n      },\n    },\n  });\n}\n\nfunction createMetaNesting(state: StoreState, draft: string): StoreState {\n  if (state.attachmentMetas[draft]) {\n    return state;\n  }\n\n  return update(state, {\n    attachmentMetas: {\n      [draft]: {\n        $set: {},\n      },\n    },\n  });\n}\n\nexport const {\n  type: DRAFT_SELECT,\n  action: draftSelect,\n  reducer: draftSelectReducer,\n} = create<\n  string,\n  string | null\n>('DRAFT_SELECT', {\n  success: (state, meta, payload) =>\n    update(state, {\n      selectedDraft: { $set: payload === null ? undefined : payload },\n    }),\n});\n\nexport const {\n  type: DRAFT_FETCH,\n  action: draftFetch,\n  reducer: draftFetchReducer,\n} = create<\n  string,\n  Draft\n>('DRAFT_FETCH', {\n  start: (state, meta) =>\n    !(state.drafts[meta] && state.drafts[meta].data)\n      ? update(createNesting(state, meta), {\n        drafts: {\n          [meta]: {\n            status: {\n              $set: ResourceStatus.Loading,\n            },\n          },\n        },\n      })\n      : state,\n\n  success: (state, meta, payload) =>\n    update(createNesting(state, meta), {\n      drafts: {\n        [meta]: {\n          status: {\n            $set: ResourceStatus.Ok,\n          },\n          data: {\n            $set: payload,\n          },\n        },\n      },\n    }),\n\n  failure: (state, meta, error) =>\n    update(createNesting(state, meta), {\n      drafts: {\n        [meta]: {\n          status: {\n            $set: ResourceStatus.Failure,\n          },\n          error: {\n            $set: error,\n          },\n        },\n      },\n    }),\n});\n\nexport const {\n  type: DRAFT_LIST,\n  action: draftList,\n  reducer: draftListReducer,\n} = create<\n  string,\n  Draft[]\n>('DRAFT_LIST', {\n  success: (state, meta, payload) => {\n    // handle no drafts found\n    if (payload.length === 0) {\n      return state;\n    }\n\n    // make updates object\n    const updates = payload.map(draft => ({\n      $set: {\n        status: ResourceStatus.Ok,\n        data: draft,\n      },\n    }));\n\n    // update state\n    return update(state, {\n      drafts: keyBy(updates, eachUpdate => eachUpdate.$set.data.id),\n    });\n  },\n});\n\n// TODO(SHIN): Figure out error cases for optimistic patches\n// TODO(SHIN): Create separate action/epic for updating draft with\n// template that takes care of attachments\nexport const {\n  type: DRAFT_UPDATE,\n  action: draftUpdate,\n  reducer: draftUpdateReducer,\n} = create<\n  Draft,\n  Draft\n>('DRAFT_UPDATE', {\n  start: (state, meta) =>\n    update(createNesting(state, meta.id), {\n      drafts: {\n        [meta.id]: {\n          data: {\n            $set: meta,\n          },\n        },\n      },\n    }),\n  success: (state, meta, payload) => {\n    // Handle special case for regeneration\n    const selectedThread = state.selectedThread;\n    const optimisticKey = `<${payload.id}@polymail.io>`;\n    const threadMatches = selectedThread &&\n      [optimisticKey, payload.threadV2].indexOf(selectedThread.id) > -1;\n    const shouldUpdate = threadMatches && isDraftSending(payload) && payload.attachments.length;\n    if (shouldUpdate && selectedThread) {\n      const optimistic = toMessage(payload, state.accounts);\n      const updatedMessages = uniqBy([optimistic].concat(selectedThread.messages), 'rfcId');\n      return update(createNesting(state, meta.id), {\n        drafts: {\n          [meta.id]: {\n            data: { $set: payload },\n            status: { $set: ResourceStatus.Ok },\n          },\n        },\n        selectedThread: {\n          messages: { $set: updatedMessages },\n        },\n      });\n    }\n\n    return update(createNesting(state, meta.id), {\n      drafts: {\n        [meta.id]: {\n          data: { $set: payload },\n          status: { $set: ResourceStatus.Ok },\n        },\n      },\n    });\n  },\n});\n\n// HACK(SHIN): Immediately deselects thread & ids on new-draft creation to prevent intermediate\n// state where a reply/no message selection shows up.\nexport const {\n  type: DRAFT_CREATE,\n  action: draftCreate,\n  reducer: draftCreateReducer,\n} = create<\n  Draft,\n  Draft\n>('DRAFT_CREATE', {\n  start: (state, meta) => {\n    return update(state, {\n      drafts: {\n        $merge: { [meta.id]: resourceOk(meta) },\n      },\n      selectedDraft: { $set: meta.id },\n      selectedThread: { $set: !!meta.threadV2 ? state.selectedThread : undefined },\n      selectedIds: { $set: !!meta.threadV2 ? state.selectedIds : new Map() },\n    });\n  },\n});\n\nexport interface DraftConfigurationMeta {\n  configuration: Configuration;\n  body?: MessageBody;\n  recipients?: string[];\n}\n\nexport const DRAFT_CREATE_CONFIGURATION = 'DRAFT_CREATE_CONFIGURATION';\nexport const draftCreateConfiguration = createAction<\n  DraftConfigurationMeta | Configuration,\n  undefined\n>(DRAFT_CREATE_CONFIGURATION);\n\n// Broadcast actions used to route success cases through workers\nexport const DRAFT_SEND_BROADCAST = 'DRAFT_SEND_BROADCAST';\nexport const draftSendBroadcast = createAction<DraftSendMeta, null>(DRAFT_SEND_BROADCAST);\n\nexport const DRAFT_UPDATE_BROADCAST = 'DRAFT_UPDATE_BROADCAST';\nexport const draftUpdateBroadcast = createAction<Draft, null>(DRAFT_UPDATE_BROADCAST);\n\nexport interface DraftSendMeta {\n  draft: Draft;\n  toggleArchive: boolean;\n  scheduled?: Date;\n  delay?: number;\n  version?: number;\n}\n\nexport interface DraftSendOptimisticMeta {\n  meta: DraftSendMeta;\n  deletedAttachments: AttachmentMeta[];\n}\n\n// TODO(SHIN): Figure out error cases for optimistic patches\n// TODO(SHIN): Update selectedDraft to be cleared on location change for thread\nexport const {\n  type: DRAFT_SEND,\n  action: draftSend,\n  reducer: draftSendReducer,\n} = create<\n  DraftSendMeta,\n  Draft\n>('DRAFT_SEND', {\n  start: (state, meta) => {\n    return update(state, {\n      drafts: {\n        [meta.draft.id]: {\n          incrementCount: {\n            $set: 0,\n          },\n        },\n      },\n    });\n  },\n  success: (state, meta, payload) => {\n    const isScheduled = payload.status === DraftStatus.Scheduled;\n    // HACK(SHIN): We always insert optimistic thread into mailboxThreads since the optimistic\n    // thread needs to be queryable via state selector & since it gets filtered out of DataSource\n    const insertOptimistic = state.mailboxThreads.data && !meta.draft.threadV2 && !isScheduled;\n    const updateMailboxThread = insertOptimistic && {\n      mailboxThreads: {\n        data: {\n          $push: [toThread(meta.draft, state.accounts)],\n        },\n      },\n    } || {};\n\n    let toggleArchiveCount = 0;\n    if (meta.toggleArchive) {\n      toggleArchiveCount = toggleArchiveCount + 1;\n    }\n    if (state.preferences.sendAndArchive) {\n      toggleArchiveCount = toggleArchiveCount + 1;\n    }\n    const shouldArchive = toggleArchiveCount % 2 !== 0;\n    // const optimisticKey = `<${payload.id}@polymail.io>`;\n    const newDraftMatches = !payload.threadV2 &&\n      payload.id === state.selectedDraft;\n\n    const draftResource = state.drafts[meta.draft.id];\n    const incrementCount = draftResource && draftResource.incrementCount || 0;\n\n    return update(state, {\n      drafts: {\n        [meta.draft.id]: {\n          data: {\n            $set: payload,\n          },\n          incrementCount: {\n            $set: incrementCount + 1,\n          },\n        },\n      },\n      selectedThread: {\n        $set:\n          newDraftMatches && !isScheduled && !state.selectedThread && !shouldArchive\n            ? toThread(payload, state.accounts)\n            : state.selectedThread,\n      },\n      ...updateMailboxThread,\n    });\n  },\n  failure: (state, meta, error) => {\n    // Handle error setting\n    let errorMessage = error.message;\n    const errorsObject = (error as any).errors;\n    const errors = errorsObject && values(errorsObject);\n    if (errors && !!errors.length) {\n      const message = errors[0];\n      if (message && typeof message === 'string')  {\n        errorMessage = message;\n      }\n    }\n\n    // Do not process error if we do not have a matching draft on state\n    const stateDraft = state.drafts[meta.draft.id];\n    if (!stateDraft || !stateDraft.data) {\n      return state;\n    }\n\n    // Deselect selected thread if match\n    const selectedThreadId = state.selectedThread && state.selectedThread.id;\n    const optimisticKey = `<${meta.draft.id}@polymail.io>`;\n    const threadIdMatches = !meta.draft.threadV2 && optimisticKey === selectedThreadId;\n\n    return update(state, {\n      drafts: {\n        [meta.draft.id]: {\n          data: {\n            error: {\n              $set: errorMessage,\n            },\n          },\n        },\n      },\n      selectedThread: {\n        $set: threadIdMatches ? undefined : state.selectedThread,\n      },\n    });\n  },\n});\n\nexport const {\n  type: DRAFT_SEND_NOW,\n  action: draftSendNow,\n  reducer: draftSendNowReducer,\n} = create<Draft, Draft>('DRAFT_SEND_NOW', {\n  success: (state, meta, payload) => update(state, {\n    drafts: {\n      [payload.id]: {\n        data: {\n          $set: payload,\n        },\n      },\n    },\n  }),\n});\n\n// Sets draft back to payload on success. Reset selections when necessary\nexport const {\n  type: DRAFT_SEND_UNDO,\n  action: draftSendUndo,\n  reducer: draftSendUndoReducer,\n} = create<Draft, Draft>('DRAFT_SEND_UNDO', {\n  start: (state, meta) => {\n    return update(state, {\n      selectedIds: { $set: new Map() },\n    });\n  },\n  success: (state, meta, payload) => {\n    const optimisticKey = `<${meta.id}@polymail.io>`;\n    const optimisticThreadIndex = !meta.threadV2 && state.mailboxThreads.data &&\n      findIndex(state.mailboxThreads.data, { id: optimisticKey });\n    const optimisticUpdate = typeof optimisticThreadIndex === 'number' &&\n      optimisticThreadIndex > -1 && {\n        mailboxThreads: {\n          data: {\n            $splice: [[optimisticThreadIndex, 1]],\n          },\n        },\n      } || {};\n    const oldMessageBodies = meta.threadV2 && state.messageBodies[meta.threadV2] &&\n      state.messageBodies[meta.threadV2].data;\n    const messageBodyUpdate = meta.threadV2 && oldMessageBodies && {\n      messageBodies: {\n        [meta.threadV2]: {\n          data: {\n            $set: oldMessageBodies.filter(body => body.id !== optimisticKey),\n          },\n        },\n      },\n    } || {};\n\n    return update(state, {\n      selectedDraft: { $set: !payload.threadV2 ? payload.id : state.selectedDraft },\n      selectedThread: { $set: !payload.threadV2 ? undefined : state.selectedThread },\n      drafts: {\n        [meta.id]: {\n          data: {\n            $set: payload,\n          },\n          incrementCount: { $set: 0 },\n        },\n      },\n      messageBodies: {\n        $unset: [optimisticKey],\n      },\n      ...optimisticUpdate,\n      ...messageBodyUpdate,\n    });\n  },\n});\n\n// TODO(SHIN): Figure out error cases for optimistic patches\n// TODO(SHIN): Fix unset\nexport const {\n  type: DRAFT_DELETE,\n  action: draftDelete,\n  reducer: draftDeleteReducer,\n} = create<string, string>('DRAFT_DELETE', {\n  success: (state, meta, payload) => {\n    return update(state, {\n      selectedDraft: {\n        $set: state.selectedDraft && state.selectedDraft === payload\n          ? undefined\n          : state.selectedDraft,\n      },\n      drafts: {\n        $unset: [(payload && payload) || meta],\n      },\n      attachmentMetas: {\n        $unset: [meta],\n      },\n      // fix bug with contact support reopening when replying with hotkey\n      // https://polymail.atlassian.net/browse/PM-264\n      contactSupportPopup: {\n        collapsed: {\n          $set: true,\n        },\n      },\n    });\n  },\n});\n\n// Apply template\nexport const {\n  type: DRAFT_TEMPLATE_APPLY,\n  action: draftTemplateApply,\n  reducer: draftTemplateApplyReducer,\n} = create<Template, Draft>('DRAFT_TEMPLATE_APPLY', {\n  success: (state, meta, payload) => {\n    return state;\n  },\n});\n\nexport const {\n  type: DRAFT_ATTTACHMENTS_APPEND,\n  action: draftAttachmentsAppend,\n  reducer: draftAttachmentsAppendReducer,\n} = create<AttachmentMeta, AttachmentMeta>('DRAFT_ATTACHMENTS_APPEND', {\n  start: (state, meta) => {\n    return update(createMetaNesting(state, meta.resourceId), {\n      attachmentMetas: {\n        [meta.resourceId]: {\n          $merge: {\n            [meta.attachment]: resourceOk(meta),\n          },\n        },\n      },\n    });\n  },\n});\n\nexport const {\n  type: DRAFT_CALENDAR_INVITE_ADD,\n  action: draftCalendarInviteAdd,\n  reducer: draftCalendarInviteAddReducer,\n} = create<TimeBlock, TimeBlock>('DRAFT_CALENDAR_INVITE_ADD', {\n  success: (state, meta, payload) => {\n    const draft =\n      state.selectedDraft ||\n      (state.selectedThread && selectDraftForThread(state, state.selectedThread.id).data.id);\n\n    if (!draft) {\n      return state;\n    }\n\n    return update(state, {\n      drafts: {\n        [draft]: {\n          data: {\n            $set: {\n              ...state.drafts[draft].data,\n              calendarInvite: {\n                name: meta.event.name,\n                start: meta.startTime.toDate(),\n                end: meta.endTime.toDate(),\n                recipients: meta.event.recipients.map(r => r.identifier),\n                notes: meta.event.notes,\n                location: meta.event.location,\n              },\n            },\n          },\n        },\n      },\n    });\n  },\n});\n\nexport const {\n  type: DRAFT_ATTACHMENT_ADD,\n  action: draftAttachmentAdd,\n  reducer: draftAttachmentAddReducer,\n} = create<AttachmentMeta, Attachment>('DRAFT_ATTACHMENT_ADD', {\n  start: (state, meta) => {\n    return update(createMetaNesting(state, meta.resourceId), {\n      attachmentMetas: { [meta.resourceId]: { $merge: { [meta.attachment]: resourceOk(meta) } } },\n    });\n  },\n  success: (state, meta, payload) => {\n\n    // Identify which attachmentMetas to clear. If forwareded metas, remove all on success\n    let unsetMetas = [meta.attachment];\n    const allMetas = state.attachmentMetas[meta.resourceId];\n    if (meta.thread) {\n      const appendMetas = compact(values(allMetas).map(m => m.data))\n        .filter(m => !!m.thread);\n      unsetMetas = appendMetas.map(m => m.attachment);\n    }\n\n    // Handle replacing attachemnt if already exists\n    const draft = state.drafts[meta.resourceId] && state.drafts[meta.resourceId].data;\n    const attachmentIndex = draft && draft.attachments &&\n      draft.attachments.findIndex(attachment => attachment.id === payload.id);\n    if (attachmentIndex !== undefined && attachmentIndex > -1) {\n      return update(createMetaNesting(state, meta.resourceId), {\n        drafts: {\n          [meta.resourceId]: {\n            data: { attachments: { [attachmentIndex]: { $set: payload } } },\n          },\n        },\n        attachmentMetas: { [meta.resourceId]: { $unset: unsetMetas } },\n      });\n    }\n\n    return update(createMetaNesting(state, meta.resourceId), {\n      drafts: {\n        [meta.resourceId]: {\n          data: { attachments: { $push: [payload] } },\n        },\n      },\n      attachmentMetas: { [meta.resourceId]: { $unset: unsetMetas } },\n    });\n  },\n  failure: (state, meta, error) => {\n    return update(createMetaNesting(state, meta.resourceId), {\n      attachmentMetas: {\n        [meta.resourceId]: {\n          [meta.attachment]: {\n            $set: resourceFailed(error, meta),\n          },\n        },\n      },\n    });\n  },\n});\n\nexport const {\n  type: ATTACHMENT_META_CREATE,\n  action: attachmentMetaCreate,\n  reducer: attachmentMetaCreateReducer,\n} = create<AttachmentMeta, AttachmentMeta>('ATTACHMENT_META_CREATE', {\n  start: (state, meta) => {\n    return update(createMetaNesting(state, meta.resourceId), {\n      attachmentMetas: { [meta.resourceId]: { $merge: { [meta.attachment]: resourceOk(meta) } } },\n    });\n  },\n  failure: (state, meta, err) => {\n    return update(createMetaNesting(state, meta.resourceId), {\n      attachmentMetas: {\n        [meta.resourceId]: { $merge: { [meta.attachment]: resourceFailed(err, meta) } },\n      },\n    });\n  },\n});\n\nexport const {\n  type: ATTACHMENT_META_HYDRATE,\n  action: attachmentMetaHydrate,\n  reducer: attachmentMetaHydrateReducer,\n} = create<AttachmentMeta, AttachmentMeta>('ATTACHMENT_META_HYDRATE', {\n  success: (state, meta, payload) => {\n    // Do not update if we do not have a corresponding meta\n    if (!state.attachmentMetas[payload.resourceId] ||\n      !state.attachmentMetas[payload.resourceId][payload.attachment]\n    ) {\n      return state;\n    }\n\n    return update(createMetaNesting(state, payload.resourceId), {\n      attachmentMetas: {\n        [payload.resourceId]: { $merge: { [payload.attachment]: resourceOk(meta) } },\n      },\n    });\n  },\n});\n\nexport const {\n  type: ATTACHMENT_META_UPDATE,\n  action: attachmentMetaUpdate,\n  reducer: attachmentMetaUpdateReducer,\n} = create<AttachmentMeta, AttachmentMeta>('ATTACHMENT_META_UPDATE', {\n  start: (state, meta) => {\n    // Do not update if we do not have a corresponding meta\n    if (!state.attachmentMetas[meta.resourceId] ||\n      !state.attachmentMetas[meta.resourceId][meta.attachment]\n    ) {\n      return state;\n    }\n\n    return update(createMetaNesting(state, meta.resourceId), {\n      attachmentMetas: { [meta.resourceId]: { $merge: { [meta.attachment]: resourceOk(meta) } } },\n    });\n  },\n});\n\n// TODO(SHIN): Connect to CommitSync?\nexport const {\n  type: DRAFT_ATTACHMENT_REMOVE,\n  action: draftAttachmentRemove,\n  reducer: draftAttachmentRemoveReducer,\n} = create<AttachmentMeta, null>('DRAFT_ATTACHMENT_REMOVE', {\n  success: (state, meta, payload) => {\n    const draft = selectDraft(state, meta.resourceId).data;\n    if (!draft) {\n      return state;\n    }\n\n    // Filter attachments\n    const newAttachments = draft.attachments.filter(\n      (attachment: Attachment) => attachment.id !== meta.attachment,\n    );\n\n    return update(createMetaNesting(state, meta.resourceId), {\n      drafts: {\n        [meta.resourceId]: {\n          data: { attachments: { $set: newAttachments } },\n        },\n      },\n      attachmentMetas: { [meta.resourceId]: { $unset: [meta.attachment] } },\n    });\n  },\n});\n\nexport interface DraftContactGroupMeta {\n  draft: Draft;\n  list: string;\n  contactGroup: string;\n}\n\nexport const DRAFT_CONTACT_GROUP_ADD = 'DRAFT_CONTACT_GROUP_ADD';\nexport const draftContactGroupAdd = createAction<DraftContactGroupMeta, undefined>(\n  DRAFT_CONTACT_GROUP_ADD,\n);\n\n// Selectors\nconst pendingResource = resourcePending<Draft>();\n\n// selectDraft returns a draft resource by id\nexport const selectSelectedDraft = createSelector<\n  undefined,\n  Resource<Draft> | undefined,\n  Resource<Draft>\n>(\n  [state => state.selectedDraft\n      ? selectDraft(state, state.selectedDraft)\n      : state.selectedThread && selectDraftForThread(state, state.selectedThread.id),\n  ],\n  (draft: Resource<Draft>) => {\n    if (draft) {\n      return draft;\n    }\n    return pendingResource;\n  },\n  undefined,\n  ['selectedDraft', 'selectedThread'],\n);\n\n// selectDraft returns a draft resource by id\nexport const selectDraft = createSelector<string, Resource<Draft> | undefined, Resource<Draft>>(\n  [(state, draft) => state.drafts[draft]],\n  (draft: Resource<Draft>) => {\n    if (draft) {\n      return draft;\n    }\n    return pendingResource;\n  },\n);\n\n// selectDraft returns a draft resource by id\n// TODO(SHIN): Figure out handling for scheduled draft selection for UI\nexport const selectDraftForThread = createSelector<\n  string | DraftStatus[] | undefined,\n  { [id: string]: Resource<Draft> },\n  Resource<Draft>\n>(\n  [(state, thread, statuses?) => state.drafts],\n  (drafts: { [id: string]: Resource<Draft> }, thread: string, statuses?: DraftStatus[]) => {\n    const draftId =\n      last(\n        Object.keys(drafts).filter((key) => {\n          const draft = drafts[key];\n\n          if (!(draft && draft.data)) {\n            return false;\n          }\n          if (draft.data.threadV2 !== thread) {\n            return false;\n          }\n          if (statuses) {\n            return statuses.indexOf(draft.data.status) >= 0;\n          }\n\n          return (\n            draft.data.status === DraftStatus.Draft || draft.data.status === DraftStatus.Scheduled\n            || draft.data.status === DraftStatus.Failed\n          );\n        }),\n      ) || '';\n    const draftResource = drafts[draftId];\n\n    return (draftResource && draftResource) || pendingResource;\n  },\n  (drafts: { [id: string]: Resource<Draft> }, thread: string, statuses?: DraftStatus[]) => {\n    return fnv1a32(thread + (statuses || []).join());\n  },\n);\n\nconst emptyMetas: Array<Resource<AttachmentMeta>> = [];\n\n// Returns you all attachment metas for a draft\nexport const selectAttachmentMetasForResource = createSelector<\n  string,\n  { [id: string]: Resource<AttachmentMeta> } | undefined,\n  Array<Resource<AttachmentMeta>>\n>(\n  [(state, resourceId) => state.attachmentMetas[resourceId]],\n  (metas: { [id: string]: Resource<AttachmentMeta> }, resourceId: string) => {\n    return metas && values(metas) || emptyMetas;\n  },\n  undefined,\n  ['attachmentMetas'],\n);\n\n// selectDrafts has all drafts that are status draft or failed\nexport const selectSendingDrafts = createSelector<\n  undefined,\n  { [id: string]: Resource<Draft> },\n  Draft[]\n>(\n  [state => state.drafts],\n  (drafts: { [id: string]: Resource<Draft> }) =>\n    orderBy(\n      filter(\n        drafts,\n        resource =>\n          resource.status === ResourceStatus.Ok &&\n          resource.data && isDraftSending(resource.data) || false,\n      ).map(resource => resource.data!),\n      ['cancelBy'],\n      ['asc'],\n  ),\n  undefined,\n  ['drafts'],\n);\n\n// selectDrafts has all drafts that are status draft or failed\nexport const selectDrafts = createSelector<undefined, { [id: string]: Resource<Draft> }, Draft[]>(\n  [state => state.drafts],\n  (drafts: { [id: string]: Resource<Draft> }) =>\n    orderBy(\n      filter(\n        drafts,\n        resource =>\n          resource.status === ResourceStatus.Ok &&\n          (resource.data!.status === DraftStatus.Draft ||\n            resource.data!.status === DraftStatus.Failed),\n      ).map(resource => resource.data!),\n      ['updated'],\n      ['desc'],\n    ),\n);\n\n// selectSendLater selects all drafts that have been scheduled\nexport const selectSendLaterDrafts = createSelector<\n  undefined,\n  { [id: string]: Resource<Draft> },\n  Draft[]\n>([state => state.drafts], (drafts: { [id: string]: Resource<Draft> }) =>\n  orderBy(\n    filter(\n      drafts,\n      resource =>\n        resource.status === ResourceStatus.Ok && resource.data!.status === DraftStatus.Scheduled,\n    ).map(resource => resource.data!),\n    ['scheduled'],\n    ['asc'],\n  ),\n);\n\n// selectOutboxDrafts selects all drafts that are sending/staged/failed\nexport const selectOutboxDrafts = createSelector<\n  undefined,\n  { [id: string]: Resource<Draft> },\n  Draft[]\n>([state => state.drafts], (drafts: { [id: string]: Resource<Draft> }) =>\n  orderBy(\n    filter(\n      drafts,\n      resource =>\n        resource.status === ResourceStatus.Ok && resource.data &&\n          isDraftOutbox(resource.data) || false,\n    ).map(resource => resource.data!),\n    ['updated'],\n    ['desc'],\n  ),\n);\n\n// selectOutboxDrafts selects all drafts that are sending/staged/failed\nexport const selectFailedDrafts = createSelector<\n  undefined,\n  { [id: string]: Resource<Draft> },\n  Draft[]\n>([state => state.drafts], (drafts: { [id: string]: Resource<Draft> }) =>\n  orderBy(\n    filter(\n      drafts,\n      resource =>\n        resource.status === ResourceStatus.Ok && resource.data &&\n          (resource.data.status === DraftStatus.Failed || !!resource.data.error)\n          || false,\n    ).map(resource => resource.data!),\n    ['updated'],\n    ['desc'],\n  ),\n);\n\n// selectDebugDrafts selects all drafts that are not status DraftStatus.Draft\nexport const selectDebugDrafts = createSelector<\n  undefined,\n  { [id: string]: Resource<Draft> },\n  Draft[]\n>([state => state.drafts], (drafts: { [id: string]: Resource<Draft> }) =>\n  orderBy(\n    filter(\n      drafts,\n      resource =>\n        resource.status === ResourceStatus.Ok && resource.data &&\n        resource.data?.status !== DraftStatus.Draft || false,\n    ).map(resource => resource.data!),\n    ['updated'],\n    ['desc'],\n  ),\n);\n// Returns draft for optimistic thread if exists\nexport const selectDraftForOptimisticThread = createSelector<\n  string,\n  { [id: string]: Resource<Draft> },\n  Draft|undefined>(\n    [(state, thread) => state.drafts],\n    (draftResources: { [id: string]: Resource<Draft> }, thread: string) => {\n      if (!thread.startsWith('<')) {\n        return undefined;\n      }\n\n      return compact(values(draftResources).map(draft => draft.data))\n        .find(draft => `<${draft.id}@polymail.io>` === thread);\n    },\n    (drafts: { [id: string]: Resource<Draft> }, thread: string) =>\n      fnv1a32(thread),\n    ['drafts'],\n);\n\n// selectDraft returns a draft resource by id\nexport const selectOptimisticMessagesForThread = createSelector<\n  string,\n  { [id: string]: Resource<Draft> } | Account[],\n  Message[]\n>(\n  [(state, thread) => state.drafts, (state, thread) => state.accounts],\n  (draftResources: { [id: string]: Resource<Draft> }, accounts: Account[], thread: string) => {\n    const messages: Message[] = [];\n    forIn(draftResources, (draft, key) => {\n      if (\n        draft &&\n        draft.data &&\n        (draft.data.threadV2 === thread || thread === `<${draft.data.id}@polymail.io>`) &&\n        isDraftSending(draft.data)\n      ) {\n        messages.push(toMessage(draft.data, accounts));\n      }\n      return;\n    });\n    return messages;\n  },\n  (drafts: { [id: string]: Resource<Draft> }, accounts: Account[], thread: string) =>\n    fnv1a32(thread),\n  ['drafts'],\n);\n\n// selectDraft returns a draft resource by id\nexport const selectOptimisticMessageBodiesForThread = createSelector<\n  string,\n  { [id: string]: Resource<Draft> },\n  MessageBody[]\n>(\n  [(state, thread) => state.drafts],\n  (draftResources: { [id: string]: Resource<Draft> }, thread: string) => {\n    const bodies: MessageBody[] = [];\n    forIn(draftResources, (draft, key) => {\n      if (\n        draft &&\n        draft.data &&\n        (draft.data.threadV2 === thread || thread === `<${draft.data.id}@polymail.io>`) &&\n        isDraftSending(draft.data)\n      ) {\n        bodies.push(toMessageBody(draft.data, thread));\n      }\n    });\n    return bodies;\n  },\n  (drafts: { [id: string]: Resource<Draft> }, thread: string) => fnv1a32(thread),\n  ['drafts'],\n);\n\nexport default [\n  draftUpdateReducer,\n  draftCreateReducer,\n  draftSendReducer,\n  draftSendUndoReducer,\n  draftDeleteReducer,\n  draftAttachmentAddReducer,\n  draftAttachmentRemoveReducer,\n  draftSelectReducer,\n  draftFetchReducer,\n  draftListReducer,\n  draftTemplateApplyReducer,\n  draftAttachmentsAppendReducer,\n  draftCalendarInviteAddReducer,\n  attachmentMetaUpdateReducer,\n  attachmentMetaCreateReducer,\n  attachmentMetaHydrateReducer,\n  draftSendNowReducer,\n];\n"]}]}