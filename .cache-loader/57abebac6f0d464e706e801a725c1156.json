{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/models/salesforce.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/models/salesforce.ts","mtime":1675280254067},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgZXh0cmFjdENvbXBhbnlGcm9tRW1haWwsIHBhcnNlQWRkcmVzcywgZXh0cmFjdExhc3ROYW1lRnJvbUVtYWlsIH0gZnJvbSAnQHNyYy9saWIvYWRkcmVzcyc7CmV4cG9ydCBmdW5jdGlvbiBhcHBseVNhbGVzZm9yY2VTdW1tYXJ5RGVmYXVsdHMoc2FsZXNmb3JjZSkgewogICAgaWYgKCFzYWxlc2ZvcmNlLmFjdGl2aXR5SGlzdG9yeSkgewogICAgICAgIHNhbGVzZm9yY2UuYWN0aXZpdHlIaXN0b3J5ID0gW107CiAgICB9CiAgICBpZiAoIXNhbGVzZm9yY2UudGFza3MpIHsKICAgICAgICBzYWxlc2ZvcmNlLnRhc2tzID0gW107CiAgICB9CiAgICBpZiAoIXNhbGVzZm9yY2Uub3Bwb3J0dW5pdGllcykgewogICAgICAgIHNhbGVzZm9yY2Uub3Bwb3J0dW5pdGllcyA9IFtdOwogICAgfQogICAgcmV0dXJuIHNhbGVzZm9yY2U7Cn0KZXhwb3J0IGZ1bmN0aW9uIGdldFNhbGVzZm9yY2VTdW1tYXJ5V2hvSWQoc2FsZXNmb3JjZSkgewogICAgdmFyIGRhdGEgPSBzYWxlc2ZvcmNlLmNvbnRhY3QgfHwgc2FsZXNmb3JjZS5sZWFkOwogICAgaWYgKGRhdGEpIHsKICAgICAgICB2YXIgZmllbGRzID0gZGF0YS5maWVsZHMuZmlsdGVyKGZ1bmN0aW9uIChmaWVsZCkgeyByZXR1cm4gZmllbGQubmFtZSA9PT0gJ0lkJzsgfSk7CiAgICAgICAgaWYgKGZpZWxkcy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIHJldHVybiBmaWVsZHNbMF0udmFsdWU7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuICcnOwp9CmV4cG9ydCBmdW5jdGlvbiBnZXRTYWxlc2ZvcmNlRmllbGQoZmllbGRzLCBuYW1lKSB7CiAgICBmb3IgKHZhciBfaSA9IDAsIGZpZWxkc18xID0gZmllbGRzOyBfaSA8IGZpZWxkc18xLmxlbmd0aDsgX2krKykgewogICAgICAgIHZhciBmaWVsZCA9IGZpZWxkc18xW19pXTsKICAgICAgICBpZiAoZmllbGQubmFtZSA9PT0gbmFtZSkgewogICAgICAgICAgICByZXR1cm4gZmllbGQuZGlzcGxheVZhbHVlIHx8IGZpZWxkLnZhbHVlOwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiAnJzsKfQpleHBvcnQgZnVuY3Rpb24gaW5mZXJTYWxlc2ZvcmNlU3VtbW1hcnkoc2NoZW1hLCB0eXBlLCBlbWFpbCwgY29udGFjdCkgewogICAgc2NoZW1hLmZpZWxkcyA9IHNjaGVtYS5maWVsZHMubWFwKGZ1bmN0aW9uIChmaWVsZCkgewogICAgICAgIHZhciBpbmZlcnJlZEFkZHJlc3MgPSBlbWFpbCAmJiBwYXJzZUFkZHJlc3MoZW1haWwpOwogICAgICAgIC8vIEluZmVyIExhc3QgTmFtZQogICAgICAgIGlmIChmaWVsZC5uYW1lID09PSAnTGFzdE5hbWUnKSB7CiAgICAgICAgICAgIGZpZWxkLnZhbHVlID0gKGNvbnRhY3QgJiYgY29udGFjdC5mYW1pbHlOYW1lKSB8fAogICAgICAgICAgICAgICAgKGluZmVycmVkQWRkcmVzcyAmJiBpbmZlcnJlZEFkZHJlc3MuZmFtaWx5TmFtZSkgfHwKICAgICAgICAgICAgICAgIGV4dHJhY3RMYXN0TmFtZUZyb21FbWFpbChlbWFpbCkgfHwKICAgICAgICAgICAgICAgICdVbmtub3duIExhc3QgTmFtZSc7CiAgICAgICAgICAgIHJldHVybiBmaWVsZDsKICAgICAgICB9CiAgICAgICAgLy8gSW5mZXIgRmlyc3QgTmFtZSBpZiBwb3NzaWJsZQogICAgICAgIGlmIChmaWVsZC5uYW1lID09PSAnRmlyc3ROYW1lJykgewogICAgICAgICAgICBmaWVsZC52YWx1ZSA9IChjb250YWN0ICYmIGNvbnRhY3QuZ2l2ZW5OYW1lKSB8fAogICAgICAgICAgICAgICAgKGluZmVycmVkQWRkcmVzcyAmJiBpbmZlcnJlZEFkZHJlc3MuZnVsbE5hbWUpIHx8CiAgICAgICAgICAgICAgICBmaWVsZC52YWx1ZTsKICAgICAgICAgICAgcmV0dXJuIGZpZWxkOwogICAgICAgIH0KICAgICAgICAvLyBJbmZlciBMYXN0IE5hbWUKICAgICAgICBpZiAoZmllbGQubmFtZSA9PT0gJ0NvbXBhbnknKSB7CiAgICAgICAgICAgIGZpZWxkLnZhbHVlID0gKGNvbnRhY3QgJiYgY29udGFjdC5jb21wYW55ICYmIGNvbnRhY3QuY29tcGFueS5uYW1lKSB8fAogICAgICAgICAgICAgICAgKGVtYWlsICYmIGV4dHJhY3RDb21wYW55RnJvbUVtYWlsKGVtYWlsKSkgfHwKICAgICAgICAgICAgICAgICdVbmtub3duIENvbXBhbnknOwogICAgICAgICAgICByZXR1cm4gZmllbGQ7CiAgICAgICAgfQogICAgICAgIC8vIFRyeSB0byBpbmZlciBwb3NpdGlvbgogICAgICAgIGlmIChjb250YWN0ICYmIGNvbnRhY3Qub3JnYW5pemF0aW9uVGl0bGUgJiYgZmllbGQubmFtZSA9PT0gJ1RpdGxlJykgewogICAgICAgICAgICBmaWVsZC52YWx1ZSA9IGNvbnRhY3Qub3JnYW5pemF0aW9uVGl0bGU7CiAgICAgICAgfQogICAgICAgIHJldHVybiBmaWVsZDsKICAgIH0pOwogICAgcmV0dXJuIHsKICAgICAgICB0eXBlOiB0eXBlLAogICAgICAgIGVtYWlsOiBlbWFpbCwKICAgICAgICBmaWVsZHM6IHNjaGVtYS5maWVsZHMsCiAgICB9Owp9Cg=="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/models/salesforce.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/models/salesforce.ts"],"names":[],"mappings":"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","sourcesContent":["import { SalesforceSummary, SObjectField, SObjectSchema } from '@src/types/salesforce';\nimport { SalesforceSummaryCreateMeta, SalesforceSummaryMetaType } from '@src/ducks/salesforce';\nimport { Contact } from '@src/types';\nimport { extractCompanyFromEmail, parseAddress, extractLastNameFromEmail } from '@src/lib/address';\n\nexport function applySalesforceSummaryDefaults(salesforce: SalesforceSummary): SalesforceSummary {\n  if (!salesforce.activityHistory) {\n    salesforce.activityHistory = [];\n  }\n  if (!salesforce.tasks) {\n    salesforce.tasks = [];\n  }\n  if (!salesforce.opportunities) {\n    salesforce.opportunities = [];\n  }\n  return salesforce;\n}\n\nexport function getSalesforceSummaryWhoId(salesforce: SalesforceSummary): string {\n  const data = salesforce.contact || salesforce.lead;\n  if (data) {\n    const fields = data.fields.filter(field => field.name === 'Id');\n    if (fields.length > 0) {\n      return fields[0].value;\n    }\n  }\n  return '';\n}\n\nexport function getSalesforceField(fields: SObjectField[], name: string): string {\n  for (const field of fields) {\n    if (field.name === name) {\n      return field.displayValue || field.value;\n    }\n  }\n\n  return '';\n}\n\nexport function inferSalesforceSummmary(\n  schema: SObjectSchema,\n  type: SalesforceSummaryMetaType,\n  email: string,\n  contact?: Contact,\n): SalesforceSummaryCreateMeta {\n\n  schema.fields = schema.fields.map((field) => {\n    const inferredAddress = email && parseAddress(email);\n\n    // Infer Last Name\n    if (field.name === 'LastName') {\n      field.value = (contact && contact.familyName) ||\n        (inferredAddress && inferredAddress.familyName) ||\n        extractLastNameFromEmail(email) ||\n        'Unknown Last Name';\n      return field;\n    }\n\n    // Infer First Name if possible\n    if (field.name === 'FirstName') {\n      field.value = (contact && contact.givenName) ||\n        (inferredAddress && inferredAddress.fullName) ||\n        field.value;\n      return field;\n    }\n\n    // Infer Last Name\n    if (field.name === 'Company') {\n      field.value = (contact && contact.company && contact.company.name) ||\n        (email && extractCompanyFromEmail(email)) ||\n        'Unknown Company';\n      return field;\n    }\n\n    // Try to infer position\n    if (contact && contact.organizationTitle && field.name === 'Title') {\n      field.value = contact.organizationTitle;\n    }\n\n    return field;\n  });\n\n  return {\n    type,\n    email,\n    fields: schema.fields,\n  };\n}\n"]}]}