{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/comment.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/comment.ts","mtime":1675280253979},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkgewogICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHsKICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHsKICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTsKICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKQogICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07CiAgICAgICAgfQogICAgICAgIHJldHVybiB0OwogICAgfTsKICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9OwppbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7CmltcG9ydCB7IGpzb25SZXF1ZXN0IH0gZnJvbSAnQHNyYy9hcGkvYmFzZSc7CmltcG9ydCB7IGNyZWF0ZUNvbW1lbnQgfSBmcm9tICdAc3JjL21vY2tzL2NvbW1lbnRzJzsKaW1wb3J0IHsgYXBwbHlDb21tZW50RGVmYXVsdHMgfSBmcm9tICdAc3JjL2xpYi9tb2RlbHMvY29tbWVudCc7CnZhciBDb21tZW50Q2xpZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkgewogICAgZnVuY3Rpb24gQ29tbWVudENsaWVudCgpIHsKICAgIH0KICAgIENvbW1lbnRDbGllbnQucHJvdG90eXBlLmxpc3QgPSBmdW5jdGlvbiAodGhyZWFkKSB7CiAgICAgICAgcmV0dXJuIGpzb25SZXF1ZXN0KHsKICAgICAgICAgICAgbWV0aG9kOiAnR0VUJywKICAgICAgICAgICAgcm91dGU6ICIvdjEvc2hhcmVkVGhyZWFkcy8iICsgdGhyZWFkICsgIi9jb21tZW50cyIsCiAgICAgICAgICAgIGRpc2FibGVDb3JzT3B0aW1pemF0aW9uOiB0cnVlLAogICAgICAgIH0pLm1hcChmdW5jdGlvbiAoY29tbWVudHMpIHsgcmV0dXJuIGNvbW1lbnRzLm1hcChmdW5jdGlvbiAoYykgeyByZXR1cm4gYXBwbHlDb21tZW50RGVmYXVsdHMoYyk7IH0pOyB9KTsKICAgIH07CiAgICBDb21tZW50Q2xpZW50LnByb3RvdHlwZS5jcmVhdGUgPSBmdW5jdGlvbiAobWV0YSkgewogICAgICAgIHJldHVybiBqc29uUmVxdWVzdCh7CiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLAogICAgICAgICAgICByb3V0ZTogIi92MS9zaGFyZWRUaHJlYWRzLyIgKyBtZXRhLnRocmVhZCArICIvY29tbWVudHMiLAogICAgICAgICAgICBib2R5OiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgbWV0YSksIHsgbGFzdFJmY0lkOiBtZXRhLnJmY0lkIH0pLAogICAgICAgIH0pLm1hcChmdW5jdGlvbiAoY29tbWVudCkgeyByZXR1cm4gYXBwbHlDb21tZW50RGVmYXVsdHMoY29tbWVudCk7IH0pOwogICAgfTsKICAgIENvbW1lbnRDbGllbnQucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICh0aHJlYWQsIGNvbW1lbnQsIHJlYWQpIHsKICAgICAgICByZXR1cm4ganNvblJlcXVlc3QoewogICAgICAgICAgICBtZXRob2Q6ICdQQVRDSCcsCiAgICAgICAgICAgIHJvdXRlOiAiL3YxL3NoYXJlZFRocmVhZHMvIiArIHRocmVhZCArICIvY29tbWVudHMvIiArIGNvbW1lbnQsCiAgICAgICAgICAgIGJvZHk6IHsgcmVhZDogcmVhZCB9LAogICAgICAgIH0pLm1hcChmdW5jdGlvbiAoYykgeyByZXR1cm4gYXBwbHlDb21tZW50RGVmYXVsdHMoYyk7IH0pOwogICAgfTsKICAgIHJldHVybiBDb21tZW50Q2xpZW50Owp9KCkpOwpleHBvcnQgeyBDb21tZW50Q2xpZW50IH07CmV4cG9ydCBmdW5jdGlvbiBtb2NrQ29tbWVudENsaWVudCgpIHsKICAgIHJldHVybiB7CiAgICAgICAgbGlzdDogZnVuY3Rpb24gKCkgeyByZXR1cm4gT2JzZXJ2YWJsZS5vZihbY3JlYXRlQ29tbWVudCgpXSk7IH0sCiAgICAgICAgY3JlYXRlOiBmdW5jdGlvbiAoKSB7IHJldHVybiBPYnNlcnZhYmxlLm9mKGNyZWF0ZUNvbW1lbnQoKSk7IH0sCiAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiAoKSB7IHJldHVybiBPYnNlcnZhYmxlLm9mKGNyZWF0ZUNvbW1lbnQoKSk7IH0sCiAgICB9Owp9Cg=="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/comment.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/comment.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAElC,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAC5C,OAAO,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAC;AACpD,OAAO,EAAE,oBAAoB,EAAE,MAAM,yBAAyB,CAAC;AAS/D;IAAA;IAyBA,CAAC;IAxBC,4BAAI,GAAJ,UAAK,MAAc;QACjB,OAAO,WAAW,CAAC;YACjB,MAAM,EAAE,KAAK;YACb,KAAK,EAAE,uBAAqB,MAAM,cAAW;YAC7C,uBAAuB,EAAE,IAAI;SAC9B,CAAC,CAAC,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,GAAG,CAAC,UAAC,CAAU,IAAK,OAAA,oBAAoB,CAAC,CAAC,CAAC,EAAvB,CAAuB,CAAC,EAArD,CAAqD,CAAC,CAAC;IAC5E,CAAC;IACD,8BAAM,GAAN,UAAO,IAAuB;QAC5B,OAAO,WAAW,CAAC;YACjB,MAAM,EAAE,MAAM;YACd,KAAK,EAAE,uBAAqB,IAAI,CAAC,MAAM,cAAW;YAClD,IAAI,wBACC,IAAI,KACP,SAAS,EAAE,IAAI,CAAC,KAAK,GACtB;SACF,CAAC,CAAC,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,oBAAoB,CAAC,OAAO,CAAC,EAA7B,CAA6B,CAAC,CAAC;IACnD,CAAC;IACD,8BAAM,GAAN,UAAO,MAAc,EAAE,OAAe,EAAE,IAAa;QACnD,OAAO,WAAW,CAAC;YACjB,MAAM,EAAE,OAAO;YACf,KAAK,EAAE,uBAAqB,MAAM,kBAAa,OAAS;YACxD,IAAI,EAAE,EAAE,IAAI,MAAA,EAAE;SACf,CAAC,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,oBAAoB,CAAC,CAAC,CAAC,EAAvB,CAAuB,CAAC,CAAC;IACvC,CAAC;IACH,oBAAC;AAAD,CAAC,AAzBD,IAyBC;;AAED,MAAM,UAAU,iBAAiB;IAC/B,OAAO;QACL,IAAI,EAAE,cAAM,OAAA,UAAU,CAAC,EAAE,CAAC,CAAC,aAAa,EAAE,CAAC,CAAC,EAAhC,CAAgC;QAC5C,MAAM,EAAE,cAAM,OAAA,UAAU,CAAC,EAAE,CAAC,aAAa,EAAE,CAAC,EAA9B,CAA8B;QAC5C,MAAM,EAAE,cAAM,OAAA,UAAU,CAAC,EAAE,CAAC,aAAa,EAAE,CAAC,EAA9B,CAA8B;KAC7C,CAAC;AACJ,CAAC","sourcesContent":["import { Observable } from 'rxjs';\nimport { Comment } from '@src/types/sharedThreads';\nimport { jsonRequest } from '@src/api/base';\nimport { createComment } from '@src/mocks/comments';\nimport { applyCommentDefaults } from '@src/lib/models/comment';\nimport { CommentCreateMeta } from '@src/ducks/comments';\n\nexport interface CommentAPI {\n  list(thread: string): Observable<Comment[]>;\n  create(meta: CommentCreateMeta): Observable<Comment>;\n  update(thread: string, comment: string, read: boolean): Observable<Comment>;\n}\n\nexport class CommentClient implements CommentAPI {\n  list(thread: string): Observable<Comment[]> {\n    return jsonRequest({\n      method: 'GET',\n      route: `/v1/sharedThreads/${thread}/comments`,\n      disableCorsOptimization: true,\n    }).map(comments => comments.map((c: Comment) => applyCommentDefaults(c)));\n  }\n  create(meta: CommentCreateMeta): Observable<Comment> {\n    return jsonRequest({\n      method: 'POST',\n      route: `/v1/sharedThreads/${meta.thread}/comments`,\n      body: {\n        ...meta,\n        lastRfcId: meta.rfcId,\n      },\n    }).map(comment => applyCommentDefaults(comment));\n  }\n  update(thread: string, comment: string, read: boolean): Observable<Comment> {\n    return jsonRequest({\n      method: 'PATCH',\n      route: `/v1/sharedThreads/${thread}/comments/${comment}`,\n      body: { read },\n    }).map(c => applyCommentDefaults(c));\n  }\n}\n\nexport function mockCommentClient(): CommentAPI {\n  return {\n    list: () => Observable.of([createComment()]),\n    create: () => Observable.of(createComment()),\n    update: () => Observable.of(createComment()),\n  };\n}\n"]}]}