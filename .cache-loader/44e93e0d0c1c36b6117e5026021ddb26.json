{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/contacts.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/contacts.ts","mtime":1675280253979},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkgewogICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHsKICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHsKICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTsKICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKQogICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07CiAgICAgICAgfQogICAgICAgIHJldHVybiB0OwogICAgfTsKICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9OwppbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7CmltcG9ydCB7IGpzb25SZXF1ZXN0IH0gZnJvbSAnLi9iYXNlJzsKaW1wb3J0IHsgYXBwbHlDb250YWN0RGVmYXVsdHMgfSBmcm9tICdAc3JjL2xpYi9jb250YWN0JzsKaW1wb3J0IHsgY3JlYXRlQ29udGFjdCB9IGZyb20gJ0BzcmMvbW9ja3MvY29udGFjdHMnOwpleHBvcnQgZnVuY3Rpb24gZ2V0Q29udGFjdChlbWFpbCkgewogICAgcmV0dXJuIGpzb25SZXF1ZXN0KHsKICAgICAgICBtZXRob2Q6ICdHRVQnLAogICAgICAgIHJvdXRlOiAiL3YyL2VucmljaGVkQ29udGFjdHMvIiArIGVuY29kZVVSSUNvbXBvbmVudChlbWFpbC50b0xvd2VyQ2FzZSgpLnRyaW0oKSksCiAgICB9KQogICAgICAgIC5tYXAoZnVuY3Rpb24gKGNvbnRhY3QpIHsgcmV0dXJuIChhcHBseUNvbnRhY3REZWZhdWx0cyhjb250YWN0KSk7IH0pOwp9CmV4cG9ydCBmdW5jdGlvbiBsaXN0Q29udGFjdEdyb3VwcygpIHsKICAgIHJldHVybiBqc29uUmVxdWVzdCh7CiAgICAgICAgbWV0aG9kOiAnR0VUJywKICAgICAgICByb3V0ZTogIi92MS9jb250YWN0R3JvdXBzIiwKICAgIH0pOwp9CnZhciBDb250YWN0Q2xpZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkgewogICAgZnVuY3Rpb24gQ29udGFjdENsaWVudCgpIHsKICAgIH0KICAgIENvbnRhY3RDbGllbnQucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uIChjb250YWN0KSB7CiAgICAgICAgcmV0dXJuIGpzb25SZXF1ZXN0KHsKICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsCiAgICAgICAgICAgIHJvdXRlOiAiL3YyL2NvbnRhY3RzIiwKICAgICAgICAgICAgYm9keTogX19hc3NpZ24oe30sIGNvbnRhY3QpLAogICAgICAgIH0pCiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHJlc3VsdCkgeyByZXR1cm4gYXBwbHlDb250YWN0RGVmYXVsdHMocmVzdWx0KTsgfSk7CiAgICB9OwogICAgQ29udGFjdENsaWVudC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGNvbnRhY3QpIHsKICAgICAgICByZXR1cm4ganNvblJlcXVlc3QoewogICAgICAgICAgICBtZXRob2Q6ICdQQVRDSCcsCiAgICAgICAgICAgIHJvdXRlOiAiL3YyL2NvbnRhY3RzLyIgKyBjb250YWN0LmlkLAogICAgICAgICAgICBib2R5OiB7CiAgICAgICAgICAgICAgICBnaXZlbk5hbWU6IGNvbnRhY3QuZ2l2ZW5OYW1lLAogICAgICAgICAgICAgICAgZmFtaWx5TmFtZTogY29udGFjdC5mYW1pbHlOYW1lLAogICAgICAgICAgICAgICAgZnVsbE5hbWU6IGNvbnRhY3QuZnVsbE5hbWUsCiAgICAgICAgICAgIH0sCiAgICAgICAgfSkKICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAocmVzdWx0KSB7IHJldHVybiBhcHBseUNvbnRhY3REZWZhdWx0cyhyZXN1bHQpOyB9KTsKICAgIH07CiAgICBDb250YWN0Q2xpZW50LnByb3RvdHlwZS5saXN0ID0gZnVuY3Rpb24gKGlkKSB7CiAgICAgICAgcmV0dXJuIGpzb25SZXF1ZXN0KHsKICAgICAgICAgICAgbWV0aG9kOiAnR0VUJywKICAgICAgICAgICAgcm91dGU6IGlkID8gIi92Mi9jb250YWN0cz9mcm9tPSIgKyBpZCA6ICcvdjIvY29udGFjdHMnLAogICAgICAgIH0pCiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGNvbnRhY3RzKSB7IHJldHVybiBjb250YWN0cy5tYXAoZnVuY3Rpb24gKGNvbnRhY3QpIHsgcmV0dXJuIGFwcGx5Q29udGFjdERlZmF1bHRzKGNvbnRhY3QpOyB9KTsgfSk7CiAgICB9OwogICAgQ29udGFjdENsaWVudC5wcm90b3R5cGUubGlzdEJ5VGVhbSA9IGZ1bmN0aW9uICh0ZWFtLCBpZCkgewogICAgICAgIHJldHVybiBqc29uUmVxdWVzdCh7CiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsCiAgICAgICAgICAgIHJvdXRlOiBpZCA/ICIvdjIvY29udGFjdHM/dGVhbT0iICsgdGVhbSArICImZnJvbT0iICsgaWQgOiAiL3YyL2NvbnRhY3RzP3RlYW09IiArIHRlYW0sCiAgICAgICAgfSkKICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoY29udGFjdHMpIHsgcmV0dXJuIGNvbnRhY3RzLm1hcChmdW5jdGlvbiAoY29udGFjdCkgeyByZXR1cm4gYXBwbHlDb250YWN0RGVmYXVsdHMoY29udGFjdCk7IH0pOyB9KTsKICAgIH07CiAgICByZXR1cm4gQ29udGFjdENsaWVudDsKfSgpKTsKZXhwb3J0IHsgQ29udGFjdENsaWVudCB9OwpleHBvcnQgZnVuY3Rpb24gbW9ja0NvbnRhY3RDbGllbnQoKSB7CiAgICByZXR1cm4gewogICAgICAgIGNyZWF0ZTogZnVuY3Rpb24gKGNvbnRhY3QpIHsgcmV0dXJuIE9ic2VydmFibGUub2YoY3JlYXRlQ29udGFjdChjb250YWN0KSk7IH0sCiAgICAgICAgbGlzdDogZnVuY3Rpb24gKGlkKSB7IHJldHVybiBPYnNlcnZhYmxlLm9mKFtjcmVhdGVDb250YWN0KCldKTsgfSwKICAgICAgICBsaXN0QnlUZWFtOiBmdW5jdGlvbiAodGVhbSkgeyByZXR1cm4gT2JzZXJ2YWJsZS5vZihbY3JlYXRlQ29udGFjdCgpXSk7IH0sCiAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiAoY29udGFjdCkgeyByZXR1cm4gT2JzZXJ2YWJsZS5vZihjcmVhdGVDb250YWN0KGNvbnRhY3QpKTsgfSwKICAgIH07Cn0K"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/contacts.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/contacts.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs';\n\nimport { Contact, ContactGroup } from '@src/types';\n\nimport { jsonRequest } from './base';\n\nimport { applyContactDefaults } from '@src/lib/contact';\nimport { createContact } from '@src/mocks/contacts';\nimport { ContactUpdateMeta } from '@src/ducks/contacts';\n\nexport function getContact(email: string): Observable<Contact> {\n  return jsonRequest({\n    method: 'GET',\n    route: `/v2/enrichedContacts/${encodeURIComponent(email.toLowerCase().trim())}`,\n  })\n  .map(contact => (applyContactDefaults(contact)));\n}\n\nexport function listContactGroups(): Observable<ContactGroup[]> {\n  return jsonRequest({\n    method: 'GET',\n    route: `/v1/contactGroups`,\n  });\n}\n\nexport interface ContactAPI {\n  create(contact: ContactUpdateMeta): Observable<Contact>;\n  update(contact: ContactUpdateMeta): Observable<Contact>;\n  list(id?: string): Observable<Contact[]>;\n  listByTeam(team: string, id?: string): Observable<Contact[]>;\n}\n\nexport class ContactClient implements ContactAPI {\n  create(contact: ContactUpdateMeta): Observable<Contact> {\n    return jsonRequest({\n      method: 'POST',\n      route: `/v2/contacts`,\n      body: {\n        ...contact,\n      },\n    })\n    .map((result: Contact) => applyContactDefaults(result));\n  }\n  update(contact: ContactUpdateMeta): Observable<Contact> {\n    return jsonRequest({\n      method: 'PATCH',\n      route: `/v2/contacts/${contact.id}`,\n      body: {\n        givenName: contact.givenName,\n        familyName: contact.familyName,\n        fullName: contact.fullName,\n      },\n    })\n    .map((result: Contact) => applyContactDefaults(result));\n  }\n  list(id?: string): Observable<Contact[]> {\n    return jsonRequest({\n      method: 'GET',\n      route: id ? `/v2/contacts?from=${id}` : '/v2/contacts',\n    })\n    .map((contacts: Contact[]) => contacts.map(contact => applyContactDefaults(contact)));\n  }\n\n  listByTeam(team: string, id?: string): Observable<Contact[]> {\n    return jsonRequest({\n      method: 'GET',\n      route: id ? `/v2/contacts?team=${team}&from=${id}` : `/v2/contacts?team=${team}`,\n    })\n    .map((contacts: Contact[]) => contacts.map(contact => applyContactDefaults(contact)));\n  }\n}\n\nexport function mockContactClient(): ContactAPI {\n  return {\n    create: contact => Observable.of(createContact(contact)),\n    list: (id?: string) => Observable.of([createContact()]),\n    listByTeam: (team: string) => Observable.of([createContact()]),\n    update: contact => Observable.of(createContact(contact)),\n  };\n}\n"]}]}