{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/sync/TemplateIncrSync.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/sync/TemplateIncrSync.ts","mtime":1675280254126},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkgewogICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikgewogICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwKICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fAogICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTsKICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTsKICAgIH07CiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHsKICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpOwogICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfQogICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTsKICAgIH07Cn0pKCk7CmltcG9ydCB7IFN0b3JlcyB9IGZyb20gJ0BzcmMvbGliL2RiJzsKaW1wb3J0IHsgVGVtcGxhdGVDbGllbnQgfSBmcm9tICdAc3JjL2FwaS90ZW1wbGF0ZXMnOwppbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7CmltcG9ydCB7IEFQSVN5bmMgfSBmcm9tICcuL0FQSVN5bmMnOwppbXBvcnQgeyBzZW5kVGVtcGxhdGVVcGRhdGVkIH0gZnJvbSAnQHNyYy93b3JrZXIvYnJpZGdlL3dvcmtlckV2ZW50cyc7CmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JzsKdmFyIFRlbXBsYXRlSW5jclN5bmMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7CiAgICBfX2V4dGVuZHMoVGVtcGxhdGVJbmNyU3luYywgX3N1cGVyKTsKICAgIC8vIC0gYXBwIGJyaWRnZSBpbnRlcmZhY2UKICAgIGZ1bmN0aW9uIFRlbXBsYXRlSW5jclN5bmMoZXZlbnRzLCB0ZWFtLCBhcGkpIHsKICAgICAgICBpZiAoYXBpID09PSB2b2lkIDApIHsgYXBpID0gbmV3IFRlbXBsYXRlQ2xpZW50KCk7IH0KICAgICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICAgIHZhciBpbmNyU3luYyA9IHRydWU7CiAgICAgICAgLy8gU2V0IHdvcmtlciBpZAogICAgICAgIHZhciB3b3JrZXJJZCA9ICdUZW1wbGF0ZUluY3JTeW5jJzsKICAgICAgICBpZiAodGVhbSkgewogICAgICAgICAgICB3b3JrZXJJZCA9ICdUZW1wbGF0ZUluY3JTeW5jLScgKyB0ZWFtOwogICAgICAgIH0KICAgICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHdvcmtlcklkLCBTdG9yZXMuVGVtcGxhdGVzLCBpbmNyU3luYykgfHwgdGhpczsKICAgICAgICBfdGhpcy5hcGkgPSBhcGk7CiAgICAgICAgX3RoaXMuZXZlbnRzID0gZXZlbnRzOwogICAgICAgIF90aGlzLnRlYW0gPSB0ZWFtOwogICAgICAgIHJldHVybiBfdGhpczsKICAgIH0KICAgIFRlbXBsYXRlSW5jclN5bmMucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgICBfc3VwZXIucHJvdG90eXBlLmluaXQuY2FsbCh0aGlzKTsKICAgICAgICB0aGlzLmV2ZW50cy5zdWJzY3JpYmUoZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgICAgICAgIGlmIChldmVudC5uYW1lID09PSAnVGVtcGxhdGVVcGRhdGVkJykgewogICAgICAgICAgICAgICAgX3RoaXMucnVuKCkuc3Vic2NyaWJlKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH07CiAgICBUZW1wbGF0ZUluY3JTeW5jLnByb3RvdHlwZS5mZXRjaE5leHRQYWdlID0gZnVuY3Rpb24gKCkgewogICAgICAgIGlmICh0aGlzLnRlYW0pIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXBpLmxpc3RJbmNyQnlUZWFtKHRoaXMudGVhbSwgdGhpcy5vZmZzZXQpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdGhpcy5hcGkubGlzdEluY3IodGhpcy5vZmZzZXQpOwogICAgfTsKICAgIFRlbXBsYXRlSW5jclN5bmMucHJvdG90eXBlLm5leHRQYWdlT2Zmc2V0ID0gZnVuY3Rpb24gKG1vZGVscykgewogICAgICAgIHJldHVybiBtb21lbnQobW9kZWxzWzBdLnVwZGF0ZWQpLnRvSVNPU3RyaW5nKCk7CiAgICB9OwogICAgVGVtcGxhdGVJbmNyU3luYy5wcm90b3R5cGUub25TYXZlID0gZnVuY3Rpb24gKHRlbXBsYXRlcykgewogICAgICAgIHRlbXBsYXRlcy5mb3JFYWNoKGZ1bmN0aW9uICh0ZW1wbGF0ZSkgeyByZXR1cm4gc2VuZFRlbXBsYXRlVXBkYXRlZCh0ZW1wbGF0ZSk7IH0pOwogICAgICAgIHJldHVybiBPYnNlcnZhYmxlLm9mKG51bGwpOwogICAgfTsKICAgIHJldHVybiBUZW1wbGF0ZUluY3JTeW5jOwp9KEFQSVN5bmMpKTsKZXhwb3J0IHsgVGVtcGxhdGVJbmNyU3luYyB9OwpleHBvcnQgZGVmYXVsdCBUZW1wbGF0ZUluY3JTeW5jOwo="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/sync/TemplateIncrSync.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/sync/TemplateIncrSync.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,aAAa,CAAC;AAErC,OAAO,EAAe,cAAc,EAAE,MAAM,oBAAoB,CAAC;AACjE,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAClC,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AACpC,OAAO,EAAE,mBAAmB,EAAE,MAAM,iCAAiC,CAAC;AACtE,OAAO,MAAM,MAAM,QAAQ,CAAC;AAE5B;IAAsC,oCAAiB;IAOrD,yBAAyB;IAEzB,0BACE,MAAiC,EACjC,IAAa,EACb,GAAuC;QAAvC,oBAAA,EAAA,UAAuB,cAAc,EAAE;QAHzC,iBAiBC;QAZC,IAAM,QAAQ,GAAG,IAAI,CAAC;QAEtB,gBAAgB;QAChB,IAAI,QAAQ,GAAG,kBAAkB,CAAC;QAClC,IAAI,IAAI,EAAE;YACR,QAAQ,GAAG,mBAAmB,GAAG,IAAI,CAAC;SACvC;QACD,QAAA,kBAAM,QAAQ,EAAE,MAAM,CAAC,SAAS,EAAE,QAAQ,CAAC,SAAC;QAE5C,KAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC;;IACnB,CAAC;IAED,+BAAI,GAAJ;QAAA,iBAQC;QAPC,iBAAM,IAAI,WAAE,CAAC;QAEb,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,UAAC,KAAK;YAC1B,IAAI,KAAK,CAAC,IAAI,KAAK,iBAAiB,EAAE;gBACpC,KAAI,CAAC,GAAG,EAAE,CAAC,SAAS,EAAE,CAAC;aACxB;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAES,wCAAa,GAAvB;QACE,IAAI,IAAI,CAAC,IAAI,EAAE;YACb,OAAO,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;SACxD;QACD,OAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACxC,CAAC;IAES,yCAAc,GAAxB,UAAyB,MAAkB;QACzC,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;IACjD,CAAC;IAES,iCAAM,GAAhB,UAAiB,SAAqB;QACpC,SAAS,CAAC,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,mBAAmB,CAAC,QAAQ,CAAC,EAA7B,CAA6B,CAAC,CAAC;QAC7D,OAAO,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IACH,uBAAC;AAAD,CAAC,AArDD,CAAsC,OAAO,GAqD5C;;AAED,eAAe,gBAAgB,CAAC","sourcesContent":["import { Stores } from '@src/lib/db';\nimport { Template, RealtimeEvent } from '@src/types';\nimport { TemplateAPI, TemplateClient } from '@src/api/templates';\nimport { Observable } from 'rxjs';\nimport { APISync } from './APISync';\nimport { sendTemplateUpdated } from '@src/worker/bridge/workerEvents';\nimport moment from 'moment';\n\nexport class TemplateIncrSync extends APISync<Template> {\n\n  // State\n\n  // Dependencies\n  private events: Observable<RealtimeEvent>;\n  private api: TemplateAPI;\n  // - app bridge interface\n\n  constructor(\n    events: Observable<RealtimeEvent>,\n    team?: string,\n    api: TemplateAPI = new TemplateClient(),\n  ) {\n    const incrSync = true;\n\n    // Set worker id\n    let workerId = 'TemplateIncrSync';\n    if (team) {\n      workerId = 'TemplateIncrSync-' + team;\n    }\n    super(workerId, Stores.Templates, incrSync);\n\n    this.api = api;\n    this.events = events;\n    this.team = team;\n  }\n\n  init() {\n    super.init();\n\n    this.events.subscribe((event) => {\n      if (event.name === 'TemplateUpdated') {\n        this.run().subscribe();\n      }\n    });\n  }\n\n  protected fetchNextPage(): Observable<Template[]> {\n    if (this.team) {\n      return this.api.listIncrByTeam(this.team, this.offset);\n    }\n    return this.api.listIncr(this.offset);\n  }\n\n  protected nextPageOffset(models: Template[]): string {\n    return moment(models[0].updated).toISOString();\n  }\n\n  protected onSave(templates: Template[]): Observable<null> {\n    templates.forEach(template => sendTemplateUpdated(template));\n    return Observable.of(null);\n  }\n}\n\nexport default TemplateIncrSync;\n"]}]}