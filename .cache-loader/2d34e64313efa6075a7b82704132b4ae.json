{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/slack.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/slack.ts","mtime":1675280253981},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnOwppbXBvcnQgeyBqc29uUmVxdWVzdCwgYmxhbmtSZXF1ZXN0IH0gZnJvbSAnLi9iYXNlJzsKaW1wb3J0IHsgY3JlYXRlU2xhY2tDaGFubmVsLCBjcmVhdGVTbGFja01lbWJlciB9IGZyb20gJ0BzcmMvbW9ja3Mvc2xhY2snOwp2YXIgU2xhY2tDbGllbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7CiAgICBmdW5jdGlvbiBTbGFja0NsaWVudCgpIHsKICAgIH0KICAgIFNsYWNrQ2xpZW50LnByb3RvdHlwZS5nZXRDaGFubmVscyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4ganNvblJlcXVlc3QoewogICAgICAgICAgICBtZXRob2Q6ICdHRVQnLAogICAgICAgICAgICByb3V0ZTogIi92MS9zbGFjay9jaGFubmVscyIsCiAgICAgICAgfSk7CiAgICB9OwogICAgU2xhY2tDbGllbnQucHJvdG90eXBlLmdldE1lbWJlcnMgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIGpzb25SZXF1ZXN0KHsKICAgICAgICAgICAgbWV0aG9kOiAnR0VUJywKICAgICAgICAgICAgcm91dGU6ICIvdjEvc2xhY2svbWVtYmVycyIsCiAgICAgICAgfSk7CiAgICB9OwogICAgU2xhY2tDbGllbnQucHJvdG90eXBlLnBvc3RNZXNzYWdlID0gZnVuY3Rpb24gKG1ldGEpIHsKICAgICAgICByZXR1cm4gYmxhbmtSZXF1ZXN0KHsKICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsCiAgICAgICAgICAgIHJvdXRlOiAiL3YxL3NsYWNrL21lc3NhZ2VzIiwKICAgICAgICAgICAgYm9keTogbWV0YSwKICAgICAgICB9KTsKICAgIH07CiAgICByZXR1cm4gU2xhY2tDbGllbnQ7Cn0oKSk7CmV4cG9ydCB7IFNsYWNrQ2xpZW50IH07CmV4cG9ydCBmdW5jdGlvbiBtb2NrU2xhY2tDbGllbnQoKSB7CiAgICByZXR1cm4gewogICAgICAgIGdldENoYW5uZWxzOiBmdW5jdGlvbiAoKSB7IHJldHVybiBPYnNlcnZhYmxlLm9mKFtjcmVhdGVTbGFja0NoYW5uZWwoKV0pOyB9LAogICAgICAgIGdldE1lbWJlcnM6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE9ic2VydmFibGUub2YoW2NyZWF0ZVNsYWNrTWVtYmVyKCldKTsgfSwKICAgICAgICBwb3N0TWVzc2FnZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gT2JzZXJ2YWJsZS5vZihudWxsKTsgfSwKICAgIH07Cn0K"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/slack.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/slack.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAElC,OAAO,EAAE,WAAW,EAAE,YAAY,EAAE,MAAM,QAAQ,CAAC;AAEnD,OAAO,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,MAAM,kBAAkB,CAAC;AASzE;IAAA;IAsBA,CAAC;IArBC,iCAAW,GAAX;QACE,OAAO,WAAW,CAAC;YACjB,MAAM,EAAE,KAAK;YACb,KAAK,EAAE,oBAAoB;SAC5B,CAAC,CAAC;IACL,CAAC;IAED,gCAAU,GAAV;QACE,OAAO,WAAW,CAAC;YACjB,MAAM,EAAE,KAAK;YACb,KAAK,EAAE,mBAAmB;SAC3B,CAAC,CAAC;IACL,CAAC;IAED,iCAAW,GAAX,UAAY,IAA0B;QACpC,OAAO,YAAY,CAAC;YAClB,MAAM,EAAE,MAAM;YACd,KAAK,EAAE,oBAAoB;YAC3B,IAAI,EAAE,IAAI;SACX,CAAC,CAAC;IACL,CAAC;IACH,kBAAC;AAAD,CAAC,AAtBD,IAsBC;;AAED,MAAM,UAAU,eAAe;IAC7B,OAAO;QACL,WAAW,EAAE,cAAM,OAAA,UAAU,CAAC,EAAE,CAAC,CAAC,kBAAkB,EAAE,CAAC,CAAC,EAArC,CAAqC;QACxD,UAAU,EAAE,cAAM,OAAA,UAAU,CAAC,EAAE,CAAC,CAAC,iBAAiB,EAAE,CAAC,CAAC,EAApC,CAAoC;QACtD,WAAW,EAAE,cAAM,OAAA,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,EAAnB,CAAmB;KACvC,CAAC;AACJ,CAAC","sourcesContent":["import { Observable } from 'rxjs';\n\nimport { jsonRequest, blankRequest } from './base';\nimport { SlackChannel, SlackMember } from '@src/types/slack';\nimport { createSlackChannel, createSlackMember } from '@src/mocks/slack';\nimport { SlackMessagePostMeta } from '@src/ducks/slack';\n\nexport interface SlackAPI {\n  getChannels(): Observable<SlackChannel[]>;\n  getMembers(): Observable<SlackMember[]>;\n  postMessage(meta: SlackMessagePostMeta): Observable<null>;\n}\n\nexport class SlackClient implements SlackAPI {\n  getChannels(): Observable<SlackChannel[]> {\n    return jsonRequest({\n      method: 'GET',\n      route: `/v1/slack/channels`,\n    });\n  }\n\n  getMembers(): Observable<SlackMember[]> {\n    return jsonRequest({\n      method: 'GET',\n      route: `/v1/slack/members`,\n    });\n  }\n\n  postMessage(meta: SlackMessagePostMeta): Observable<null> {\n    return blankRequest({\n      method: 'POST',\n      route: `/v1/slack/messages`,\n      body: meta,\n    });\n  }\n}\n\nexport function mockSlackClient(): SlackAPI {\n  return {\n    getChannels: () => Observable.of([createSlackChannel()]),\n    getMembers: () => Observable.of([createSlackMember()]),\n    postMessage: () => Observable.of(null),\n  };\n}\n"]}]}