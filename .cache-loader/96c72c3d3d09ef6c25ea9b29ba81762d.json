{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/css-loader/dist/cjs.js??ref--7-2!/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/sass-loader/dist/cjs.js??ref--7-3!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/components/ThreadDetail/components/Cell/CollapsedCell/CollapsedCell.scss","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/components/ThreadDetail/components/Cell/CollapsedCell/CollapsedCell.scss","mtime":1675280254037},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/styles/helpers.scss","mtime":1675280254121},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/styles/colors.scss","mtime":1675280254121},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/styles/typography.scss","mtime":1675280254121},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/styles/mixins.scss","mtime":1675280254121},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/css-loader/dist/cjs.js","mtime":1675365393897},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/sass-loader/dist/cjs.js","mtime":1675365391315}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIpKHRydWUpOwovLyBNb2R1bGUKZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsICIudGhyZWFkLWRldGFpbC1jb2xsYXBzZWQtY2VsbCB7XG4gIHdpZHRoOiAxMDAlO1xuICBwYWRkaW5nOiAxMHB4O1xuICBwYWRkaW5nLWxlZnQ6IDI0cHg7XG4gIHBhZGRpbmctcmlnaHQ6IDI0cHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gIGFsaWduLWl0ZW1zOiB0b3A7XG4gIG9wYWNpdHk6IDAuNTtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbn1cbi50aHJlYWQtZGV0YWlsLWNvbGxhcHNlZC1jZWxsLnB1YmxpYy1mb2N1cyB7XG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyMjMsIDUwLCAwLjIpO1xufVxuLnRocmVhZC1kZXRhaWwtY29sbGFwc2VkLWNlbGwucHVibGljLWZvY3VzOmhvdmVyIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZlZjZjZjtcbn1cbi50aGVtZS1saWdodCAudGhyZWFkLWRldGFpbC1jb2xsYXBzZWQtY2VsbDpob3ZlciB7XG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlc21va2U7XG59XG4udGhlbWUtZGFyayAudGhyZWFkLWRldGFpbC1jb2xsYXBzZWQtY2VsbDpob3ZlciB7XG4gIGJhY2tncm91bmQtY29sb3I6ICMyOTI5Mjk7XG59XG4udGhyZWFkLWRldGFpbC1jb2xsYXBzZWQtY2VsbCA+IC5tZXNzYWdlLWNvbnRlbnQge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBmb250LXNpemU6IDEzcHg7XG4gIHRleHQtYWxpZ246IGxlZnQ7XG4gIGZsZXg6IDE7XG4gIG1pbi13aWR0aDogMHB4O1xuICBsaW5lLWhlaWdodDogMS4zODtcbn1cbi50aHJlYWQtZGV0YWlsLWNvbGxhcHNlZC1jZWxsID4gLm1lc3NhZ2UtY29udGVudCA+IC5zZW5kZXIge1xuICBmb250LXdlaWdodDogNzAwO1xuICBkaXNwbGF5OiBibG9jaztcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgd29yZC1icmVhazogYnJlYWstYWxsO1xuICBsaW5lLWhlaWdodDogMS4yMztcbn1cbi50aGVtZS1saWdodCAudGhyZWFkLWRldGFpbC1jb2xsYXBzZWQtY2VsbCA+IC5tZXNzYWdlLWNvbnRlbnQgPiAuc2VuZGVyIHtcbiAgY29sb3I6ICM0NDQ0NDQ7XG59XG4udGhlbWUtZGFyayAudGhyZWFkLWRldGFpbC1jb2xsYXBzZWQtY2VsbCA+IC5tZXNzYWdlLWNvbnRlbnQgPiAuc2VuZGVyIHtcbiAgY29sb3I6ICNlOGU4ZTg7XG59XG4udGhyZWFkLWRldGFpbC1jb2xsYXBzZWQtY2VsbCA+IC5tZXNzYWdlLWNvbnRlbnQgPiAuc25pcHBldCB7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICBkaXNwbGF5OiBibG9jaztcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgd29yZC1icmVhazogYnJlYWstYWxsO1xufVxuLnRoZW1lLWxpZ2h0IC50aHJlYWQtZGV0YWlsLWNvbGxhcHNlZC1jZWxsID4gLm1lc3NhZ2UtY29udGVudCA+IC5zbmlwcGV0IHtcbiAgY29sb3I6ICM3ZThmOWY7XG59XG4udGhlbWUtZGFyayAudGhyZWFkLWRldGFpbC1jb2xsYXBzZWQtY2VsbCA+IC5tZXNzYWdlLWNvbnRlbnQgPiAuc25pcHBldCB7XG4gIGNvbG9yOiAjQUFBQUFBO1xufVxuLnRocmVhZC1kZXRhaWwtY29sbGFwc2VkLWNlbGwgPiAucmlnaHQtY29udGVudCB7XG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBmb250LXNpemU6IDEycHg7XG4gIHRleHQtYWxpZ246IHJpZ2h0O1xufVxuLnRocmVhZC1kZXRhaWwtY29sbGFwc2VkLWNlbGwgPiAucmlnaHQtY29udGVudCA+IC50b3Age1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcbn1cbi50aHJlYWQtZGV0YWlsLWNvbGxhcHNlZC1jZWxsID4gLnJpZ2h0LWNvbnRlbnQgPiAudG9wID4gLmF0dGFjaG1lbnQge1xuICBoZWlnaHQ6IDE0cHg7XG4gIG1hcmdpbi1yaWdodDogNXB4O1xufVxuLnRocmVhZC1kZXRhaWwtY29sbGFwc2VkLWNlbGwgPiAucmlnaHQtY29udGVudCA+IC50b3AgPiAudGltZSB7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIHBhZGRpbmctYm90dG9tOiAxMHB4O1xufVxuLnRoZW1lLWxpZ2h0IC50aHJlYWQtZGV0YWlsLWNvbGxhcHNlZC1jZWxsID4gLnJpZ2h0LWNvbnRlbnQgPiAudG9wID4gLnRpbWUge1xuICBjb2xvcjogIzdlOGY5Zjtcbn1cbi50aGVtZS1kYXJrIC50aHJlYWQtZGV0YWlsLWNvbGxhcHNlZC1jZWxsID4gLnJpZ2h0LWNvbnRlbnQgPiAudG9wID4gLnRpbWUge1xuICBjb2xvcjogI0FBQUFBQTtcbn1cbi50aHJlYWQtZGV0YWlsLWNvbGxhcHNlZC1jZWxsID4gLnJpZ2h0LWNvbnRlbnQgPiAudHJhY2tzIHtcbiAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgY29sb3I6ICMwNzljZWY7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG4gIG1hcmdpbi10b3A6IDVweDtcbn1cbi50aGVtZS1saWdodCAudGhyZWFkLWRldGFpbC1jb2xsYXBzZWQtY2VsbCA+IC5yaWdodC1jb250ZW50ID4gLnRyYWNrcyA+IC50cmFjay1pY29uLnRyYWNrcyBwYXRoIHtcbiAgZmlsbDogIzA3OWNlZjtcbn1cbi50aGVtZS1kYXJrIC50aHJlYWQtZGV0YWlsLWNvbGxhcHNlZC1jZWxsID4gLnJpZ2h0LWNvbnRlbnQgPiAudHJhY2tzID4gLnRyYWNrLWljb24udHJhY2tzIHBhdGgge1xuICBmaWxsOiAjMDc5Y2VmO1xufVxuLnRoZW1lLWxpZ2h0IC50aHJlYWQtZGV0YWlsLWNvbGxhcHNlZC1jZWxsID4gLnJpZ2h0LWNvbnRlbnQgPiAudHJhY2tzID4gLnRyYWNrLWljb24gcGF0aCB7XG4gIGZpbGw6ICM3ZThmOWY7XG59XG4udGhlbWUtZGFyayAudGhyZWFkLWRldGFpbC1jb2xsYXBzZWQtY2VsbCA+IC5yaWdodC1jb250ZW50ID4gLnRyYWNrcyA+IC50cmFjay1pY29uIHBhdGgge1xuICBmaWxsOiAjQUFBQUFBO1xufVxuXG4udGhyZWFkLWRldGFpbC1hdmF0YXIge1xuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gIGhlaWdodDogMzBweDtcbiAgd2lkdGg6IDMwcHg7XG4gIGJvcmRlci1yYWRpdXM6IDEwMCU7XG4gIGJvcmRlcjogMXB4IHNvbGlkICNDOUQ0REY7XG59XG4udGhlbWUtbGlnaHQgLnRocmVhZC1kZXRhaWwtYXZhdGFyIHtcbiAgY29sb3I6ICNmMmY1Zjg7XG59XG4udGhlbWUtZGFyayAudGhyZWFkLWRldGFpbC1hdmF0YXIge1xuICBjb2xvcjogIzJDMkMyQztcbn0iLCAiIix7InZlcnNpb24iOjMsInNvdXJjZXMiOlsiL1VzZXJzL2FuZHJld3NhbWJveS9EZXNrdG9wL0dpdC9wb2x5bWFpbC93ZWJhcHAvc3JjL2NvbXBvbmVudHMvVGhyZWFkRGV0YWlsL2NvbXBvbmVudHMvQ2VsbC9Db2xsYXBzZWRDZWxsL0NvbGxhcHNlZENlbGwuc2NzcyIsIkNvbGxhcHNlZENlbGwuc2NzcyIsIi9Vc2Vycy9hbmRyZXdzYW1ib3kvRGVza3RvcC9HaXQvcG9seW1haWwvd2ViYXBwL3NyYy9zdHlsZXMvbWl4aW5zLnNjc3MiLCIvVXNlcnMvYW5kcmV3c2FtYm95L0Rlc2t0b3AvR2l0L3BvbHltYWlsL3dlYmFwcC9zcmMvc3R5bGVzL3R5cG9ncmFwaHkuc2NzcyIsIi9Vc2Vycy9hbmRyZXdzYW1ib3kvRGVza3RvcC9HaXQvcG9seW1haWwvd2ViYXBwL3NyYy9zdHlsZXMvY29sb3JzLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUE7RUFDRSxXQUFBO0VBQ0EsYUFBQTtFQUNBLGtCQUFBO0VBQ0EsbUJBQUE7RUFDQSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSxnQkFBQTtFQUNBLFlBQUE7RUFDQSxzQkFBQTtBQ0RGO0FER0U7RUFDRSx5Q0FBQTtBQ0RKO0FER0k7RUFDRSx5QkFBQTtBQ0ROO0FDREk7RUZPNEIsNEJBQUE7QUNIaEM7QUNKSTtFRk80Qix5QkFBQTtBQ0FoQztBREdFO0VBQ0UsYUFBQTtFQUNBLHNCQUFBO0VBQ0EsZUFBQTtFQUNBLGdCQUFBO0VBQ0EsT0FBQTtFQUNBLGNBQUE7RUFDQSxpQkFBQTtBQ0RKO0FER0k7RUFDRSxnQkcxQkM7RURrSEwsY0FBQTtFQUNBLG1CQUFBO0VBQ0EsZ0JBQUE7RUFDQSx1QkFBQTtFQUNBLHFCQUFBO0VBQ0EscUJBQUE7RUYxRkksaUJBQUE7QUNHTjtBQzFCSTtFRnFCOEIsY0FBQTtBQ1FsQztBQzdCSTtFRnFCOEIsY0FBQTtBQ1dsQztBRE5JO0VBQ0UsZ0JHbkNHO0VIcUNILGdCQUFBO0VBQ0EsdUJBQUE7RUU4RUosY0FBQTtFQUNBLG1CQUFBO0VBQ0EsZ0JBQUE7RUFDQSx1QkFBQTtFQUNBLHFCQUFBO0VBQ0EscUJBQUE7QUR0RUY7QUMzQ0k7RUY0QjhCLGNBQUE7QUNrQmxDO0FDOUNJO0VGNEI4QixjQUFBO0FDcUJsQztBRGRFO0VBQ0UsaUJBQUE7RUFDQSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSxlQUFBO0VBQ0EsaUJBQUE7QUNnQko7QURkSTtFQUNFLGFBQUE7RUFDQSxtQkFBQTtFQUNBLHVCQUFBO0FDZ0JOO0FEZE07RUFDRSxZQUFBO0VBQ0EsaUJBQUE7QUNnQlI7QURiTTtFQUNFLGdCRzdEQztFSCtERCxvQkFBQTtBQ2NSO0FDckVJO0VGc0RnQyxjQUFBO0FDa0JwQztBQ3hFSTtFRnNEZ0MsY0FBQTtBQ3FCcEM7QURoQkk7RUFDRSxnQkdsRUM7RUhtRUQsY0luRUU7RUpvRUYsYUFBQTtFQUNBLG1CQUFBO0VBQ0EsbUJBQUE7RUFDQSx5QkFBQTtFQUNBLGVBQUE7QUNrQk47QUNwRkk7RUZzRWtDLGFBQUE7QUNpQnRDO0FDdkZJO0VGc0VrQyxhQUFBO0FDb0J0QztBQzFGSTtFRjBFa0MsYUFBQTtBQ21CdEM7QUM3Rkk7RUYwRWtDLGFBQUE7QUNzQnRDOztBRGZBO0VBQ0Usa0JBQUE7RUFDQSxZQUFBO0VBQ0EsV0FBQTtFQUVBLG1CQUFBO0VBQ0EseUJBQUE7QUNpQkY7QUN4R0k7RUZxRjBCLGNBQUE7QUNzQjlCO0FDM0dJO0VGcUYwQixjQUFBO0FDeUI5QiIsImZpbGUiOiJDb2xsYXBzZWRDZWxsLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJAaW1wb3J0ICdoZWxwZXJzJztcblxuLnRocmVhZC1kZXRhaWwtY29sbGFwc2VkLWNlbGwge1xuICB3aWR0aDogMTAwJTtcbiAgcGFkZGluZzogMTBweDtcbiAgcGFkZGluZy1sZWZ0OiAyNHB4O1xuICBwYWRkaW5nLXJpZ2h0OiAyNHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICBhbGlnbi1pdGVtczogdG9wO1xuICBvcGFjaXR5OiAwLjU7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cbiAgJi5wdWJsaWMtZm9jdXMge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyMjMsIDUwLCAwLjIpO1xuXG4gICAgJjpob3ZlciB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBkYXJrZW4oI0ZFRjlERSwgMyUpO1xuICAgIH1cbiAgfVxuXG4gICY6aG92ZXIge1xuICAgIEBpbmNsdWRlIHRoZW1pZnkoJHRoZW1lcykgeyBiYWNrZ3JvdW5kLWNvbG9yOiB0aGVtZWQoJ2hpZ2hDb250cmFzdEhvdmVyJyk7IH07XG4gIH1cblxuICA+IC5tZXNzYWdlLWNvbnRlbnQge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBmb250LXNpemU6IDEzcHg7XG4gICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgICBmbGV4OiAxO1xuICAgIG1pbi13aWR0aDogMHB4O1xuICAgIGxpbmUtaGVpZ2h0OiAxLjM4O1xuXG4gICAgPiAuc2VuZGVyIHtcbiAgICAgIGZvbnQtd2VpZ2h0OiAkYm9sZDtcbiAgICAgIEBpbmNsdWRlIHRoZW1pZnkoJHRoZW1lcykgeyBjb2xvcjogdGhlbWVkKCdwcmltYXJ5VGV4dENvbG9yJyk7IH07XG4gICAgICBAaW5jbHVkZSB0cnVuY2F0ZS1hdCgxKTtcbiAgICAgIGxpbmUtaGVpZ2h0OiAxLjIzO1xuICAgIH1cblxuICAgID4gLnNuaXBwZXQge1xuICAgICAgZm9udC13ZWlnaHQ6ICRtZWRpdW07XG4gICAgICBAaW5jbHVkZSB0aGVtaWZ5KCR0aGVtZXMpIHsgY29sb3I6IHRoZW1lZCgnc2Vjb25kYXJ5VGV4dENvbG9yJyk7IH07XG4gICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gICAgICBAaW5jbHVkZSB0cnVuY2F0ZS1hdCgxKTtcbiAgICB9XG4gIH1cblxuICA+IC5yaWdodC1jb250ZW50IHtcbiAgICBtYXJnaW4tbGVmdDogMTBweDtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgZm9udC1zaXplOiAxMnB4O1xuICAgIHRleHQtYWxpZ246IHJpZ2h0O1xuXG4gICAgPiAudG9wIHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICAgICAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG5cbiAgICAgID4gLmF0dGFjaG1lbnQge1xuICAgICAgICBoZWlnaHQ6IDE0cHg7XG4gICAgICAgIG1hcmdpbi1yaWdodDogNXB4O1xuICAgICAgfVxuXG4gICAgICA+IC50aW1lIHtcbiAgICAgICAgZm9udC13ZWlnaHQ6ICRtZWRpdW07XG4gICAgICAgIEBpbmNsdWRlIHRoZW1pZnkoJHRoZW1lcykgeyBjb2xvcjogdGhlbWVkKCdzZWNvbmRhcnlUZXh0Q29sb3InKTsgfTtcbiAgICAgICAgcGFkZGluZy1ib3R0b206IDEwcHg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgPiAudHJhY2tzIHtcbiAgICAgIGZvbnQtd2VpZ2h0OiAkYm9sZDtcbiAgICAgIGNvbG9yOiAkYXp1cmU7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xuICAgICAgbWFyZ2luLXRvcDogNXB4O1xuXG4gICAgICA+IC50cmFjay1pY29uIHtcbiAgICAgICAgJi50cmFja3MgcGF0aCB7XG4gICAgICAgICAgQGluY2x1ZGUgdGhlbWlmeSgkdGhlbWVzKSB7IGZpbGw6IHRoZW1lZCgncHJpbWFyeUFjY2VudCcpOyB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcGF0aCB7XG4gICAgICAgICAgQGluY2x1ZGUgdGhlbWlmeSgkdGhlbWVzKSB7IGZpbGw6IHRoZW1lZCgnc2Vjb25kYXJ5VGV4dENvbG9yJyk7IH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLnRocmVhZC1kZXRhaWwtYXZhdGFyIHtcbiAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICBoZWlnaHQ6IDMwcHg7XG4gIHdpZHRoOiAzMHB4O1xuICBAaW5jbHVkZSB0aGVtaWZ5KCR0aGVtZXMpIHsgY29sb3I6IHRoZW1lZCgnbG93Q29udHJhc3RCb3JkZXJDb2xvcicpOyB9O1xuICBib3JkZXItcmFkaXVzOiAxMDAlO1xuICBib3JkZXI6IDFweCBzb2xpZCAjQzlENERGO1xufVxuIiwiLnRocmVhZC1kZXRhaWwtY29sbGFwc2VkLWNlbGwge1xuICB3aWR0aDogMTAwJTtcbiAgcGFkZGluZzogMTBweDtcbiAgcGFkZGluZy1sZWZ0OiAyNHB4O1xuICBwYWRkaW5nLXJpZ2h0OiAyNHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICBhbGlnbi1pdGVtczogdG9wO1xuICBvcGFjaXR5OiAwLjU7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG59XG4udGhyZWFkLWRldGFpbC1jb2xsYXBzZWQtY2VsbC5wdWJsaWMtZm9jdXMge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjIzLCA1MCwgMC4yKTtcbn1cbi50aHJlYWQtZGV0YWlsLWNvbGxhcHNlZC1jZWxsLnB1YmxpYy1mb2N1czpob3ZlciB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZWY2Y2Y7XG59XG4udGhlbWUtbGlnaHQgLnRocmVhZC1kZXRhaWwtY29sbGFwc2VkLWNlbGw6aG92ZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZXNtb2tlO1xufVxuLnRoZW1lLWRhcmsgLnRocmVhZC1kZXRhaWwtY29sbGFwc2VkLWNlbGw6aG92ZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjkyOTI5O1xufVxuLnRocmVhZC1kZXRhaWwtY29sbGFwc2VkLWNlbGwgPiAubWVzc2FnZS1jb250ZW50IHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgZm9udC1zaXplOiAxM3B4O1xuICB0ZXh0LWFsaWduOiBsZWZ0O1xuICBmbGV4OiAxO1xuICBtaW4td2lkdGg6IDBweDtcbiAgbGluZS1oZWlnaHQ6IDEuMzg7XG59XG4udGhyZWFkLWRldGFpbC1jb2xsYXBzZWQtY2VsbCA+IC5tZXNzYWdlLWNvbnRlbnQgPiAuc2VuZGVyIHtcbiAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgZGlzcGxheTogYmxvY2s7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gIHdvcmQtYnJlYWs6IGJyZWFrLWFsbDtcbiAgbGluZS1oZWlnaHQ6IDEuMjM7XG59XG4udGhlbWUtbGlnaHQgLnRocmVhZC1kZXRhaWwtY29sbGFwc2VkLWNlbGwgPiAubWVzc2FnZS1jb250ZW50ID4gLnNlbmRlciB7XG4gIGNvbG9yOiAjNDQ0NDQ0O1xufVxuLnRoZW1lLWRhcmsgLnRocmVhZC1kZXRhaWwtY29sbGFwc2VkLWNlbGwgPiAubWVzc2FnZS1jb250ZW50ID4gLnNlbmRlciB7XG4gIGNvbG9yOiAjZThlOGU4O1xufVxuLnRocmVhZC1kZXRhaWwtY29sbGFwc2VkLWNlbGwgPiAubWVzc2FnZS1jb250ZW50ID4gLnNuaXBwZXQge1xuICBmb250LXdlaWdodDogNTAwO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgZGlzcGxheTogYmxvY2s7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gIHdvcmQtYnJlYWs6IGJyZWFrLWFsbDtcbn1cbi50aGVtZS1saWdodCAudGhyZWFkLWRldGFpbC1jb2xsYXBzZWQtY2VsbCA+IC5tZXNzYWdlLWNvbnRlbnQgPiAuc25pcHBldCB7XG4gIGNvbG9yOiAjN2U4ZjlmO1xufVxuLnRoZW1lLWRhcmsgLnRocmVhZC1kZXRhaWwtY29sbGFwc2VkLWNlbGwgPiAubWVzc2FnZS1jb250ZW50ID4gLnNuaXBwZXQge1xuICBjb2xvcjogI0FBQUFBQTtcbn1cbi50aHJlYWQtZGV0YWlsLWNvbGxhcHNlZC1jZWxsID4gLnJpZ2h0LWNvbnRlbnQge1xuICBtYXJnaW4tbGVmdDogMTBweDtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgZm9udC1zaXplOiAxMnB4O1xuICB0ZXh0LWFsaWduOiByaWdodDtcbn1cbi50aHJlYWQtZGV0YWlsLWNvbGxhcHNlZC1jZWxsID4gLnJpZ2h0LWNvbnRlbnQgPiAudG9wIHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG59XG4udGhyZWFkLWRldGFpbC1jb2xsYXBzZWQtY2VsbCA+IC5yaWdodC1jb250ZW50ID4gLnRvcCA+IC5hdHRhY2htZW50IHtcbiAgaGVpZ2h0OiAxNHB4O1xuICBtYXJnaW4tcmlnaHQ6IDVweDtcbn1cbi50aHJlYWQtZGV0YWlsLWNvbGxhcHNlZC1jZWxsID4gLnJpZ2h0LWNvbnRlbnQgPiAudG9wID4gLnRpbWUge1xuICBmb250LXdlaWdodDogNTAwO1xuICBwYWRkaW5nLWJvdHRvbTogMTBweDtcbn1cbi50aGVtZS1saWdodCAudGhyZWFkLWRldGFpbC1jb2xsYXBzZWQtY2VsbCA+IC5yaWdodC1jb250ZW50ID4gLnRvcCA+IC50aW1lIHtcbiAgY29sb3I6ICM3ZThmOWY7XG59XG4udGhlbWUtZGFyayAudGhyZWFkLWRldGFpbC1jb2xsYXBzZWQtY2VsbCA+IC5yaWdodC1jb250ZW50ID4gLnRvcCA+IC50aW1lIHtcbiAgY29sb3I6ICNBQUFBQUE7XG59XG4udGhyZWFkLWRldGFpbC1jb2xsYXBzZWQtY2VsbCA+IC5yaWdodC1jb250ZW50ID4gLnRyYWNrcyB7XG4gIGZvbnQtd2VpZ2h0OiA3MDA7XG4gIGNvbG9yOiAjMDc5Y2VmO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xuICBtYXJnaW4tdG9wOiA1cHg7XG59XG4udGhlbWUtbGlnaHQgLnRocmVhZC1kZXRhaWwtY29sbGFwc2VkLWNlbGwgPiAucmlnaHQtY29udGVudCA+IC50cmFja3MgPiAudHJhY2staWNvbi50cmFja3MgcGF0aCB7XG4gIGZpbGw6ICMwNzljZWY7XG59XG4udGhlbWUtZGFyayAudGhyZWFkLWRldGFpbC1jb2xsYXBzZWQtY2VsbCA+IC5yaWdodC1jb250ZW50ID4gLnRyYWNrcyA+IC50cmFjay1pY29uLnRyYWNrcyBwYXRoIHtcbiAgZmlsbDogIzA3OWNlZjtcbn1cbi50aGVtZS1saWdodCAudGhyZWFkLWRldGFpbC1jb2xsYXBzZWQtY2VsbCA+IC5yaWdodC1jb250ZW50ID4gLnRyYWNrcyA+IC50cmFjay1pY29uIHBhdGgge1xuICBmaWxsOiAjN2U4ZjlmO1xufVxuLnRoZW1lLWRhcmsgLnRocmVhZC1kZXRhaWwtY29sbGFwc2VkLWNlbGwgPiAucmlnaHQtY29udGVudCA+IC50cmFja3MgPiAudHJhY2staWNvbiBwYXRoIHtcbiAgZmlsbDogI0FBQUFBQTtcbn1cblxuLnRocmVhZC1kZXRhaWwtYXZhdGFyIHtcbiAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICBoZWlnaHQ6IDMwcHg7XG4gIHdpZHRoOiAzMHB4O1xuICBib3JkZXItcmFkaXVzOiAxMDAlO1xuICBib3JkZXI6IDFweCBzb2xpZCAjQzlENERGO1xufVxuLnRoZW1lLWxpZ2h0IC50aHJlYWQtZGV0YWlsLWF2YXRhciB7XG4gIGNvbG9yOiAjZjJmNWY4O1xufVxuLnRoZW1lLWRhcmsgLnRocmVhZC1kZXRhaWwtYXZhdGFyIHtcbiAgY29sb3I6ICMyQzJDMkM7XG59IiwiQGZ1bmN0aW9uIHRoZW1lZCgka2V5KSB7XG4gIEByZXR1cm4gbWFwLWdldCgkdGhlbWUtbWFwLCAka2V5KTtcbn1cblxuQG1peGluIGFwcC1kcmFnZ2FibGUoKSB7XG4gIC13ZWJraXQtYXBwLXJlZ2lvbjogZHJhZztcblxuICAudGhlbWUtd2luZG93cyAmIHtcbiAgICAtd2Via2l0LWFwcC1yZWdpb246IG5vLWRyYWc7XG4gIH1cbn1cblxuQG1peGluIHRoZW1pZnkoJHRoZW1lczogJHRoZW1lcykge1xuICBAZWFjaCAkdGhlbWUsICRtYXAgaW4gJHRoZW1lcyB7XG5cbiAgICAudGhlbWUtI3skdGhlbWV9ICYge1xuICAgICAgJHRoZW1lLW1hcDogKCkgIWdsb2JhbDtcbiAgICAgIEBlYWNoICRrZXksICRzdWJtYXAgaW4gJG1hcCB7XG4gICAgICAgICR2YWx1ZTogbWFwLWdldChtYXAtZ2V0KCR0aGVtZXMsICR0aGVtZSksICcjeyRrZXl9Jyk7XG4gICAgICAgICR0aGVtZS1tYXA6IG1hcC1tZXJnZSgkdGhlbWUtbWFwLCAoJGtleTogJHZhbHVlKSkgIWdsb2JhbDtcbiAgICAgIH1cblxuICAgICAgQGNvbnRlbnQ7XG4gICAgICAkdGhlbWUtbWFwOiBudWxsICFnbG9iYWw7XG4gICAgfVxuXG4gIH1cbn1cblxuQG1peGluIHRoZW1pZnlCb2R5KCR0aGVtZXM6ICR0aGVtZXMpIHtcbiAgQGVhY2ggJHRoZW1lLCAkbWFwIGluICR0aGVtZXMge1xuXG4gICAgJi50aGVtZS0jeyR0aGVtZX0ge1xuICAgICAgJHRoZW1lLW1hcDogKCkgIWdsb2JhbDtcbiAgICAgIEBlYWNoICRrZXksICRzdWJtYXAgaW4gJG1hcCB7XG4gICAgICAgICR2YWx1ZTogbWFwLWdldChtYXAtZ2V0KCR0aGVtZXMsICR0aGVtZSksICcjeyRrZXl9Jyk7XG4gICAgICAgICR0aGVtZS1tYXA6IG1hcC1tZXJnZSgkdGhlbWUtbWFwLCAoJGtleTogJHZhbHVlKSkgIWdsb2JhbDtcbiAgICAgIH1cblxuICAgICAgQGNvbnRlbnQ7XG4gICAgICAkdGhlbWUtbWFwOiBudWxsICFnbG9iYWw7XG4gICAgfVxuXG4gIH1cbn1cblxuQG1peGluIHRoZW1pZnlTaW5nbGUoJG1vZGUsICR0aGVtZXM6ICR0aGVtZXMpIHtcbiAgQGVhY2ggJHRoZW1lLCAkbWFwIGluICR0aGVtZXMge1xuICAgIEBpZiAkbW9kZSA9PSAkdGhlbWUge1xuICAgICAgLnRoZW1lLSN7JHRoZW1lfSAmIHtcbiAgICAgICAgJHRoZW1lLW1hcDogKCkgIWdsb2JhbDtcbiAgICAgICAgQGVhY2ggJGtleSwgJHN1Ym1hcCBpbiAkbWFwIHtcbiAgICAgICAgICAkdmFsdWU6IG1hcC1nZXQobWFwLWdldCgkdGhlbWVzLCAkdGhlbWUpLCAnI3ska2V5fScpO1xuICAgICAgICAgICR0aGVtZS1tYXA6IG1hcC1tZXJnZSgkdGhlbWUtbWFwLCAoJGtleTogJHZhbHVlKSkgIWdsb2JhbDtcbiAgICAgICAgfVxuXG4gICAgICAgIEBjb250ZW50O1xuICAgICAgICAkdGhlbWUtbWFwOiBudWxsICFnbG9iYWw7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBib3VuY2UtcGl4ZWxzKCRwaXhlbHMpIHtcbiAgQGtleWZyYW1lcyBib3VuY2UtcGl4ZWxzIHtcbiAgICAwJSB7IHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtJHBpeGVscykgfVxuICAgIDUwJSB7IHRyYW5zZm9ybTogdHJhbnNsYXRlWSgkcGl4ZWxzKSB9XG4gICAgMTAwJSB7IHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtJHBpeGVscykgfVxuICB9XG4gIGFuaW1hdGlvbjogYm91bmNlLXBpeGVscyAycyBlYXNlLWluLW91dCBpbmZpbml0ZTtcbn1cblxuQG1peGluIGZvcmNlLWdwdSgpIHtcbiAgLXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5OiBoaWRkZW47XG4gIC1tb3otYmFja2ZhY2UtdmlzaWJpbGl0eTogaGlkZGVuO1xuICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMSk7XG4gIC1tcy10cmFuc2Zvcm06IHNjYWxlKDEpO1xuICAtbW96LXRyYW5zZm9ybTogc2NhbGUoMSk7XG4gIGJhY2tmYWNlLXZpc2liaWxpdHk6IGhpZGRlbjtcbiAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcbn1cblxuQG1peGluIGJsdXIoJHBpeGVscykge1xuICAtd2Via2l0LWZpbHRlcjogYmx1cigkcGl4ZWxzKTtcbiAgLW1vei1maWx0ZXI6IGJsdXIoJHBpeGVscyk7XG4gIC1vLWZpbHRlcjogYmx1cigkcGl4ZWxzKTtcbiAgLW1zLWZpbHRlcjogYmx1cigkcGl4ZWxzKTtcbiAgZmlsdGVyOiBibHVyKCRwaXhlbHMpO1xufVxuXG5AbWl4aW4gZW5hYmxlLXNlbGVjdGlvbigpIHtcbiAgLXdlYmtpdC10b3VjaC1jYWxsb3V0OiBhdXRvOyAvKiBpT1MgU2FmYXJpICovXG4gIC13ZWJraXQtdXNlci1zZWxlY3Q6IHRleHQ7IC8qIFNhZmFyaSAqL1xuICAta2h0bWwtdXNlci1zZWxlY3Q6IHRleHQ7IC8qIEtvbnF1ZXJvciBIVE1MICovXG4gIC1tb3otdXNlci1zZWxlY3Q6IHRleHQ7IC8qIEZpcmVmb3ggKi9cbiAgLW1zLXVzZXItc2VsZWN0OiB0ZXh0OyAvKiBJbnRlcm5ldCBFeHBsb3Jlci9FZGdlICovXG4gIHVzZXItc2VsZWN0OiB0ZXh0O1xuICAtd2Via2l0LWFwcC1yZWdpb246IG5vLWRyYWc7XG4gIGN1cnNvcjogYXV0bztcbn1cblxuQG1peGluIGRpc2FibGUtc2VsZWN0aW9uKCkge1xuICAtd2Via2l0LXRvdWNoLWNhbGxvdXQ6IG5vbmU7IC8qIGlPUyBTYWZhcmkgKi9cbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTsgLyogU2FmYXJpICovXG4gIC1raHRtbC11c2VyLXNlbGVjdDogbm9uZTsgLyogS29ucXVlcm9yIEhUTUwgKi9cbiAgLW1vei11c2VyLXNlbGVjdDogbm9uZTsgLyogRmlyZWZveCAqL1xuICAtbXMtdXNlci1zZWxlY3Q6IG5vbmU7IC8qIEludGVybmV0IEV4cGxvcmVyL0VkZ2UgKi9cbiAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gIGN1cnNvcjogZGVmYXVsdDtcbn1cblxuQG1peGluIGVuYWJsZS1mb250LXNtb290aGluZygpIHtcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XG4gIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7XG59XG5cbkBtaXhpbiBkaXNhYmxlLWZvbnQtc21vb3RoaW5nKCkge1xuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhdXRvO1xuICAtbW96LW9zeC1mb250LXNtb290aGluZzogYXV0bztcbn1cblxuQG1peGluIHRydW5jYXRlLWF0KCRsaW5lcykge1xuICAvLyBlbGxpcHNpc1xuICBkaXNwbGF5OiBibG9jaztcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgd29yZC1icmVhazogYnJlYWstYWxsO1xuXG4gIC8vIG11bHRpbGluZSBlbGxpcHNlcyBmb3Igd2Via2l0IGJyb3dzZXJzXG4gIC8vIGFsbCBvdGhlciBicm93c2VycyB3aWxsIGxpbWl0IHRvIDEgbGluZSxcbiAgLy8gICBidXQgbm90IGdldCBlbGxpcHNpc1xuICBAaWYgJGxpbmVzID4gMSB7XG4gICAgLXdlYmtpdC1saW5lLWNsYW1wOiAkbGluZXM7XG4gICAgLXdlYmtpdC1ib3gtb3JpZW50OiB2ZXJ0aWNhbDtcbiAgICAvLyBOT1RFKFNIQUhBTik6IFRoZSBmb2xsb3dpbmcgYnJlYWtzIHRoZSAuLi4gaW4gbm9uLXdlYmtpdCBicm93c2Vyc1xuICAgIHdoaXRlLXNwYWNlOiBub3JtYWw7XG4gICAgZGlzcGxheTogLXdlYmtpdC1ib3g7XG4gIH1cbn1cblxuQG1peGluIGRyb3AtcmlnaHQoJHNlY29uZHMpIHtcbiAgYW5pbWF0aW9uOiBkcm9wLXJpZ2h0ICRzZWNvbmRzIGVhc2UtaW4tb3V0IDBzIDE7XG59XG5cbkBtaXhpbiBkcm9wLWluKCRzZWNvbmRzKSB7XG4gIGFuaW1hdGlvbjogZHJvcC1pbiAkc2Vjb25kcyBlYXNlLWluLW91dCAwcyAxO1xufVxuXG5AbWl4aW4gZXhwYW5kLXZlcnRpY2FsKCRzZWNvbmRzKSB7XG4gIHRyYW5zZm9ybS1vcmlnaW46IHRvcDtcbiAgYW5pbWF0aW9uOiBleHBhbmQtdmVydGljYWwgJHNlY29uZHMgZWFzZS1pbi1vdXQgMHMgMTtcbn1cblxuQG1peGluIGZhZGUtaW4oJHNlY29uZHMpIHtcbiAgYW5pbWF0aW9uOiBmYWRlLWluICRzZWNvbmRzIGVhc2UtaW4tb3V0IDBzIDE7XG59XG5cbkBtaXhpbiBmYWRlLW91dCgkc2Vjb25kcykge1xuICBhbmltYXRpb246IGZhZGUtb3V0ICRzZWNvbmRzIGVhc2UtaW4tb3V0IDBzIDE7XG4gIGFuaW1hdGlvbi1maWxsLW1vZGU6IGZvcndhcmRzO1xufVxuXG5AbWl4aW4gZXhwYW5kKCRzZWNvbmRzKSB7XG4gIGFuaW1hdGlvbjogZXhwYW5kICRzZWNvbmRzIGVhc2UtaW4tb3V0IDBzIDE7XG59XG5cbkBtaXhpbiBicm93c2VyLWRlZmF1bHRzKCkge1xuICBAaW5jbHVkZSBkaXNhYmxlLWZvbnQtc21vb3RoaW5nKCk7XG4gIGxpbmUtaGVpZ2h0OiBpbml0aWFsO1xuXG4gICoge1xuICAgIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuICAgIGxldHRlci1zcGFjaW5nOiBpbml0aWFsO1xuICB9XG5cbiAgYiwgc3Ryb25nIHtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgfVxuXG4gIGgxIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBmb250LXNpemU6IDJlbTtcbiAgICBtYXJnaW4tdG9wOiAwLjY3ZW07XG4gICAgbWFyZ2luLWJvdHRvbTogMC42N2VtO1xuICAgIG1hcmdpbi1sZWZ0OiAwO1xuICAgIG1hcmdpbi1yaWdodDogMDtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgfVxuXG4gIGgyIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBmb250LXNpemU6IDEuNWVtO1xuICAgIG1hcmdpbi10b3A6IDAuODNlbTtcbiAgICBtYXJnaW4tYm90dG9tOiAwLjgzZW07XG4gICAgbWFyZ2luLWxlZnQ6IDA7XG4gICAgbWFyZ2luLXJpZ2h0OiAwO1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICB9XG5cbiAgaDMge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIGZvbnQtc2l6ZTogMS4xN2VtO1xuICAgIG1hcmdpbi10b3A6IDFlbTtcbiAgICBtYXJnaW4tYm90dG9tOiAxZW07XG4gICAgbWFyZ2luLWxlZnQ6IDA7XG4gICAgbWFyZ2luLXJpZ2h0OiAwO1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICB9XG5cbiAgaDQge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIGZvbnQtc2l6ZTogMWVtO1xuICAgIG1hcmdpbi10b3A6IDEuMzNlbTtcbiAgICBtYXJnaW4tYm90dG9tOiAxLjMzZW07XG4gICAgbWFyZ2luLWxlZnQ6IDA7XG4gICAgbWFyZ2luLXJpZ2h0OiAwO1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICB9XG5cbiAgaDUge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIGZvbnQtc2l6ZTogLjgzZW07XG4gICAgbWFyZ2luLXRvcDogMS42N2VtO1xuICAgIG1hcmdpbi1ib3R0b206IDEuNjdlbTtcbiAgICBtYXJnaW4tbGVmdDogMDtcbiAgICBtYXJnaW4tcmlnaHQ6IDA7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIH1cblxuICBoNiB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgZm9udC1zaXplOiAuNjdlbTtcbiAgICBtYXJnaW4tdG9wOiAyLjMzZW07XG4gICAgbWFyZ2luLWJvdHRvbTogMi4zM2VtO1xuICAgIG1hcmdpbi1sZWZ0OiAwO1xuICAgIG1hcmdpbi1yaWdodDogMDtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgfVxuXG4gIHAge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIG1hcmdpbi10b3A6IDFlbTtcbiAgICBtYXJnaW4tYm90dG9tOiAxZW07XG4gICAgbWFyZ2luLWxlZnQ6IDA7XG4gICAgbWFyZ2luLXJpZ2h0OiAwO1xuICB9XG59XG4iLCIvLyBpZiB0aGUgZm9sbG93aW5nIGlzIHVwZGF0ZWQsIHNob3VsZCBhbHNvIHVwZGF0ZSBgbGliL3R5cG9ncmFwaHkudHNgXG4kZGVmYXVsdEZvbnQ6IC1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCxcbiAgXCJTZWdvZSBVSVwiLCBcIlJvYm90b1wiLCBcIk94eWdlblwiLCBcIlVidW50dVwiLCBcIkNhbnRhcmVsbFwiLFxuICBcIkZpcmEgU2Fuc1wiLCBcIkRyb2lkIFNhbnNcIiwgXCJIZWx2ZXRpY2EgTmV1ZVwiLFxuICBzYW5zLXNlcmlmO1xuXG4kcmVndWxhcjogNDAwO1xuJG1lZGl1bTogNTAwO1xuJHNlbWlib2xkOiA2MDA7XG4kYm9sZDogNzAwO1xuIiwiLy8gTGlnaHQgVGhlbWVzIFNBU1MgdmFyc1xuJHdoaXRlOiAjZmZmZmZmO1xuJHNub3c6ICNmYWZhZmE7XG4kY2hhcmNvYWw6ICM0NDQ0NDQ7XG4kZ3JheTogI2M5ZDRlMDtcbiRzaWx2ZXI6ICM3ZThmOWY7XG4kbGFiZWw6ICNkMzQ3YWU7XG4kaW5ib3g6ICM0N2RmZjU7XG4kbWlkbmlnaHQ6ICMyNDJlNDQ7XG4kYXp1cmU6ICMwNzljZWY7XG4kcmVhZExhdGVyOiAjZmZhMDU3O1xuJGFyY2hpdmU6ICM4N2VjYmI7XG4kdHJhc2g6ICNmZjZiN2M7XG4kc3RhcjogI2ZmZGYzMjtcbiRzZW5kTGF0ZXI6ICMxMDk3ZGQ7XG4kZm9sbG93VXA6ICNmNjRiODE7XG4kZXJyb3I6ICNlNzRjM2M7XG4kY29tcG9zZUhvdmVyOiAjNEVENkVCO1xuJGxzYkNlbGxIb3ZlcjogIzQzNGY2NztcbiRsc2JDZWxsU2VsZWN0ZWQ6ICMzMzNlNTU7XG4kbGlnaHRHcmF5OiAjZjJmNWY4O1xuJGRhcmtCbHVlOiAjMmM3MWMxO1xuJG1lZGl1bUdyZWVuOiAjMGVjMzZiO1xuJGJvcmRlckdyYXk6ICNlZWVlZWU7XG4kaWNlQmx1ZTogI2U4ZjNmZjtcbiRjb21wbGV0ZWRHcmF5OiAjYWZiYmM4O1xuJGdyYXlIb3ZlcjogZGFya2VuKCR3aGl0ZSwgNCUpO1xuJHRocmVhZEhvdmVyOiByZ2JhKCRpY2VCbHVlLCAuNSk7XG4kdGhyZWFkU2VsZWN0ZWQ6ICRpY2VCbHVlO1xuJGNvbW1lbnRCb2R5OiByZ2JhKDAsIDE3MCwgMjU1LCAwLjEpO1xuJGJsYWNrOiAjMDAwMDAwO1xuXG4kZmFjZWJvb2s6ICM1YTdhYzc7XG4kdHdpdHRlcjogIzViYmNlYztcbiRhbmdlbExpc3Q6ICMwMDAwMDA7XG4kbGlua2VkSW46ICMwMDdiYjU7XG5cbiRib3hTaGFkb3c6IDJweCAycHggNHB4IDAgcmdiYSgxMjUsIDE0MywgMTYwLCAwLjUpO1xuJGdyYXlCb3JkZXI6IHNvbGlkIDJweCAkYm9yZGVyR3JheTtcbiRsaWdodEdyYXlCb3JkZXI6ICRsaWdodEdyYXkgMXB4IHNvbGlkO1xuJHNlcXVlbmNlTWF4V2lkdGg6IDEwNDBweDtcblxuLy8gQ29uc3RhbnRzIChOb3QgY2hhbmdlZCBieSB0aGVtZSlcbiR0cnVlV2hpdGU6ICNmZmZmZmY7XG4kdHJ1ZURhcms6ICMxMjEyMTI7XG5cbi8vIExpZ2h0IFRoZW1lcyBTQVNTIHZhcnNcbiRkYXJrUHJpbWFyeVRleHQ6ICNlOGU4ZTg7XG4kZGFya1NlY29uZGFyeVRleHQ6ICNBQUFBQUE7XG5cbiRkYXJrOiAnZGFyayc7XG4kbGlnaHQ6ICdsaWdodCc7XG5cbi8vIFRoZW1pZmllZCBDb2xvcnNcbiR0aGVtZXM6IChcbiAgJGxpZ2h0OiAoXG4gICAgdHJ1ZURhcms6ICR0cnVlRGFyayxcbiAgICB0cnVlV2hpdGU6ICNmYWZhZmEsXG4gICAgdW5zZXQ6ICd1bnNldCcsXG4gICAgdHJhbnNwYXJlbnRDb2xvcjogdHJhbnNwYXJlbnQsXG4gICAgcHJpbWFyeUFjY2VudDogJGF6dXJlLFxuXG4gICAgLy8gTWFpbiBBcHBcbiAgICBwcmltYXJ5VGV4dENvbG9yOiAkY2hhcmNvYWwsXG4gICAgc2Vjb25kYXJ5VGV4dENvbG9yOiAkc2lsdmVyLFxuICAgIHRlcnRpYXJ5VGV4dENvbG9yOiAkZ3JheSxcblxuICAgIC8vIEJhY2tncm91bmQgQ29sb3JzXG4gICAgcHJpbWFyeUJhY2tncm91bmRDb2xvcjogJHdoaXRlLFxuICAgIHNlY29uZGFyeUJhY2tncm91bmRDb2xvcjogJHNub3csXG4gICAgdGVydGlhcnlCYWNrZ3JvdW5kQ29sb3I6ICR3aGl0ZSxcbiAgICBwcmltYXJ5Q29udHJhc3RCb3JkZXJDb2xvcjogJGxpZ2h0R3JheSxcbiAgICBzZWNvbmRhcnlDb250cmFzdEJvcmRlckNvbG9yOiAkbGlnaHRHcmF5LFxuXG4gICAgLy8gTGVmdCBTaWRlYmFyXG4gICAgbHNiQmFja2dyb3VuZENvbG9yOiAkbWlkbmlnaHQsXG4gICAgbHNiSGVhZGVyQ29sb3I6ICRncmF5LFxuXG4gICAgLy8gQm9yZGVyc1xuICAgIGxvd0NvbnRyYXN0Qm9yZGVyOiAkbGlnaHRHcmF5IDFweCBzb2xpZCxcbiAgICBsb3dDb250cmFzdEJvcmRlckNvbG9yOiAkbGlnaHRHcmF5LFxuICAgIGhpZ2hDb250cmFzdEJvcmRlcjogJGdyYXkgMnB4IHNvbGlkLFxuICAgIGhpZ2hDb250cmFzdEJvcmRlckNvbG9yOiAkZ3JheSxcbiAgICBib3hTaGFkb3c6ICRib3hTaGFkb3csXG5cbiAgICAvLyBBY2NlbnRzXG4gICAgbG93Q29udHJhc3RBY2NlbnQ6IHJnYmEoMjQyLCAyNDUsIDI0OCwgMC41KSxcblxuICAgIC8vIEhvdmVyc1xuICAgIGhpZ2hDb250cmFzdEhvdmVyOiAkZ3JheUhvdmVyLFxuXG4gICAgZ3JheTogJGdyYXksXG4gICAgZ3JheVRleHQ6ICRncmF5LFxuICAgIG1pZG5pZ2h0OiAkbWlkbmlnaHQsXG4gICAgaWNlQmx1ZTogJGljZUJsdWUsXG4gICAgdGhyZWFkSG92ZXI6IHJnYmEoJGljZUJsdWUsIDAuNSksXG4gICAgYm9yZGVyR3JheTogJGxpZ2h0R3JheSxcbiAgICB0aHJlYWRTZWxlY3RlZDogJGljZUJsdWUsXG4gICAgbGlnaHRHcmF5Qm9yZGVyOiAkbGlnaHRHcmF5IDFweCBzb2xpZCxcbiAgICBncmF5SG92ZXI6ICRncmF5SG92ZXIsXG5cbiAgKSxcbiAgJGRhcms6IChcbiAgICAvLyBDb25zdGFudHMgdGhhdCBkbyBub3QgY2hhbmdlXG4gICAgdHJ1ZVdoaXRlOiAjZmFmYWZhLFxuICAgIHRydWVEYXJrOiAkdHJ1ZURhcmssXG4gICAgcHJpbWFyeUFjY2VudDogJGF6dXJlLFxuICAgIHRyYW5zcGFyZW50Q29sb3I6IHRyYW5zcGFyZW50LFxuICAgIHVuc2V0OiAndW5zZXQnLFxuXG4gICAgLy8gTWFpbiBBcHBcbiAgICBwcmltYXJ5VGV4dENvbG9yOiAkZGFya1ByaW1hcnlUZXh0LFxuICAgIHNlY29uZGFyeVRleHRDb2xvcjogJGRhcmtTZWNvbmRhcnlUZXh0LFxuICAgIHRlcnRpYXJ5VGV4dENvbG9yOiAjNzc3Nzc3LFxuICAgIHByaW1hcnlCYWNrZ3JvdW5kQ29sb3I6ICMyMTIxMjEsXG4gICAgc2Vjb25kYXJ5QmFja2dyb3VuZENvbG9yOiAjMjMyMzIzLFxuICAgIHRlcnRpYXJ5QmFja2dyb3VuZENvbG9yOiAjMjUyNTI1LFxuICAgIHNlY29uZGFyeUNvbnRyYXN0Qm9yZGVyQ29sb3I6IGxpZ2h0ZW4oIzEyMTIxMiwgMTAlKSxcbiAgICBjb250cmFzdGVkQm9yZGVyQ29sb3I6IGxpZ2h0ZW4oIzEyMTIxMiwgMTAlKSxcblxuICAgIC8vIExlZnQgU2lkZWJhclxuICAgIGxzYkJhY2tncm91bmRDb2xvcjogIzI1MjUyNSxcbiAgICBsc2JIZWFkZXJDb2xvcjogZGFya2VuKCNmYWZhZmEsIDEwJSksXG5cbiAgICAvLyBCb3JkZXJzXG4gICAgbG93Q29udHJhc3RCb3JkZXI6ICMyQzJDMkMgMXB4IHNvbGlkLFxuICAgIGxvd0NvbnRyYXN0Qm9yZGVyQ29sb3I6ICMyQzJDMkMsXG4gICAgaGlnaENvbnRyYXN0Qm9yZGVyOiAjMkUyRTJFIDJweCBzb2xpZCxcbiAgICBoaWdoQ29udHJhc3RCb3JkZXJDb2xvcjogIzJFMkUyRSxcbiAgICBib3hTaGFkb3c6IDJweCAycHggNHB4IDAgIzEyMTIxMixcblxuICAgIC8vIEFjY2VudHNcbiAgICBsb3dDb250cmFzdEFjY2VudDogcmdiYSg3NywgNzcsIDc3LCAwLjEzMiksXG5cbiAgICAvLyBIb3ZlcnNcbiAgICBoaWdoQ29udHJhc3RIb3ZlcjogbGlnaHRlbihsaWdodGVuKCMwRjBGMEYsIDUlKSwgNSUpLFxuXG4gICAgZ3JheTogbGlnaHRlbigjMEYwRjBGLCAxNSUpLFxuICAgIG1pZG5pZ2h0OiBsaWdodGVuKCMwRjBGMEYsIDEwJSksXG4gICAgaWNlQmx1ZTogbGlnaHRlbigjMEYwRjBGLCA3JSksXG4gICAgYm9yZGVyR3JheTogbGlnaHRlbigjMEYwRjBGLCAxMCUpLFxuICAgIHRocmVhZEhvdmVyOiByZ2JhKCMzNjM2MzYsIDAuNyksXG4gICAgdGhyZWFkU2VsZWN0ZWQ6IHJnYmEoIzM2MzYzNiwgMC41KSxcbiAgICBsaWdodEdyYXlCb3JkZXI6ICMyQzJDMkMgMXB4IHNvbGlkLFxuICAgIGdyYXlUZXh0OiAjZmFmYWZhLFxuICAgIGdyYXlIb3ZlcjogIzJFMkUyRSxcbiAgKSxcbik7XG4iXX1dKTsK"}]}