{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/components/Base/ThemeSwitcher/index.tsx","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/components/Base/ThemeSwitcher/index.tsx","mtime":1675280253988},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JzsKaW1wb3J0IFRoZW1lU3dpdGNoZXIgZnJvbSAnLi9UaGVtZVN3aXRjaGVyJzsKaW1wb3J0IHsgYXBwVGhlbWVTZXQgfSBmcm9tICdAc3JjL2R1Y2tzL2FwcCc7CnZhciBtYXBTdGF0ZVRvUHJvcHMgPSBmdW5jdGlvbiAoc3RhdGUpIHsgcmV0dXJuICh7CiAgICB0aGVtZTogc3RhdGUudGhlbWUsCn0pOyB9Owp2YXIgbWFwRGlzcGF0Y2hUb1Byb3BzID0gZnVuY3Rpb24gKGRpc3BhdGNoKSB7IHJldHVybiAoewogICAgc2V0VGhlbWU6IGZ1bmN0aW9uIChtb2RlKSB7IHJldHVybiBkaXNwYXRjaChhcHBUaGVtZVNldChtb2RlLCBtb2RlKSk7IH0sCn0pOyB9OwpleHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShUaGVtZVN3aXRjaGVyKTsK"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/components/Base/ThemeSwitcher/index.tsx","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/components/Base/ThemeSwitcher/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAY,MAAM,aAAa,CAAC;AAEhD,OAAO,aAAuC,MAAM,iBAAiB,CAAC;AAEtE,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAE7C,IAAM,eAAe,GAAG,UAAC,KAAiB,IAAY,OAAA,CAAC;IACrD,KAAK,EAAE,KAAK,CAAC,KAAK;CACnB,CAAC,EAFoD,CAEpD,CAAC;AAEH,IAAM,kBAAkB,GAAG,UAAC,QAA8B,IAAoB,OAAA,CAAC;IAC7E,QAAQ,EAAE,UAAA,IAAI,IAAI,OAAA,QAAQ,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,EAAjC,CAAiC;CACpD,CAAC,EAF4E,CAE5E,CAAC;AAEH,eAAe,OAAO,CACpB,eAAe,EAAE,kBAAkB,CACpC,CAAC,aAAa,CAAC,CAAC","sourcesContent":["import { connect, Dispatch } from 'react-redux';\n\nimport ThemeSwitcher, { Props, DispatchProps } from './ThemeSwitcher';\nimport { StoreState } from '@src/types';\nimport { appThemeSet } from '@src/ducks/app';\n\nconst mapStateToProps = (state: StoreState): Props => ({\n  theme: state.theme,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<StoreState>): DispatchProps => ({\n  setTheme: mode => dispatch(appThemeSet(mode, mode)),\n});\n\nexport default connect<Props, DispatchProps, {}>(\n  mapStateToProps, mapDispatchToProps,\n)(ThemeSwitcher);\n"]}]}