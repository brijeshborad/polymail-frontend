{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/tracks.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/tracks.ts","mtime":1675280254060},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnOwppbXBvcnQgeyBnZXRUcmFjayB9IGZyb20gJ0BzcmMvYXBpL3RyYWNrcyc7CmltcG9ydCB7IEFjdGlvblN0YXR1cyB9IGZyb20gJ0BzcmMvdHlwZXMnOwppbXBvcnQgeyBUUkFDS19GRVRDSCwgdHJhY2tGZXRjaCwgfSBmcm9tICdAc3JjL2R1Y2tzL3RyYWNrcyc7CnZhciBmZXRjaFRyYWNrcyA9IGZ1bmN0aW9uIChhY3Rpb24kKSB7CiAgICByZXR1cm4gYWN0aW9uJC5vZlR5cGUoVFJBQ0tfRkVUQ0gpCiAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoYWN0aW9uKSB7IHJldHVybiBhY3Rpb24uc3RhdHVzID09PSBBY3Rpb25TdGF0dXMuU3RhcnQ7IH0pCiAgICAgICAgLmZsYXRNYXAoZnVuY3Rpb24gKGFjdGlvbikgewogICAgICAgIHJldHVybiBnZXRUcmFjayhhY3Rpb24ubWV0YS50aHJlYWQsIGFjdGlvbi5tZXRhLm1lc3NhZ2UpCiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHRyYWNrKSB7IHJldHVybiB0cmFja0ZldGNoKGFjdGlvbi5tZXRhLCB0cmFjayk7IH0pCiAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZSkgeyByZXR1cm4gT2JzZXJ2YWJsZS5vZih0cmFja0ZldGNoKGFjdGlvbi5tZXRhLCBlKSk7IH0pOwogICAgfSk7Cn07CmV4cG9ydCBkZWZhdWx0IFtmZXRjaFRyYWNrc107Cg=="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/tracks.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/tracks.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAGlC,OAAO,EAAE,QAAQ,EAAE,MAAM,iBAAiB,CAAC;AAE3C,OAAO,EAAsB,YAAY,EAAS,MAAM,YAAY,CAAC;AAErE,OAAO,EACL,WAAW,EAAE,UAAU,GACxB,MAAM,mBAAmB,CAAC;AAE3B,IAAM,WAAW,GAAoD,UAAA,OAAO;IAC3E,OAAA,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC;SACzB,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,MAAM,KAAK,YAAY,CAAC,KAAK,EAApC,CAAoC,CAAC;SACtD,OAAO,CAAC,UAAA,MAAM;QACb,OAAA,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;aAC9C,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,UAAU,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,EAA9B,CAA8B,CAAC;aAC5C,KAAK,CAAC,UAAC,CAAQ,IAAK,OAAA,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,EAAzC,CAAyC,CAAC;IAFjE,CAEiE,CAClE;AANF,CAME,CAAC;AAEJ,eAAe,CAAC,WAAW,CAAC,CAAC","sourcesContent":["import { Observable } from 'rxjs';\nimport { Epic } from 'redux-observable';\n\nimport { getTrack } from '@src/api/tracks';\n\nimport { StoreState, Action, ActionStatus, Track } from '@src/types';\n\nimport {\n  TRACK_FETCH, trackFetch, TrackFetchMeta,\n} from '@src/ducks/tracks';\n\nconst fetchTracks: Epic<Action<TrackFetchMeta, Track>, StoreState> = action$ =>\n action$.ofType(TRACK_FETCH)\n  .filter(action => action.status === ActionStatus.Start)\n  .flatMap(action =>\n    getTrack(action.meta.thread, action.meta.message)\n      .map(track => trackFetch(action.meta, track))\n      .catch((e: Error) => Observable.of(trackFetch(action.meta, e))),\n  );\n\nexport default [fetchTracks];\n"]}]}