{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/sequenceRecipients.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/sequenceRecipients.ts","mtime":1675280254051},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkgewogICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHsKICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHsKICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTsKICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKQogICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07CiAgICAgICAgfQogICAgICAgIHJldHVybiB0OwogICAgfTsKICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9Owp2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZiwgX2csIF9oLCBfaiwgX2ssIF9sLCBfbTsKaW1wb3J0IHVwZGF0ZSBmcm9tICdpbW11dGFiaWxpdHktaGVscGVyJzsKaW1wb3J0IHsga2V5QnksIHVuaXEgfSBmcm9tICdsb2Rhc2gnOwppbXBvcnQgeyBjcmVhdGUgfSBmcm9tICdAc3JjL2xpYi9yZWR1eCc7CmltcG9ydCB7IFJlc291cmNlU3RhdHVzIH0gZnJvbSAnQHNyYy90eXBlcyc7CmltcG9ydCB7IHJlc291cmNlT2ssIHJlc291cmNlUGVuZGluZywgcmVzb3VyY2VSZWZyZXNoaW5nIH0gZnJvbSAnQHNyYy9saWIvcmVzb3VyY2UnOwpleHBvcnQgdmFyIGNyZWF0ZURlZmF1bHRIZWFkZXJzID0gZnVuY3Rpb24gKHN0YXRlKSB7CiAgICByZXR1cm4gdW5pcShbJ2VtYWlsJywgJ2ZpcnN0IG5hbWUnLCAnbGFzdCBuYW1lJ10KICAgICAgICAuY29uY2F0KHN0YXRlLnNlbGVjdGVkU2VxdWVuY2UgJiYgc3RhdGUuc2VxdWVuY2VzW3N0YXRlLnNlbGVjdGVkU2VxdWVuY2VdCiAgICAgICAgJiYgc3RhdGUuc2VxdWVuY2VzW3N0YXRlLnNlbGVjdGVkU2VxdWVuY2VdLmRhdGEgJiYKICAgICAgICBzdGF0ZS5zZXF1ZW5jZXNbc3RhdGUuc2VsZWN0ZWRTZXF1ZW5jZV0uZGF0YS5oZWFkZXJzIHx8IFtdKSk7Cn07CmV4cG9ydCB2YXIgU0VRVUVOQ0VfUkVDSVBJRU5UX1VQTE9BRCA9IChfYSA9IGNyZWF0ZSgnU0VRVUVOQ0VfUkVDSVBJRU5UX1VQTE9BRCcsIHsKICAgIHNldHVwOiBmdW5jdGlvbiAoc3RhdGUsIG1ldGEpIHsKICAgICAgICBpZiAoc3RhdGUuc2VxdWVuY2VSZWNpcGllbnRzQWRkU3RhdGUpIHsKICAgICAgICAgICAgcmV0dXJuIHN0YXRlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgICAgIHNlcXVlbmNlUmVjaXBpZW50c0FkZFN0YXRlOiB7CiAgICAgICAgICAgICAgICAkc2V0OiB7CiAgICAgICAgICAgICAgICAgICAgcmVjaXBpZW50czogW10sCiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogY3JlYXRlRGVmYXVsdEhlYWRlcnMoc3RhdGUpLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICB9KTsKICAgIH0sCiAgICBzdWNjZXNzOiBmdW5jdGlvbiAoc3RhdGUsIG1ldGEsIHBheWxvYWQpIHsKICAgICAgICByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgICAgIHNlcXVlbmNlUmVjaXBpZW50c0FkZFN0YXRlOiB7CiAgICAgICAgICAgICAgICAkc2V0OiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgc3RhdGUuc2VxdWVuY2VSZWNpcGllbnRzQWRkU3RhdGUpLCB7IHJlY2lwaWVudHM6IHBheWxvYWQuaW52YWxpZFJlY2lwaWVudHMubWFwKGZ1bmN0aW9uIChyKSB7IHJldHVybiByZXNvdXJjZU9rKHIpOyB9KQogICAgICAgICAgICAgICAgICAgICAgICAuY29uY2F0KHBheWxvYWQucmVjaXBpZW50cy5tYXAoZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHJlc291cmNlT2socik7IH0pKQogICAgICAgICAgICAgICAgICAgICAgICAuY29uY2F0KHN0YXRlLnNlcXVlbmNlUmVjaXBpZW50c0FkZFN0YXRlLnJlY2lwaWVudHMpLCBjc3Y6IHVuZGVmaW5lZCB9KSwKICAgICAgICAgICAgfSwKICAgICAgICB9KTsKICAgIH0sCn0pLCBfYS50eXBlKSwgc2VxdWVuY2VSZWNpcGllbnRVcGxvYWQgPSBfYS5hY3Rpb24sIHNlcXVlbmNlUmVjaXBpZW50VXBsb2FkUmVkdWNlciA9IF9hLnJlZHVjZXI7Ci8vIFRPRE8oU0hJTik6IERpc2N1c3Mgc3RhcnQgY2FzZSBmb3IgaW52aWRpdnVhbCByZWNpcGllbnQgZGVsZXRlIGVycm9ycy4gRG8gd2UgZXhwZWN0IG9wdGltaXN0aWNzPwovLyBUT0RPKFNISU4pOiBIYW5kbGUgZmFpbHVyZSBub3RpZmljYXRpb25zIGZvciBpbnZpZGl2dWFsIHJlY2lwaWVudCBkZWxldGUgZXJyb3JzCmV4cG9ydCB2YXIgU0VRVUVOQ0VfUkVDSVBJRU5UX0NSRUFURSA9IChfYiA9IGNyZWF0ZSgnU0VRVUVOQ0VfUkVDSVBJRU5UX0NSRUFURScsIHsKICAgIHNldHVwOiBmdW5jdGlvbiAoc3RhdGUsIG1ldGEpIHsKICAgICAgICB2YXIgX2E7CiAgICAgICAgaWYgKHN0YXRlLnNlcXVlbmNlUmVjaXBpZW50c1ttZXRhLnNlcXVlbmNlXSAmJiBzdGF0ZS5zZXF1ZW5jZVJlY2lwaWVudHNBZGRTdGF0ZQogICAgICAgICAgICAmJiBzdGF0ZS5zZXF1ZW5jZVJlY2lwaWVudHNBZGRTdGF0ZS5yZWNpcGllbnRzKSB7CiAgICAgICAgICAgIHJldHVybiBzdGF0ZTsKICAgICAgICB9CiAgICAgICAgaWYgKHN0YXRlLnNlcXVlbmNlUmVjaXBpZW50c1ttZXRhLnNlcXVlbmNlXSAmJiBzdGF0ZS5zZXF1ZW5jZVJlY2lwaWVudHNBZGRTdGF0ZSkgewogICAgICAgICAgICByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgICAgICAgICBzZXF1ZW5jZVJlY2lwaWVudHNBZGRTdGF0ZTogewogICAgICAgICAgICAgICAgICAgICR1bnNldDogWydlcnJvciddLAogICAgICAgICAgICAgICAgICAgIHJlY2lwaWVudHM6IHsgJHNldDogW10gfSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICBpZiAoc3RhdGUuc2VxdWVuY2VSZWNpcGllbnRzW21ldGEuc2VxdWVuY2VdKSB7CiAgICAgICAgICAgIHJldHVybiB1cGRhdGUoc3RhdGUsIHsKICAgICAgICAgICAgICAgIHNlcXVlbmNlUmVjaXBpZW50c0FkZFN0YXRlOiB7CiAgICAgICAgICAgICAgICAgICAgJHNldDogewogICAgICAgICAgICAgICAgICAgICAgICByZWNpcGllbnRzOiBbXSwKICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogY3JlYXRlRGVmYXVsdEhlYWRlcnMoc3RhdGUpLAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICBzZXF1ZW5jZVJlY2lwaWVudHM6IChfYSA9IHt9LAogICAgICAgICAgICAgICAgX2FbbWV0YS5zZXF1ZW5jZV0gPSB7ICRzZXQ6IHt9IH0sCiAgICAgICAgICAgICAgICBfYSksCiAgICAgICAgICAgIHNlcXVlbmNlUmVjaXBpZW50c0FkZFN0YXRlOiB7CiAgICAgICAgICAgICAgICAkc2V0OiB7CiAgICAgICAgICAgICAgICAgICAgcmVjaXBpZW50czogW10sCiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogY3JlYXRlRGVmYXVsdEhlYWRlcnMoc3RhdGUpLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICB9KTsKICAgIH0sCiAgICBzdWNjZXNzOiBmdW5jdGlvbiAoc3RhdGUsIG1ldGEsIHBheWxvYWQpIHsKICAgICAgICB2YXIgX2E7CiAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICBzZXF1ZW5jZVJlY2lwaWVudHM6IChfYSA9IHt9LAogICAgICAgICAgICAgICAgX2FbbWV0YS5zZXF1ZW5jZV0gPSB7CiAgICAgICAgICAgICAgICAgICAgJG1lcmdlOiBrZXlCeShwYXlsb2FkLnJlY2lwaWVudHMubWFwKGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIHJlc291cmNlT2sodmFsKTsgfSksIGZ1bmN0aW9uIChyZWNpcGllbnQpIHsgcmV0dXJuIHJlY2lwaWVudC5kYXRhICYmIHJlY2lwaWVudC5kYXRhLmlkOyB9KSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBfYSksCiAgICAgICAgICAgIHNlcXVlbmNlUmVjaXBpZW50c0FkZFN0YXRlOiB7CiAgICAgICAgICAgICAgICAkdW5zZXQ6IFsnZXJyb3InXSwKICAgICAgICAgICAgICAgIHN1Y2Nlc3NDb3VudDogeyAkc2V0OiBwYXlsb2FkLnJlY2lwaWVudHMubGVuZ3RoIH0sCiAgICAgICAgICAgICAgICByZWNpcGllbnRzOiB7CiAgICAgICAgICAgICAgICAgICAgJHNldDogcGF5bG9hZC5pbnZhbGlkUmVjaXBpZW50cy5tYXAoZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHJlc291cmNlT2socik7IH0pLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICB9KTsKICAgIH0sCiAgICBmYWlsdXJlOiBmdW5jdGlvbiAoc3RhdGUsIG1ldGEsIGVycm9yKSB7CiAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICBzZXF1ZW5jZVJlY2lwaWVudHNBZGRTdGF0ZTogewogICAgICAgICAgICAgICAgZXJyb3I6IHsgJHNldDogZXJyb3IgfSwKICAgICAgICAgICAgfSwKICAgICAgICB9KTsKICAgIH0sCn0pLCBfYi50eXBlKSwgc2VxdWVuY2VSZWNpcGllbnRDcmVhdGUgPSBfYi5hY3Rpb24sIHNlcXVlbmNlUmVjaXBpZW50Q3JlYXRlUmVkdWNlciA9IF9iLnJlZHVjZXI7Ci8vIFRPRE8oU0hJTik6IERpc2N1c3Mgc3RhcnQgY2FzZSBmb3IgaW52aWRpdnVhbCByZWNpcGllbnQgZGVsZXRlIGVycm9ycy4gRG8gd2UgZXhwZWN0IG9wdGltaXN0aWNzPwovLyBUT0RPKFNISU4pOiBIYW5kbGUgZmFpbHVyZSBub3RpZmljYXRpb25zIGZvciBpbnZpZGl2dWFsIHJlY2lwaWVudCBkZWxldGUgZXJyb3JzCmV4cG9ydCB2YXIgU0VRVUVOQ0VfUkVDSVBJRU5UX1VQREFURSA9IChfYyA9IGNyZWF0ZSgnU0VRVUVOQ0VfUkVDSVBJRU5UX1VQREFURScsIHsKICAgIHNldHVwOiBmdW5jdGlvbiAoc3RhdGUsIG1ldGEpIHsKICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2Q7CiAgICAgICAgaWYgKHN0YXRlLnNlcXVlbmNlUmVjaXBpZW50c1ttZXRhLnNlcXVlbmNlXSkgewogICAgICAgICAgICBpZiAoc3RhdGUuc2VxdWVuY2VSZWNpcGllbnRzW21ldGEuc2VxdWVuY2VdW21ldGEuaWRdKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICAgICAgc2VxdWVuY2VSZWNpcGllbnRzOiAoX2EgPSB7fSwKICAgICAgICAgICAgICAgICAgICBfYVttZXRhLnNlcXVlbmNlXSA9IChfYiA9IHt9LCBfYlttZXRhLmlkXSA9IHsgJHNldDogcmVzb3VyY2VQZW5kaW5nKCkgfSwgX2IpLAogICAgICAgICAgICAgICAgICAgIF9hKSwKICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiB1cGRhdGUoc3RhdGUsIHsKICAgICAgICAgICAgc2VxdWVuY2VSZWNpcGllbnRzOiAoX2MgPSB7fSwKICAgICAgICAgICAgICAgIF9jW21ldGEuc2VxdWVuY2VdID0geyAkc2V0OiAoX2QgPSB7fSwgX2RbbWV0YS5pZF0gPSByZXNvdXJjZVBlbmRpbmcoKSwgX2QpIH0sCiAgICAgICAgICAgICAgICBfYyksCiAgICAgICAgfSk7CiAgICB9LAogICAgc3RhcnQ6IGZ1bmN0aW9uIChzdGF0ZSwgbWV0YSkgewogICAgICAgIHZhciBfYSwgX2I7CiAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICBzZXF1ZW5jZVJlY2lwaWVudHM6IChfYSA9IHt9LAogICAgICAgICAgICAgICAgX2FbbWV0YS5zZXF1ZW5jZV0gPSAoX2IgPSB7fSwKICAgICAgICAgICAgICAgICAgICBfYlttZXRhLmlkXSA9IHsgc3RhdHVzOiB7ICRzZXQ6IFJlc291cmNlU3RhdHVzLlJlZnJlc2hpbmcgfSB9LAogICAgICAgICAgICAgICAgICAgIF9iKSwKICAgICAgICAgICAgICAgIF9hKSwKICAgICAgICB9KTsKICAgIH0sCiAgICBzdWNjZXNzOiBmdW5jdGlvbiAoc3RhdGUsIG1ldGEsIHBheWxvYWQpIHsKICAgICAgICB2YXIgX2EsIF9iOwogICAgICAgIHJldHVybiB1cGRhdGUoc3RhdGUsIHsKICAgICAgICAgICAgc2VxdWVuY2VSZWNpcGllbnRzOiAoX2EgPSB7fSwKICAgICAgICAgICAgICAgIF9hW21ldGEuc2VxdWVuY2VdID0gKF9iID0ge30sCiAgICAgICAgICAgICAgICAgICAgX2JbbWV0YS5pZF0gPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRzZXQ6IHJlc291cmNlT2socGF5bG9hZCksCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBfYiksCiAgICAgICAgICAgICAgICBfYSksCiAgICAgICAgfSk7CiAgICB9LAogICAgZmFpbHVyZTogZnVuY3Rpb24gKHN0YXRlLCBtZXRhLCBlcnJvcikgewogICAgICAgIHZhciBfYSwgX2I7CiAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICBzZXF1ZW5jZVJlY2lwaWVudHM6IChfYSA9IHt9LAogICAgICAgICAgICAgICAgX2FbbWV0YS5zZXF1ZW5jZV0gPSAoX2IgPSB7fSwKICAgICAgICAgICAgICAgICAgICBfYlttZXRhLmlkXSA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2V0OiBSZXNvdXJjZVN0YXR1cy5PaywKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIF9iKSwKICAgICAgICAgICAgICAgIF9hKSwKICAgICAgICB9KTsKICAgIH0sCn0pLCBfYy50eXBlKSwgc2VxdWVuY2VSZWNpcGllbnRVcGRhdGUgPSBfYy5hY3Rpb24sIHNlcXVlbmNlUmVjaXBpZW50VXBkYXRlUmVkdWNlciA9IF9jLnJlZHVjZXI7CmV4cG9ydCB2YXIgU0VRVUVOQ0VfUkVDSVBJRU5UX1JFQUNUSVZBVEUgPSAoX2QgPSBjcmVhdGUoJ1NFUVVFTkNFX1JFQ0lQSUVOVF9SRUFDVElWQVRFJywgewogICAgc2V0dXA6IGZ1bmN0aW9uIChzdGF0ZSwgbWV0YSkgewogICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZDsKICAgICAgICBpZiAoc3RhdGUuc2VxdWVuY2VSZWNpcGllbnRzW21ldGEuc2VxdWVuY2VdKSB7CiAgICAgICAgICAgIGlmIChzdGF0ZS5zZXF1ZW5jZVJlY2lwaWVudHNbbWV0YS5zZXF1ZW5jZV1bbWV0YS5pZF0pIHsKICAgICAgICAgICAgICAgIHJldHVybiBzdGF0ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgICAgICAgICBzZXF1ZW5jZVJlY2lwaWVudHM6IChfYSA9IHt9LAogICAgICAgICAgICAgICAgICAgIF9hW21ldGEuc2VxdWVuY2VdID0gKF9iID0ge30sIF9iW21ldGEuaWRdID0geyAkc2V0OiByZXNvdXJjZVBlbmRpbmcoKSB9LCBfYiksCiAgICAgICAgICAgICAgICAgICAgX2EpLAogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICBzZXF1ZW5jZVJlY2lwaWVudHM6IChfYyA9IHt9LAogICAgICAgICAgICAgICAgX2NbbWV0YS5zZXF1ZW5jZV0gPSB7ICRzZXQ6IChfZCA9IHt9LCBfZFttZXRhLmlkXSA9IHJlc291cmNlUGVuZGluZygpLCBfZCkgfSwKICAgICAgICAgICAgICAgIF9jKSwKICAgICAgICB9KTsKICAgIH0sCiAgICBzdGFydDogZnVuY3Rpb24gKHN0YXRlLCBtZXRhKSB7CiAgICAgICAgdmFyIF9hLCBfYjsKICAgICAgICByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgICAgIHNlcXVlbmNlUmVjaXBpZW50czogKF9hID0ge30sCiAgICAgICAgICAgICAgICBfYVttZXRhLnNlcXVlbmNlXSA9IChfYiA9IHt9LAogICAgICAgICAgICAgICAgICAgIF9iW21ldGEuaWRdID0geyBzdGF0dXM6IHsgJHNldDogUmVzb3VyY2VTdGF0dXMuUmVmcmVzaGluZyB9IH0sCiAgICAgICAgICAgICAgICAgICAgX2IpLAogICAgICAgICAgICAgICAgX2EpLAogICAgICAgIH0pOwogICAgfSwKICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChzdGF0ZSwgbWV0YSwgcGF5bG9hZCkgewogICAgICAgIHZhciBfYSwgX2I7CiAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICBzZXF1ZW5jZVJlY2lwaWVudHM6IChfYSA9IHt9LAogICAgICAgICAgICAgICAgX2FbbWV0YS5zZXF1ZW5jZV0gPSAoX2IgPSB7fSwKICAgICAgICAgICAgICAgICAgICBfYlttZXRhLmlkXSA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgJHNldDogcmVzb3VyY2VPayhwYXlsb2FkKSwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIF9iKSwKICAgICAgICAgICAgICAgIF9hKSwKICAgICAgICB9KTsKICAgIH0sCiAgICBmYWlsdXJlOiBmdW5jdGlvbiAoc3RhdGUsIG1ldGEsIGVycm9yKSB7CiAgICAgICAgdmFyIF9hLCBfYjsKICAgICAgICByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgICAgIHNlcXVlbmNlUmVjaXBpZW50czogKF9hID0ge30sCiAgICAgICAgICAgICAgICBfYVttZXRhLnNlcXVlbmNlXSA9IChfYiA9IHt9LAogICAgICAgICAgICAgICAgICAgIF9iW21ldGEuaWRdID0gewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzZXQ6IFJlc291cmNlU3RhdHVzLk9rLAogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgX2IpLAogICAgICAgICAgICAgICAgX2EpLAogICAgICAgIH0pOwogICAgfSwKfSksIF9kLnR5cGUpLCBzZXF1ZW5jZVJlY2lwaWVudFJlYWN0aXZhdGUgPSBfZC5hY3Rpb24sIHNlcXVlbmNlUmVjaXBpZW50UmVhY3RpdmF0ZVJlZHVjZXIgPSBfZC5yZWR1Y2VyOwovLyBUT0RPKFNISU4pOiBEaXNjdXNzIEVycm9yIHN0YXRlcyBmb3Igc2VxdWVuY2UgcmVjaXBpZW50cyBkZWxldGlvbnMKLy8gVE9ETyhTSElOKTogSGFuZGxlIGZhaWx1cmUgbm90aWZpY2F0aW9ucyBmb3IgaW52aWRpdnVhbCByZWNpcGllbnQgZGVsZXRlIGVycm9ycwpleHBvcnQgdmFyIFNFUVVFTkNFX1JFQ0lQSUVOVF9ERUxFVEUgPSAoX2UgPSBjcmVhdGUoJ1NFUVVFTkNFX1JFQ0lQSUVOVF9ERUxFVEUnLCB7CiAgICBzZXR1cDogZnVuY3Rpb24gKHN0YXRlLCBtZXRhKSB7CiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kOwogICAgICAgIGlmIChzdGF0ZS5zZXF1ZW5jZVJlY2lwaWVudHNbbWV0YS5zZXF1ZW5jZV0pIHsKICAgICAgICAgICAgaWYgKHN0YXRlLnNlcXVlbmNlUmVjaXBpZW50c1ttZXRhLnNlcXVlbmNlXVttZXRhLmlkXSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHN0YXRlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB1cGRhdGUoc3RhdGUsIHsKICAgICAgICAgICAgICAgIHNlcXVlbmNlUmVjaXBpZW50czogKF9hID0ge30sCiAgICAgICAgICAgICAgICAgICAgX2FbbWV0YS5zZXF1ZW5jZV0gPSAoX2IgPSB7fSwgX2JbbWV0YS5pZF0gPSB7ICRzZXQ6IHJlc291cmNlUGVuZGluZygpIH0sIF9iKSwKICAgICAgICAgICAgICAgICAgICBfYSksCiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgICAgIHNlcXVlbmNlUmVjaXBpZW50czogKF9jID0ge30sCiAgICAgICAgICAgICAgICBfY1ttZXRhLnNlcXVlbmNlXSA9IHsgJHNldDogKF9kID0ge30sIF9kW21ldGEuaWRdID0gcmVzb3VyY2VQZW5kaW5nKCksIF9kKSB9LAogICAgICAgICAgICAgICAgX2MpLAogICAgICAgIH0pOwogICAgfSwKICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChzdGF0ZSwgbWV0YSwgcGF5bG9hZCkgewogICAgICAgIHZhciBfYTsKICAgICAgICByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgICAgIHNlcXVlbmNlUmVjaXBpZW50czogKF9hID0ge30sCiAgICAgICAgICAgICAgICBfYVttZXRhLnNlcXVlbmNlXSA9IHsKICAgICAgICAgICAgICAgICAgICAkdW5zZXQ6IFttZXRhLmlkXSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBfYSksCiAgICAgICAgfSk7CiAgICB9LAogICAgZmFpbHVyZTogZnVuY3Rpb24gKHN0YXRlLCBtZXRhLCBlcnJvcikgewogICAgICAgIHZhciBfYSwgX2I7CiAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICBzZXF1ZW5jZVJlY2lwaWVudHM6IChfYSA9IHt9LAogICAgICAgICAgICAgICAgX2FbbWV0YS5zZXF1ZW5jZV0gPSAoX2IgPSB7fSwKICAgICAgICAgICAgICAgICAgICBfYlttZXRhLmlkXSA9IHsgJHNldDogcmVzb3VyY2VPayhtZXRhKSB9LAogICAgICAgICAgICAgICAgICAgIF9iKSwKICAgICAgICAgICAgICAgIF9hKSwKICAgICAgICB9KTsKICAgIH0sCn0pLCBfZS50eXBlKSwgc2VxdWVuY2VSZWNpcGllbnREZWxldGUgPSBfZS5hY3Rpb24sIHNlcXVlbmNlUmVjaXBpZW50RGVsZXRlUmVkdWNlciA9IF9lLnJlZHVjZXI7CmV4cG9ydCB2YXIgU0VRVUVOQ0VfUkVDSVBJRU5UX0xJU1QgPSAoX2YgPSBjcmVhdGUoJ1NFUVVFTkNFX1JFQ0lQSUVOVF9MSVNUJywgewogICAgc2V0dXA6IGZ1bmN0aW9uIChzdGF0ZSwgbWV0YSkgewogICAgICAgIHZhciBfYTsKICAgICAgICBpZiAoc3RhdGUuc2VxdWVuY2VSZWNpcGllbnRzW21ldGEuc2VxdWVuY2VdKSB7CiAgICAgICAgICAgIHJldHVybiBzdGF0ZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICBzZXF1ZW5jZVJlY2lwaWVudHM6IChfYSA9IHt9LAogICAgICAgICAgICAgICAgX2FbbWV0YS5zZXF1ZW5jZV0gPSB7ICRzZXQ6IHt9IH0sCiAgICAgICAgICAgICAgICBfYSksCiAgICAgICAgfSk7CiAgICB9LAogICAgc3VjY2VzczogZnVuY3Rpb24gKHN0YXRlLCBtZXRhLCBwYXlsb2FkKSB7CiAgICAgICAgdmFyIF9hLCBfYjsKICAgICAgICB2YXIgZmlsdGVyOwogICAgICAgIHZhciBzb3J0OwogICAgICAgIHZhciBxdWVyeTsKICAgICAgICB2YXIgZGVzYzsKICAgICAgICBpZiAoc3RhdGUuc2VxdWVuY2VSZWNpcGllbnRzU3RhdGUpIHsKICAgICAgICAgICAgZmlsdGVyID0gc3RhdGUuc2VxdWVuY2VSZWNpcGllbnRzU3RhdGUuZmlsdGVyOwogICAgICAgICAgICBzb3J0ID0gc3RhdGUuc2VxdWVuY2VSZWNpcGllbnRzU3RhdGUuc29ydDsKICAgICAgICAgICAgcXVlcnkgPSBzdGF0ZS5zZXF1ZW5jZVJlY2lwaWVudHNTdGF0ZS5xdWVyeTsKICAgICAgICAgICAgZGVzYyA9IHN0YXRlLnNlcXVlbmNlUmVjaXBpZW50c1N0YXRlLmRlc2M7CiAgICAgICAgfQogICAgICAgIGlmIChtZXRhLm9mZnNldCAmJiBmaWx0ZXIgPT09IG1ldGEuZmlsdGVyCiAgICAgICAgICAgICYmIHNvcnQgPT09IG1ldGEuc29ydCAmJiBxdWVyeSA9PT0gbWV0YS5xdWVyeSAmJiBkZXNjID09PSBtZXRhLmRlc2MpIHsKICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICAgICAgc2VxdWVuY2VSZWNpcGllbnRzU3RhdGU6IHsKICAgICAgICAgICAgICAgICAgICAkc2V0OiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcjogbWV0YS5maWx0ZXIsCiAgICAgICAgICAgICAgICAgICAgICAgIHNvcnQ6IG1ldGEuc29ydCwKICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnk6IG1ldGEucXVlcnksCiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogbWV0YS5vZmZzZXQsCiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6IG1ldGEuZGVzYywKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHNlcXVlbmNlUmVjaXBpZW50czogKF9hID0ge30sCiAgICAgICAgICAgICAgICAgICAgX2FbbWV0YS5zZXF1ZW5jZV0gPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRtZXJnZToga2V5QnkocGF5bG9hZC5tYXAoZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gcmVzb3VyY2VPayh2YWwpOyB9KSwgZnVuY3Rpb24gKHJlY2lwaWVudCkgeyByZXR1cm4gcmVjaXBpZW50LmRhdGEgJiYgcmVjaXBpZW50LmRhdGEuaWQ7IH0pLAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgX2EpLAogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICBzZXF1ZW5jZVJlY2lwaWVudHNTdGF0ZTogewogICAgICAgICAgICAgICAgJHNldDogewogICAgICAgICAgICAgICAgICAgIGZpbHRlcjogbWV0YS5maWx0ZXIsCiAgICAgICAgICAgICAgICAgICAgc29ydDogbWV0YS5zb3J0LAogICAgICAgICAgICAgICAgICAgIHF1ZXJ5OiBtZXRhLnF1ZXJ5LAogICAgICAgICAgICAgICAgICAgIG9mZnNldDogbWV0YS5vZmZzZXQsCiAgICAgICAgICAgICAgICAgICAgZGVzYzogbWV0YS5kZXNjLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc2VxdWVuY2VSZWNpcGllbnRzOiAoX2IgPSB7fSwKICAgICAgICAgICAgICAgIF9iW21ldGEuc2VxdWVuY2VdID0gewogICAgICAgICAgICAgICAgICAgICRzZXQ6IGtleUJ5KHBheWxvYWQubWFwKGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIHJlc291cmNlT2sodmFsKTsgfSksIGZ1bmN0aW9uIChyZWNpcGllbnQpIHsgcmV0dXJuIHJlY2lwaWVudC5kYXRhICYmIHJlY2lwaWVudC5kYXRhLmlkOyB9KSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBfYiksCiAgICAgICAgfSk7CiAgICB9LAp9KSwgX2YudHlwZSksIHNlcXVlbmNlUmVjaXBpZW50TGlzdCA9IF9mLmFjdGlvbiwgc2VxdWVuY2VSZWNpcGllbnRMaXN0UmVkdWNlciA9IF9mLnJlZHVjZXI7CmV4cG9ydCB2YXIgU0VRVUVOQ0VfUkVDSVBJRU5UX0FERF9TSE9XID0gKF9nID0gY3JlYXRlKCdTRVFVRU5DRV9SRUNJUElFTlRfQUREX1NIT1cnLCB7CiAgICBzdGFydDogZnVuY3Rpb24gKHN0YXRlLCBtZXRhKSB7CiAgICAgICAgaWYgKG1ldGEpIHsKICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICAgICAgc2VxdWVuY2VSZWNpcGllbnRzQWRkU3RhdGU6IHsKICAgICAgICAgICAgICAgICAgICAkc2V0OiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IGNyZWF0ZURlZmF1bHRIZWFkZXJzKHN0YXRlKSwKICAgICAgICAgICAgICAgICAgICAgICAgcmVjaXBpZW50czogW10sCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgICAgIHNlcXVlbmNlUmVjaXBpZW50c0FkZFN0YXRlOiB7CiAgICAgICAgICAgICAgICAkc2V0OiB1bmRlZmluZWQsCiAgICAgICAgICAgIH0sCiAgICAgICAgfSk7CiAgICB9LAp9KSwgX2cudHlwZSksIHNlcXVlbmNlUmVjaXBpZW50QWRkU2hvdyA9IF9nLmFjdGlvbiwgc2VxdWVuY2VSZWNpcGllbnRBZGRTaG93UmVkdWNlciA9IF9nLnJlZHVjZXI7CmV4cG9ydCB2YXIgU0VRVUVOQ0VfUkVDSVBJRU5UX1RFTVBfQUREID0gKF9oID0gY3JlYXRlKCdTRVFVRU5DRV9SRUNJUElFTlRfVEVNUF9BREQnLCB7CiAgICBzZXR1cDogZnVuY3Rpb24gKHN0YXRlLCBtZXRhKSB7CiAgICAgICAgaWYgKHN0YXRlLnNlcXVlbmNlUmVjaXBpZW50c0FkZFN0YXRlICYmIHN0YXRlLnNlcXVlbmNlUmVjaXBpZW50c0FkZFN0YXRlLnJlY2lwaWVudHMpIHsKICAgICAgICAgICAgcmV0dXJuIHN0YXRlOwogICAgICAgIH0KICAgICAgICBpZiAoc3RhdGUuc2VxdWVuY2VSZWNpcGllbnRzQWRkU3RhdGUpIHsKICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICAgICAgc2VxdWVuY2VSZWNpcGllbnRzQWRkU3RhdGU6IHsKICAgICAgICAgICAgICAgICAgICAkdW5zZXQ6IFsnZXJyb3InXSwKICAgICAgICAgICAgICAgICAgICByZWNpcGllbnRzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICRzZXQ6IFtdLAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICBzZXF1ZW5jZVJlY2lwaWVudHNBZGRTdGF0ZTogewogICAgICAgICAgICAgICAgJHNldDogewogICAgICAgICAgICAgICAgICAgIHJlY2lwaWVudHM6IFtdLAogICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IGNyZWF0ZURlZmF1bHRIZWFkZXJzKHN0YXRlKSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgfSk7CiAgICB9LAogICAgc3RhcnQ6IGZ1bmN0aW9uIChzdGF0ZSwgbWV0YSkgewogICAgICAgIGlmIChzdGF0ZS5zZWxlY3RlZFNlcXVlbmNlKSB7CiAgICAgICAgICAgIHZhciByZWNpcGllbnQgPSB7CiAgICAgICAgICAgICAgICBlbWFpbDogbWV0YS5lbWFpbCwKICAgICAgICAgICAgICAgIHZhcmlhYmxlczogbWV0YSwKICAgICAgICAgICAgICAgIHNlcXVlbmNlOiBzdGF0ZS5zZWxlY3RlZFNlcXVlbmNlLAogICAgICAgICAgICB9OwogICAgICAgICAgICBpZiAobWV0YVsnbGFzdCBuYW1lJ10pIHsKICAgICAgICAgICAgICAgIHJlY2lwaWVudC5mYW1pbHlOYW1lID0gbWV0YVsnbGFzdCBuYW1lJ107CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKG1ldGFbJ2ZpcnN0IG5hbWUnXSkgewogICAgICAgICAgICAgICAgcmVjaXBpZW50LmdpdmVuTmFtZSA9IG1ldGFbJ2ZpcnN0IG5hbWUnXTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgICAgICAgICBzZXF1ZW5jZVJlY2lwaWVudHNBZGRTdGF0ZTogewogICAgICAgICAgICAgICAgICAgICR1bnNldDogWydlcnJvciddLAogICAgICAgICAgICAgICAgICAgIHJlY2lwaWVudHM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgJHNldDogW3Jlc291cmNlT2socmVjaXBpZW50KV0uY29uY2F0KHN0YXRlLnNlcXVlbmNlUmVjaXBpZW50c0FkZFN0YXRlLnJlY2lwaWVudHMpLAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHN0YXRlOwogICAgfSwKfSksIF9oLnR5cGUpLCBzZXF1ZW5jZVJlY2lwaWVudFRlbXBBZGQgPSBfaC5hY3Rpb24sIHNlcXVlbmNlUmVjaXBpZW50VGVtcEFkZFJlZHVjZXIgPSBfaC5yZWR1Y2VyOwpleHBvcnQgdmFyIFNFUVVFTkNFX1JFQ0lQSUVOVF9URU1QX1JFTU9WRSA9IChfaiA9IGNyZWF0ZSgnU0VRVUVOQ0VfUkVDSVBJRU5UX1RFTVBfUkVNT1ZFJywgewogICAgc3RhcnQ6IGZ1bmN0aW9uIChzdGF0ZSwgbWV0YSkgewogICAgICAgIHZhciByZWNpcGllbnRzID0gc3RhdGUuc2VxdWVuY2VSZWNpcGllbnRzQWRkU3RhdGUgJiYKICAgICAgICAgICAgc3RhdGUuc2VxdWVuY2VSZWNpcGllbnRzQWRkU3RhdGUucmVjaXBpZW50czsKICAgICAgICBpZiAocmVjaXBpZW50cyAmJiByZWNpcGllbnRzLmxlbmd0aCA+IG1ldGEpIHsKICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICAgICAgc2VxdWVuY2VSZWNpcGllbnRzQWRkU3RhdGU6IHsKICAgICAgICAgICAgICAgICAgICByZWNpcGllbnRzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICRzcGxpY2U6IFtbbWV0YSwgMV1dLAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHN0YXRlOwogICAgfSwKfSksIF9qLnR5cGUpLCBzZXF1ZW5jZVJlY2lwaWVudFRlbXBSZW1vdmUgPSBfai5hY3Rpb24sIHNlcXVlbmNlUmVjaXBpZW50VGVtcFJlbW92ZVJlZHVjZXIgPSBfai5yZWR1Y2VyOwpleHBvcnQgdmFyIFNFUVVFTkNFX1JFQ0lQSUVOVF9IRUFERVJTX0FERCA9IChfayA9IGNyZWF0ZSgnU0VRVUVOQ0VfUkVDSVBJRU5UX0hFQURFUlNfQUREJywgewogICAgc2V0dXA6IGZ1bmN0aW9uIChzdGF0ZSwgbWV0YSkgewogICAgICAgIGlmIChzdGF0ZS5zZXF1ZW5jZVJlY2lwaWVudHNBZGRTdGF0ZSAmJiBzdGF0ZS5zZXF1ZW5jZVJlY2lwaWVudHNBZGRTdGF0ZS5oZWFkZXJzKSB7CiAgICAgICAgICAgIHJldHVybiBzdGF0ZTsKICAgICAgICB9CiAgICAgICAgaWYgKHN0YXRlLnNlcXVlbmNlUmVjaXBpZW50c0FkZFN0YXRlKSB7CiAgICAgICAgICAgIHJldHVybiB1cGRhdGUoc3RhdGUsIHsKICAgICAgICAgICAgICAgIHNlcXVlbmNlUmVjaXBpZW50c0FkZFN0YXRlOiB7CiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogeyAkc2V0OiBjcmVhdGVEZWZhdWx0SGVhZGVycyhzdGF0ZSkgfSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgICAgIHNlcXVlbmNlUmVjaXBpZW50c0FkZFN0YXRlOiB7CiAgICAgICAgICAgICAgICAkc2V0OiB7CiAgICAgICAgICAgICAgICAgICAgcmVjaXBpZW50czogW10sCiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogY3JlYXRlRGVmYXVsdEhlYWRlcnMoc3RhdGUpLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICB9KTsKICAgIH0sCiAgICBzdGFydDogZnVuY3Rpb24gKHN0YXRlLCBtZXRhKSB7CiAgICAgICAgaWYgKCFzdGF0ZS5zZXF1ZW5jZVJlY2lwaWVudHNBZGRTdGF0ZSB8fCBzdGF0ZS5zZXF1ZW5jZVJlY2lwaWVudHNBZGRTdGF0ZS5jc3YpIHsKICAgICAgICAgICAgcmV0dXJuIHN0YXRlOwogICAgICAgIH0KICAgICAgICB2YXIgdXBkYXRlZFJlY2lwaWVudHMgPSBzdGF0ZS5zZXF1ZW5jZVJlY2lwaWVudHNBZGRTdGF0ZS5yZWNpcGllbnRzLm1hcChmdW5jdGlvbiAocikgewogICAgICAgICAgICBpZiAoIXIuZGF0YSB8fCAhci5kYXRhLnZhcmlhYmxlcykgewogICAgICAgICAgICAgICAgcmV0dXJuIHI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGVtYWlsID0gci5kYXRhLnZhcmlhYmxlc1ttZXRhLmVtYWlsXTsKICAgICAgICAgICAgZGVsZXRlIHIuZGF0YS52YXJpYWJsZXNbbWV0YS5lbWFpbF07CiAgICAgICAgICAgIHZhciBnaXZlbk5hbWU7CiAgICAgICAgICAgIGlmIChtZXRhLmdpdmVuTmFtZSkgewogICAgICAgICAgICAgICAgZ2l2ZW5OYW1lID0gci5kYXRhLnZhcmlhYmxlc1ttZXRhLmdpdmVuTmFtZV07CiAgICAgICAgICAgICAgICBkZWxldGUgci5kYXRhLnZhcmlhYmxlc1ttZXRhLmdpdmVuTmFtZV07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGZhbWlseU5hbWU7CiAgICAgICAgICAgIGlmIChtZXRhLmZhbWlseU5hbWUpIHsKICAgICAgICAgICAgICAgIGZhbWlseU5hbWUgPSByLmRhdGEudmFyaWFibGVzW21ldGEuZmFtaWx5TmFtZV07CiAgICAgICAgICAgICAgICBkZWxldGUgci5kYXRhLnZhcmlhYmxlc1ttZXRhLmZhbWlseU5hbWVdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgci5kYXRhKSwgeyBlbWFpbDogZW1haWwsCiAgICAgICAgICAgICAgICBnaXZlbk5hbWU6IGdpdmVuTmFtZSwKICAgICAgICAgICAgICAgIGZhbWlseU5hbWU6IGZhbWlseU5hbWUgfSk7CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICBzZXF1ZW5jZVJlY2lwaWVudHNBZGRTdGF0ZTogewogICAgICAgICAgICAgICAgJHNldDogewogICAgICAgICAgICAgICAgICAgIHJlY2lwaWVudHM6IHVwZGF0ZWRSZWNpcGllbnRzLm1hcChmdW5jdGlvbiAocikgeyByZXR1cm4gcmVzb3VyY2VPayhyKTsgfSksCiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogdW5pcShzdGF0ZS5zZXF1ZW5jZVJlY2lwaWVudHNBZGRTdGF0ZS5oZWFkZXJzCiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGgpIHsgcmV0dXJuIGgudG9Mb3dlckNhc2UoKTsgfSkKICAgICAgICAgICAgICAgICAgICAgICAgLmNvbmNhdChtZXRhLmhlYWRlcnMubWFwKGZ1bmN0aW9uIChoKSB7IHJldHVybiBoLnRvTG93ZXJDYXNlKCk7IH0pKSksCiAgICAgICAgICAgICAgICAgICAgaGVhZGVyc1RvQWRkOiB1bmRlZmluZWQsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgIH0pOwogICAgfSwKICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChzdGF0ZSwgbWV0YSwgcGF5bG9hZCkgewogICAgICAgIHJldHVybiB1cGRhdGUoc3RhdGUsIHsKICAgICAgICAgICAgc2VxdWVuY2VSZWNpcGllbnRzQWRkU3RhdGU6IHsKICAgICAgICAgICAgICAgICRzZXQ6IF9fYXNzaWduKF9fYXNzaWduKHt9LCBzdGF0ZS5zZXF1ZW5jZVJlY2lwaWVudHNBZGRTdGF0ZSksIHsgaGVhZGVyczogdW5pcShzdGF0ZS5zZXF1ZW5jZVJlY2lwaWVudHNBZGRTdGF0ZS5oZWFkZXJzCiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGgpIHsgcmV0dXJuIGgudG9Mb3dlckNhc2UoKTsgfSkKICAgICAgICAgICAgICAgICAgICAgICAgLmNvbmNhdChtZXRhLmhlYWRlcnMubWFwKGZ1bmN0aW9uIChoKSB7IHJldHVybiBoLnRvTG93ZXJDYXNlKCk7IH0pKSksIGhlYWRlcnNUb0FkZDogdW5kZWZpbmVkIH0pLAogICAgICAgICAgICB9LAogICAgICAgIH0pOwogICAgfSwKfSksIF9rLnR5cGUpLCBzZXF1ZW5jZVJlY2lwaWVudEhlYWRlcnNBZGQgPSBfay5hY3Rpb24sIHNlcXVlbmNlUmVjaXBpZW50SGVhZGVyc0FkZFJlZHVjZXIgPSBfay5yZWR1Y2VyOwpleHBvcnQgdmFyIFNFUVVFTkNFX1JFQ0lQSUVOVF9TVUNDRVNTX0NPVU5UX0NMRUFSID0gKF9sID0gY3JlYXRlKCdTRVFVRU5DRV9SRUNJUElFTlRfU1VDQ0VTU19DT1VOVF9DTEVBUicsIHsKICAgIHNldHVwOiBmdW5jdGlvbiAoc3RhdGUsIG1ldGEpIHsKICAgICAgICBpZiAoc3RhdGUuc2VxdWVuY2VSZWNpcGllbnRzQWRkU3RhdGUgJiYgc3RhdGUuc2VxdWVuY2VSZWNpcGllbnRzQWRkU3RhdGUuc3VjY2Vzc0NvdW50KSB7CiAgICAgICAgICAgIHJldHVybiBzdGF0ZTsKICAgICAgICB9CiAgICAgICAgaWYgKHN0YXRlLnNlcXVlbmNlUmVjaXBpZW50c0FkZFN0YXRlKSB7CiAgICAgICAgICAgIHJldHVybiB1cGRhdGUoc3RhdGUsIHsKICAgICAgICAgICAgICAgIHNlcXVlbmNlUmVjaXBpZW50c0FkZFN0YXRlOiB7CiAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc0NvdW50OiB7ICRzZXQ6IDAgfSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgICAgIHNlcXVlbmNlUmVjaXBpZW50c0FkZFN0YXRlOiB7CiAgICAgICAgICAgICAgICAkc2V0OiB7CiAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc0NvdW50OiAwLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICB9KTsKICAgIH0sCiAgICBzdGFydDogZnVuY3Rpb24gKHN0YXRlLCBtZXRhKSB7CiAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICBzZXF1ZW5jZVJlY2lwaWVudHNBZGRTdGF0ZTogewogICAgICAgICAgICAgICAgJHNldDogX19hc3NpZ24oX19hc3NpZ24oe30sIHN0YXRlLnNlcXVlbmNlUmVjaXBpZW50c0FkZFN0YXRlKSwgeyBzdWNjZXNzQ291bnQ6IHVuZGVmaW5lZCB9KSwKICAgICAgICAgICAgfSwKICAgICAgICB9KTsKICAgIH0sCn0pLCBfbC50eXBlKSwgc2VxdWVuY2VSZWNpcGllbnRTdWNjZXNzQ291bnRDbGVhciA9IF9sLmFjdGlvbiwgc2VxdWVuY2VSZWNpcGllbnRTdWNjZXNzQ291bnRDbGVhclJlZHVjZXIgPSBfbC5yZWR1Y2VyOwpleHBvcnQgdmFyIFNFUVVFTkNFX1JFQ0lQSUVOVF9URU1QX1VQREFURSA9IChfbSA9IGNyZWF0ZSgnU0VRVUVOQ0VfUkVDSVBJRU5UX1RFTVBfVVBEQVRFJywgewogICAgc3RhcnQ6IGZ1bmN0aW9uIChzdGF0ZSwgbWV0YSkgewogICAgICAgIGlmICghc3RhdGUuc2VxdWVuY2VSZWNpcGllbnRzQWRkU3RhdGUgfHwgIXN0YXRlLnNlcXVlbmNlUmVjaXBpZW50c0FkZFN0YXRlLnJlY2lwaWVudHMpIHsKICAgICAgICAgICAgcmV0dXJuIHN0YXRlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgICAgIHNlcXVlbmNlUmVjaXBpZW50c0FkZFN0YXRlOiB7CiAgICAgICAgICAgICAgICByZWNpcGllbnRzOiB7CiAgICAgICAgICAgICAgICAgICAgJHNwbGljZTogbWV0YS52YWxpZGF0ZSA/CiAgICAgICAgICAgICAgICAgICAgICAgIFtbbWV0YS5pbmRleCwgMSwgcmVzb3VyY2VSZWZyZXNoaW5nKG1ldGEucmVjaXBpZW50KV1dIDoKICAgICAgICAgICAgICAgICAgICAgICAgW1ttZXRhLmluZGV4LCAxLCByZXNvdXJjZU9rKG1ldGEucmVjaXBpZW50KV1dLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICB9KTsKICAgIH0sCiAgICBzdWNjZXNzOiBmdW5jdGlvbiAoc3RhdGUsIG1ldGEsIHBheWxvYWQpIHsKICAgICAgICBpZiAoIXN0YXRlLnNlcXVlbmNlUmVjaXBpZW50c0FkZFN0YXRlIHx8ICFzdGF0ZS5zZXF1ZW5jZVJlY2lwaWVudHNBZGRTdGF0ZS5yZWNpcGllbnRzIHx8CiAgICAgICAgICAgIHN0YXRlLnNlcXVlbmNlUmVjaXBpZW50c0FkZFN0YXRlLnJlY2lwaWVudHMubGVuZ3RoIDwgbWV0YS5pbmRleCkgewogICAgICAgICAgICByZXR1cm4gc3RhdGU7CiAgICAgICAgfQogICAgICAgIHJldHVybiB1cGRhdGUoc3RhdGUsIHsKICAgICAgICAgICAgc2VxdWVuY2VSZWNpcGllbnRzQWRkU3RhdGU6IHsKICAgICAgICAgICAgICAgIHJlY2lwaWVudHM6IHsKICAgICAgICAgICAgICAgICAgICAkc3BsaWNlOiBbW21ldGEuaW5kZXgsIDEsIHJlc291cmNlT2socGF5bG9hZCldXSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgfSk7CiAgICB9LAp9KSwgX20udHlwZSksIHNlcXVlbmNlUmVjaXBpZW50VGVtcFVwZGF0ZSA9IF9tLmFjdGlvbiwgc2VxdWVuY2VSZWNpcGllbnRUZW1wVXBkYXRlUmVkdWNlciA9IF9tLnJlZHVjZXI7CmV4cG9ydCBkZWZhdWx0IFsKICAgIHNlcXVlbmNlUmVjaXBpZW50RGVsZXRlUmVkdWNlciwKICAgIHNlcXVlbmNlUmVjaXBpZW50VXBsb2FkUmVkdWNlciwKICAgIHNlcXVlbmNlUmVjaXBpZW50VXBkYXRlUmVkdWNlciwKICAgIHNlcXVlbmNlUmVjaXBpZW50TGlzdFJlZHVjZXIsCiAgICBzZXF1ZW5jZVJlY2lwaWVudENyZWF0ZVJlZHVjZXIsCiAgICBzZXF1ZW5jZVJlY2lwaWVudEFkZFNob3dSZWR1Y2VyLAogICAgc2VxdWVuY2VSZWNpcGllbnRUZW1wQWRkUmVkdWNlciwKICAgIHNlcXVlbmNlUmVjaXBpZW50VGVtcFJlbW92ZVJlZHVjZXIsCiAgICBzZXF1ZW5jZVJlY2lwaWVudEhlYWRlcnNBZGRSZWR1Y2VyLAogICAgc2VxdWVuY2VSZWNpcGllbnRTdWNjZXNzQ291bnRDbGVhclJlZHVjZXIsCiAgICBzZXF1ZW5jZVJlY2lwaWVudFRlbXBVcGRhdGVSZWR1Y2VyLAogICAgc2VxdWVuY2VSZWNpcGllbnRSZWFjdGl2YXRlUmVkdWNlciwKXTsK"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/sequenceRecipients.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/sequenceRecipients.ts"],"names":[],"mappings":"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","sourcesContent":["import update from 'immutability-helper';\nimport { keyBy, uniq } from 'lodash';\nimport { create } from '@src/lib/redux';\nimport {\n  SequenceRecipient,\n  SequenceRecipientFilter,\n  SequenceRecipientSort,\n} from '@src/types/sequences';\nimport { ResourceStatus, RequiredPartial, StoreState } from '@src/types';\nimport { resourceOk, resourcePending, resourceRefreshing } from '@src/lib/resource';\n\nexport const createDefaultHeaders = (state: StoreState) => {\n  return uniq(['email', 'first name', 'last name']\n    .concat(state.selectedSequence && state.sequences[state.selectedSequence]\n      && state.sequences[state.selectedSequence].data &&\n      state.sequences[state.selectedSequence].data!.headers || []));\n};\n\nexport interface SequenceRecipientUploadMeta {\n  sequence: string;\n  cloudFile: string;\n  emailHeader: string;\n  familyNameHeader?: string;\n  givenNameHeader?: string;\n}\n\nexport interface SequenceRecipientUploadPayload {\n  invalidRecipients: SequenceRecipientCreateRecipient[];\n  recipients: SequenceRecipientCreateRecipient[];\n}\n\nexport const {\n  type: SEQUENCE_RECIPIENT_UPLOAD,\n  action: sequenceRecipientUpload,\n  reducer: sequenceRecipientUploadReducer,\n} = create<\n  SequenceRecipientUploadMeta,\n  SequenceRecipientUploadPayload\n>('SEQUENCE_RECIPIENT_UPLOAD', {\n  setup: (state, meta) => {\n    if (state.sequenceRecipientsAddState) {\n      return state;\n    }\n\n    return update(state, {\n      sequenceRecipientsAddState: {\n        $set: {\n          recipients: [],\n          headers: createDefaultHeaders(state),\n        },\n      },\n    });\n  },\n  success: (state, meta, payload) => {\n    return update(state, {\n      sequenceRecipientsAddState: {\n        $set: {\n          ...state.sequenceRecipientsAddState,\n          recipients: payload.invalidRecipients.map(r => resourceOk(r))\n            .concat(payload.recipients.map(r => resourceOk(r)))\n            .concat(state.sequenceRecipientsAddState!.recipients),\n          csv: undefined,\n        },\n      },\n    });\n  },\n});\n\nexport type SequenceRecipientCreateRecipient = RequiredPartial<\n  SequenceRecipient,\n  'email' | 'sequence' | 'variables'\n>;\n\nexport interface SequenceRecipientCreateMeta {\n  addAsPaused: boolean;\n  sequence: string;\n}\n\nexport interface SequenceRecipientCreatePayload {\n  recipients: SequenceRecipient[];\n  invalidRecipients: SequenceRecipientCreateRecipient[];\n}\n\n// TODO(SHIN): Discuss start case for invidivual recipient delete errors. Do we expect optimistics?\n// TODO(SHIN): Handle failure notifications for invidivual recipient delete errors\nexport const {\n  type: SEQUENCE_RECIPIENT_CREATE,\n  action: sequenceRecipientCreate,\n  reducer: sequenceRecipientCreateReducer,\n} = create<\n  SequenceRecipientCreateMeta, SequenceRecipientCreatePayload\n>('SEQUENCE_RECIPIENT_CREATE', {\n  setup: (state, meta) => {\n    if (state.sequenceRecipients[meta.sequence] && state.sequenceRecipientsAddState\n      && state.sequenceRecipientsAddState.recipients) {\n      return state;\n    }\n\n    if (state.sequenceRecipients[meta.sequence] && state.sequenceRecipientsAddState) {\n      return update(state, {\n        sequenceRecipientsAddState: {\n          $unset: ['error'],\n          recipients: { $set: [] },\n        },\n      });\n    }\n\n    if (state.sequenceRecipients[meta.sequence]) {\n      return update(state, {\n        sequenceRecipientsAddState: {\n          $set: {\n            recipients: [],\n            headers: createDefaultHeaders(state),\n          },\n        },\n      });\n    }\n\n    return update(state, {\n      sequenceRecipients: {\n        [meta.sequence]: { $set: {} },\n      },\n      sequenceRecipientsAddState: {\n        $set: {\n          recipients: [],\n          headers: createDefaultHeaders(state),\n        },\n      },\n    });\n  },\n  success: (state, meta, payload) => {\n    return update(state, {\n      sequenceRecipients: {\n        [meta.sequence]: {\n          $merge: keyBy(\n            payload.recipients.map(val => resourceOk(val)),\n            recipient => recipient.data && recipient.data.id,\n          ),\n        },\n      },\n      sequenceRecipientsAddState: {\n        $unset: ['error'],\n        successCount: { $set: payload.recipients.length },\n        recipients: {\n          $set: payload.invalidRecipients.map(r => resourceOk(r)),\n        },\n      },\n    });\n  },\n  failure: (state, meta, error) => {\n    return update(state, {\n      sequenceRecipientsAddState: {\n        error: { $set: error },\n      },\n    });\n  },\n});\n\nexport type SequenceRecipientUpdateMeta = RequiredPartial<\n  SequenceRecipient,\n  'id'|'sequence'\n>;\n\n// TODO(SHIN): Discuss start case for invidivual recipient delete errors. Do we expect optimistics?\n// TODO(SHIN): Handle failure notifications for invidivual recipient delete errors\nexport const {\n  type: SEQUENCE_RECIPIENT_UPDATE,\n  action: sequenceRecipientUpdate,\n  reducer: sequenceRecipientUpdateReducer,\n} = create<SequenceRecipientUpdateMeta, SequenceRecipient>('SEQUENCE_RECIPIENT_UPDATE', {\n  setup: (state, meta) => {\n    if (state.sequenceRecipients[meta.sequence]) {\n      if (state.sequenceRecipients[meta.sequence][meta.id]) {\n        return state;\n      }\n\n      return update(state, {\n        sequenceRecipients: {\n          [meta.sequence]: { [meta.id]: { $set: resourcePending() } },\n        },\n      });\n    }\n\n    return update(state, {\n      sequenceRecipients: {\n        [meta.sequence]: { $set: { [meta.id]: resourcePending() } },\n      },\n    });\n  },\n  start: (state, meta) => update(state, {\n    sequenceRecipients: {\n      [meta.sequence]: {\n        [meta.id]: { status: { $set: ResourceStatus.Refreshing } },\n      },\n    },\n  }),\n  success: (state, meta, payload) => update(state, {\n    sequenceRecipients: {\n      [meta.sequence]: {\n        [meta.id]: {\n          $set: resourceOk(payload),\n        },\n      },\n    },\n  }),\n  failure: (state, meta, error) =>\n    update(state, {\n      sequenceRecipients: {\n        [meta.sequence]: {\n          [meta.id]: {\n            status: {\n              $set: ResourceStatus.Ok,\n            },\n          },\n        },\n      },\n    }),\n});\n\nexport const {\n  type: SEQUENCE_RECIPIENT_REACTIVATE,\n  action: sequenceRecipientReactivate,\n  reducer: sequenceRecipientReactivateReducer,\n} = create<SequenceRecipientUpdateMeta, SequenceRecipient>('SEQUENCE_RECIPIENT_REACTIVATE', {\n  setup: (state, meta) => {\n    if (state.sequenceRecipients[meta.sequence]) {\n      if (state.sequenceRecipients[meta.sequence][meta.id]) {\n        return state;\n      }\n\n      return update(state, {\n        sequenceRecipients: {\n          [meta.sequence]: { [meta.id]: { $set: resourcePending() } },\n        },\n      });\n    }\n\n    return update(state, {\n      sequenceRecipients: {\n        [meta.sequence]: { $set: { [meta.id]: resourcePending() } },\n      },\n    });\n  },\n  start: (state, meta) => update(state, {\n    sequenceRecipients: {\n      [meta.sequence]: {\n        [meta.id]: { status: { $set: ResourceStatus.Refreshing } },\n      },\n    },\n  }),\n  success: (state, meta, payload) => update(state, {\n    sequenceRecipients: {\n      [meta.sequence]: {\n        [meta.id]: {\n          $set: resourceOk(payload),\n        },\n      },\n    },\n  }),\n  failure: (state, meta, error) =>\n    update(state, {\n      sequenceRecipients: {\n        [meta.sequence]: {\n          [meta.id]: {\n            status: {\n              $set: ResourceStatus.Ok,\n            },\n          },\n        },\n      },\n    }),\n});\n\nexport interface SequenceRecipientDeleteMeta {\n  sequence: string;\n  id: string;\n}\n\n// TODO(SHIN): Discuss Error states for sequence recipients deletions\n// TODO(SHIN): Handle failure notifications for invidivual recipient delete errors\nexport const {\n  type: SEQUENCE_RECIPIENT_DELETE,\n  action: sequenceRecipientDelete,\n  reducer: sequenceRecipientDeleteReducer,\n} = create<SequenceRecipientDeleteMeta, null>('SEQUENCE_RECIPIENT_DELETE', {\n  setup: (state, meta) => {\n    if (state.sequenceRecipients[meta.sequence]) {\n      if (state.sequenceRecipients[meta.sequence][meta.id]) {\n        return state;\n      }\n\n      return update(state, {\n        sequenceRecipients: {\n          [meta.sequence]: { [meta.id]: { $set: resourcePending() } },\n        },\n      });\n    }\n\n    return update(state, {\n      sequenceRecipients: {\n        [meta.sequence]: { $set: { [meta.id]: resourcePending() } },\n      },\n    });\n  },\n  success: (state, meta, payload) => update(state, {\n    sequenceRecipients: {\n      [meta.sequence]: {\n        $unset: [meta.id],\n      },\n    },\n  }),\n  failure: (state, meta, error) => update(state, {\n    sequenceRecipients: {\n      [meta.sequence]: {\n        [meta.id]: { $set: resourceOk(meta) },\n      },\n    },\n  }),\n});\n\nexport interface SequenceRecipientListMeta {\n  sequence: string;\n  offset?: number;\n  query?: string;\n  filter: SequenceRecipientFilter;\n  sort?: SequenceRecipientSort;\n  desc?: boolean;\n}\nexport const {\n  type: SEQUENCE_RECIPIENT_LIST,\n  action: sequenceRecipientList,\n  reducer: sequenceRecipientListReducer,\n} = create<SequenceRecipientListMeta, SequenceRecipient[]>('SEQUENCE_RECIPIENT_LIST', {\n  setup: (state, meta) => {\n    if (state.sequenceRecipients[meta.sequence]) {\n      return state;\n    }\n\n    return update(state, {\n      sequenceRecipients: {\n        [meta.sequence]: { $set: {} },\n      },\n    });\n  },\n  success: (state, meta, payload) => {\n    let filter;\n    let sort;\n    let query;\n    let desc;\n    if (state.sequenceRecipientsState) {\n      filter = state.sequenceRecipientsState.filter;\n      sort = state.sequenceRecipientsState.sort;\n      query = state.sequenceRecipientsState.query;\n      desc = state.sequenceRecipientsState.desc;\n    }\n\n    if (meta.offset && filter === meta.filter\n      && sort === meta.sort && query === meta.query && desc === meta.desc) {\n      return update(state, {\n        sequenceRecipientsState: {\n          $set: {\n            filter: meta.filter,\n            sort: meta.sort,\n            query: meta.query,\n            offset: meta.offset,\n            desc: meta.desc,\n          },\n        },\n        sequenceRecipients: {\n          [meta.sequence]: {\n            $merge: keyBy(\n              payload.map(val => resourceOk(val)),\n              recipient => recipient.data && recipient.data.id,\n            ),\n          },\n        },\n      });\n    }\n\n    return update(state, {\n      sequenceRecipientsState: {\n        $set: {\n          filter: meta.filter,\n          sort: meta.sort,\n          query: meta.query,\n          offset: meta.offset,\n          desc: meta.desc,\n        },\n      },\n      sequenceRecipients: {\n        [meta.sequence]: {\n          $set: keyBy(\n            payload.map(val => resourceOk(val)),\n            recipient => recipient.data && recipient.data.id,\n          ),\n        },\n      },\n    });\n  },\n});\n\nexport const {\n  type: SEQUENCE_RECIPIENT_ADD_SHOW,\n  action: sequenceRecipientAddShow,\n  reducer: sequenceRecipientAddShowReducer,\n} = create<boolean, null>('SEQUENCE_RECIPIENT_ADD_SHOW', {\n  start: (state, meta) => {\n    if (meta) {\n      return update(state, {\n        sequenceRecipientsAddState: {\n          $set: {\n            headers: createDefaultHeaders(state),\n            recipients: [],\n          },\n        },\n      });\n    }\n\n    return update(state, {\n      sequenceRecipientsAddState: {\n        $set: undefined,\n      },\n    });\n  },\n});\n\nexport interface SequenceRecipientTempAddMeta {\n  email: string;\n  [header: string]: string;\n}\n\nexport const {\n  type: SEQUENCE_RECIPIENT_TEMP_ADD,\n  action: sequenceRecipientTempAdd,\n  reducer: sequenceRecipientTempAddReducer,\n} = create<SequenceRecipientTempAddMeta, null>('SEQUENCE_RECIPIENT_TEMP_ADD', {\n  setup: (state, meta) => {\n    if (state.sequenceRecipientsAddState && state.sequenceRecipientsAddState.recipients) {\n      return state;\n    }\n\n    if (state.sequenceRecipientsAddState) {\n      return update(state, {\n        sequenceRecipientsAddState: {\n          $unset: ['error'],\n          recipients: {\n            $set: [],\n          },\n        },\n      });\n    }\n\n    return update(state, {\n      sequenceRecipientsAddState: {\n        $set: {\n          recipients: [],\n          headers: createDefaultHeaders(state),\n        },\n      },\n    });\n  },\n  start: (state, meta) => {\n    if (state.selectedSequence) {\n      const recipient: SequenceRecipientCreateRecipient = {\n        email: meta.email,\n        variables: meta,\n        sequence: state.selectedSequence,\n      };\n\n      if (meta['last name']) {\n        recipient.familyName = meta['last name'];\n      }\n\n      if (meta['first name']) {\n        recipient.givenName = meta['first name'];\n      }\n\n      return update(state, {\n        sequenceRecipientsAddState: {\n          $unset: ['error'],\n          recipients: {\n            $set: [resourceOk(recipient)].concat(state.sequenceRecipientsAddState!.recipients),\n          },\n        },\n      });\n    }\n\n    return state;\n  },\n});\n\nexport const {\n  type: SEQUENCE_RECIPIENT_TEMP_REMOVE,\n  action: sequenceRecipientTempRemove,\n  reducer: sequenceRecipientTempRemoveReducer,\n} = create<number, null>('SEQUENCE_RECIPIENT_TEMP_REMOVE', {\n  start: (state, meta) => {\n    const recipients = state.sequenceRecipientsAddState &&\n      state.sequenceRecipientsAddState.recipients;\n    if (recipients && recipients.length > meta) {\n      return update(state, {\n        sequenceRecipientsAddState: {\n          recipients: {\n            $splice: [[meta, 1]],\n          },\n        },\n      });\n    }\n\n    return state;\n  },\n});\n\nexport interface SequenceRecipientHeadersAddMeta {\n  email: string;\n  givenName?: string;\n  familyName?: string;\n  headers: string[];\n}\n\nexport const {\n  type: SEQUENCE_RECIPIENT_HEADERS_ADD,\n  action: sequenceRecipientHeadersAdd,\n  reducer: sequenceRecipientHeadersAddReducer,\n} = create<SequenceRecipientHeadersAddMeta, null>('SEQUENCE_RECIPIENT_HEADERS_ADD', {\n  setup: (state, meta) => {\n    if (state.sequenceRecipientsAddState && state.sequenceRecipientsAddState.headers) {\n      return state;\n    }\n\n    if (state.sequenceRecipientsAddState) {\n      return update(state, {\n        sequenceRecipientsAddState: {\n          headers: { $set: createDefaultHeaders(state) },\n        },\n      });\n    }\n\n    return update(state, {\n      sequenceRecipientsAddState: {\n        $set: {\n          recipients: [],\n          headers: createDefaultHeaders(state),\n        },\n      },\n    });\n  },\n  start: (state, meta) => {\n    if (!state.sequenceRecipientsAddState || state.sequenceRecipientsAddState.csv) {\n      return state;\n    }\n\n    const updatedRecipients = state.sequenceRecipientsAddState.recipients.map((r) => {\n      if (!r.data || !r.data.variables) {\n        return r;\n      }\n\n      const email = r.data.variables[meta.email];\n      delete r.data.variables[meta.email];\n\n      let givenName;\n      if (meta.givenName) {\n        givenName = r.data.variables[meta.givenName];\n        delete r.data.variables[meta.givenName];\n      }\n\n      let familyName;\n      if (meta.familyName) {\n        familyName = r.data.variables[meta.familyName];\n        delete r.data.variables[meta.familyName];\n      }\n\n      return {\n        ...r.data,\n        email,\n        givenName,\n        familyName,\n      };\n    });\n\n    return update(state, {\n      sequenceRecipientsAddState: {\n        $set: {\n          recipients: updatedRecipients.map(r => resourceOk(r)),\n          headers: uniq(\n            state.sequenceRecipientsAddState.headers\n              .map(h => h.toLowerCase())\n              .concat(meta.headers.map(h => h.toLowerCase())),\n          ),\n          headersToAdd: undefined,\n        },\n      },\n    });\n  },\n  success: (state, meta, payload) =>\n    update(state, {\n      sequenceRecipientsAddState: {\n        $set: {\n          ...state.sequenceRecipientsAddState,\n          headers: uniq(\n            state.sequenceRecipientsAddState!.headers\n              .map(h => h.toLowerCase())\n              .concat(meta.headers.map(h => h.toLowerCase())),\n          ),\n          headersToAdd: undefined,\n        },\n      },\n    }),\n});\n\nexport const {\n  type: SEQUENCE_RECIPIENT_SUCCESS_COUNT_CLEAR,\n  action: sequenceRecipientSuccessCountClear,\n  reducer: sequenceRecipientSuccessCountClearReducer,\n} = create<null, null>('SEQUENCE_RECIPIENT_SUCCESS_COUNT_CLEAR', {\n  setup: (state, meta) => {\n    if (state.sequenceRecipientsAddState && state.sequenceRecipientsAddState.successCount) {\n      return state;\n    }\n\n    if (state.sequenceRecipientsAddState) {\n      return update(state, {\n        sequenceRecipientsAddState: {\n          successCount: { $set: 0 },\n        },\n      });\n    }\n\n    return update(state, {\n      sequenceRecipientsAddState: {\n        $set: {\n          successCount: 0,\n        },\n      },\n    });\n  },\n  start: (state, meta) =>\n    update(state, {\n      sequenceRecipientsAddState: {\n        $set: {\n          ...state.sequenceRecipientsAddState,\n          successCount: undefined,\n        },\n      },\n    }),\n});\n\nexport interface SequenceRecipientTempUpdateMeta {\n  index: number;\n  recipient: SequenceRecipientCreateRecipient;\n  validate?: boolean;\n}\nexport const {\n  type: SEQUENCE_RECIPIENT_TEMP_UPDATE,\n  action: sequenceRecipientTempUpdate,\n  reducer: sequenceRecipientTempUpdateReducer,\n} = create<SequenceRecipientTempUpdateMeta, SequenceRecipient>('SEQUENCE_RECIPIENT_TEMP_UPDATE', {\n  start: (state, meta) => {\n    if (!state.sequenceRecipientsAddState || !state.sequenceRecipientsAddState.recipients) {\n      return state;\n    }\n\n    return update(state, {\n      sequenceRecipientsAddState: {\n        recipients: {\n          $splice: meta.validate ?\n            [[meta.index, 1, resourceRefreshing(meta.recipient)]] :\n            [[meta.index, 1, resourceOk(meta.recipient)]],\n        },\n      },\n    });\n  },\n  success: (state, meta, payload) => {\n    if (!state.sequenceRecipientsAddState || !state.sequenceRecipientsAddState.recipients ||\n      state.sequenceRecipientsAddState.recipients.length < meta.index) {\n      return state;\n    }\n\n    return update(state, {\n      sequenceRecipientsAddState: {\n        recipients: {\n          $splice: [[meta.index, 1, resourceOk(payload)]],\n        },\n      },\n    });\n  },\n});\n\nexport default [\n  sequenceRecipientDeleteReducer,\n  sequenceRecipientUploadReducer,\n  sequenceRecipientUpdateReducer,\n  sequenceRecipientListReducer,\n  sequenceRecipientCreateReducer,\n  sequenceRecipientAddShowReducer,\n  sequenceRecipientTempAddReducer,\n  sequenceRecipientTempRemoveReducer,\n  sequenceRecipientHeadersAddReducer,\n  sequenceRecipientSuccessCountClearReducer,\n  sequenceRecipientTempUpdateReducer,\n  sequenceRecipientReactivateReducer,\n];\n"]}]}