{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/threads.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/threads.ts","mtime":1675280254053},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/threads.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/threads.ts"],"names":[],"mappings":"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","sourcesContent":["import { create, createAction, createSingle } from '@src/lib/redux';\nimport update from 'immutability-helper';\nimport { flatMap, flatten, endsWith, keyBy, findIndex, isEqual, size, uniqBy } from 'lodash';\n\nimport { Mailbox, Thread, Commit, ThreadCommitMeta, ResourceStatus } from '@src/types';\nimport { resourceLoading, resourceOk, resourceFailed, resourceRefreshing } from '@src/lib/resource';\nimport { createSelector } from '@src/lib/selector';\nimport { computeThread, matchesThread } from '@src/lib/thread';\nimport { fnv1a32 } from '@src/lib/crypt';\nimport { parseQueryParams } from '@src/lib/search';\n\nexport const {\n  type: THREAD_DISABLE_TRACK,\n  action: threadDisableTrack,\n  reducer: threadDisableTrackReducer,\n} = create<string|Error, Thread|null>('THREAD_DISABLE_TRACK', {\n  success: (state, meta, payload) =>\n    update(state, {\n      selectedThread: { $set: payload },\n    }),\n});\n\n// Thread Select\n// NOTE: This action should not be used directly.\n// It is trigerred by location changes to update the selectedThread\nexport const {\n  type: THREAD_SELECT,\n  action: threadSelect,\n  reducer: threadSelectReducer,\n} = create<string, Thread|null>('THREAD_SELECT', {\n  success: (state, meta, payload) =>\n    update(state, {\n      selectedThread: { $set: payload === null ? undefined : payload },\n    }),\n});\n\nexport const {\n  type: CONTACT_THREAD_SELECT,\n  action: contactThreadSelect,\n  reducer: contactThreadSelectReducer,\n} = create<Thread|undefined, Thread>('CONTACT_THREAD_SELECT', {\n  start: (state, meta) =>\n    update(state, {\n      selectedContactThread: { $set: meta },\n    }),\n});\n\n// Update multiple selections\nexport const {\n  type: SELECTED_IDS_UPDATE,\n  action: selectedIdsUpdate,\n  reducer: selectedIdsUpdateReducer,\n} = createSingle<Map<string, boolean>>('SELECTED_IDS_UPDATE', (state, meta) =>\n  update(state, {\n    selectedIds: { $set: meta },\n  }),\n);\n\nexport interface ThreadSearchMeta {\n  query: string;\n  provider?: boolean;\n}\n\nexport interface ThreadSearchPayload {\n  provider: boolean;\n  threads: Thread[];\n}\n\n// HACK(SHIN & JEFF): Clears mailbox threads when search starts. When success createSelector\n// MailboxThreads is refreshed, since mode has cleared ThreadsDataSource, it will appendSortedItems\n// and TDS will update with search results\nexport const {\n  type: THREADS_SEARCH,\n  action: threadsSearch,\n  reducer: threadsSearchReducer,\n} = create<ThreadSearchMeta, ThreadSearchPayload>('THREADS_SEARCH', {\n  start: (state, meta) => {\n    const queryParams = parseQueryParams(meta.query, state.lists);\n    const queryChanged = !isEqual(queryParams, state.mailbox.queryParams);\n    const providerSearchChanged = meta.provider !== state.mailbox.providerSearch;\n    if (!queryChanged && !providerSearchChanged) {\n      return state;\n    }\n\n    // Set query/queryParams to undefined if no value, in order to match cleared mailbox behavior\n    const updatedQuery = !!meta.query && meta.query || undefined;\n    const updatedQueryParams = !!size(Object.keys(queryParams)) && queryParams || undefined;\n    return update(state, {\n      mailbox: {\n        query: { $set: updatedQuery },\n        queryParams: { $set:  updatedQueryParams },\n        providerSearch: { $set: meta.provider },\n        providerSearchComplete: { $set: false },\n      },\n      selectedIds: { $set: new Map() },\n      // selectedThread: { $set: undefined },\n      mailboxThreads: { $set: queryChanged ? resourceLoading() : state.mailboxThreads },\n    });\n  },\n  success: (state, meta, payload) => {\n    // If have results replace mailboxThreads with results\n    const oldMailboxThreads = state.mailboxThreads.data || [];\n    const concatResults = oldMailboxThreads.concat(payload.threads);\n    const uniqThreads = uniqBy(concatResults, 'id');\n\n    // Otherwise return\n    return update(state, {\n      mailboxThreads: {\n        status: { $set: ResourceStatus.Ok },\n        data: { $set: uniqThreads },\n      },\n      mailbox: {\n        providerSearchComplete: {\n          $set: payload.provider && true || state.mailbox.providerSearchComplete,\n        },\n      },\n    });\n  },\n});\n\n// Thread List\n// NOTE: This action should not be used directly.\n// It is trigerred by location changes to update the selectedThread\n// It is also trigerred by Bridge ThreadUpdate events\n// Meta identifies whether thread list should be refreshed or not\nexport const {\n  type: THREAD_LIST,\n  action: threadList,\n  reducer: threadListReducer,\n} = create<boolean, Thread[]>('THREAD_LIST', {\n  start: (state, meta) => {\n    // Don't refresh mailbox while in query mode\n    if (state.mailbox.query && state.mailbox.query !== '') {\n      return state;\n    }\n    return update(state, {\n      mailboxThreads: { $set: meta\n        ? resourceRefreshing(state.mailboxThreads.data || [])\n        : resourceLoading() },\n    });\n  },\n  success: (state, meta, payload) => {\n    // Do not increment refresh counter when in same mailbox\n    const updatedHydrateCount = !meta\n      ? state.mailbox.hydrateCount || 0 + 1\n      : state.mailbox.hydrateCount;\n    return update(state, {\n      mailboxThreads: { $set: resourceOk(payload) },\n      mailbox: {\n        hydrateCount: { $set: updatedHydrateCount },\n      },\n    });\n  },\n});\n\nexport const {\n  type: THREADS_SELECTED_CONTACT,\n  action: threadsSelectedContact,\n  reducer: threadsSelectedContactReducer,\n} = create<string, Thread[]>('THREADS_SELECTED_CONTACT', {\n  start: (state, meta) => {\n    if (meta === '') {\n      return update(state, {\n        selectedContactThreads: { $set: [] },\n        selectedContactFiles: { $set: [] },\n      });\n    }\n\n    return state;\n  },\n  success: (state, meta, payload) =>\n    update(state, {\n      selectedContactThreads: { $set: payload },\n      selectedContactFiles: {\n        $set: flatMap(\n          payload\n            .filter(thread => thread.hasAttachments && thread.messages.length),\n          thread => flatten(thread.messages.map(message =>\n            message.attachments\n              .filter(attachment =>\n                !attachment.inline && !endsWith(attachment.filename.toLowerCase(), '.ics'),\n              )\n              .map(attachment => ({\n                attachment,\n                contact: message.from,\n                created: message.internal,\n              })),\n          ))),\n      },\n    }),\n});\n\nexport const {\n  type: THREAD_FETCH,\n  action: threadFetch,\n  reducer: threadFetchReducer,\n} = create<string, Thread>('THREAD_FETCH', {\n  start: (state, meta) =>\n    update(state, {\n      threads: {\n        [meta]: { $set: resourceLoading<Thread>() },\n      },\n    }),\n  success: (state, meta, payload) =>\n    update(state, {\n      threads: {\n        [meta]: { $set: resourceOk<Thread>(payload) },\n      },\n    }),\n  failure: (state, meta, error) =>\n    update(state, {\n      threads: {\n        [meta]: { $set: resourceFailed<Thread>(error) },\n      },\n    }),\n});\n\nexport const {\n  type: THREAD_UPDATE,\n  action: threadUpdate,\n  reducer: threadUpdateReducer,\n} = create<Commit, Thread>('THREAD_UPDATE', {\n  success: (state, meta, payload) => {\n    if (state.selectedThread && state.selectedThread.id === payload.id) {\n      return update(state, { selectedThread: { $set: payload } });\n    }\n    return state;\n  },\n});\n\nexport const {\n  type: THREAD_SWIPE_ID_SET,\n  action: threadSwipeIdSet,\n  reducer: threadSwipeIdSetReducer,\n} = create<string|null, null>('THREAD_SWIPE_ID_SET', {\n  start: (state, meta) => {\n    return update(state, {\n      threadSwipeId: { $set: meta && meta || undefined },\n    });\n  },\n});\n\n// Removes selected thread on successful delete\nexport const {\n  type: THREAD_DELETE,\n  action: threadDelete,\n  reducer: threadDeleteReducer,\n} = create<string, null>('THREAD_DELETE', {\n  success: (state, meta) => {\n    // Remove from mailboxThreads\n    const selectedMatch = state.selectedThread && state.selectedThread.id === meta;\n\n    // Remove from selectedThread\n    return update(state, {\n      selectedThread: {\n        $set: selectedMatch ? null : state.selectedThread,\n      },\n    });\n  },\n});\n\n// Thread Move Undo Reducer unsets selectedIds\nexport const {\n  type: THREAD_MOVE_UNDO,\n  action: threadMoveUndo,\n  reducer: threadMoveUndoReducer,\n} = create<Mailbox, Thread>('THREAD_MOVE_UNDO', {});\n\n// ThreadSingle updates any currently selected threads from a history event\nexport const {\n  type: THREAD_SINGLE,\n  action: threadSingle,\n  reducer: threadSingleReducer,\n} = create<Thread, undefined>('THREAD_SINGLE', {\n  start: (state, meta) => {\n    // Identifies if thread should be updated\n    let existingThread: Thread | undefined;\n    let existingThreadKey: string| undefined;\n    if (state.selectedThread) {\n      existingThread = state.selectedThread;\n      existingThreadKey = 'selectedThread';\n    }\n\n    // Update mailbox thread in state if a matching thread exists\n    const mailboxThreadIndex = state.mailboxThreads && state.mailboxThreads.data &&\n      findIndex(state.mailboxThreads.data, { id: meta.id });\n    const mailboxThreadUpdate = mailboxThreadIndex !== undefined && mailboxThreadIndex > -1 && {\n      mailboxThreads: {\n        data: {\n          [mailboxThreadIndex]: { $set: meta },\n        },\n      },\n    } || {};\n\n    // Update for existing thread\n    const newThread = meta.messages.length > 0 ? meta : undefined;\n    const existingThreadUpdate = existingThread && existingThreadKey &&\n      matchesThread(existingThread, meta) &&\n      {\n        [existingThreadKey]: {\n          $set: newThread,\n        },\n      } || {};\n\n    // Update mailboxThreads and existing threads if any have changed\n    if (mailboxThreadUpdate || existingThreadUpdate) {\n      return update(state, {\n        ...existingThreadUpdate,\n        ...mailboxThreadUpdate,\n      });\n    }\n\n    // Otherwise return state\n    return state;\n  },\n});\n\n// Toggles Incremental Sync indicator\nexport const {\n  type: INCREMENTAL_STATUS_TOGGLE,\n  action: incrementalStatusToggle,\n  reducer: incrementalStatusToggleReducer,\n} = create<boolean, undefined>('INCREMENTAL_STATUS_TOGGLE', {\n  start: (state, meta) => update(state, {\n    incrementalSyncing: { $set: meta },\n  }),\n});\n\nexport interface AttachmentDownloadProgressMeta {\n  id: string;\n  progress: number;\n  preview: boolean;\n}\n\nexport const {\n  type: THREAD_ATTACHMENT_DOWNLOAD_PROGRESS,\n  action: threadAttachmentDownloadProgress,\n  reducer: threadAttachmentDownloadProgressReducer,\n} = create<\n  AttachmentDownloadProgressMeta,\n  AttachmentDownloadProgressMeta\n>('THREAD_ATTACHMENT_DOWNLOAD_PROGRESS', {\n  start: (state, meta) => {\n    const existing = state.attachmentsDownloading[meta.id];\n    if (existing && existing.progress === 1) {\n      return state;\n    }\n\n    if (meta.progress === 1 && state.attachmentsDownloading[meta.id] !== undefined &&\n      state.attachmentsDownloading[meta.id].preview) {\n      return update(state, {\n        attachmentsDownloading: {\n          $unset: [meta.id],\n        },\n      });\n    }\n\n    if (meta.progress === 1 && meta.preview) {\n      return state;\n    }\n\n    return update(state, {\n      attachmentsDownloading: {\n        [meta.id]: {\n          $set: {\n            progress: meta.progress,\n            preview: meta.preview,\n          },\n        },\n      },\n    });\n  },\n});\n\nexport const {\n  type: ATTACHMENT_DOWNLOAD_PROGRESS_CLEAR,\n  action: attachmentDownloadProgressClear,\n  reducer: attachmentDownloadProgressClearReducer,\n} = create<null, undefined>('ATTACHMENT_DOWNLOAD_PROGRESS_CLEAR', {\n  start: (state, meta) =>\n    update(state, {\n      attachmentsDownloading: {\n        $set: {},\n      },\n    }),\n});\n\nexport const {\n  type: THREAD_LIST_WIDTH_SET,\n  action: threadListWidthSet,\n  reducer: threadListWidthSetReducer,\n} = create<number, undefined>('THREAD_LIST_WIDTH_SET', {\n  start: (state, meta) => {\n    localStorage.setItem('threadListWidth', meta.toString());\n\n    return update(state, {\n      threadListWidth: { $set: meta },\n    });\n  },\n});\n\n// Thread Commit meta\nexport const THREAD_COMMITS_SUBMIT = 'THREAD_COMMITS_SUBMIT';\nexport const threadCommitsSubmit =\n  createAction<ThreadCommitMeta, null>(THREAD_COMMITS_SUBMIT);\n\n// Runs selector to try to retrieve thread from mailboxThreads if exists\nexport const selectThread = createSelector<string, Thread[]|string|undefined, Thread|undefined>(\n  [\n    (state, threadId) => state.mailboxThreads.data,\n    (state, threadId) => threadId,\n  ],\n  (threads: Thread[], threadId: string) => {\n    if (!threads || !threads.length) {\n      return undefined;\n    }\n    const threadsDict = threads && keyBy(threads, 'id');\n    return threadsDict && threadsDict[threadId];\n  },\n  (threads: Thread[], threadId: string) => fnv1a32(threadId),\n  ['mailboxThreads'],\n);\n\n// Selector\nexport const selectActivityThread = createSelector<string, Thread|undefined, Thread>(\n  [\n    (state, threadId) => {\n      const thread = state.threads[threadId];\n\n      if (thread && thread.data) {\n        return thread.data;\n      }\n\n      return undefined;\n    },\n  ],\n  (thread: Thread, threadId: string) => {\n    if (thread) {\n      return thread;\n    }\n\n    return computeThread({ id: threadId } as any);\n  },\n  (thread: Thread, threadId: string) => fnv1a32(threadId),\n);\n\n// Default Export\nexport default [\n  incrementalStatusToggleReducer,\n  contactThreadSelectReducer,\n  threadListReducer,\n  threadSelectReducer,\n  threadUpdateReducer,\n  threadSingleReducer,\n  threadsSelectedContactReducer,\n  threadsSearchReducer,\n  threadFetchReducer,\n  selectedIdsUpdateReducer,\n  threadSwipeIdSetReducer,\n  threadAttachmentDownloadProgressReducer,\n  attachmentDownloadProgressClearReducer,\n  threadListWidthSetReducer,\n  threadDeleteReducer,\n  threadDisableTrackReducer,\n];\n"]}]}