{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/slack.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/slack.ts","mtime":1675280254059},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnOwppbXBvcnQgeyBBY3Rpb25TdGF0dXMgfSBmcm9tICdAc3JjL3R5cGVzJzsKaW1wb3J0IHsgU0xBQ0tfQ0hBTk5FTF9MSVNULCBzbGFja0NoYW5uZWxMaXN0LCBzbGFja01lbWJlckxpc3QsIFNMQUNLX01FTUJFUl9MSVNULCBTTEFDS19NRVNTQUdFX1BPU1QsIHNsYWNrTWVzc2FnZVBvc3QsIH0gZnJvbSAnQHNyYy9kdWNrcy9zbGFjayc7CmltcG9ydCB7IHRvYXN0U2V0IH0gZnJvbSAnQHNyYy9kdWNrcy90b2FzdHMnOwppbXBvcnQgeyByZWNvcmRFdmVudCwgVXNlckV2ZW50cyB9IGZyb20gJ0BzcmMvbGliL2FuYWx5dGljcyc7CmltcG9ydCB7IGludGVncmF0aW9uTGlzdCB9IGZyb20gJ0BzcmMvZHVja3MvaW50ZWdyYXRpb25zJzsKdmFyIGxpc3RDaGFubmVscyA9IGZ1bmN0aW9uIChhY3Rpb24kLCBzdG9yZSwgZGVwcykgewogICAgcmV0dXJuIGFjdGlvbiQub2ZUeXBlKFNMQUNLX0NIQU5ORUxfTElTVCkKICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChhY3Rpb24pIHsgcmV0dXJuIGFjdGlvbi5zdGF0dXMgPT09IEFjdGlvblN0YXR1cy5TdGFydDsgfSkKICAgICAgICAuZmxhdE1hcChmdW5jdGlvbiAoYWN0aW9uKSB7CiAgICAgICAgcmV0dXJuIGRlcHMuc2xhY2suZ2V0Q2hhbm5lbHMoKQogICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChjaGFubmVscykgeyByZXR1cm4gc2xhY2tDaGFubmVsTGlzdChudWxsLCBjaGFubmVscyk7IH0pCiAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICAgIGlmIChlcnIubWVzc2FnZS5tYXRjaCgvaW52YWxpZCBzbGFjayB0b2tlbi9pZykpIHsKICAgICAgICAgICAgICAgIHJldHVybiBPYnNlcnZhYmxlLm9mKGludGVncmF0aW9uTGlzdChudWxsKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIE9ic2VydmFibGUub2YodG9hc3RTZXQoZXJyKSk7CiAgICAgICAgfSk7CiAgICB9KTsKfTsKdmFyIGxpc3RNZW1iZXJzID0gZnVuY3Rpb24gKGFjdGlvbiQsIHN0b3JlLCBkZXBzKSB7CiAgICByZXR1cm4gYWN0aW9uJC5vZlR5cGUoU0xBQ0tfTUVNQkVSX0xJU1QpCiAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoYWN0aW9uKSB7IHJldHVybiBhY3Rpb24uc3RhdHVzID09PSBBY3Rpb25TdGF0dXMuU3RhcnQ7IH0pCiAgICAgICAgLmZsYXRNYXAoZnVuY3Rpb24gKGFjdGlvbikgewogICAgICAgIHJldHVybiBkZXBzLnNsYWNrLmdldE1lbWJlcnMoKQogICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChtZW1iZXJzKSB7IHJldHVybiBzbGFja01lbWJlckxpc3QobnVsbCwgbWVtYmVycyk7IH0pCiAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICAgIGlmIChlcnIubWVzc2FnZS5tYXRjaCgvaW52YWxpZCBzbGFjayB0b2tlbi9pZykpIHsKICAgICAgICAgICAgICAgIHJldHVybiBPYnNlcnZhYmxlLm9mKGludGVncmF0aW9uTGlzdChudWxsKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIE9ic2VydmFibGUub2YodG9hc3RTZXQoZXJyKSk7CiAgICAgICAgfSk7CiAgICB9KTsKfTsKdmFyIHBvc3RNZXNzYWdlID0gZnVuY3Rpb24gKGFjdGlvbiQsIHN0b3JlLCBkZXBzKSB7CiAgICByZXR1cm4gYWN0aW9uJC5vZlR5cGUoU0xBQ0tfTUVTU0FHRV9QT1NUKQogICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGFjdGlvbikgeyByZXR1cm4gYWN0aW9uLnN0YXR1cyA9PT0gQWN0aW9uU3RhdHVzLlN0YXJ0OyB9KQogICAgICAgIC5kbyhmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIHJlY29yZEV2ZW50KFVzZXJFdmVudHMuVGhyZWFkU2hhcmVkVG9TbGFjaywgewogICAgICAgICAgICB0ZWFtOiBzdG9yZS5nZXRTdGF0ZSgpLnRlYW0uZGF0YSA/CiAgICAgICAgICAgICAgICBzdG9yZS5nZXRTdGF0ZSgpLnRlYW0uZGF0YS5pZCA6IHVuZGVmaW5lZCwKICAgICAgICB9KTsKICAgIH0pCiAgICAgICAgLmZsYXRNYXAoZnVuY3Rpb24gKGFjdGlvbikgewogICAgICAgIHJldHVybiBkZXBzLnNsYWNrLnBvc3RNZXNzYWdlKGFjdGlvbi5tZXRhKQogICAgICAgICAgICAubWFwKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNsYWNrTWVzc2FnZVBvc3QoYWN0aW9uLm1ldGEsIG51bGwpOyB9KQogICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICBpZiAoZXJyLm1lc3NhZ2UubWF0Y2goL2ludmFsaWQgc2xhY2sgdG9rZW4vaWcpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS5vZihpbnRlZ3JhdGlvbkxpc3QobnVsbCkpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBPYnNlcnZhYmxlLm9mKHRvYXN0U2V0KGVycikpOwogICAgICAgIH0pOwogICAgfSk7Cn07CmV4cG9ydCBkZWZhdWx0IFtsaXN0Q2hhbm5lbHMsIGxpc3RNZW1iZXJzLCBwb3N0TWVzc2FnZV07Cg=="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/slack.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/slack.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs';\nimport { Epic } from 'redux-observable';\n\nimport { ActionStatus, Action, StoreState, Integration } from '@src/types';\n\nimport { Deps } from '@src/lib/epic';\nimport { SlackChannel, SlackMember } from '@src/types/slack';\nimport {\n  SLACK_CHANNEL_LIST, slackChannelList,\n  slackMemberList, SLACK_MEMBER_LIST, SLACK_MESSAGE_POST, SlackMessagePostMeta, slackMessagePost,\n} from '@src/ducks/slack';\nimport { toastSet } from '@src/ducks/toasts';\nimport { recordEvent, UserEvents } from '@src/lib/analytics';\nimport { integrationList } from '@src/ducks/integrations';\n\nconst listChannels:\n  Epic<Action<null|Error|null, SlackChannel[]|Error|null|Integration[]>, StoreState, Deps>\n  = (action$, store, deps) =>\n    action$.ofType(SLACK_CHANNEL_LIST)\n      .filter(action => action.status === ActionStatus.Start)\n      .flatMap(action =>\n        deps.slack.getChannels()\n          .map(channels => slackChannelList(null, channels))\n          .catch((err) => {\n            if (err.message.match(/invalid slack token/ig)) {\n              return Observable.of(integrationList(null));\n            }\n\n            return Observable.of(toastSet(err));\n          }),\n      );\n\nconst listMembers:\n  Epic<Action<null|Error, SlackMember[]|Error|null|Integration[]>, StoreState, Deps>\n  = (action$, store, deps) =>\n    action$.ofType(SLACK_MEMBER_LIST)\n      .filter(action => action.status === ActionStatus.Start)\n      .flatMap(action =>\n        deps.slack.getMembers()\n          .map(members => slackMemberList(null, members))\n          .catch((err) => {\n            if (err.message.match(/invalid slack token/ig)) {\n              return Observable.of(integrationList(null));\n            }\n\n            return Observable.of(toastSet(err));\n          }),\n      );\n\nconst postMessage:\n  Epic<Action<SlackMessagePostMeta|Error|null, null|Error|Integration[]>, StoreState, Deps>\n  = (action$, store, deps) =>\n    action$.ofType(SLACK_MESSAGE_POST)\n      .filter(action => action.status === ActionStatus.Start)\n      .do(() =>\n        recordEvent(UserEvents.ThreadSharedToSlack, {\n          team: store.getState().team.data ?\n            store.getState().team.data!.id : undefined,\n        }))\n      .flatMap((action: Action<SlackMessagePostMeta, null>) =>\n        deps.slack.postMessage(action.meta)\n          .map(() => slackMessagePost(action.meta, null))\n          .catch((err) => {\n            if (err.message.match(/invalid slack token/ig)) {\n              return Observable.of(integrationList(null));\n            }\n\n            return Observable.of(toastSet(err));\n          }),\n      );\n\nexport default [listChannels, listMembers, postMessage];\n"]}]}