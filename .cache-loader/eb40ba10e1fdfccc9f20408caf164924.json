{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/sync/APISync.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/sync/APISync.ts","mtime":1675280254124},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/sync/APISync.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/sync/APISync.ts"],"names":[],"mappings":"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","sourcesContent":["import { ApiError } from '@src/api/base';\nimport { Backoff } from '@src/worker/Backoff';\nimport { Combiner, rateLimiter, rateLimiterFunc } from '@src/lib/rx';\nimport { Observable, Observer, Subject, Subscription } from 'rxjs';\nimport Cache, { Stores } from '@src/lib/db';\nimport bus, { getBus, BusEvent, BusEventName } from '@src/worker/bus';\nimport { captureException } from '@sentry/browser';\nimport { sendMeUpdated } from '../bridge/workerEvents';\n\ninterface Resource {\n  id: string;\n  team?: string;\n}\n\n// APISync is a base class for init and incr syncing Polymail models.\nexport abstract class APISync<Model> {\n\n  // State\n  readonly workerId: string;\n  readonly storeName: Stores;\n  readonly incrSync: boolean;\n  team?: string;\n\n  completed: boolean;\n  isRunning: boolean;\n  backoff: Backoff;\n  offset?: string;\n  cancelSignal: Subject<null>;\n  ratelimit: number;\n  rateLimiter: rateLimiterFunc<Model[]>;\n\n  // Dependencies\n  private bus: Subject<BusEvent>;\n  private sub?: Subscription;\n\n  constructor(workerId: string, storeName: Stores, incrSync: boolean) {\n    this.workerId = workerId;\n    this.storeName = storeName;\n    this.incrSync = incrSync;\n\n    this.completed = false;\n    this.isRunning = false;\n    this.backoff = new Backoff(workerId);\n    this.cancelSignal = new Subject<null>();\n    this.ratelimit = 333; // in milliseconds\n    this.rateLimiter = rateLimiter<Model[]>(this.ratelimit);\n\n    this.bus = getBus();\n    return;\n  }\n\n  init() {\n    // Listen for bus events\n    if (!this.sub) {\n      this.sub = this.bus.subscribe({\n        next: (event: BusEvent) => {\n          this.handleBusEvent(event);\n        },\n        error: (e: Error) => {\n          captureException(e);\n        },\n      });\n    }\n  }\n\n  deinit() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  clearCache(deleteItems: boolean): Observable<null> {\n    if (this.isRunning) {\n      this.cancelSignal.next(null);\n    }\n    return Cache.deleteSingle(Stores.Workers, this.workerId)\n        .flatMap(() => {\n          this.completed = false;\n          this.offset = undefined;\n          this.backoff.clearErrors();\n          return Observable.of(null);\n        })\n      .flatMap(() => deleteItems ? Cache.clear(this.storeName) : Observable.of(null));\n  }\n\n  clearTeamCache(): Observable<null> {\n    if (this.team === undefined) {\n      return Observable.of(null);\n    }\n    if (this.isRunning) {\n      this.cancelSignal.next(null);\n    }\n    return Cache.deleteSingle(Stores.Workers, this.workerId)\n      .flatMap(() => {\n        this.completed = false;\n        this.offset = undefined;\n        this.backoff.clearErrors();\n        return Observable.of(null);\n      })\n      .flatMap(() =>\n        Cache.list<Resource>(this.storeName, m => m.team !== undefined)\n          .flatMap(mm => Cache.deleteBatch(this.storeName, mm.map(m => m.id))),\n      );\n  }\n\n  run(): Observable<null> {\n    return Observable.create((runner: Observer<null>) => {\n      if (this.isRunning) {\n        runner.next(null);\n        runner.complete();\n        return;\n      }\n      this.isRunning = true;\n      this.getState()\n        .flatMap(() => {\n          return this.offset || this.completed ? Observable.of(null) : this.beforeFirst();\n        })\n        .subscribe({\n          next: () => {\n\n            // Don't run sync if this isn't ready.\n            if (!this.backoff.isReady()) {\n              this.isRunning = false;\n              runner.next(null);\n              return runner.complete();\n            }\n\n            // Don't run if initial sync and it's already completed.\n            if (!this.incrSync && this.completed) {\n              this.isRunning = false;\n              runner.next(null);\n              return runner.complete();\n            }\n\n            const combiner = new Combiner<Model[]>();\n            combiner.takeUntil(this.cancelSignal).subscribe({\n              next: (models) => {\n\n                if (models && models.length === 0) {\n                  combiner.complete();\n                  return;\n                }\n\n                // Handle Saving filtered models and paginate next\n                this.filterPage(models)\n                  .flatMap((filteredModels) => {\n                    return this.saveCache(filteredModels)\n                      .flatMap(() => this.onSave(filteredModels));\n                  })\n                  .flatMap(() => {\n                    this.offset = this.nextPageOffset(models);\n                    return this.saveState();\n                  })\n                  .subscribe({\n                    error: (e: Error) => {\n                      combiner.error(e);\n                    },\n                    complete: () => {\n                      if (this.isCompleted(models)) {\n                        combiner.complete();\n                        return;\n                      }\n                      combiner.run(this.rateLimiter(this.fetchNextPage()));\n                    },\n                  });\n              },\n              error: (e: Error) => {\n                this.isRunning = false;\n\n                if ((e as ApiError).code && (e as ApiError).code === 401) {\n                  sendMeUpdated();\n                }\n\n                this.backoff.setError(e);\n                this.saveState().subscribe({\n                  error: (saveError) => {\n                    // tslint:disable-next-line:no-console\n                    console.error(saveError);\n                    captureException(saveError);\n                  },\n                });\n                runner.error(e);\n              },\n              complete: () => {\n                this.isRunning = false;\n                this.completed = this.incrSync ? false : true;\n                this.backoff.clearErrors();\n                this.saveState()\n                  .flatMap(() => this.onComplete())\n                  .map(() => {\n                    runner.next(null);\n                    runner.complete();\n                    return null;\n                  })\n                  .subscribe({\n                    error: (e) => {\n                      // tslint:disable-next-line:no-console\n                      console.error(e);\n                      captureException(e);\n                    },\n                  });\n              },\n            });\n\n            // Get first page\n            combiner.run(this.fetchNextPage());\n          },\n          error: (e: Error) => {\n            this.isRunning = false;\n            this.backoff.setError(e);\n          },\n        });\n    });\n  }\n\n  // Get state for this syncer from the cache.\n  getState(): Observable<any> {\n    return Cache.get(Stores.Workers, this.workerId)\n      .flatMap((state): Observable<any> => {\n        if (state) {\n          this.completed = state.completed;\n          this.offset = state.offset;\n          this.backoff.numErrors = state.numErrors;\n          this.backoff.error = state.error;\n          this.backoff.until = state.backoffUntil;\n        } else {\n          this.completed = false;\n          this.offset = undefined;\n          this.backoff.clearErrors();\n        }\n        return Observable.from([state]);\n      });\n  }\n\n  // Save this syncer's state to the cache.\n  saveState(): Observable<any> {\n    return Cache.save(Stores.Workers, {\n      worker: this.workerId,\n      offset: this.offset,\n      completed: !this.incrSync && this.completed,\n      numErrors: this.backoff.numErrors,\n      error: this.backoff.error,\n      backoffUntil: this.backoff.until,\n    });\n  }\n\n  // filterPage makes any necessary modifications to API results.\n  filterPage = (models: Model[]): Observable<Model[]> => {\n    return Observable.of(models);\n  }\n\n  // saveCache is an overrideable method that determines how to save into backing DB.\n  protected saveCache(models: Model[]): Observable<any> {\n    return Cache.load(this.storeName, models);\n  }\n\n  // Fetch next page of models.\n  protected abstract fetchNextPage(): Observable<Model[]>;\n\n  // Return offset for the next page of models.\n  protected abstract nextPageOffset(models: Model[]): string;\n\n  // Do something the first time this syncer is running.\n  // This is useful for pre-filling resources before init sync is completed.\n  protected beforeFirst(): Observable<null> {\n    return Observable.of(null);\n  }\n\n  // Do something with a page of models after save\n  protected onSave(models: Model[]): Observable<null> {\n    return Observable.of(null);\n  }\n\n  // Do something after initial sync is complete\n  protected onComplete(): Observable<null> {\n    return Observable.of(null);\n  }\n\n  // Return true if pagination is completed.\n  protected isCompleted(models: Model[]): boolean {\n    return false;\n  }\n\n  private handleBusEvent(event: BusEvent) {\n    switch (event.name) {\n      case BusEventName.ClearErrors:\n        this.backoff.clearErrors();\n        break;\n\n      case BusEventName.CancelSync:\n        if (event.data.workerId && event.data.workerId !== this.workerId) {\n          break;\n        }\n        this.cancelSignal.next(null);\n        return;\n\n      case BusEventName.TriggerSync:\n        if (event.data.workerId && event.data.workerId !== this.workerId) {\n          break;\n        }\n\n        // Don't trigger run, if completed sync\n        if (event.data.backupInterval && this.completed) {\n          break;\n        }\n\n        // Run with jitter (0-10s) if using backup interval\n        if (event.data.backupInterval) {\n          // tslint:disable-next-line:insecure-random\n          const jitter = Math.random() * 10000;\n\n          Observable.of(null)\n            .delay(jitter)\n            .flatMap(() => this.run())\n            .subscribe({\n              error: (e) => {\n                // tslint:disable-next-line:no-console\n                console.error(e);\n                captureException(e);\n              },\n            });\n          break;\n        }\n\n        // Run sync\n        this.run()\n          .subscribe({\n            error: (e) => {\n              // tslint:disable-next-line:no-console\n              console.error(e);\n              captureException(e);\n            },\n          });\n        break;\n\n      // NOTE(SHAHAN): Disabling since sync overwatch triggers this anyway, so don't need this\n      // case BusEventName.HistoryClearCache:\n        // this.clearCache(false).subscribe();\n        // break;\n\n      case BusEventName.ClearResourceRequest:\n        if (event.data.store === this.storeName && this.team === event.data.team) {\n          if (!!this.team) {\n            this.clearTeamCache().subscribe(() => {\n              bus.clearResourceResponse(event.data.requestId, event.data.team);\n            });\n          } else {\n            this.clearCache(true).subscribe(() => {\n              bus.clearResourceResponse(event.data.requestId, event.data.team);\n            });\n          }\n        }\n        break;\n\n      default:\n        break;\n    }\n  }\n}\n\nexport default APISync;\n"]}]}