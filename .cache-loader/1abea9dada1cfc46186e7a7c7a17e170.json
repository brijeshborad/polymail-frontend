{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/sync/CalendarEventSync.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/sync/CalendarEventSync.ts","mtime":1675280254125},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkgewogICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikgewogICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwKICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fAogICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTsKICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTsKICAgIH07CiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHsKICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpOwogICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfQogICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTsKICAgIH07Cn0pKCk7CmltcG9ydCBDYWNoZSwgeyBTdG9yZXMgfSBmcm9tICdAc3JjL2xpYi9kYic7CmltcG9ydCB7IENhbGVuZGFyRXZlbnRDbGllbnQgfSBmcm9tICdAc3JjL2FwaS9jYWxlbmRhckV2ZW50cyc7CmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJzsKaW1wb3J0IHsgQVBJU3luYyB9IGZyb20gJy4vQVBJU3luYyc7CmltcG9ydCB7IENhbGVuZGFyQ2xpZW50IH0gZnJvbSAnQHNyYy9hcGkvY2FsZW5kYXJzJzsKaW1wb3J0IHsgc2VuZENhbGVuZGFyc1N5bmNlZCB9IGZyb20gJ0BzcmMvd29ya2VyL2JyaWRnZS93b3JrZXJFdmVudHMnOwp2YXIgQ2FsZW5kYXJFdmVudFN5bmMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7CiAgICBfX2V4dGVuZHMoQ2FsZW5kYXJFdmVudFN5bmMsIF9zdXBlcik7CiAgICAvLyAtIGFwcCBicmlkZ2UgaW50ZXJmYWNlCiAgICBmdW5jdGlvbiBDYWxlbmRhckV2ZW50U3luYyhhY2NvdW50LCBhcGksIGNhbGVuZGFyQXBpKSB7CiAgICAgICAgaWYgKGFwaSA9PT0gdm9pZCAwKSB7IGFwaSA9IG5ldyBDYWxlbmRhckV2ZW50Q2xpZW50KCk7IH0KICAgICAgICBpZiAoY2FsZW5kYXJBcGkgPT09IHZvaWQgMCkgeyBjYWxlbmRhckFwaSA9IG5ldyBDYWxlbmRhckNsaWVudCgpOyB9CiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgJ0NhbGVuZGFyRXZlbnRTeW5jLScgKyBhY2NvdW50LCBTdG9yZXMuQ2FsZW5kYXJFdmVudHMsIGZhbHNlKSB8fCB0aGlzOwogICAgICAgIF90aGlzLmFjY291bnQgPSBhY2NvdW50OwogICAgICAgIF90aGlzLmFwaSA9IGFwaTsKICAgICAgICBfdGhpcy5jYWxlbmRhckFwaSA9IGNhbGVuZGFyQXBpOwogICAgICAgIHJldHVybiBfdGhpczsKICAgIH0KICAgIENhbGVuZGFyRXZlbnRTeW5jLnByb3RvdHlwZS5jbGVhckNhY2hlID0gZnVuY3Rpb24gKGRlbGV0ZUl0ZW1zKSB7CiAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuY2xlYXJDYWNoZS5jYWxsKHRoaXMsIGRlbGV0ZUl0ZW1zKQogICAgICAgICAgICAuZmxhdE1hcChmdW5jdGlvbiAoKSB7IHJldHVybiBDYWNoZS5jbGVhcihTdG9yZXMuQ2FsZW5kYXJzKTsgfSk7CiAgICB9OwogICAgQ2FsZW5kYXJFdmVudFN5bmMucHJvdG90eXBlLmZldGNoTmV4dFBhZ2UgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuYXBpLmxpc3QodGhpcy5hY2NvdW50LCB0aGlzLm9mZnNldCk7CiAgICB9OwogICAgQ2FsZW5kYXJFdmVudFN5bmMucHJvdG90eXBlLm5leHRQYWdlT2Zmc2V0ID0gZnVuY3Rpb24gKG1vZGVscykgewogICAgICAgIHJldHVybiBtb2RlbHNbbW9kZWxzLmxlbmd0aCAtIDFdLmlkOwogICAgfTsKICAgIENhbGVuZGFyRXZlbnRTeW5jLnByb3RvdHlwZS5pc0NvbXBsZXRlZCA9IGZ1bmN0aW9uIChtb2RlbHMpIHsKICAgICAgICByZXR1cm4gIW1vZGVscy5sZW5ndGg7CiAgICB9OwogICAgLy8gVXNlZCBiZWNhdXNlIGNhbGVuZGFyQXBpIG5lZWRzIHRvIGZldGNoIGNhbGVuZGFycyBiZWZvcmUgc3RhcnRpbmcgc3luY3MgZm9yIGNhbGVuZGFyIGV2ZW50cwogICAgQ2FsZW5kYXJFdmVudFN5bmMucHJvdG90eXBlLmJlZm9yZUZpcnN0ID0gZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiB0aGlzLmNhbGVuZGFyQXBpLmxpc3QodGhpcy5hY2NvdW50KQogICAgICAgICAgICAuZmxhdE1hcChmdW5jdGlvbiAoY2FsZW5kYXJzKSB7CiAgICAgICAgICAgIHJldHVybiBDYWNoZS5sb2FkKFN0b3Jlcy5DYWxlbmRhcnMsIGNhbGVuZGFycyk7CiAgICAgICAgfSkuZmxhdE1hcChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIC8vIFNlbmQgY2FsZW5kYXJzIHN5bmNlZCBhbmQgcmV0dXJuCiAgICAgICAgICAgIHNlbmRDYWxlbmRhcnNTeW5jZWQoKTsKICAgICAgICAgICAgcmV0dXJuIE9ic2VydmFibGUub2YobnVsbCk7CiAgICAgICAgfSk7CiAgICB9OwogICAgQ2FsZW5kYXJFdmVudFN5bmMucHJvdG90eXBlLm9uQ29tcGxldGUgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgc2VuZENhbGVuZGFyc1N5bmNlZCgpOwogICAgICAgIHJldHVybiBPYnNlcnZhYmxlLm9mKG51bGwpOwogICAgfTsKICAgIHJldHVybiBDYWxlbmRhckV2ZW50U3luYzsKfShBUElTeW5jKSk7CmV4cG9ydCB7IENhbGVuZGFyRXZlbnRTeW5jIH07CmV4cG9ydCBkZWZhdWx0IENhbGVuZGFyRXZlbnRTeW5jOwo="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/sync/CalendarEventSync.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/sync/CalendarEventSync.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,OAAO,KAAK,EAAE,EAAE,MAAM,EAAE,MAAM,aAAa,CAAC;AAE5C,OAAO,EAAoB,mBAAmB,EAAE,MAAM,yBAAyB,CAAC;AAChF,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAClC,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AACpC,OAAO,EAAE,cAAc,EAAe,MAAM,oBAAoB,CAAC;AACjE,OAAO,EAAE,mBAAmB,EAAE,MAAM,iCAAiC,CAAC;AAEtE;IAAuC,qCAAsB;IAO3D,yBAAyB;IAEzB,2BACE,OAAe,EACf,GAAiD,EACjD,WAA+C;QAD/C,oBAAA,EAAA,UAA4B,mBAAmB,EAAE;QACjD,4BAAA,EAAA,kBAA+B,cAAc,EAAE;QAHjD,YAKE,kBAAM,oBAAoB,GAAG,OAAO,EAAE,MAAM,CAAC,cAAc,EAAE,KAAK,CAAC,SAIpE;QAHC,KAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,KAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,KAAI,CAAC,WAAW,GAAG,WAAW,CAAC;;IACjC,CAAC;IAED,sCAAU,GAAV,UAAW,WAAoB;QAC7B,OAAO,iBAAM,UAAU,YAAC,WAAW,CAAC;aACjC,OAAO,CAAC,cAAM,OAAA,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,EAA7B,CAA6B,CAAC,CAAC;IAClD,CAAC;IAES,yCAAa,GAAvB;QACE,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IAClD,CAAC;IAES,0CAAc,GAAxB,UAAyB,MAAuB;QAC9C,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;IACtC,CAAC;IAES,uCAAW,GAArB,UAAsB,MAAuB;QAC3C,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC;IACxB,CAAC;IAED,8FAA8F;IACpF,uCAAW,GAArB;QACE,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;aACzC,OAAO,CAAC,UAAA,SAAS;YAChB,OAAA,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,SAAS,CAAC;QAAvC,CAAuC,CACxC,CAAC,OAAO,CAAC;YACR,mCAAmC;YACnC,mBAAmB,EAAE,CAAC;YACtB,OAAO,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;IACL,CAAC;IAES,sCAAU,GAApB;QACE,mBAAmB,EAAE,CAAC;QACtB,OAAO,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IACH,wBAAC;AAAD,CAAC,AArDD,CAAuC,OAAO,GAqD7C;;AAED,eAAe,iBAAiB,CAAC","sourcesContent":["import Cache, { Stores } from '@src/lib/db';\nimport { CalendarEvent } from '@src/types';\nimport { CalendarEventAPI, CalendarEventClient } from '@src/api/calendarEvents';\nimport { Observable } from 'rxjs';\nimport { APISync } from './APISync';\nimport { CalendarClient, CalendarAPI } from '@src/api/calendars';\nimport { sendCalendarsSynced } from '@src/worker/bridge/workerEvents';\n\nexport class CalendarEventSync extends APISync<CalendarEvent> {\n  // State\n  account: string;\n\n  // Dependencies\n  private api: CalendarEventAPI;\n  private calendarApi: CalendarAPI;\n  // - app bridge interface\n\n  constructor(\n    account: string,\n    api: CalendarEventAPI = new CalendarEventClient(),\n    calendarApi: CalendarAPI = new CalendarClient(),\n  ) {\n    super('CalendarEventSync-' + account, Stores.CalendarEvents, false);\n    this.account = account;\n    this.api = api;\n    this.calendarApi = calendarApi;\n  }\n\n  clearCache(deleteItems: boolean): Observable<null> {\n    return super.clearCache(deleteItems)\n      .flatMap(() => Cache.clear(Stores.Calendars));\n  }\n\n  protected fetchNextPage(): Observable<CalendarEvent[]> {\n    return this.api.list(this.account, this.offset);\n  }\n\n  protected nextPageOffset(models: CalendarEvent[]): string {\n    return models[models.length - 1].id;\n  }\n\n  protected isCompleted(models: CalendarEvent[]): boolean {\n    return !models.length;\n  }\n\n  // Used because calendarApi needs to fetch calendars before starting syncs for calendar events\n  protected beforeFirst(): Observable<null> {\n    return this.calendarApi.list(this.account)\n    .flatMap(calendars =>\n      Cache.load(Stores.Calendars, calendars),\n    ).flatMap(() => {\n      // Send calendars synced and return\n      sendCalendarsSynced();\n      return Observable.of(null);\n    });\n  }\n\n  protected onComplete(): Observable<null> {\n    sendCalendarsSynced();\n    return Observable.of(null);\n  }\n}\n\nexport default CalendarEventSync;\n"]}]}