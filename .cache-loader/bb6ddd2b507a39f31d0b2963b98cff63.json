{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Settings/routes/Billing/UpdateCard/index.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Settings/routes/Billing/UpdateCard/index.ts","mtime":1675280254098},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JzsKaW1wb3J0IFVwZGF0ZUNhcmQgZnJvbSAnLi9VcGRhdGVDYXJkJzsKaW1wb3J0IHsgYmlsbGluZ1VwZGF0ZUNhcmQsIHNlbGVjdEJpbGxpbmdMb2FkaW5nLCBzZWxlY3RCaWxsaW5nTG9hZGluZ0Vycm9yLCB9IGZyb20gJ0BzcmMvZHVja3MvYmlsbGluZyc7CmltcG9ydCB7IHNlbGVjdFVzZXJJc0FkbWluIH0gZnJvbSAnQHNyYy9kdWNrcy9tZSc7CnZhciBtYXBTdGF0ZVRvUHJvcHMgPSBmdW5jdGlvbiAoc3RhdGUpIHsKICAgIHZhciBfYSwgX2I7CiAgICByZXR1cm4gKHsKICAgICAgICBzdWJzY3JpcHRpb246IHN0YXRlLmJpbGxpbmcucmVzb3VyY2UuZGF0YSAmJgogICAgICAgICAgICBzdGF0ZS5iaWxsaW5nLnJlc291cmNlLmRhdGEuc3Vic2NyaXB0aW9uLAogICAgICAgIGxvYWRpbmc6IHNlbGVjdEJpbGxpbmdMb2FkaW5nKHN0YXRlKSwKICAgICAgICBsb2FkaW5nRXJyb3I6IHNlbGVjdEJpbGxpbmdMb2FkaW5nRXJyb3Ioc3RhdGUpLAogICAgICAgIHVwZGF0aW5nOiBzdGF0ZS5iaWxsaW5nLnVwZGF0aW5nLAogICAgICAgIGlzQWRtaW46IHNlbGVjdFVzZXJJc0FkbWluKHN0YXRlKSwKICAgICAgICBpc01vYmlsZTogc3RhdGUuaXNNb2JpbGUsCiAgICAgICAgY2FyZDogc3RhdGUuYmlsbGluZy5yZXNvdXJjZS5kYXRhICYmIHN0YXRlLmJpbGxpbmcucmVzb3VyY2UuZGF0YS5jYXJkLAogICAgICAgIGZhaWxNZXNzYWdlOiAoX2EgPSBzdGF0ZS5tZS5kYXRhKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZmFpbE1lc3NhZ2UsCiAgICAgICAgbWU6IChfYiA9IHN0YXRlLm1lKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuZGF0YSwKICAgIH0pOwp9Owp2YXIgbWFwRGlzcGF0Y2hUb1Byb3BzID0gZnVuY3Rpb24gKGRpc3BhdGNoKSB7IHJldHVybiAoewogICAgdXBkYXRlQ2FyZDogZnVuY3Rpb24gKHRva2VuKSB7IHJldHVybiBkaXNwYXRjaChiaWxsaW5nVXBkYXRlQ2FyZCh0b2tlbikpOyB9LAp9KTsgfTsKZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcykoVXBkYXRlQ2FyZCk7Cg=="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Settings/routes/Billing/UpdateCard/index.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Settings/routes/Billing/UpdateCard/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;AAGtC,OAAO,UAAoC,MAAM,cAAc,CAAC;AAGhE,OAAO,EACL,iBAAiB,EAAE,oBAAoB,EAAE,yBAAyB,GACnE,MAAM,oBAAoB,CAAC;AAC5B,OAAO,EAAE,iBAAiB,EAAE,MAAM,eAAe,CAAC;AAElD,IAAM,eAAe,GAAG,UAAC,KAAiB;;IAAY,OAAA,CAAC;QACrD,YAAY,EAAE,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI;YACvC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY;QAC1C,OAAO,EAAE,oBAAoB,CAAC,KAAK,CAAC;QACpC,YAAY,EAAE,yBAAyB,CAAC,KAAK,CAAC;QAC9C,QAAQ,EAAE,KAAK,CAAC,OAAO,CAAC,QAAQ;QAChC,OAAO,EAAE,iBAAiB,CAAC,KAAK,CAAC;QACjC,QAAQ,EAAE,KAAK,CAAC,QAAQ;QACxB,IAAI,EAAE,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI;QACrE,WAAW,QAAE,KAAK,CAAC,EAAE,CAAC,IAAI,0CAAE,WAAW;QACvC,EAAE,QAAE,KAAK,CAAC,EAAE,0CAAE,IAAI;KACnB,CAAC,CAAA;CAAA,CAAC;AAEH,IAAM,kBAAkB,GAAG,UAAC,QAA8B,IAAoB,OAAA,CAAC;IAC7E,UAAU,EAAE,UAAC,KAAa,IAAK,OAAA,QAAQ,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,EAAlC,CAAkC;CAClE,CAAC,EAF4E,CAE5E,CAAC;AAEH,eAAe,OAAO,CAAC,eAAe,EAAE,kBAAkB,CAAC,CAAC,UAAU,CAAC,CAAC","sourcesContent":["import { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\n\nimport UpdateCard, { Props, DispatchProps } from './UpdateCard';\n\nimport { StoreState } from '@src/types';\nimport {\n  billingUpdateCard, selectBillingLoading, selectBillingLoadingError,\n} from '@src/ducks/billing';\nimport { selectUserIsAdmin } from '@src/ducks/me';\n\nconst mapStateToProps = (state: StoreState): Props => ({\n  subscription: state.billing.resource.data &&\n    state.billing.resource.data.subscription,\n  loading: selectBillingLoading(state),\n  loadingError: selectBillingLoadingError(state),\n  updating: state.billing.updating,\n  isAdmin: selectUserIsAdmin(state),\n  isMobile: state.isMobile,\n  card: state.billing.resource.data && state.billing.resource.data.card,\n  failMessage: state.me.data?.failMessage,\n  me: state.me?.data,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<StoreState>): DispatchProps => ({\n  updateCard: (token: string) => dispatch(billingUpdateCard(token)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateCard);\n"]}]}