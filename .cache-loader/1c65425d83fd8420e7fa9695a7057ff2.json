{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/base.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/base.ts","mtime":1675280253979},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/base.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/base.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable, Subscriber } from 'rxjs';\nimport { mimeWordEncode } from 'emailjs-mime-codec';\n\nconst domain = process.env.API_URL;\n\nexport const AUTH_TOKEN_NONE = 'none';\n\nlet authToken = AUTH_TOKEN_NONE;\nlet loggedOutCallback = () => {\n  return;\n};\n\nexport function getToken(): string {\n  return authToken;\n}\n\nexport function getCookieDomain(): string|undefined {\n  return process.env.COOKIE_DOMAIN !== 'DISABLE' ? process.env.COOKIE_DOMAIN : undefined;\n}\n\nexport function setLoggedOutCallback(cb: () => void) {\n  loggedOutCallback = cb;\n}\n\nexport function setToken(token: string) {\n  authToken = token;\n}\n\nlet enableCorsOptimization = true;\n\nexport function disableCorsOptimization() {\n  enableCorsOptimization = false;\n}\n\nexport function isLoggedIn() {\n  return authToken !== AUTH_TOKEN_NONE;\n}\n\nexport const enum ErrorMessage {\n  TwoFactorAuthNeeded = 'Two factor authentication needed.',\n}\n\nclass ApiError extends Error {\n  code: number;\n  description: string;\n  errors?: { [key: string]: string };\n\n  constructor(code: number, description: string, errors?: { [key: string]: string }) {\n    super(description);\n\n    this.name = '';\n\n    if (typeof Error.captureStackTrace === 'function') {\n      Error.captureStackTrace(this, this.constructor);\n    } else {\n      this.stack = (new Error('')).stack;\n    }\n\n    this.code = code;\n    this.description = description;\n    this.errors = errors;\n  }\n\n  toString() {\n    return this.description;\n  }\n}\n\nenum Encoding {\n  JSON = 'json',\n  Form = 'form',\n  Csv = 'csv',\n}\n\nconst request = (method: string, route: string, body?: any, bodyEncoding?: Encoding) => {\n  let resp: any;\n  let encodedBody: any;\n\n  // Set Headers\n  const headers: { [name: string]: string } = {};\n  headers.Authorization = `PG ${authToken}`;\n\n  // Set Header/Body for different encodings\n  if (body) {\n    if (!bodyEncoding || bodyEncoding === Encoding.JSON) {\n      headers['Content-Type'] = 'application/json';\n      encodedBody = JSON.stringify(body);\n    } else if (bodyEncoding === Encoding.Form) {\n      headers['Content-Type'] = 'application/x-www-form-urlencoded';\n      encodedBody = Object.keys(body)\n        .map(key => encodeURIComponent(key) + '=' + encodeURIComponent(body[key]))\n        .join('&');\n    } else if (bodyEncoding === Encoding.Csv) {\n      headers['Content-Type'] = 'application/csv';\n      encodedBody = body;\n    }\n  }\n\n  return Observable.from(\n    fetch(domain + route, {\n      method,\n      body: encodedBody,\n      headers,\n    }),\n  )\n  .flatMap((response) => {\n    if (response.ok) {\n      return Observable.of(response);\n    }\n\n    resp = response;\n\n    return Observable.from(response.json())\n      .catch((err) => {\n        throw new ApiError(resp.status, err.toString());\n      })\n      .flatMap((json) => {\n        if (json && json.code && json.description) {\n          if (json.code === 401 && authToken !== AUTH_TOKEN_NONE) {\n            authToken = AUTH_TOKEN_NONE;\n            loggedOutCallback();\n          }\n          throw new ApiError(json.code, json.description, json.errors);\n        }\n        throw new ApiError(resp.status, 'unknown error');\n      });\n  });\n};\n\n// Returns upload with progress\nexport const upload = (file: File, isPublic: boolean) => {\n  return Observable.create((subscriber: Subscriber<any>) => {\n    const headers = {\n      'Content-Type': file.type || 'application/octet-stream',\n      'X-PM-Filename': mimeWordEncode(file.name),\n      Authorization: `PG ${authToken}`,\n    };\n\n    if (isPublic) {\n      headers['X-PM-Acl'] = 'public';\n    }\n    const uploadRequest = Observable.ajax({\n      method: 'POST',\n      url: domain + '/v1/uploads',\n      body: file,\n      headers,\n    });\n\n    uploadRequest\n      .subscribe({\n        next: value => subscriber.next(value.response),\n        error: (err) => {\n          subscriber.error(err);\n          return;\n        },\n        complete: () => subscriber.complete(),\n      });\n  });\n};\n\n// Returns upload with progress\nexport const uploadWithProgress = (file: File) => {\n  return Observable.create((subscriber: Subscriber<any>) => {\n    const progressSubscriber = Subscriber.create(\n      // Next handler\n      (value: ProgressEvent) => {\n        if (value.lengthComputable) {\n          subscriber.next(value.loaded / value.total);\n        }\n      },\n      // Error handler\n      (error: any) => { return; },\n    );\n    const uploadRequest = Observable.ajax({\n      method: 'POST',\n      url: domain + '/v1/uploads',\n      body: file,\n      headers: {\n        'Content-Type': file.type || 'application/octet-stream',\n        'X-PM-Filename': mimeWordEncode(file.name),\n        Authorization: `PG ${authToken}`,\n      },\n      progressSubscriber,\n    });\n\n    uploadRequest\n      .subscribe({\n        next: value => subscriber.next(value.response),\n        error: (err) => {\n          // Try parsing API Error from upload request\n          if (err.xhr && err.xhr.response && err.xhr.response.code && err.xhr.response.description\n          ) {\n            const apiError = new ApiError(err.xhr.response.code, err.xhr.response.description);\n            if (apiError.code && apiError.description) {\n              subscriber.error(apiError);\n              return;\n            }\n          }\n\n          // Otherwise pass through error\n          subscriber.error(err);\n          return;\n        },\n        complete: () => subscriber.complete(),\n      });\n  });\n};\n\n// Webapp request\nexport const webappRequest = (route: string) =>\n  Observable.from(\n    fetch(route, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    }),\n  )\n  .flatMap((response) => {\n    if (response.ok) {\n      return Observable.of(response)\n        .flatMap((resp: Response) => resp.json());\n    }\n    throw new ApiError(response.status, 'Some error occurred');\n  });\n\nexport interface JSONRequestParameters {\n  method: string;\n  route: string;\n  body?: any;\n  disableCorsOptimization?: boolean;\n}\n\nconst requestViaBatch = (parameters: JSONRequestParameters): Observable<any> =>\n  batchRequest({\n    requests: [{\n      method: parameters.method,\n      url: parameters.route,\n      body: parameters.body ? JSON.stringify(parameters.body) : undefined,\n    }],\n  })\n  .map((responses: BatchResponseParameters[]) => {\n\n    const response = responses[0];\n    if (response.code >= 200 && response.code < 300) {\n      return response.body;\n    }\n\n    if (response.body.code && response.body.description) {\n      throw new ApiError(response.body.code, response.body.description, response.body.errors);\n    }\n\n    throw new ApiError(response.code, 'unknown error');\n  });\n\n// jsonRequest runs a JSON request with a json response.\nconst jsonRequest = (parameters: JSONRequestParameters): Observable<any> => {\n  if (enableCorsOptimization && !parameters.disableCorsOptimization) {\n    return requestViaBatch(parameters);\n  }\n\n  return request(parameters.method, parameters.route, parameters.body)\n    .flatMap((response: Response) => response.json());\n};\n\n// blankRequest runs a JSON request with no response.\nconst blankRequest = (parameters: JSONRequestParameters): Observable<null> => {\n  if (enableCorsOptimization && !parameters.disableCorsOptimization) {\n    return requestViaBatch(parameters).map(() => null);\n  }\n\n  return request(parameters.method, parameters.route, parameters.body).map(() => null);\n};\n\nconst formRequest = (parameters: JSONRequestParameters): Observable<null> =>\n  request(parameters.method, parameters.route, parameters.body, Encoding.Form)\n    .map(() => null);\n\nconst csvRequest = (parameters: JSONRequestParameters): Observable<any> =>\n  request(parameters.method, parameters.route, parameters.body)\n    .flatMap((response: Response) => response.blob());\n\nexport interface BatchRequestParameters {\n  requests: Array<{\n    method: string;\n    url: string;\n    body?: string;\n  }>;\n}\n\nexport interface BatchResponseParameters {\n  code: number;\n  body?: any;\n}\n\n// Deprecated batch endpoint for concurrent POST and PATCH requests\nexport const concurrentBatchRequest = (\n  parameters: BatchRequestParameters,\n): Observable<BatchResponseParameters[]> =>\n  request('POST', '/v2/batch', parameters)\n    .flatMap((response: Response) => response.json());\n\nexport const batchRequest = (\n  parameters: BatchRequestParameters,\n): Observable<BatchResponseParameters[]> =>\n  request('POST', '/v3/batch', parameters)\n    .flatMap((response: Response) => response.json());\n\nexport const sequenceRecipientBatchRequest = (\n  parameters: BatchRequestParameters,\n): Observable<BatchResponseParameters[]> =>\n  request('POST', '/v1/batch/sequenceRecipients', parameters)\n    .flatMap((response: Response) => response.json());\n\nexport { ApiError, jsonRequest, blankRequest, formRequest, csvRequest };\n"]}]}