{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/css-loader/dist/cjs.js??ref--7-2!/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/sass-loader/dist/cjs.js??ref--7-3!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/magicLink.scss","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/magicLink.scss","mtime":1675280254070},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/styles/helpers.scss","mtime":1675280254121},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/styles/colors.scss","mtime":1675280254121},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/styles/typography.scss","mtime":1675280254121},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/styles/mixins.scss","mtime":1675280254121},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/styles/reset.scss","mtime":1675280254121},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/styles/basics.scss","mtime":1675280254121},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/css-loader/dist/cjs.js","mtime":1675365393897},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/sass-loader/dist/cjs.js","mtime":1675365391315}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIpKHRydWUpOwovLyBNb2R1bGUKZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsICIvKiBodHRwOi8vbWV5ZXJ3ZWIuY29tL2VyaWMvdG9vbHMvY3NzL3Jlc2V0L1xuICAgdjIuMCB8IDIwMTEwMTI2XG4gICBMaWNlbnNlOiBub25lIChwdWJsaWMgZG9tYWluKVxuKi9cbmh0bWwsIGJvZHksIGRpdiwgc3BhbiwgYXBwbGV0LCBvYmplY3QsIGlmcmFtZSxcbmgxLCBoMiwgaDMsIGg0LCBoNSwgaDYsIHAsIGJsb2NrcXVvdGUsIHByZSxcbmEsIGFiYnIsIGFjcm9ueW0sIGFkZHJlc3MsIGJpZywgY2l0ZSwgY29kZSxcbmRlbCwgZGZuLCBlbSwgaW1nLCBpbnMsIGtiZCwgcSwgcywgc2FtcCxcbnNtYWxsLCBzdHJpa2UsIHN0cm9uZywgdHQsIHZhcixcbmIsIHUsIGksIGNlbnRlcixcbmRsLCBkdCwgZGQsXG5maWVsZHNldCwgZm9ybSwgbGFiZWwsIGxlZ2VuZCxcbmFydGljbGUsIGFzaWRlLCBjYW52YXMsIGRldGFpbHMsIGVtYmVkLFxuZmlndXJlLCBmaWdjYXB0aW9uLCBmb290ZXIsIGhlYWRlciwgaGdyb3VwLFxubWVudSwgbmF2LCBvdXRwdXQsIHJ1YnksIHNlY3Rpb24sIHN1bW1hcnksXG50aW1lLCBtYXJrLCBhdWRpbywgdmlkZW8ge1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG4gIGJvcmRlcjogMDtcbiAgZm9udC1zaXplOiAxMDAlO1xuICBmb250OiBpbmhlcml0O1xuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XG59XG5cbi8qIEhUTUw1IGRpc3BsYXktcm9sZSByZXNldCBmb3Igb2xkZXIgYnJvd3NlcnMgKi9cbmFydGljbGUsIGFzaWRlLCBkZXRhaWxzLCBmaWdjYXB0aW9uLCBmaWd1cmUsXG5mb290ZXIsIGhlYWRlciwgaGdyb3VwLCBtZW51LCBuYXYsIHNlY3Rpb24ge1xuICBkaXNwbGF5OiBibG9jaztcbn1cblxuYm9keSB7XG4gIGxpbmUtaGVpZ2h0OiAxO1xufVxuXG4vKlxub2wsIHVsIHtcblx0bGlzdC1zdHlsZTogbm9uZTtcbn0qL1xuLyogTk9URShTSEFIQU4pOiBEaXNhYmxlZCBiYyBuZWVkIGZvciByZW5kZXJpbmcgcXVvdGVzIGluIGVtYWlscyAqL1xuLypibG9ja3F1b3RlLCBxIHtcblx0cXVvdGVzOiBub25lO1xufVxuYmxvY2txdW90ZTpiZWZvcmUsIGJsb2NrcXVvdGU6YWZ0ZXIsXG5xOmJlZm9yZSwgcTphZnRlciB7XG5cdGNvbnRlbnQ6ICcnO1xuXHRjb250ZW50OiBub25lO1xufSovXG4vKiBOT1RFKFNIQUhBTik6IERpc2FibGVkIGJjIGNhdXNlcyByZW5kZXJpbmcgaXNzdWVzIGluIGVtYWlscyAqL1xuLypcbnRhYmxlIHtcblx0Ym9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcblx0Ym9yZGVyLXNwYWNpbmc6IDA7XG59XG4qL1xuLyogcmVtZW1iZXIgdG8gZGVmaW5lIGZvY3VzIHN0eWxlcyEgKi9cbjpmb2N1cyB7XG4gIG91dGxpbmU6IDA7XG59XG5cbjo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciB7XG4gIC8qIENocm9tZS9PcGVyYS9TYWZhcmkgKi9cbn1cbi50aGVtZS1saWdodCA6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXIge1xuICBjb2xvcjogI2M5ZDRlMDtcbn1cbi50aGVtZS1kYXJrIDo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciB7XG4gIGNvbG9yOiAjNzc3Nzc3O1xufVxuXG46Oi1tb3otcGxhY2Vob2xkZXIge1xuICAvKiBGaXJlZm94IDE5KyAqL1xufVxuLnRoZW1lLWxpZ2h0IDo6LW1vei1wbGFjZWhvbGRlciB7XG4gIGNvbG9yOiAjYzlkNGUwO1xufVxuLnRoZW1lLWRhcmsgOjotbW96LXBsYWNlaG9sZGVyIHtcbiAgY29sb3I6ICM3Nzc3Nzc7XG59XG5cbjotbXMtaW5wdXQtcGxhY2Vob2xkZXIge1xuICAvKiBJRSAxMCsgKi9cbn1cbi50aGVtZS1saWdodCA6LW1zLWlucHV0LXBsYWNlaG9sZGVyIHtcbiAgY29sb3I6ICNjOWQ0ZTA7XG59XG4udGhlbWUtZGFyayA6LW1zLWlucHV0LXBsYWNlaG9sZGVyIHtcbiAgY29sb3I6ICM3Nzc3Nzc7XG59XG5cbjotbW96LXBsYWNlaG9sZGVyIHtcbiAgLyogRmlyZWZveCAxOC0gKi9cbn1cbi50aGVtZS1saWdodCA6LW1vei1wbGFjZWhvbGRlciB7XG4gIGNvbG9yOiAjYzlkNGUwO1xufVxuLnRoZW1lLWRhcmsgOi1tb3otcGxhY2Vob2xkZXIge1xuICBjb2xvcjogIzc3Nzc3Nztcbn1cblxuaW5wdXQge1xuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbn1cbi50aGVtZS1kYXJrIGlucHV0IHtcbiAgY29sb3I6ICNlOGU4ZTg7XG59XG5cbnNlbGVjdCB7XG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xufVxuLnRoZW1lLWxpZ2h0IHNlbGVjdCB7XG4gIGNvbG9yOiAjNDQ0NDQ0O1xufVxuLnRoZW1lLWRhcmsgc2VsZWN0IHtcbiAgY29sb3I6ICNlOGU4ZTg7XG59XG5cbltyb2xlPWJ1dHRvbl0sXG5pbnB1dFt0eXBlPXN1Ym1pdF0sXG5pbnB1dFt0eXBlPXJlc2V0XSxcbmlucHV0W3R5cGU9YnV0dG9uXSxcbmJ1dHRvbiB7XG4gIC13ZWJraXQtYm94LXNpemluZzogY29udGVudC1ib3g7XG4gIC1tb3otYm94LXNpemluZzogY29udGVudC1ib3g7XG4gIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xufVxuXG4vKiBSZXNldCBgYnV0dG9uYCBhbmQgYnV0dG9uLXN0eWxlIGBpbnB1dGAgZGVmYXVsdCBzdHlsZXMgKi9cbmlucHV0W3R5cGU9c3VibWl0XSxcbmlucHV0W3R5cGU9cmVzZXRdLFxuaW5wdXRbdHlwZT1idXR0b25dLFxuYnV0dG9uIHtcbiAgYmFja2dyb3VuZDogbm9uZTtcbiAgYm9yZGVyOiAwO1xuICBjb2xvcjogaW5oZXJpdDtcbiAgLyogY3Vyc29yOiBkZWZhdWx0OyAqL1xuICBmb250OiBpbmhlcml0O1xuICBsaW5lLWhlaWdodDogbm9ybWFsO1xuICBvdmVyZmxvdzogdmlzaWJsZTtcbiAgcGFkZGluZzogMDtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBidXR0b247XG4gIC8qIGZvciBpbnB1dCAqL1xuICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xuICAvKiBmb3IgYnV0dG9uICovXG4gIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XG4gIC1tcy11c2VyLXNlbGVjdDogbm9uZTtcbn1cblxuaW5wdXQ6Oi1tb3otZm9jdXMtaW5uZXIsXG5idXR0b246Oi1tb3otZm9jdXMtaW5uZXIge1xuICBib3JkZXI6IDA7XG4gIHBhZGRpbmc6IDA7XG59XG5cbioge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICBsZXR0ZXItc3BhY2luZzogLTAuMDE1ZW07XG59XG5cbmJvZHkge1xuICBmb250LWZhbWlseTogLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LCBcIlNlZ29lIFVJXCIsIFwiUm9ib3RvXCIsIFwiT3h5Z2VuXCIsIFwiVWJ1bnR1XCIsIFwiQ2FudGFyZWxsXCIsIFwiRmlyYSBTYW5zXCIsIFwiRHJvaWQgU2Fuc1wiLCBcIkhlbHZldGljYSBOZXVlXCIsIHNhbnMtc2VyaWY7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgbGluZS1oZWlnaHQ6IDEuMztcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XG4gIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7XG4gIC13ZWJraXQtdG91Y2gtY2FsbG91dDogbm9uZTtcbiAgLyogaU9TIFNhZmFyaSAqL1xuICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xuICAvKiBTYWZhcmkgKi9cbiAgLWtodG1sLXVzZXItc2VsZWN0OiBub25lO1xuICAvKiBLb25xdWVyb3IgSFRNTCAqL1xuICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xuICAvKiBGaXJlZm94ICovXG4gIC1tcy11c2VyLXNlbGVjdDogbm9uZTtcbiAgLyogSW50ZXJuZXQgRXhwbG9yZXIvRWRnZSAqL1xuICB1c2VyLXNlbGVjdDogbm9uZTtcbiAgY3Vyc29yOiBkZWZhdWx0O1xufVxuLnRoZW1lLWxpZ2h0IGJvZHkge1xuICBjb2xvcjogIzQ0NDQ0NDtcbn1cbi50aGVtZS1kYXJrIGJvZHkge1xuICBjb2xvcjogI2U4ZThlODtcbn1cblxuaDEge1xuICBmb250LXNpemU6IDgwcHg7XG4gIGxpbmUtaGVpZ2h0OiAxLjE7XG4gIGZvbnQtd2VpZ2h0OiA3MDA7XG59XG5cbmgyIHtcbiAgZm9udC1zaXplOiAzNnB4O1xuICBsaW5lLWhlaWdodDogMS4zO1xuICBmb250LXdlaWdodDogNzAwO1xufVxuXG5oMyB7XG4gIGZvbnQtc2l6ZTogMzZweDtcbiAgbGluZS1oZWlnaHQ6IDEuNDtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbn1cblxuaDQge1xuICBmb250LXNpemU6IDIwcHg7XG4gIGxpbmUtaGVpZ2h0OiAxLjI7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG59XG5cbnNtYWxsIHtcbiAgZm9udC1zaXplOiAxMnB4O1xuICBsaW5lLWhlaWdodDogMS4yO1xufVxuXG5zdHJvbmcge1xuICBmb250LXdlaWdodDogNjAwO1xufVxuXG5iIHtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG59XG5cbmkge1xuICBmb250LXN0eWxlOiBpdGFsaWM7XG59XG5cbnUge1xuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcbn1cblxuYnV0dG9uLCBhIHtcbiAgY3Vyc29yOiBwb2ludGVyO1xufVxuXG4jYXBwIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2YyZjVmODtcbiAgaGVpZ2h0OiAxMDB2aDtcbn1cblxuYm9keSB7XG4gIG1hcmdpbjogMDtcbn1cblxuYSB7XG4gIGNvbG9yOiAjMDc5Y2VmO1xufVxuXG4ubWFnaWMtbGluayB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGNvbG9yOiAjN2U4ZjlmO1xufVxuLm1hZ2ljLWxpbmsgPiAubG9nbyB7XG4gIG1hcmdpbi10b3A6IDQwcHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG59XG4ubWFnaWMtbGluayA+IC5sb2dvIGltZyB7XG4gIHdpZHRoOiAyODBweDtcbiAgbWF4LXdpZHRoOiA4MCU7XG59XG4ubWFnaWMtbGluayA+IC5jb250YWluZXIge1xuICBtYXJnaW46IDIwcHggMzBweDtcbiAgcGFkZGluZzogNDBweCAyMHB4O1xuICBtYXgtd2lkdGg6IDYwMHB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xuICBib3JkZXI6IHNvbGlkIDJweCAjZWVlZWVlO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDU0MHB4KSB7XG4gIC5tYWdpYy1saW5rID4gLmNvbnRhaW5lciB7XG4gICAgcGFkZGluZzogNDBweCA2MHB4O1xuICB9XG59XG4ubWFnaWMtbGluayA+IC5jb250YWluZXIgPiAuaGVhZGVyIHtcbiAgbWFyZ2luLXRvcDogNDBweDtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgZm9udC1zaXplOiAyMHB4O1xuICBjb2xvcjogIzQ0NDQ0NDtcbn1cbi50aGVtZS1saWdodCAubWFnaWMtbGluayA+IC5jb250YWluZXIgPiAuaGVhZGVyIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjtcbn1cbi50aGVtZS1kYXJrIC5tYWdpYy1saW5rID4gLmNvbnRhaW5lciA+IC5oZWFkZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjEyMTIxO1xufVxuLm1hZ2ljLWxpbmsgPiAuY29udGFpbmVyID4gLmRlc2NyaXB0aW9uIHtcbiAgbWFyZ2luLXRvcDogMTBweDtcbiAgZm9udC1zaXplOiAxNnB4O1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIGNvbG9yOiAjN2U4ZjlmO1xufVxuLm1hZ2ljLWxpbmsgPiAuY29udGFpbmVyID4gLmRpc2NsYWltZXIge1xuICBtYXJnaW4tdG9wOiA2MHB4O1xuICBmb250LXNpemU6IDE2cHg7XG4gIGNvbG9yOiAjN2U4ZjlmO1xufVxuLm1hZ2ljLWxpbmsgPiAuY29udGFpbmVyID4gLm1hbnVhbC1zZWN0aW9uIHtcbiAgbWFyZ2luOiA0MHB4IDA7XG59XG4ubWFnaWMtbGluayA+IC5jb250YWluZXIgPiAubWFudWFsLXNlY3Rpb24gLm1hbnVhbC1idXR0b24ge1xuICBmb250LXdlaWdodDogNjAwO1xuICBjb2xvcjogI2ZmZmZmZjtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzA3OWNlZjtcbiAgcGFkZGluZzogMTBweCAyMHB4O1xuICBib3JkZXItcmFkaXVzOiAzcHg7XG4gIHRyYW5zaXRpb246IDAuMnMgZWFzZS1pbi1vdXQ7XG59XG4ubWFnaWMtbGluayA+IC5jb250YWluZXIgPiAubWFudWFsLXNlY3Rpb24gLm1hbnVhbC1idXR0b246aG92ZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTdhOGY4O1xufVxuLm1hZ2ljLWxpbmsgPiAuY29udGFpbmVyID4gLmRvd25sb2FkLXNlY3Rpb24ge1xuICBtYXJnaW4tdG9wOiA1cHg7XG59XG4ubWFnaWMtbGluayA+IC5jb250YWluZXIgPiAud2ViYXBwLXNlY3Rpb24ge1xuICBtYXJnaW4tdG9wOiA4MHB4O1xuICBmb250LXNpemU6IDE0cHg7XG59IiwgIiIseyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZXdzYW1ib3kvRGVza3RvcC9HaXQvcG9seW1haWwvd2ViYXBwL3NyYy9zdHlsZXMvcmVzZXQuc2NzcyIsIm1hZ2ljTGluay5zY3NzIiwiL1VzZXJzL2FuZHJld3NhbWJveS9EZXNrdG9wL0dpdC9wb2x5bWFpbC93ZWJhcHAvc3JjL3N0eWxlcy9taXhpbnMuc2NzcyIsIi9Vc2Vycy9hbmRyZXdzYW1ib3kvRGVza3RvcC9HaXQvcG9seW1haWwvd2ViYXBwL3NyYy9zdHlsZXMvYmFzaWNzLnNjc3MiLCIvVXNlcnMvYW5kcmV3c2FtYm95L0Rlc2t0b3AvR2l0L3BvbHltYWlsL3dlYmFwcC9zcmMvc3R5bGVzL3R5cG9ncmFwaHkuc2NzcyIsIi9Vc2Vycy9hbmRyZXdzYW1ib3kvRGVza3RvcC9HaXQvcG9seW1haWwvd2ViYXBwL3NyYy9tYWdpY0xpbmsuc2NzcyIsIi9Vc2Vycy9hbmRyZXdzYW1ib3kvRGVza3RvcC9HaXQvcG9seW1haWwvd2ViYXBwL3NyYy9zdHlsZXMvY29sb3JzLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUE7OztDQUFBO0FBS0E7Ozs7Ozs7Ozs7OztFQWdCQyxTQUFBO0VBQ0EsVUFBQTtFQUNBLFNBQUE7RUFDQSxlQUFBO0VBQ0EsYUFBQTtFQUNBLHdCQUFBO0FDTkQ7O0FEUUEsZ0RBQUE7QUFDQTs7RUFFQyxjQUFBO0FDTEQ7O0FET0E7RUFDQyxjQUFBO0FDSkQ7O0FET0E7OztFQUFBO0FBSUEsa0VBQUE7QUFDQTs7Ozs7OztFQUFBO0FBUUEsZ0VBQUE7QUFDQTs7Ozs7Q0FBQTtBQVFBLHFDQUFBO0FBQ0E7RUFDQyxVQUFBO0FDTkQ7O0FEU0E7RUFBOEIsd0JBQUE7QUNMOUI7QUM5Q0k7RUZvRDBCLGNBQUE7QUNIOUI7QUNqREk7RUZvRDBCLGNBQUE7QUNBOUI7O0FERUE7RUFBcUIsZ0JBQUE7QUNFckI7QUN4REk7RUZ1RDBCLGNBQUE7QUNJOUI7QUMzREk7RUZ1RDBCLGNBQUE7QUNPOUI7O0FETEE7RUFBeUIsV0FBQTtBQ1N6QjtBQ2xFSTtFRjBEMEIsY0FBQTtBQ1c5QjtBQ3JFSTtFRjBEMEIsY0FBQTtBQ2M5Qjs7QURaQTtFQUFvQixnQkFB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RSxlQUFBO0FKbU9OO0FJaE9JO0VBQ0UsZ0JBQUE7RUFDQSxlQUFBO0FKa09OIiwiZmlsZSI6Im1hZ2ljTGluay5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiQGltcG9ydCAnaGVscGVycyc7XG5cbi8qIGh0dHA6Ly9tZXllcndlYi5jb20vZXJpYy90b29scy9jc3MvcmVzZXQvXG4gICB2Mi4wIHwgMjAxMTAxMjZcbiAgIExpY2Vuc2U6IG5vbmUgKHB1YmxpYyBkb21haW4pXG4qL1xuXG5odG1sLCBib2R5LCBkaXYsIHNwYW4sIGFwcGxldCwgb2JqZWN0LCBpZnJhbWUsXG5oMSwgaDIsIGgzLCBoNCwgaDUsIGg2LCBwLCBibG9ja3F1b3RlLCBwcmUsXG5hLCBhYmJyLCBhY3JvbnltLCBhZGRyZXNzLCBiaWcsIGNpdGUsIGNvZGUsXG5kZWwsIGRmbiwgZW0sIGltZywgaW5zLCBrYmQsIHEsIHMsIHNhbXAsXG5zbWFsbCwgc3RyaWtlLCBzdHJvbmcsIHR0LCB2YXIsXG5iLCB1LCBpLCBjZW50ZXIsXG5kbCwgZHQsIGRkLFxuLy8gTk9URShTSEFIQU4pOiBEaXNhYmxlZCBsaXN0IHJlbGF0ZWQgdGFncyBiZWNhdXNlIGNhdXNlcyBlbWFpbCByZW5kZXJpbmcgaXNzdWVzXG4vLyBvbCwgdWwsIGxpLFxuZmllbGRzZXQsIGZvcm0sIGxhYmVsLCBsZWdlbmQsXG4vLyBOT1RFKFNIQUhBTik6IERpc2FibGVkIHRhYmxlIHJlbGF0ZWQgdGFncyBiZWNhdXNlIGNhdXNlcyBlbWFpbCByZW5kZXJpbmcgaXNzdWVzXG4vLyB0YWJsZSwgY2FwdGlvbiwgdGJvZHksIHRmb290LCB0aGVhZCwgdHIsIHRoLCB0ZCxcbmFydGljbGUsIGFzaWRlLCBjYW52YXMsIGRldGFpbHMsIGVtYmVkLFxuZmlndXJlLCBmaWdjYXB0aW9uLCBmb290ZXIsIGhlYWRlciwgaGdyb3VwLFxubWVudSwgbmF2LCBvdXRwdXQsIHJ1YnksIHNlY3Rpb24sIHN1bW1hcnksXG50aW1lLCBtYXJrLCBhdWRpbywgdmlkZW8ge1xuXHRtYXJnaW46IDA7XG5cdHBhZGRpbmc6IDA7XG5cdGJvcmRlcjogMDtcblx0Zm9udC1zaXplOiAxMDAlO1xuXHRmb250OiBpbmhlcml0O1xuXHR2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XG59XG4vKiBIVE1MNSBkaXNwbGF5LXJvbGUgcmVzZXQgZm9yIG9sZGVyIGJyb3dzZXJzICovXG5hcnRpY2xlLCBhc2lkZSwgZGV0YWlscywgZmlnY2FwdGlvbiwgZmlndXJlLFxuZm9vdGVyLCBoZWFkZXIsIGhncm91cCwgbWVudSwgbmF2LCBzZWN0aW9uIHtcblx0ZGlzcGxheTogYmxvY2s7XG59XG5ib2R5IHtcblx0bGluZS1oZWlnaHQ6IDE7XG59XG4vLyBOT1RFKFNIQUhBTik6IERpc2FibGVkIGxpc3QgcmVsYXRlZCB0YWdzIGJlY2F1c2UgY2F1c2VzIGVtYWlsIHJlbmRlcmluZyBpc3N1ZXNcbi8qXG5vbCwgdWwge1xuXHRsaXN0LXN0eWxlOiBub25lO1xufSovXG4vKiBOT1RFKFNIQUhBTik6IERpc2FibGVkIGJjIG5lZWQgZm9yIHJlbmRlcmluZyBxdW90ZXMgaW4gZW1haWxzICovXG4vKmJsb2NrcXVvdGUsIHEge1xuXHRxdW90ZXM6IG5vbmU7XG59XG5ibG9ja3F1b3RlOmJlZm9yZSwgYmxvY2txdW90ZTphZnRlcixcbnE6YmVmb3JlLCBxOmFmdGVyIHtcblx0Y29udGVudDogJyc7XG5cdGNvbnRlbnQ6IG5vbmU7XG59Ki9cbi8qIE5PVEUoU0hBSEFOKTogRGlzYWJsZWQgYmMgY2F1c2VzIHJlbmRlcmluZyBpc3N1ZXMgaW4gZW1haWxzICovXG4vKlxudGFibGUge1xuXHRib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xuXHRib3JkZXItc3BhY2luZzogMDtcbn1cbiovXG5cbi8vIEJST1VHSFQgSU4gRlJPTSBPTERFUiBWRVJTSU9OOlxuLyogcmVtZW1iZXIgdG8gZGVmaW5lIGZvY3VzIHN0eWxlcyEgKi9cbjpmb2N1cyB7XG5cdG91dGxpbmU6IDA7XG59XG5cbjo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciB7IC8qIENocm9tZS9PcGVyYS9TYWZhcmkgKi9cbiAgQGluY2x1ZGUgdGhlbWlmeSgkdGhlbWVzKSB7IGNvbG9yOiB0aGVtZWQoJ3RlcnRpYXJ5VGV4dENvbG9yJyk7IH07XG59XG46Oi1tb3otcGxhY2Vob2xkZXIgeyAvKiBGaXJlZm94IDE5KyAqL1xuICBAaW5jbHVkZSB0aGVtaWZ5KCR0aGVtZXMpIHsgY29sb3I6IHRoZW1lZCgndGVydGlhcnlUZXh0Q29sb3InKTsgfTtcbn1cbjotbXMtaW5wdXQtcGxhY2Vob2xkZXIgeyAvKiBJRSAxMCsgKi9cbiAgQGluY2x1ZGUgdGhlbWlmeSgkdGhlbWVzKSB7IGNvbG9yOiB0aGVtZWQoJ3RlcnRpYXJ5VGV4dENvbG9yJyk7IH07XG59XG46LW1vei1wbGFjZWhvbGRlciB7IC8qIEZpcmVmb3ggMTgtICovXG4gIEBpbmNsdWRlIHRoZW1pZnkoJHRoZW1lcykgeyBjb2xvcjogdGhlbWVkKCd0ZXJ0aWFyeVRleHRDb2xvcicpOyB9O1xufVxuaW5wdXQge1xuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgQGluY2x1ZGUgdGhlbWlmeVNpbmdsZSgkZGFyaywgJHRoZW1lcykgeyBjb2xvcjogdGhlbWVkKCdwcmltYXJ5VGV4dENvbG9yJyk7IH07XG59XG5cbnNlbGVjdCB7XG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuICBAaW5jbHVkZSB0aGVtaWZ5KCR0aGVtZXMpIHsgY29sb3I6IHRoZW1lZCgncHJpbWFyeVRleHRDb2xvcicpOyB9O1xufVxuXG5cbltyb2xlPVwiYnV0dG9uXCJdLFxuaW5wdXRbdHlwZT1cInN1Ym1pdFwiXSxcbmlucHV0W3R5cGU9XCJyZXNldFwiXSxcbmlucHV0W3R5cGU9XCJidXR0b25cIl0sXG5idXR0b24ge1xuICAgIC13ZWJraXQtYm94LXNpemluZzogY29udGVudC1ib3g7XG4gICAgICAgLW1vei1ib3gtc2l6aW5nOiBjb250ZW50LWJveDtcbiAgICAgICAgICAgIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xufVxuXG4vKiBSZXNldCBgYnV0dG9uYCBhbmQgYnV0dG9uLXN0eWxlIGBpbnB1dGAgZGVmYXVsdCBzdHlsZXMgKi9cbmlucHV0W3R5cGU9XCJzdWJtaXRcIl0sXG5pbnB1dFt0eXBlPVwicmVzZXRcIl0sXG5pbnB1dFt0eXBlPVwiYnV0dG9uXCJdLFxuYnV0dG9uIHtcbiAgICBiYWNrZ3JvdW5kOiBub25lO1xuICAgIGJvcmRlcjogMDtcbiAgICBjb2xvcjogaW5oZXJpdDtcbiAgICAvKiBjdXJzb3I6IGRlZmF1bHQ7ICovXG4gICAgZm9udDogaW5oZXJpdDtcbiAgICBsaW5lLWhlaWdodDogbm9ybWFsO1xuICAgIG92ZXJmbG93OiB2aXNpYmxlO1xuICAgIHBhZGRpbmc6IDA7XG4gICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBidXR0b247IC8qIGZvciBpbnB1dCAqL1xuICAgIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7IC8qIGZvciBidXR0b24gKi9cbiAgICAgICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xuICAgICAgICAtbXMtdXNlci1zZWxlY3Q6IG5vbmU7XG59XG5pbnB1dDo6LW1vei1mb2N1cy1pbm5lcixcbmJ1dHRvbjo6LW1vei1mb2N1cy1pbm5lciB7XG4gICAgYm9yZGVyOiAwO1xuICAgIHBhZGRpbmc6IDA7XG59XG4iLCIvKiBodHRwOi8vbWV5ZXJ3ZWIuY29tL2VyaWMvdG9vbHMvY3NzL3Jlc2V0L1xuICAgdjIuMCB8IDIwMTEwMTI2XG4gICBMaWNlbnNlOiBub25lIChwdWJsaWMgZG9tYWluKVxuKi9cbmh0bWwsIGJvZHksIGRpdiwgc3BhbiwgYXBwbGV0LCBvYmplY3QsIGlmcmFtZSxcbmgxLCBoMiwgaDMsIGg0LCBoNSwgaDYsIHAsIGJsb2NrcXVvdGUsIHByZSxcbmEsIGFiYnIsIGFjcm9ueW0sIGFkZHJlc3MsIGJpZywgY2l0ZSwgY29kZSxcbmRlbCwgZGZuLCBlbSwgaW1nLCBpbnMsIGtiZCwgcSwgcywgc2FtcCxcbnNtYWxsLCBzdHJpa2UsIHN0cm9uZywgdHQsIHZhcixcbmIsIHUsIGksIGNlbnRlcixcbmRsLCBkdCwgZGQsXG5maWVsZHNldCwgZm9ybSwgbGFiZWwsIGxlZ2VuZCxcbmFydGljbGUsIGFzaWRlLCBjYW52YXMsIGRldGFpbHMsIGVtYmVkLFxuZmlndXJlLCBmaWdjYXB0aW9uLCBmb290ZXIsIGhlYWRlciwgaGdyb3VwLFxubWVudSwgbmF2LCBvdXRwdXQsIHJ1YnksIHNlY3Rpb24sIHN1bW1hcnksXG50aW1lLCBtYXJrLCBhdWRpbywgdmlkZW8ge1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG4gIGJvcmRlcjogMDtcbiAgZm9udC1zaXplOiAxMDAlO1xuICBmb250OiBpbmhlcml0O1xuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XG59XG5cbi8qIEhUTUw1IGRpc3BsYXktcm9sZSByZXNldCBmb3Igb2xkZXIgYnJvd3NlcnMgKi9cbmFydGljbGUsIGFzaWRlLCBkZXRhaWxzLCBmaWdjYXB0aW9uLCBmaWd1cmUsXG5mb290ZXIsIGhlYWRlciwgaGdyb3VwLCBtZW51LCBuYXYsIHNlY3Rpb24ge1xuICBkaXNwbGF5OiBibG9jaztcbn1cblxuYm9keSB7XG4gIGxpbmUtaGVpZ2h0OiAxO1xufVxuXG4vKlxub2wsIHVsIHtcblx0bGlzdC1zdHlsZTogbm9uZTtcbn0qL1xuLyogTk9URShTSEFIQU4pOiBEaXNhYmxlZCBiYyBuZWVkIGZvciByZW5kZXJpbmcgcXVvdGVzIGluIGVtYWlscyAqL1xuLypibG9ja3F1b3RlLCBxIHtcblx0cXVvdGVzOiBub25lO1xufVxuYmxvY2txdW90ZTpiZWZvcmUsIGJsb2NrcXVvdGU6YWZ0ZXIsXG5xOmJlZm9yZSwgcTphZnRlciB7XG5cdGNvbnRlbnQ6ICcnO1xuXHRjb250ZW50OiBub25lO1xufSovXG4vKiBOT1RFKFNIQUhBTik6IERpc2FibGVkIGJjIGNhdXNlcyByZW5kZXJpbmcgaXNzdWVzIGluIGVtYWlscyAqL1xuLypcbnRhYmxlIHtcblx0Ym9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcblx0Ym9yZGVyLXNwYWNpbmc6IDA7XG59XG4qL1xuLyogcmVtZW1iZXIgdG8gZGVmaW5lIGZvY3VzIHN0eWxlcyEgKi9cbjpmb2N1cyB7XG4gIG91dGxpbmU6IDA7XG59XG5cbjo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciB7XG4gIC8qIENocm9tZS9PcGVyYS9TYWZhcmkgKi9cbn1cbi50aGVtZS1saWdodCA6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXIge1xuICBjb2xvcjogI2M5ZDRlMDtcbn1cbi50aGVtZS1kYXJrIDo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciB7XG4gIGNvbG9yOiAjNzc3Nzc3O1xufVxuXG46Oi1tb3otcGxhY2Vob2xkZXIge1xuICAvKiBGaXJlZm94IDE5KyAqL1xufVxuLnRoZW1lLWxpZ2h0IDo6LW1vei1wbGFjZWhvbGRlciB7XG4gIGNvbG9yOiAjYzlkNGUwO1xufVxuLnRoZW1lLWRhcmsgOjotbW96LXBsYWNlaG9sZGVyIHtcbiAgY29sb3I6ICM3Nzc3Nzc7XG59XG5cbjotbXMtaW5wdXQtcGxhY2Vob2xkZXIge1xuICAvKiBJRSAxMCsgKi9cbn1cbi50aGVtZS1saWdodCA6LW1zLWlucHV0LXBsYWNlaG9sZGVyIHtcbiAgY29sb3I6ICNjOWQ0ZTA7XG59XG4udGhlbWUtZGFyayA6LW1zLWlucHV0LXBsYWNlaG9sZGVyIHtcbiAgY29sb3I6ICM3Nzc3Nzc7XG59XG5cbjotbW96LXBsYWNlaG9sZGVyIHtcbiAgLyogRmlyZWZveCAxOC0gKi9cbn1cbi50aGVtZS1saWdodCA6LW1vei1wbGFjZWhvbGRlciB7XG4gIGNvbG9yOiAjYzlkNGUwO1xufVxuLnRoZW1lLWRhcmsgOi1tb3otcGxhY2Vob2xkZXIge1xuICBjb2xvcjogIzc3Nzc3Nztcbn1cblxuaW5wdXQge1xuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbn1cbi50aGVtZS1kYXJrIGlucHV0IHtcbiAgY29sb3I6ICNlOGU4ZTg7XG59XG5cbnNlbGVjdCB7XG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xufVxuLnRoZW1lLWxpZ2h0IHNlbGVjdCB7XG4gIGNvbG9yOiAjNDQ0NDQ0O1xufVxuLnRoZW1lLWRhcmsgc2VsZWN0IHtcbiAgY29sb3I6ICNlOGU4ZTg7XG59XG5cbltyb2xlPWJ1dHRvbl0sXG5pbnB1dFt0eXBlPXN1Ym1pdF0sXG5pbnB1dFt0eXBlPXJlc2V0XSxcbmlucHV0W3R5cGU9YnV0dG9uXSxcbmJ1dHRvbiB7XG4gIC13ZWJraXQtYm94LXNpemluZzogY29udGVudC1ib3g7XG4gIC1tb3otYm94LXNpemluZzogY29udGVudC1ib3g7XG4gIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xufVxuXG4vKiBSZXNldCBgYnV0dG9uYCBhbmQgYnV0dG9uLXN0eWxlIGBpbnB1dGAgZGVmYXVsdCBzdHlsZXMgKi9cbmlucHV0W3R5cGU9c3VibWl0XSxcbmlucHV0W3R5cGU9cmVzZXRdLFxuaW5wdXRbdHlwZT1idXR0b25dLFxuYnV0dG9uIHtcbiAgYmFja2dyb3VuZDogbm9uZTtcbiAgYm9yZGVyOiAwO1xuICBjb2xvcjogaW5oZXJpdDtcbiAgLyogY3Vyc29yOiBkZWZhdWx0OyAqL1xuICBmb250OiBpbmhlcml0O1xuICBsaW5lLWhlaWdodDogbm9ybWFsO1xuICBvdmVyZmxvdzogdmlzaWJsZTtcbiAgcGFkZGluZzogMDtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBidXR0b247XG4gIC8qIGZvciBpbnB1dCAqL1xuICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xuICAvKiBmb3IgYnV0dG9uICovXG4gIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XG4gIC1tcy11c2VyLXNlbGVjdDogbm9uZTtcbn1cblxuaW5wdXQ6Oi1tb3otZm9jdXMtaW5uZXIsXG5idXR0b246Oi1tb3otZm9jdXMtaW5uZXIge1xuICBib3JkZXI6IDA7XG4gIHBhZGRpbmc6IDA7XG59XG5cbioge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICBsZXR0ZXItc3BhY2luZzogLTAuMDE1ZW07XG59XG5cbmJvZHkge1xuICBmb250LWZhbWlseTogLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LCBcIlNlZ29lIFVJXCIsIFwiUm9ib3RvXCIsIFwiT3h5Z2VuXCIsIFwiVWJ1bnR1XCIsIFwiQ2FudGFyZWxsXCIsIFwiRmlyYSBTYW5zXCIsIFwiRHJvaWQgU2Fuc1wiLCBcIkhlbHZldGljYSBOZXVlXCIsIHNhbnMtc2VyaWY7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgbGluZS1oZWlnaHQ6IDEuMztcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XG4gIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7XG4gIC13ZWJraXQtdG91Y2gtY2FsbG91dDogbm9uZTtcbiAgLyogaU9TIFNhZmFyaSAqL1xuICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xuICAvKiBTYWZhcmkgKi9cbiAgLWtodG1sLXVzZXItc2VsZWN0OiBub25lO1xuICAvKiBLb25xdWVyb3IgSFRNTCAqL1xuICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xuICAvKiBGaXJlZm94ICovXG4gIC1tcy11c2VyLXNlbGVjdDogbm9uZTtcbiAgLyogSW50ZXJuZXQgRXhwbG9yZXIvRWRnZSAqL1xuICB1c2VyLXNlbGVjdDogbm9uZTtcbiAgY3Vyc29yOiBkZWZhdWx0O1xufVxuLnRoZW1lLWxpZ2h0IGJvZHkge1xuICBjb2xvcjogIzQ0NDQ0NDtcbn1cbi50aGVtZS1kYXJrIGJvZHkge1xuICBjb2xvcjogI2U4ZThlODtcbn1cblxuaDEge1xuICBmb250LXNpemU6IDgwcHg7XG4gIGxpbmUtaGVpZ2h0OiAxLjE7XG4gIGZvbnQtd2VpZ2h0OiA3MDA7XG59XG5cbmgyIHtcbiAgZm9udC1zaXplOiAzNnB4O1xuICBsaW5lLWhlaWdodDogMS4zO1xuICBmb250LXdlaWdodDogNzAwO1xufVxuXG5oMyB7XG4gIGZvbnQtc2l6ZTogMzZweDtcbiAgbGluZS1oZWlnaHQ6IDEuNDtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbn1cblxuaDQge1xuICBmb250LXNpemU6IDIwcHg7XG4gIGxpbmUtaGVpZ2h0OiAxLjI7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG59XG5cbnNtYWxsIHtcbiAgZm9udC1zaXplOiAxMnB4O1xuICBsaW5lLWhlaWdodDogMS4yO1xufVxuXG5zdHJvbmcge1xuICBmb250LXdlaWdodDogNjAwO1xufVxuXG5iIHtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG59XG5cbmkge1xuICBmb250LXN0eWxlOiBpdGFsaWM7XG59XG5cbnUge1xuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcbn1cblxuYnV0dG9uLCBhIHtcbiAgY3Vyc29yOiBwb2ludGVyO1xufVxuXG4jYXBwIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2YyZjVmODtcbiAgaGVpZ2h0OiAxMDB2aDtcbn1cblxuYm9keSB7XG4gIG1hcmdpbjogMDtcbn1cblxuYSB7XG4gIGNvbG9yOiAjMDc5Y2VmO1xufVxuXG4ubWFnaWMtbGluayB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGNvbG9yOiAjN2U4ZjlmO1xufVxuLm1hZ2ljLWxpbmsgPiAubG9nbyB7XG4gIG1hcmdpbi10b3A6IDQwcHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG59XG4ubWFnaWMtbGluayA+IC5sb2dvIGltZyB7XG4gIHdpZHRoOiAyODBweDtcbiAgbWF4LXdpZHRoOiA4MCU7XG59XG4ubWFnaWMtbGluayA+IC5jb250YWluZXIge1xuICBtYXJnaW46IDIwcHggMzBweDtcbiAgcGFkZGluZzogNDBweCAyMHB4O1xuICBtYXgtd2lkdGg6IDYwMHB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xuICBib3JkZXI6IHNvbGlkIDJweCAjZWVlZWVlO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDU0MHB4KSB7XG4gIC5tYWdpYy1saW5rID4gLmNvbnRhaW5lciB7XG4gICAgcGFkZGluZzogNDBweCA2MHB4O1xuICB9XG59XG4ubWFnaWMtbGluayA+IC5jb250YWluZXIgPiAuaGVhZGVyIHtcbiAgbWFyZ2luLXRvcDogNDBweDtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgZm9udC1zaXplOiAyMHB4O1xuICBjb2xvcjogIzQ0NDQ0NDtcbn1cbi50aGVtZS1saWdodCAubWFnaWMtbGluayA+IC5jb250YWluZXIgPiAuaGVhZGVyIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjtcbn1cbi50aGVtZS1kYXJrIC5tYWdpYy1saW5rID4gLmNvbnRhaW5lciA+IC5oZWFkZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjEyMTIxO1xufVxuLm1hZ2ljLWxpbmsgPiAuY29udGFpbmVyID4gLmRlc2NyaXB0aW9uIHtcbiAgbWFyZ2luLXRvcDogMTBweDtcbiAgZm9udC1zaXplOiAxNnB4O1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIGNvbG9yOiAjN2U4ZjlmO1xufVxuLm1hZ2ljLWxpbmsgPiAuY29udGFpbmVyID4gLmRpc2NsYWltZXIge1xuICBtYXJnaW4tdG9wOiA2MHB4O1xuICBmb250LXNpemU6IDE2cHg7XG4gIGNvbG9yOiAjN2U4ZjlmO1xufVxuLm1hZ2ljLWxpbmsgPiAuY29udGFpbmVyID4gLm1hbnVhbC1zZWN0aW9uIHtcbiAgbWFyZ2luOiA0MHB4IDA7XG59XG4ubWFnaWMtbGluayA+IC5jb250YWluZXIgPiAubWFudWFsLXNlY3Rpb24gLm1hbnVhbC1idXR0b24ge1xuICBmb250LXdlaWdodDogNjAwO1xuICBjb2xvcjogI2ZmZmZmZjtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzA3OWNlZjtcbiAgcGFkZGluZzogMTBweCAyMHB4O1xuICBib3JkZXItcmFkaXVzOiAzcHg7XG4gIHRyYW5zaXRpb246IDAuMnMgZWFzZS1pbi1vdXQ7XG59XG4ubWFnaWMtbGluayA+IC5jb250YWluZXIgPiAubWFudWFsLXNlY3Rpb24gLm1hbnVhbC1idXR0b246aG92ZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTdhOGY4O1xufVxuLm1hZ2ljLWxpbmsgPiAuY29udGFpbmVyID4gLmRvd25sb2FkLXNlY3Rpb24ge1xuICBtYXJnaW4tdG9wOiA1cHg7XG59XG4ubWFnaWMtbGluayA+IC5jb250YWluZXIgPiAud2ViYXBwLXNlY3Rpb24ge1xuICBtYXJnaW4tdG9wOiA4MHB4O1xuICBmb250LXNpemU6IDE0cHg7XG59IiwiQGZ1bmN0aW9uIHRoZW1lZCgka2V5KSB7XG4gIEByZXR1cm4gbWFwLWdldCgkdGhlbWUtbWFwLCAka2V5KTtcbn1cblxuQG1peGluIGFwcC1kcmFnZ2FibGUoKSB7XG4gIC13ZWJraXQtYXBwLXJlZ2lvbjogZHJhZztcblxuICAudGhlbWUtd2luZG93cyAmIHtcbiAgICAtd2Via2l0LWFwcC1yZWdpb246IG5vLWRyYWc7XG4gIH1cbn1cblxuQG1peGluIHRoZW1pZnkoJHRoZW1lczogJHRoZW1lcykge1xuICBAZWFjaCAkdGhlbWUsICRtYXAgaW4gJHRoZW1lcyB7XG5cbiAgICAudGhlbWUtI3skdGhlbWV9ICYge1xuICAgICAgJHRoZW1lLW1hcDogKCkgIWdsb2JhbDtcbiAgICAgIEBlYWNoICRrZXksICRzdWJtYXAgaW4gJG1hcCB7XG4gICAgICAgICR2YWx1ZTogbWFwLWdldChtYXAtZ2V0KCR0aGVtZXMsICR0aGVtZSksICcjeyRrZXl9Jyk7XG4gICAgICAgICR0aGVtZS1tYXA6IG1hcC1tZXJnZSgkdGhlbWUtbWFwLCAoJGtleTogJHZhbHVlKSkgIWdsb2JhbDtcbiAgICAgIH1cblxuICAgICAgQGNvbnRlbnQ7XG4gICAgICAkdGhlbWUtbWFwOiBudWxsICFnbG9iYWw7XG4gICAgfVxuXG4gIH1cbn1cblxuQG1peGluIHRoZW1pZnlCb2R5KCR0aGVtZXM6ICR0aGVtZXMpIHtcbiAgQGVhY2ggJHRoZW1lLCAkbWFwIGluICR0aGVtZXMge1xuXG4gICAgJi50aGVtZS0jeyR0aGVtZX0ge1xuICAgICAgJHRoZW1lLW1hcDogKCkgIWdsb2JhbDtcbiAgICAgIEBlYWNoICRrZXksICRzdWJtYXAgaW4gJG1hcCB7XG4gICAgICAgICR2YWx1ZTogbWFwLWdldChtYXAtZ2V0KCR0aGVtZXMsICR0aGVtZSksICcjeyRrZXl9Jyk7XG4gICAgICAgICR0aGVtZS1tYXA6IG1hcC1tZXJnZSgkdGhlbWUtbWFwLCAoJGtleTogJHZhbHVlKSkgIWdsb2JhbDtcbiAgICAgIH1cblxuICAgICAgQGNvbnRlbnQ7XG4gICAgICAkdGhlbWUtbWFwOiBudWxsICFnbG9iYWw7XG4gICAgfVxuXG4gIH1cbn1cblxuQG1peGluIHRoZW1pZnlTaW5nbGUoJG1vZGUsICR0aGVtZXM6ICR0aGVtZXMpIHtcbiAgQGVhY2ggJHRoZW1lLCAkbWFwIGluICR0aGVtZXMge1xuICAgIEBpZiAkbW9kZSA9PSAkdGhlbWUge1xuICAgICAgLnRoZW1lLSN7JHRoZW1lfSAmIHtcbiAgICAgICAgJHRoZW1lLW1hcDogKCkgIWdsb2JhbDtcbiAgICAgICAgQGVhY2ggJGtleSwgJHN1Ym1hcCBpbiAkbWFwIHtcbiAgICAgICAgICAkdmFsdWU6IG1hcC1nZXQobWFwLWdldCgkdGhlbWVzLCAkdGhlbWUpLCAnI3ska2V5fScpO1xuICAgICAgICAgICR0aGVtZS1tYXA6IG1hcC1tZXJnZSgkdGhlbWUtbWFwLCAoJGtleTogJHZhbHVlKSkgIWdsb2JhbDtcbiAgICAgICAgfVxuXG4gICAgICAgIEBjb250ZW50O1xuICAgICAgICAkdGhlbWUtbWFwOiBudWxsICFnbG9iYWw7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBib3VuY2UtcGl4ZWxzKCRwaXhlbHMpIHtcbiAgQGtleWZyYW1lcyBib3VuY2UtcGl4ZWxzIHtcbiAgICAwJSB7IHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtJHBpeGVscykgfVxuICAgIDUwJSB7IHRyYW5zZm9ybTogdHJhbnNsYXRlWSgkcGl4ZWxzKSB9XG4gICAgMTAwJSB7IHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtJHBpeGVscykgfVxuICB9XG4gIGFuaW1hdGlvbjogYm91bmNlLXBpeGVscyAycyBlYXNlLWluLW91dCBpbmZpbml0ZTtcbn1cblxuQG1peGluIGZvcmNlLWdwdSgpIHtcbiAgLXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5OiBoaWRkZW47XG4gIC1tb3otYmFja2ZhY2UtdmlzaWJpbGl0eTogaGlkZGVuO1xuICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMSk7XG4gIC1tcy10cmFuc2Zvcm06IHNjYWxlKDEpO1xuICAtbW96LXRyYW5zZm9ybTogc2NhbGUoMSk7XG4gIGJhY2tmYWNlLXZpc2liaWxpdHk6IGhpZGRlbjtcbiAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcbn1cblxuQG1peGluIGJsdXIoJHBpeGVscykge1xuICAtd2Via2l0LWZpbHRlcjogYmx1cigkcGl4ZWxzKTtcbiAgLW1vei1maWx0ZXI6IGJsdXIoJHBpeGVscyk7XG4gIC1vLWZpbHRlcjogYmx1cigkcGl4ZWxzKTtcbiAgLW1zLWZpbHRlcjogYmx1cigkcGl4ZWxzKTtcbiAgZmlsdGVyOiBibHVyKCRwaXhlbHMpO1xufVxuXG5AbWl4aW4gZW5hYmxlLXNlbGVjdGlvbigpIHtcbiAgLXdlYmtpdC10b3VjaC1jYWxsb3V0OiBhdXRvOyAvKiBpT1MgU2FmYXJpICovXG4gIC13ZWJraXQtdXNlci1zZWxlY3Q6IHRleHQ7IC8qIFNhZmFyaSAqL1xuICAta2h0bWwtdXNlci1zZWxlY3Q6IHRleHQ7IC8qIEtvbnF1ZXJvciBIVE1MICovXG4gIC1tb3otdXNlci1zZWxlY3Q6IHRleHQ7IC8qIEZpcmVmb3ggKi9cbiAgLW1zLXVzZXItc2VsZWN0OiB0ZXh0OyAvKiBJbnRlcm5ldCBFeHBsb3Jlci9FZGdlICovXG4gIHVzZXItc2VsZWN0OiB0ZXh0O1xuICAtd2Via2l0LWFwcC1yZWdpb246IG5vLWRyYWc7XG4gIGN1cnNvcjogYXV0bztcbn1cblxuQG1peGluIGRpc2FibGUtc2VsZWN0aW9uKCkge1xuICAtd2Via2l0LXRvdWNoLWNhbGxvdXQ6IG5vbmU7IC8qIGlPUyBTYWZhcmkgKi9cbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTsgLyogU2FmYXJpICovXG4gIC1raHRtbC11c2VyLXNlbGVjdDogbm9uZTsgLyogS29ucXVlcm9yIEhUTUwgKi9cbiAgLW1vei11c2VyLXNlbGVjdDogbm9uZTsgLyogRmlyZWZveCAqL1xuICAtbXMtdXNlci1zZWxlY3Q6IG5vbmU7IC8qIEludGVybmV0IEV4cGxvcmVyL0VkZ2UgKi9cbiAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gIGN1cnNvcjogZGVmYXVsdDtcbn1cblxuQG1peGluIGVuYWJsZS1mb250LXNtb290aGluZygpIHtcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XG4gIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7XG59XG5cbkBtaXhpbiBkaXNhYmxlLWZvbnQtc21vb3RoaW5nKCkge1xuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhdXRvO1xuICAtbW96LW9zeC1mb250LXNtb290aGluZzogYXV0bztcbn1cblxuQG1peGluIHRydW5jYXRlLWF0KCRsaW5lcykge1xuICAvLyBlbGxpcHNpc1xuICBkaXNwbGF5OiBibG9jaztcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgd29yZC1icmVhazogYnJlYWstYWxsO1xuXG4gIC8vIG11bHRpbGluZSBlbGxpcHNlcyBmb3Igd2Via2l0IGJyb3dzZXJzXG4gIC8vIGFsbCBvdGhlciBicm93c2VycyB3aWxsIGxpbWl0IHRvIDEgbGluZSxcbiAgLy8gICBidXQgbm90IGdldCBlbGxpcHNpc1xuICBAaWYgJGxpbmVzID4gMSB7XG4gICAgLXdlYmtpdC1saW5lLWNsYW1wOiAkbGluZXM7XG4gICAgLXdlYmtpdC1ib3gtb3JpZW50OiB2ZXJ0aWNhbDtcbiAgICAvLyBOT1RFKFNIQUhBTik6IFRoZSBmb2xsb3dpbmcgYnJlYWtzIHRoZSAuLi4gaW4gbm9uLXdlYmtpdCBicm93c2Vyc1xuICAgIHdoaXRlLXNwYWNlOiBub3JtYWw7XG4gICAgZGlzcGxheTogLXdlYmtpdC1ib3g7XG4gIH1cbn1cblxuQG1peGluIGRyb3AtcmlnaHQoJHNlY29uZHMpIHtcbiAgYW5pbWF0aW9uOiBkcm9wLXJpZ2h0ICRzZWNvbmRzIGVhc2UtaW4tb3V0IDBzIDE7XG59XG5cbkBtaXhpbiBkcm9wLWluKCRzZWNvbmRzKSB7XG4gIGFuaW1hdGlvbjogZHJvcC1pbiAkc2Vjb25kcyBlYXNlLWluLW91dCAwcyAxO1xufVxuXG5AbWl4aW4gZXhwYW5kLXZlcnRpY2FsKCRzZWNvbmRzKSB7XG4gIHRyYW5zZm9ybS1vcmlnaW46IHRvcDtcbiAgYW5pbWF0aW9uOiBleHBhbmQtdmVydGljYWwgJHNlY29uZHMgZWFzZS1pbi1vdXQgMHMgMTtcbn1cblxuQG1peGluIGZhZGUtaW4oJHNlY29uZHMpIHtcbiAgYW5pbWF0aW9uOiBmYWRlLWluICRzZWNvbmRzIGVhc2UtaW4tb3V0IDBzIDE7XG59XG5cbkBtaXhpbiBmYWRlLW91dCgkc2Vjb25kcykge1xuICBhbmltYXRpb246IGZhZGUtb3V0ICRzZWNvbmRzIGVhc2UtaW4tb3V0IDBzIDE7XG4gIGFuaW1hdGlvbi1maWxsLW1vZGU6IGZvcndhcmRzO1xufVxuXG5AbWl4aW4gZXhwYW5kKCRzZWNvbmRzKSB7XG4gIGFuaW1hdGlvbjogZXhwYW5kICRzZWNvbmRzIGVhc2UtaW4tb3V0IDBzIDE7XG59XG5cbkBtaXhpbiBicm93c2VyLWRlZmF1bHRzKCkge1xuICBAaW5jbHVkZSBkaXNhYmxlLWZvbnQtc21vb3RoaW5nKCk7XG4gIGxpbmUtaGVpZ2h0OiBpbml0aWFsO1xuXG4gICoge1xuICAgIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuICAgIGxldHRlci1zcGFjaW5nOiBpbml0aWFsO1xuICB9XG5cbiAgYiwgc3Ryb25nIHtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgfVxuXG4gIGgxIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBmb250LXNpemU6IDJlbTtcbiAgICBtYXJnaW4tdG9wOiAwLjY3ZW07XG4gICAgbWFyZ2luLWJvdHRvbTogMC42N2VtO1xuICAgIG1hcmdpbi1sZWZ0OiAwO1xuICAgIG1hcmdpbi1yaWdodDogMDtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgfVxuXG4gIGgyIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBmb250LXNpemU6IDEuNWVtO1xuICAgIG1hcmdpbi10b3A6IDAuODNlbTtcbiAgICBtYXJnaW4tYm90dG9tOiAwLjgzZW07XG4gICAgbWFyZ2luLWxlZnQ6IDA7XG4gICAgbWFyZ2luLXJpZ2h0OiAwO1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICB9XG5cbiAgaDMge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIGZvbnQtc2l6ZTogMS4xN2VtO1xuICAgIG1hcmdpbi10b3A6IDFlbTtcbiAgICBtYXJnaW4tYm90dG9tOiAxZW07XG4gICAgbWFyZ2luLWxlZnQ6IDA7XG4gICAgbWFyZ2luLXJpZ2h0OiAwO1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICB9XG5cbiAgaDQge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIGZvbnQtc2l6ZTogMWVtO1xuICAgIG1hcmdpbi10b3A6IDEuMzNlbTtcbiAgICBtYXJnaW4tYm90dG9tOiAxLjMzZW07XG4gICAgbWFyZ2luLWxlZnQ6IDA7XG4gICAgbWFyZ2luLXJpZ2h0OiAwO1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICB9XG5cbiAgaDUge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIGZvbnQtc2l6ZTogLjgzZW07XG4gICAgbWFyZ2luLXRvcDogMS42N2VtO1xuICAgIG1hcmdpbi1ib3R0b206IDEuNjdlbTtcbiAgICBtYXJnaW4tbGVmdDogMDtcbiAgICBtYXJnaW4tcmlnaHQ6IDA7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIH1cblxuICBoNiB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgZm9udC1zaXplOiAuNjdlbTtcbiAgICBtYXJnaW4tdG9wOiAyLjMzZW07XG4gICAgbWFyZ2luLWJvdHRvbTogMi4zM2VtO1xuICAgIG1hcmdpbi1sZWZ0OiAwO1xuICAgIG1hcmdpbi1yaWdodDogMDtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbiAgfVxuXG4gIHAge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIG1hcmdpbi10b3A6IDFlbTtcbiAgICBtYXJnaW4tYm90dG9tOiAxZW07XG4gICAgbWFyZ2luLWxlZnQ6IDA7XG4gICAgbWFyZ2luLXJpZ2h0OiAwO1xuICB9XG59XG4iLCJAaW1wb3J0ICd0eXBvZ3JhcGh5JztcblxuKiB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIGxldHRlci1zcGFjaW5nOiAtMC4wMTVlbTtcbn1cblxuYm9keSB7XG4gIGZvbnQtZmFtaWx5OiAkZGVmYXVsdEZvbnQ7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgbGluZS1oZWlnaHQ6IDEuMztcbiAgQGluY2x1ZGUgdGhlbWlmeSgkdGhlbWVzKSB7IGNvbG9yOiB0aGVtZWQoJ3ByaW1hcnlUZXh0Q29sb3InKTsgfTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgQGluY2x1ZGUgZW5hYmxlLWZvbnQtc21vb3RoaW5nKCk7XG4gIEBpbmNsdWRlIGRpc2FibGUtc2VsZWN0aW9uKCk7XG59XG5cbmgxIHtcbiAgZm9udC1zaXplOiA4MHB4O1xuICBsaW5lLWhlaWdodDogMS4xO1xuICBmb250LXdlaWdodDogJGJvbGQ7XG59XG5cbmgyIHtcbiAgZm9udC1zaXplOiAzNnB4O1xuICBsaW5lLWhlaWdodDogMS4zO1xuICBmb250LXdlaWdodDogJGJvbGQ7XG59XG5cbmgzIHtcbiAgZm9udC1zaXplOiAzNnB4O1xuICBsaW5lLWhlaWdodDogMS40O1xuICBmb250LXdlaWdodDogJHNlbWlib2xkO1xufVxuXG5oNCB7XG4gIGZvbnQtc2l6ZTogMjBweDtcbiAgbGluZS1oZWlnaHQ6IDEuMjtcbiAgZm9udC13ZWlnaHQ6ICRtZWRpdW07XG59XG5cbnNtYWxsIHtcbiAgZm9udC1zaXplOiAxMnB4O1xuICBsaW5lLWhlaWdodDogMS4yO1xufVxuXG5zdHJvbmcge1xuICBmb250LXdlaWdodDogJHNlbWlib2xkO1xufVxuXG5iIHtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG59XG5cbmkge1xuICBmb250LXN0eWxlOiBpdGFsaWM7XG59XG5cbnUge1xuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcbn1cblxuYnV0dG9uLCBhIHtcbiAgY3Vyc29yOiBwb2ludGVyO1xufVxuIiwiLy8gaWYgdGhlIGZvbGxvd2luZyBpcyB1cGRhdGVkLCBzaG91bGQgYWxzbyB1cGRhdGUgYGxpYi90eXBvZ3JhcGh5LnRzYFxuJGRlZmF1bHRGb250OiAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsXG4gIFwiU2Vnb2UgVUlcIiwgXCJSb2JvdG9cIiwgXCJPeHlnZW5cIiwgXCJVYnVudHVcIiwgXCJDYW50YXJlbGxcIixcbiAgXCJGaXJhIFNhbnNcIiwgXCJEcm9pZCBTYW5zXCIsIFwiSGVsdmV0aWNhIE5ldWVcIixcbiAgc2Fucy1zZXJpZjtcblxuJHJlZ3VsYXI6IDQwMDtcbiRtZWRpdW06IDUwMDtcbiRzZW1pYm9sZDogNjAwO1xuJGJvbGQ6IDcwMDtcbiIsIkBpbXBvcnQgJ2hlbHBlcnMnO1xuQGltcG9ydCAncmVzZXQnO1xuQGltcG9ydCAnYmFzaWNzJztcblxuI2FwcCB7XG4gIGJhY2tncm91bmQtY29sb3I6ICRsaWdodEdyYXk7XG4gIGhlaWdodDogMTAwdmg7XG59XG5cbmJvZHkge1xuICBtYXJnaW46IDA7XG59XG5cbmEge1xuICBjb2xvcjogJGF6dXJlO1xufVxuXG4ubWFnaWMtbGluayB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGNvbG9yOiAkc2lsdmVyO1xuXG4gID4gLmxvZ28ge1xuICAgIG1hcmdpbi10b3A6IDQwcHg7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgICBpbWcge1xuICAgICAgd2lkdGg6IDI4MHB4O1xuICAgICAgbWF4LXdpZHRoOiA4MCU7XG4gICAgfVxuICB9XG5cbiAgPiAuY29udGFpbmVyIHtcbiAgICBtYXJnaW46IDIwcHggMzBweDtcbiAgICBwYWRkaW5nOiA0MHB4IDIwcHg7XG4gICAgbWF4LXdpZHRoOiA2MDBweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgYm9yZGVyOiAkZ3JheUJvcmRlcjtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5cbiAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDU0MHB4KSB7XG4gICAgICBwYWRkaW5nOiA0MHB4IDYwcHg7XG4gICAgfVxuXG4gICAgPiAuaGVhZGVyIHtcbiAgICAgIG1hcmdpbi10b3A6IDQwcHg7XG4gICAgICBmb250LXdlaWdodDogJHNlbWlib2xkO1xuICAgICAgZm9udC1zaXplOiAyMHB4O1xuICAgICAgY29sb3I6ICRjaGFyY29hbDtcbiAgICAgIEBpbmNsdWRlIHRoZW1pZnkoJHRoZW1lcykge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0aGVtZWQoJ3ByaW1hcnlCYWNrZ3JvdW5kQ29sb3InKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICA+IC5kZXNjcmlwdGlvbiB7XG4gICAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgICAgZm9udC1zaXplOiAxNnB4O1xuICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgY29sb3I6ICRzaWx2ZXI7XG4gICAgfVxuXG4gICAgPiAuZGlzY2xhaW1lciB7XG4gICAgICBtYXJnaW4tdG9wOiA2MHB4O1xuICAgICAgZm9udC1zaXplOiAxNnB4O1xuICAgICAgY29sb3I6ICRzaWx2ZXI7XG4gICAgfVxuXG4gICAgPiAubWFudWFsLXNlY3Rpb24ge1xuICAgICAgbWFyZ2luOiA0MHB4IDA7XG5cbiAgICAgIC5tYW51YWwtYnV0dG9uIHtcbiAgICAgICAgZm9udC13ZWlnaHQ6ICRzZW1pYm9sZDtcbiAgICAgICAgY29sb3I6ICR3aGl0ZTtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGF6dXJlO1xuICAgICAgICBwYWRkaW5nOiAxMHB4IDIwcHg7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDNweDtcbiAgICAgICAgdHJhbnNpdGlvbjogMC4ycyBlYXNlLWluLW91dDtcblxuICAgICAgICAmOmhvdmVyIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBsaWdodGVuKCRhenVyZSwgNSUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgPiAuZG93bmxvYWQtc2VjdGlvbiB7XG4gICAgICBtYXJnaW4tdG9wOiA1cHg7XG4gICAgfVxuXG4gICAgPiAud2ViYXBwLXNlY3Rpb24ge1xuICAgICAgbWFyZ2luLXRvcDogODBweDtcbiAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICB9XG4gIH1cbn1cbiIsIi8vIExpZ2h0IFRoZW1lcyBTQVNTIHZhcnNcbiR3aGl0ZTogI2ZmZmZmZjtcbiRzbm93OiAjZmFmYWZhO1xuJGNoYXJjb2FsOiAjNDQ0NDQ0O1xuJGdyYXk6ICNjOWQ0ZTA7XG4kc2lsdmVyOiAjN2U4ZjlmO1xuJGxhYmVsOiAjZDM0N2FlO1xuJGluYm94OiAjNDdkZmY1O1xuJG1pZG5pZ2h0OiAjMjQyZTQ0O1xuJGF6dXJlOiAjMDc5Y2VmO1xuJHJlYWRMYXRlcjogI2ZmYTA1NztcbiRhcmNoaXZlOiAjODdlY2JiO1xuJHRyYXNoOiAjZmY2YjdjO1xuJHN0YXI6ICNmZmRmMzI7XG4kc2VuZExhdGVyOiAjMTA5N2RkO1xuJGZvbGxvd1VwOiAjZjY0YjgxO1xuJGVycm9yOiAjZTc0YzNjO1xuJGNvbXBvc2VIb3ZlcjogIzRFRDZFQjtcbiRsc2JDZWxsSG92ZXI6ICM0MzRmNjc7XG4kbHNiQ2VsbFNlbGVjdGVkOiAjMzMzZTU1O1xuJGxpZ2h0R3JheTogI2YyZjVmODtcbiRkYXJrQmx1ZTogIzJjNzFjMTtcbiRtZWRpdW1HcmVlbjogIzBlYzM2YjtcbiRib3JkZXJHcmF5OiAjZWVlZWVlO1xuJGljZUJsdWU6ICNlOGYzZmY7XG4kY29tcGxldGVkR3JheTogI2FmYmJjODtcbiRncmF5SG92ZXI6IGRhcmtlbigkd2hpdGUsIDQlKTtcbiR0aHJlYWRIb3ZlcjogcmdiYSgkaWNlQmx1ZSwgLjUpO1xuJHRocmVhZFNlbGVjdGVkOiAkaWNlQmx1ZTtcbiRjb21tZW50Qm9keTogcmdiYSgwLCAxNzAsIDI1NSwgMC4xKTtcbiRibGFjazogIzAwMDAwMDtcblxuJGZhY2Vib29rOiAjNWE3YWM3O1xuJHR3aXR0ZXI6ICM1YmJjZWM7XG4kYW5nZWxMaXN0OiAjMDAwMDAwO1xuJGxpbmtlZEluOiAjMDA3YmI1O1xuXG4kYm94U2hhZG93OiAycHggMnB4IDRweCAwIHJnYmEoMTI1LCAxNDMsIDE2MCwgMC41KTtcbiRncmF5Qm9yZGVyOiBzb2xpZCAycHggJGJvcmRlckdyYXk7XG4kbGlnaHRHcmF5Qm9yZGVyOiAkbGlnaHRHcmF5IDFweCBzb2xpZDtcbiRzZXF1ZW5jZU1heFdpZHRoOiAxMDQwcHg7XG5cbi8vIENvbnN0YW50cyAoTm90IGNoYW5nZWQgYnkgdGhlbWUpXG4kdHJ1ZVdoaXRlOiAjZmZmZmZmO1xuJHRydWVEYXJrOiAjMTIxMjEyO1xuXG4vLyBMaWdodCBUaGVtZXMgU0FTUyB2YXJzXG4kZGFya1ByaW1hcnlUZXh0OiAjZThlOGU4O1xuJGRhcmtTZWNvbmRhcnlUZXh0OiAjQUFBQUFBO1xuXG4kZGFyazogJ2RhcmsnO1xuJGxpZ2h0OiAnbGlnaHQnO1xuXG4vLyBUaGVtaWZpZWQgQ29sb3JzXG4kdGhlbWVzOiAoXG4gICRsaWdodDogKFxuICAgIHRydWVEYXJrOiAkdHJ1ZURhcmssXG4gICAgdHJ1ZVdoaXRlOiAjZmFmYWZhLFxuICAgIHVuc2V0OiAndW5zZXQnLFxuICAgIHRyYW5zcGFyZW50Q29sb3I6IHRyYW5zcGFyZW50LFxuICAgIHByaW1hcnlBY2NlbnQ6ICRhenVyZSxcblxuICAgIC8vIE1haW4gQXBwXG4gICAgcHJpbWFyeVRleHRDb2xvcjogJGNoYXJjb2FsLFxuICAgIHNlY29uZGFyeVRleHRDb2xvcjogJHNpbHZlcixcbiAgICB0ZXJ0aWFyeVRleHRDb2xvcjogJGdyYXksXG5cbiAgICAvLyBCYWNrZ3JvdW5kIENvbG9yc1xuICAgIHByaW1hcnlCYWNrZ3JvdW5kQ29sb3I6ICR3aGl0ZSxcbiAgICBzZWNvbmRhcnlCYWNrZ3JvdW5kQ29sb3I6ICRzbm93LFxuICAgIHRlcnRpYXJ5QmFja2dyb3VuZENvbG9yOiAkd2hpdGUsXG4gICAgcHJpbWFyeUNvbnRyYXN0Qm9yZGVyQ29sb3I6ICRsaWdodEdyYXksXG4gICAgc2Vjb25kYXJ5Q29udHJhc3RCb3JkZXJDb2xvcjogJGxpZ2h0R3JheSxcblxuICAgIC8vIExlZnQgU2lkZWJhclxuICAgIGxzYkJhY2tncm91bmRDb2xvcjogJG1pZG5pZ2h0LFxuICAgIGxzYkhlYWRlckNvbG9yOiAkZ3JheSxcblxuICAgIC8vIEJvcmRlcnNcbiAgICBsb3dDb250cmFzdEJvcmRlcjogJGxpZ2h0R3JheSAxcHggc29saWQsXG4gICAgbG93Q29udHJhc3RCb3JkZXJDb2xvcjogJGxpZ2h0R3JheSxcbiAgICBoaWdoQ29udHJhc3RCb3JkZXI6ICRncmF5IDJweCBzb2xpZCxcbiAgICBoaWdoQ29udHJhc3RCb3JkZXJDb2xvcjogJGdyYXksXG4gICAgYm94U2hhZG93OiAkYm94U2hhZG93LFxuXG4gICAgLy8gQWNjZW50c1xuICAgIGxvd0NvbnRyYXN0QWNjZW50OiByZ2JhKDI0MiwgMjQ1LCAyNDgsIDAuNSksXG5cbiAgICAvLyBIb3ZlcnNcbiAgICBoaWdoQ29udHJhc3RIb3ZlcjogJGdyYXlIb3ZlcixcblxuICAgIGdyYXk6ICRncmF5LFxuICAgIGdyYXlUZXh0OiAkZ3JheSxcbiAgICBtaWRuaWdodDogJG1pZG5pZ2h0LFxuICAgIGljZUJsdWU6ICRpY2VCbHVlLFxuICAgIHRocmVhZEhvdmVyOiByZ2JhKCRpY2VCbHVlLCAwLjUpLFxuICAgIGJvcmRlckdyYXk6ICRsaWdodEdyYXksXG4gICAgdGhyZWFkU2VsZWN0ZWQ6ICRpY2VCbHVlLFxuICAgIGxpZ2h0R3JheUJvcmRlcjogJGxpZ2h0R3JheSAxcHggc29saWQsXG4gICAgZ3JheUhvdmVyOiAkZ3JheUhvdmVyLFxuXG4gICksXG4gICRkYXJrOiAoXG4gICAgLy8gQ29uc3RhbnRzIHRoYXQgZG8gbm90IGNoYW5nZVxuICAgIHRydWVXaGl0ZTogI2ZhZmFmYSxcbiAgICB0cnVlRGFyazogJHRydWVEYXJrLFxuICAgIHByaW1hcnlBY2NlbnQ6ICRhenVyZSxcbiAgICB0cmFuc3BhcmVudENvbG9yOiB0cmFuc3BhcmVudCxcbiAgICB1bnNldDogJ3Vuc2V0JyxcblxuICAgIC8vIE1haW4gQXBwXG4gICAgcHJpbWFyeVRleHRDb2xvcjogJGRhcmtQcmltYXJ5VGV4dCxcbiAgICBzZWNvbmRhcnlUZXh0Q29sb3I6ICRkYXJrU2Vjb25kYXJ5VGV4dCxcbiAgICB0ZXJ0aWFyeVRleHRDb2xvcjogIzc3Nzc3NyxcbiAgICBwcmltYXJ5QmFja2dyb3VuZENvbG9yOiAjMjEyMTIxLFxuICAgIHNlY29uZGFyeUJhY2tncm91bmRDb2xvcjogIzIzMjMyMyxcbiAgICB0ZXJ0aWFyeUJhY2tncm91bmRDb2xvcjogIzI1MjUyNSxcbiAgICBzZWNvbmRhcnlDb250cmFzdEJvcmRlckNvbG9yOiBsaWdodGVuKCMxMjEyMTIsIDEwJSksXG4gICAgY29udHJhc3RlZEJvcmRlckNvbG9yOiBsaWdodGVuKCMxMjEyMTIsIDEwJSksXG5cbiAgICAvLyBMZWZ0IFNpZGViYXJcbiAgICBsc2JCYWNrZ3JvdW5kQ29sb3I6ICMyNTI1MjUsXG4gICAgbHNiSGVhZGVyQ29sb3I6IGRhcmtlbigjZmFmYWZhLCAxMCUpLFxuXG4gICAgLy8gQm9yZGVyc1xuICAgIGxvd0NvbnRyYXN0Qm9yZGVyOiAjMkMyQzJDIDFweCBzb2xpZCxcbiAgICBsb3dDb250cmFzdEJvcmRlckNvbG9yOiAjMkMyQzJDLFxuICAgIGhpZ2hDb250cmFzdEJvcmRlcjogIzJFMkUyRSAycHggc29saWQsXG4gICAgaGlnaENvbnRyYXN0Qm9yZGVyQ29sb3I6ICMyRTJFMkUsXG4gICAgYm94U2hhZG93OiAycHggMnB4IDRweCAwICMxMjEyMTIsXG5cbiAgICAvLyBBY2NlbnRzXG4gICAgbG93Q29udHJhc3RBY2NlbnQ6IHJnYmEoNzcsIDc3LCA3NywgMC4xMzIpLFxuXG4gICAgLy8gSG92ZXJzXG4gICAgaGlnaENvbnRyYXN0SG92ZXI6IGxpZ2h0ZW4obGlnaHRlbigjMEYwRjBGLCA1JSksIDUlKSxcblxuICAgIGdyYXk6IGxpZ2h0ZW4oIzBGMEYwRiwgMTUlKSxcbiAgICBtaWRuaWdodDogbGlnaHRlbigjMEYwRjBGLCAxMCUpLFxuICAgIGljZUJsdWU6IGxpZ2h0ZW4oIzBGMEYwRiwgNyUpLFxuICAgIGJvcmRlckdyYXk6IGxpZ2h0ZW4oIzBGMEYwRiwgMTAlKSxcbiAgICB0aHJlYWRIb3ZlcjogcmdiYSgjMzYzNjM2LCAwLjcpLFxuICAgIHRocmVhZFNlbGVjdGVkOiByZ2JhKCMzNjM2MzYsIDAuNSksXG4gICAgbGlnaHRHcmF5Qm9yZGVyOiAjMkMyQzJDIDFweCBzb2xpZCxcbiAgICBncmF5VGV4dDogI2ZhZmFmYSxcbiAgICBncmF5SG92ZXI6ICMyRTJFMkUsXG4gICksXG4pO1xuIl19XSk7Cg=="}]}