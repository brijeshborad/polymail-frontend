{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Settings/routes/Integrations/routes/Zoom/index.tsx","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Settings/routes/Integrations/routes/Zoom/index.tsx","mtime":1675280254106},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JzsKaW1wb3J0IFpvb20gZnJvbSAnLi9ab29tJzsKaW1wb3J0IHsgaW50ZWdyYXRpb25ab29tTG9naW4sIHNlbGVjdFpvb21JbnRlZ3JhdGlvbiwgaW50ZWdyYXRpb25ab29tTG9nb3V0LCBpbnRlZ3JhdGlvbkxpc3QsIH0gZnJvbSAnQHNyYy9kdWNrcy9pbnRlZ3JhdGlvbnMnOwppbXBvcnQgeyBzZWxlY3RUZWFtIH0gZnJvbSAnQHNyYy9kdWNrcy90ZWFtJzsKaW1wb3J0IHsgd2l0aFJvdXRlciB9IGZyb20gJ3JlYWN0LXJvdXRlcic7CnZhciBtYXBTdGF0ZVRvUHJvcHMgPSBmdW5jdGlvbiAoc3RhdGUsIG93blByb3BzKSB7CiAgICB2YXIgc2VhcmNoID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhvd25Qcm9wcy5sb2NhdGlvbi5zZWFyY2gpOwogICAgcmV0dXJuIHsKICAgICAgICB6b29tSW50ZWdyYXRpb246IHNlbGVjdFpvb21JbnRlZ3JhdGlvbihzdGF0ZSksCiAgICAgICAgdGVhbTogc2VsZWN0VGVhbShzdGF0ZSksCiAgICAgICAgcmVmcmVzaEludGVncmF0aW9uczogISFzZWFyY2guZ2V0KCdpbnRlZ3JhdGlvblJlZnJlc2gnKSwKICAgIH07Cn07CnZhciBtYXBEaXNwYXRjaFRvUHJvcHMgPSBmdW5jdGlvbiAoZGlzcGF0Y2gpIHsgcmV0dXJuICh7CiAgICBsb2dpblpvb206IGZ1bmN0aW9uICh0ZWFtSWQpIHsgcmV0dXJuIGRpc3BhdGNoKGludGVncmF0aW9uWm9vbUxvZ2luKHRlYW1JZCkpOyB9LAogICAgbG9nb3V0Wm9vbTogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGlzcGF0Y2goaW50ZWdyYXRpb25ab29tTG9nb3V0KG51bGwpKTsgfSwKICAgIGxpc3RJbnRlZ3JhdGlvbnM6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRpc3BhdGNoKGludGVncmF0aW9uTGlzdChudWxsKSk7IH0sCn0pOyB9OwpleHBvcnQgZGVmYXVsdCB3aXRoUm91dGVyKGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMpKFpvb20pKTsK"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Settings/routes/Integrations/routes/Zoom/index.tsx","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Settings/routes/Integrations/routes/Zoom/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAY,MAAM,aAAa,CAAC;AAGhD,OAAO,IAAmC,MAAM,QAAQ,CAAC;AACzD,OAAO,EACL,oBAAoB,EAAE,qBAAqB,EAAE,qBAAqB,EAAE,eAAe,GACpF,MAAM,yBAAyB,CAAC;AACjC,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAC7C,OAAO,EAAE,UAAU,EAAuB,MAAM,cAAc,CAAC;AAE/D,IAAM,eAAe,GAAG,UAAC,KAAiB,EAAE,QAAkC;IAC5E,IAAM,MAAM,GAAG,IAAI,eAAe,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IAE7D,OAAO;QACL,eAAe,EAAE,qBAAqB,CAAC,KAAK,CAAC;QAC7C,IAAI,EAAE,UAAU,CAAC,KAAK,CAAC;QACvB,mBAAmB,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,oBAAoB,CAAC;KACxD,CAAC;AACJ,CAAC,CAAC;AAEF,IAAM,kBAAkB,GAAG,UAAC,QAA8B,IAAoB,OAAA,CAAC;IAC7E,SAAS,EAAE,UAAC,MAAc,IAAK,OAAA,QAAQ,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,EAAtC,CAAsC;IACrE,UAAU,EAAE,cAAM,OAAA,QAAQ,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC,EAArC,CAAqC;IACvD,gBAAgB,EAAE,cAAM,OAAA,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,EAA/B,CAA+B;CACxD,CAAC,EAJ4E,CAI5E,CAAC;AAEH,eAAe,UAAU,CACvB,OAAO,CAA4B,eAAe,EAAE,kBAAkB,CAAC,CAAC,IAAI,CAAC,CAC9E,CAAC","sourcesContent":["import { connect, Dispatch } from 'react-redux';\n\nimport { StoreState } from '@src/types';\nimport Zoom, { StateProps, DispatchProps } from './Zoom';\nimport {\n  integrationZoomLogin, selectZoomIntegration, integrationZoomLogout, integrationList,\n} from '@src/ducks/integrations';\nimport { selectTeam } from '@src/ducks/team';\nimport { withRouter, RouteComponentProps } from 'react-router';\n\nconst mapStateToProps = (state: StoreState, ownProps: RouteComponentProps<any>): StateProps => {\n  const search = new URLSearchParams(ownProps.location.search);\n\n  return {\n    zoomIntegration: selectZoomIntegration(state),\n    team: selectTeam(state),\n    refreshIntegrations: !!search.get('integrationRefresh'),\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<StoreState>): DispatchProps => ({\n  loginZoom: (teamId: string) => dispatch(integrationZoomLogin(teamId)),\n  logoutZoom: () => dispatch(integrationZoomLogout(null)),\n  listIntegrations: () => dispatch(integrationList(null)),\n});\n\nexport default withRouter(\n  connect<StateProps, DispatchProps>(mapStateToProps, mapDispatchToProps)(Zoom),\n);\n"]}]}