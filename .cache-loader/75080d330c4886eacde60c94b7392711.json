{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/mailCountBot.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/mailCountBot.ts","mtime":1675280254124},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/mailCountBot.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/mailCountBot.ts"],"names":[],"mappings":"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","sourcesContent":["import { captureException } from '@sentry/browser';\n\nimport { getBus, BusEventName } from '@src/worker/bus';\nimport { getNewMailCount, MAX_LIST_COUNT } from '@src/lib/models/mailCount';\nimport { sendMailCountUpdated } from './bridge/workerEvents';\nimport { uniqBy } from 'lodash';\nimport { DockCount, LeftSidebarCount } from '@src/types';\n\nexport interface MailCount {\n  inboxRead: number;\n  inboxUnread: number;\n  listsUnread: { [id: string]: number };\n  laterCount: number;\n  starredCount: number;\n  followUpCount: number;\n}\n\nexport const enum MailCountType {\n  Inbox = 'inbox',\n  ListUnread = 'listUnread',\n  LaterCount = 'laterCount',\n  StarredCount = 'starredCount',\n  FollowUpCount = 'followUpCount',\n}\n\nexport interface MailCountQuery {\n  account: string;\n  type: MailCountType;\n  hash: string;\n  list?: string;\n  priority: number;\n\n  // Used for optimizations around inbox counts\n  leftSidebarCount: LeftSidebarCount;\n  dockCount: DockCount;\n}\n\nexport class MailCountBot {\n  private running = false;\n  private lists: string[] = [];\n  private ignoredLists: { [listId: string]: boolean } = {};\n  private queries: MailCountQuery[] = [];\n\n  // Default to settings that result in no optimizations\n  private leftSidebarCount: LeftSidebarCount = LeftSidebarCount.All;\n  private dockCount: DockCount = DockCount.Unread;\n\n  // Empty list dictionary for account + ListQuery + list\n  // only reset with updates from ThreadSync/HistorySync\n  private emptyListHashes: { [hash: string]: boolean } = {};\n\n  start() {\n    getBus()\n      .filter((event) => {\n        if (event.name === BusEventName.updateListUnreadCount) {\n          this.updateUnreadListHash(event.data.accountId, event.data.list);\n        }\n\n        if (event.name === BusEventName.UpdateMailCount) {\n          return true;\n        }\n\n        return false;\n      })\n      .bufferTime(1000)\n      .filter(events => events.length > 0)\n      .map((events) => {\n        events.forEach((event) => {\n          this.setQueries(event.data.accountId);\n        });\n      })\n      .subscribe({\n        next: () => {\n          if (!this.running) {\n            this.run();\n          }\n        },\n        error: (e) => {\n          captureException(e);\n          // tslint:disable-next-line:no-console\n          console.error(e);\n        },\n      });\n  }\n\n  reset = () => {\n    this.ignoredLists = {};\n    this.emptyListHashes = {};\n  }\n\n  updateUnreadListHash = (account: string, list: string) => {\n    const hash = account + MailCountType.ListUnread + list;\n    delete this.emptyListHashes[hash];\n  }\n\n  updatePreferences = (leftSidebarCount: LeftSidebarCount, dockCount: DockCount) => {\n    this.leftSidebarCount = leftSidebarCount;\n    this.dockCount = dockCount;\n  }\n\n  setQueries = (account: string) => {\n\n    this.queries.push({\n      account,\n      type: MailCountType.Inbox,\n      hash: account + MailCountType.Inbox,\n      priority: 0,\n      leftSidebarCount: this.leftSidebarCount,\n      dockCount: this.dockCount,\n    });\n\n    this.queries.push({\n      account,\n      type: MailCountType.LaterCount,\n      hash: account + MailCountType.LaterCount,\n      priority: 1,\n      leftSidebarCount: this.leftSidebarCount,\n      dockCount: this.dockCount,\n    });\n\n    this.queries.push({\n      account,\n      type: MailCountType.StarredCount,\n      hash: account + MailCountType.StarredCount,\n      priority: 1,\n      leftSidebarCount: this.leftSidebarCount,\n      dockCount: this.dockCount,\n    });\n\n    this.queries.push({\n      account,\n      type: MailCountType.FollowUpCount,\n      hash: account + MailCountType.FollowUpCount,\n      priority: 1,\n      leftSidebarCount: this.leftSidebarCount,\n      dockCount: this.dockCount,\n    });\n\n    this.lists.forEach((l) => {\n      // Check list blocklist\n      if (this.ignoredLists[l]) {\n        return;\n      }\n\n      const listQuery = {\n        account,\n        type: MailCountType.ListUnread,\n        hash: account + MailCountType.ListUnread + l,\n        list: l,\n        priority: 2,\n        leftSidebarCount: this.leftSidebarCount,\n        dockCount: this.dockCount,\n      };\n\n      // Do not refetch for lists that have empty query\n      if (this.emptyListHashes[listQuery.hash]) {\n        return;\n      }\n\n      this.queries.push(listQuery);\n    });\n\n    // Remove duplicates and sort by priority\n    this.queries = uniqBy(this.queries, 'hash').sort(((a, b) => a.priority - b.priority));\n  }\n\n  setLists = (lists: string[]) => {\n    this.lists = lists;\n  }\n\n  private run() {\n    if (this.running) {\n      return;\n    }\n\n    const query = this.queries.shift();\n    if (query) {\n      this.running = true;\n\n      getNewMailCount(query)\n      .delay(20)\n      .subscribe({\n        next: (partialMailCount) => {\n          switch (query.type) {\n            case MailCountType.ListUnread:\n              const l = query.list;\n              if (l) {\n                sendMailCountUpdated(query.account, partialMailCount);\n                if (partialMailCount.listsUnread) {\n                  const listCount = partialMailCount.listsUnread[l];\n                  if (listCount > MAX_LIST_COUNT) {\n                    this.ignoredLists[l] = true;\n                  }\n\n                  // Create a hash for lists that have 0 messages\n                  if (listCount === 0) {\n                    this.emptyListHashes[query.hash] = true;\n                  }\n                }\n              }\n\n              break;\n            default:\n              sendMailCountUpdated(query.account, partialMailCount);\n          }\n\n          this.running = false;\n          this.run();\n        },\n        error: (e) => {\n          this.running = false;\n          captureException(e);\n          // tslint:disable-next-line:no-console\n          console.error(e);\n          this.queries.push(query);\n        },\n      });\n    }\n  }\n}\n"]}]}