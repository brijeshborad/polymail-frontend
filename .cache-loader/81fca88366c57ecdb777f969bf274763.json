{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/contacts.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/contacts.ts","mtime":1675280254055},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/contacts.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/contacts.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs';\nimport { Epic } from 'redux-observable';\n\nimport { Deps } from '@src/lib/epic';\n\nimport {\n  StoreState, Action, ActionStatus, Contact,\n  ContactNote, Thread, ResourceStatus, ContactGroup,\n  ContactType,\n} from '@src/types/index';\n\nimport {\n  searchContacts, searchContactGroups,\n  listContactsByEmail, computeContact,\n  searchContactsByDomain, mergeEnrichedContact,\n} from '@src/lib/contact';\n\nimport {\n  CONTACT_SELECT,\n  CONTACT_FETCH,\n  contactFetch,\n  CONTACT_TYPEAHEAD,\n  contactTypeahead,\n  contactGet,\n  CONTACT_GET,\n  CONTACT_TYPEAHEAD_DOMAIN,\n  contactTypeaheadDomain,\n  CONTACT_UPDATE,\n  contactUpdate,\n  selectContact as selectContactSelector,\n  ContactUpdateMeta,\n  contactSelect,\n  CONTACT_RESOURCES_FETCH,\n  contactResourcesFetch,\n} from '@src/ducks/contacts';\n\nimport {\n  threadsSelectedContact,\n} from '@src/ducks/threads';\n\nimport { getContact } from '@src/api/contacts';\nimport { uniqBy } from 'lodash';\nimport { parseAddress } from '@src/lib/address';\nimport { ApiError } from '@src/api/base';\nimport { RightSidebarTab } from '@src/types/rightSidebar';\n\nconst selectContact: Epic<Action<string, string|Contact|ContactNote[]|Thread[]>, StoreState, Deps> =\n  (action$, store, deps) =>\n    action$.ofType(CONTACT_SELECT)\n      .filter(action => action.status === ActionStatus.Start)\n      .filter((action: any) => action.meta)\n      .flatMap((action) => {\n        const email = parseAddress(action.meta.toLowerCase().trim()).email;\n        const state = store.getState();\n        const stateContact = state.contacts[email];\n\n        // Do not do additional processing if same contact\n        if (email === state.selectedContact) {\n          return Observable.of(contactSelect(email, null));\n        }\n\n        // Only prompt additional fetches when sidebar is not collapsed, and enriched/loading state\n        const contactTab = state.rightSidebar.tab === RightSidebarTab.Contact;\n        const profileCollapsed = state.rightSidebar.collapsed.threads;\n        const isEnriched = stateContact?.data?.type === ContactType.Enriched;\n\n        if (\n          (contactTab && !profileCollapsed) &&\n          (isEnriched || stateContact?.status === ResourceStatus.Loading)\n        ) {\n          return Observable.merge(\n            Observable.of(contactResourcesFetch(email)),\n            Observable.of(contactSelect(email, null)),\n          );\n        }\n\n        let actions: Array<Observable<Action<any, any>>> = [\n          Observable.of(contactSelect(email, null)),\n        ];\n\n        // Only prompt additional fetches when sidebar is not collapsed and tab is set to profile\n        if (contactTab && !profileCollapsed) {\n          actions = [\n            Observable.of(contactResourcesFetch(email)),\n            ...actions,\n          ];\n        }\n\n        return Observable.merge(...actions);\n      });\n\nconst fetchContact: Epic<Action<string, Contact>, StoreState> = (action$, store) =>\n   action$.ofType(CONTACT_FETCH)\n    .filter(action => action.status === ActionStatus.Start)\n    .flatMap(action =>\n      getContact(action.meta)\n        .map((contact): Contact => ({ ...contact }))\n        .map((enriched: Contact) => {\n          const state = store.getState();\n          const existing = selectContactSelector(state, enriched.email);\n          return mergeEnrichedContact(enriched, existing);\n        })\n        .map(contact => contactFetch(action.meta, contact))\n        .catch((e: Error) => Observable.of(contactFetch(action.meta, e))),\n    );\n\nconst updateContact: Epic<\n  Action<ContactUpdateMeta, Contact>, StoreState, Deps\n> = (action$, store, deps) =>\n      action$.ofType(CONTACT_UPDATE)\n        .filter(action => action.status === ActionStatus.Start)\n        .flatMap(action =>\n          deps.contacts.update(action.meta)\n            .catch((e: ApiError) => {\n              if (e.code === 404) {\n                return deps.contacts.create(action.meta);\n              }\n\n              throw e;\n            })\n            .map(contact => contactUpdate(action.meta, contact))\n            .catch((e: ApiError) => Observable.of(contactUpdate(action.meta, e))),\n        );\n\nconst typeaheadContacts: Epic<Action<string, Array<Contact|ContactGroup>>, StoreState> = action$ =>\n  action$.ofType(CONTACT_TYPEAHEAD)\n    .filter(action => action.status === ActionStatus.Start)\n    .debounceTime(150)\n    .flatMap(action =>\n      Observable.zip(\n        searchContactGroups(action.meta),\n        searchContacts(action.meta, 500)\n          .map(contacts => contacts.sort((a, b) => {\n            if (!a.lastSent) {\n              return 1;\n            }\n\n            if (!b.lastSent) {\n              return -1;\n            }\n\n            return a.lastSent < b.lastSent ? 1 : -1;\n          },\n        )),\n      )\n      .takeUntil(action$.ofType(CONTACT_TYPEAHEAD)\n        .filter(nextAction => nextAction.status === ActionStatus.Start),\n      )\n      .map((r) => {\n        const results: Array<Contact | ContactGroup> = [];\n        r.forEach(result => results.push(...result));\n        return contactTypeahead(action.meta, uniqBy(results, 'id'));\n      }),\n    );\n\n// TODO(SHIN): Peformance hotfix Disable contact typeahead domain\nconst typeaheadContactsByDomain: Epic<Action<string[], Contact[]>, StoreState, Deps>\n  = (action$, store, deps) =>\n    action$.ofType(CONTACT_TYPEAHEAD_DOMAIN)\n      .filter(action => action.status === ActionStatus.Start)\n      .filter(action => false)\n      .flatMap(action =>\n        Observable.zip(\n          ...action.meta.map(email => searchContactsByDomain(email)),\n        )\n        .takeUntil(action$.ofType(CONTACT_TYPEAHEAD_DOMAIN)\n          .filter(nextAction => nextAction.status === ActionStatus.Start))\n        .map((r) => {\n          const results: Contact[] = [];\n          const accountEmails = {};\n          store.getState().accounts.forEach(a => accountEmails[a.email] = true);\n          r.forEach(result => results.push(...result));\n          return contactTypeaheadDomain(\n            action.meta,\n            uniqBy(results, 'email')\n              .filter(c => !accountEmails[c.email])\n              .sort((a, b) => {\n                if (!a.lastSent) {\n                  return 1;\n                }\n\n                if (!b.lastSent) {\n                  return -1;\n                }\n\n                return a.lastSent < b.lastSent ? 1 : -1;\n              }),\n            );\n        }),\n      );\n\n// Gets contact from cache\nconst getCachedContact: Epic<Action<string, Contact>, StoreState, Deps> = (action$, store) =>\n  action$.ofType(CONTACT_GET)\n    .filter(action => action.status === ActionStatus.Start)\n    // Only fetch when contact has not been enriched or fetched from cache\n    .filter((action: Action<string, Contact>) => {\n      const state = store.getState();\n      const email = parseAddress(action.meta).email;\n      const foundContact = state.contacts[email];\n\n      // Only fetch from cache when contact type is default and this is the first fetch trigger\n      return (\n        foundContact.data?.type === ContactType.Default &&\n        (foundContact?.incrementCount || 0) === 1\n      );\n    })\n    .flatMap((action) => {\n      return listContactsByEmail(parseAddress(action.meta).email)\n        .filter(contacts => !!contacts.length)\n        .map((contacts: Contact[]) => {\n          return contactGet(\n            action.meta, computeContact(contacts),\n          );\n        });\n    });\n\nconst contactResourcesFetchEpic: Epic<Action<string|undefined, any>, StoreState, Deps>\n  = (action$, store, deps) =>\n    action$.ofType(CONTACT_RESOURCES_FETCH)\n      .filter(action => action.status === ActionStatus.Start && !!action.meta)\n      .flatMap((action) => {\n        return Observable.merge(\n          Observable.of(contactFetch(action.meta!)),\n          Observable.of(threadsSelectedContact(action.meta!)),\n        );\n      });\n\nexport default [\n  selectContact,\n  fetchContact,\n  typeaheadContacts,\n  getCachedContact,\n  typeaheadContactsByDomain,\n  updateContact,\n  contactResourcesFetchEpic,\n];\n"]}]}