{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/lists.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/lists.ts","mtime":1675280254049},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIF9hLCBfYiwgX2M7CmltcG9ydCB1cGRhdGUgZnJvbSAnaW1tdXRhYmlsaXR5LWhlbHBlcic7CmltcG9ydCB7IGNyZWF0ZSwgY3JlYXRlQWN0aW9uIH0gZnJvbSAnQHNyYy9saWIvcmVkdXgnOwppbXBvcnQgeyBMaXN0U3RhdHVzLCB9IGZyb20gJ0BzcmMvdHlwZXMnOwppbXBvcnQgeyBjcmVhdGVTZWxlY3RvciB9IGZyb20gJ0BzcmMvbGliL3NlbGVjdG9yJzsKaW1wb3J0IHsgbGlzdExldmVsLCBsaXN0RGlzcGxheU5hbWUsIHBhcmVudExpc3QsIGRlc2NlbmRhbnRzIH0gZnJvbSAnQHNyYy9saWIvbWFpbGJveCc7CmltcG9ydCB7IHNlbGVjdE1haWxib3hDb3VudHMgfSBmcm9tICdAc3JjL2R1Y2tzL21haWxDb3VudHMnOwpleHBvcnQgdmFyIExJU1RfQ1JFQVRFID0gKF9hID0gY3JlYXRlKCdMSVNUX0NSRUFURScsIHsKICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChzdGF0ZSwgbWV0YSwgcGF5bG9hZCkgewogICAgICAgIHJldHVybiB1cGRhdGUoc3RhdGUsIHsKICAgICAgICAgICAgbGlzdHM6IHsKICAgICAgICAgICAgICAgICRzZXQ6IHN0YXRlLmxpc3RzLmNvbmNhdChwYXlsb2FkKSwKICAgICAgICAgICAgfSwKICAgICAgICB9KTsKICAgIH0sCn0pLCBfYS50eXBlKSwgbGlzdENyZWF0ZSA9IF9hLmFjdGlvbiwgbGlzdENyZWF0ZVJlZHVjZXIgPSBfYS5yZWR1Y2VyOwpleHBvcnQgdmFyIExJU1RfVVBEQVRFID0gKF9iID0gY3JlYXRlKCdMSVNUX1VQREFURScsIHsKICAgIHN0YXJ0OiBmdW5jdGlvbiAoc3RhdGUsIG1ldGEpIHsKICAgICAgICByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgICAgIGxpc3RzOiB7CiAgICAgICAgICAgICAgICAkc2V0OiBzdGF0ZS5saXN0cy5tYXAoZnVuY3Rpb24gKGxpc3QpIHsgcmV0dXJuIGxpc3QuaWQgPT09IG1ldGEuaWQgPyBtZXRhIDogbGlzdDsgfSksCiAgICAgICAgICAgIH0sCiAgICAgICAgfSk7CiAgICB9LAp9KSwgX2IudHlwZSksIGxpc3RVcGRhdGUgPSBfYi5hY3Rpb24sIGxpc3RVcGRhdGVSZWR1Y2VyID0gX2IucmVkdWNlcjsKZXhwb3J0IHZhciBMSVNUX0RFTEVURSA9IChfYyA9IGNyZWF0ZSgnTElTVF9ERUxFVEUnLCB7CiAgICBzdWNjZXNzOiBmdW5jdGlvbiAoc3RhdGUsIG1ldGEsIHBheWxvYWQpIHsKICAgICAgICByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgICAgIGxpc3RzOiB7CiAgICAgICAgICAgICAgICAkc2V0OiBzdGF0ZS5saXN0cy5maWx0ZXIoZnVuY3Rpb24gKGxpc3QpIHsgcmV0dXJuIGxpc3QuaWQgIT09IG1ldGEuaWQ7IH0pLAogICAgICAgICAgICB9LAogICAgICAgIH0pOwogICAgfSwKfSksIF9jLnR5cGUpLCBsaXN0RGVsZXRlID0gX2MuYWN0aW9uLCBsaXN0RGVsZXRlUmVkdWNlciA9IF9jLnJlZHVjZXI7CmV4cG9ydCB2YXIgTElTVF9DUkVBVEVfTU9WRSA9ICdMSVNUX0NSRUFURV9NT1ZFJzsKZXhwb3J0IHZhciBsaXN0Q3JlYXRlTW92ZSA9IGNyZWF0ZUFjdGlvbihMSVNUX0NSRUFURV9NT1ZFKTsKLy8gUmV0dXJucyBhbGwgbGlzdHMgYXMgdGFicyB3aXRoIHJlbGF0aXZlIHN0cnVjdHVyZSAmJiBjb3VudHMgYXBwbGllZC4gTWVtb2l6ZWQgb24gbWFpbENvdW50cwpleHBvcnQgdmFyIHNlbGVjdExpc3RUYWJzV2l0aENvdW50ID0gY3JlYXRlU2VsZWN0b3IoWwogICAgZnVuY3Rpb24gKHN0YXRlKSB7IHJldHVybiBzZWxlY3RNYWlsYm94Q291bnRzKHN0YXRlKTsgfSwKICAgIGZ1bmN0aW9uIChzdGF0ZSkgeyByZXR1cm4gc2VsZWN0TGlzdFN0dWN0dXJlVGFicyhzdGF0ZSk7IH0sCl0sIGZ1bmN0aW9uIChtYWlsQ291bnQsIGxpc3RUYWJzKSB7CiAgICByZXR1cm4gbGlzdFRhYnMubWFwKGZ1bmN0aW9uICh0YWIpIHsKICAgICAgICB0YWIuY291bnQgPSB0YWIubGlzdCAmJiBtYWlsQ291bnQubGlzdHNVbnJlYWRbdGFiLmxpc3QuaWRdIHx8IDA7CiAgICAgICAgcmV0dXJuIHRhYjsKICAgIH0pOwp9LCB1bmRlZmluZWQsIFsnbWFpbENvdW50cyddKTsKLy8gc2VsZWN0TGlzdFRhYnMgcmV0dXJucyB0YWJzIHdpdGggYWRkaXRpb25hbCBtZXRhIGRhdGEuIE5lZWQgY291bnRzIGFwcGVuZGVkLgovLyBUaGlzIGlzIGl0cyBvd24gc2VsZWN0b3Igc2luY2UgdGhlIHJlbGF0aXZlIHN0cnVjdHVyZSBvZiBsaXN0cyBzaG91bGQgcmVtYWluIHRoZSBzYW1lCi8vIHdoZW4gb25seSBjb3VudHMgYXJlIGFmZmVjdGVkCnZhciBzZWxlY3RMaXN0U3R1Y3R1cmVUYWJzID0gY3JlYXRlU2VsZWN0b3IoW2Z1bmN0aW9uIChzdGF0ZSkgeyByZXR1cm4gc3RhdGUubGlzdHM7IH1dLCBmdW5jdGlvbiAobGlzdHMpIHsKICAgIHZhciB0YWJzID0gbGlzdHMKICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChsaXN0KSB7IHJldHVybiBsaXN0LnN0YXR1cyAhPT0gTGlzdFN0YXR1cy5EZWxldGluZzsgfSkKICAgICAgICAubWFwKGZ1bmN0aW9uIChsaXN0KSB7CiAgICAgICAgdmFyIHNvcnRJZGVudGlmaWVyID0gbGlzdC5uYW1lOwogICAgICAgIHZhciBsb3dlcmNhc2VkTmFtZSA9IGxpc3QubmFtZS50b0xvd2VyQ2FzZSgpOwogICAgICAgIHN3aXRjaCAobGlzdC5uYW1lLnRvTG93ZXJDYXNlKCkpIHsKICAgICAgICAgICAgY2FzZSAnc29jaWFsJzoKICAgICAgICAgICAgICAgIHNvcnRJZGVudGlmaWVyID0gJzAnICsgbG93ZXJjYXNlZE5hbWU7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAncHJvbW90aW9ucyc6CiAgICAgICAgICAgICAgICBzb3J0SWRlbnRpZmllciA9ICcxJyArIGxvd2VyY2FzZWROYW1lOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgJ3VwZGF0ZXMnOgogICAgICAgICAgICAgICAgc29ydElkZW50aWZpZXIgPSAnMicgKyBsb3dlcmNhc2VkTmFtZTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgc29ydElkZW50aWZpZXIgPSAnMycgKyBsb3dlcmNhc2VkTmFtZTsKICAgICAgICB9CiAgICAgICAgdmFyIGxldmVsID0gbGlzdExldmVsKGxpc3QsIGxpc3RzKTsKICAgICAgICB2YXIgcGFyZW50TGlzdElkID0gISFsZXZlbCAmJiBwYXJlbnRMaXN0KGxpc3QsIGxpc3RzKSB8fCB1bmRlZmluZWQ7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAga2V5OiBsaXN0LmlkLAogICAgICAgICAgICBuYW1lOiBsZXZlbCA9PT0gMCA/IGxpc3QubmFtZSA6IGxpc3REaXNwbGF5TmFtZShsaXN0LCBsaXN0cyksCiAgICAgICAgICAgIGNvdW50OiAwLAogICAgICAgICAgICBzb3J0SWRlbnRpZmllcjogc29ydElkZW50aWZpZXIsCiAgICAgICAgICAgIGxpc3RMZXZlbDogbGV2ZWwsCiAgICAgICAgICAgIHBhcmVudExpc3Q6IHBhcmVudExpc3RJZCwKICAgICAgICAgICAgZGVzY2VuZGFudHM6ICEhZGVzY2VuZGFudHMobGlzdCwgbGlzdHMpLmxlbmd0aCwKICAgICAgICAgICAgbGlzdDogbGlzdCwKICAgICAgICB9OwogICAgfSk7CiAgICByZXR1cm4gdGFiczsKfSwgdW5kZWZpbmVkLCBbJ2xpc3RzJ10pOwpleHBvcnQgZGVmYXVsdCBbCiAgICBsaXN0VXBkYXRlUmVkdWNlciwKICAgIGxpc3RDcmVhdGVSZWR1Y2VyLAogICAgbGlzdERlbGV0ZVJlZHVjZXIsCl07Cg=="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/lists.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/lists.ts"],"names":[],"mappings":"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","sourcesContent":["import update from 'immutability-helper';\n\nimport { create, createAction } from '@src/lib/redux';\nimport {\n  List, Tab, MailCount, ListStatus,\n} from '@src/types';\nimport { createSelector } from '@src/lib/selector';\nimport { listLevel, listDisplayName, parentList, descendants } from '@src/lib/mailbox';\nimport { selectMailboxCounts } from '@src/ducks/mailCounts';\n\nexport const {\n  type: LIST_CREATE,\n  action: listCreate,\n  reducer: listCreateReducer,\n} = create<string, List>('LIST_CREATE', {\n  success: (state, meta, payload) => {\n    return update(state, {\n      lists: {\n        $set: state.lists.concat(payload),\n      },\n    });\n  },\n});\n\nexport const {\n  type: LIST_UPDATE,\n  action: listUpdate,\n  reducer: listUpdateReducer,\n} = create<List, List>('LIST_UPDATE', {\n  start: (state, meta) =>\n    update(state, {\n      lists: {\n        $set: state.lists.map(list => list.id === meta.id ? meta : list),\n      },\n    }),\n});\n\nexport const {\n  type: LIST_DELETE,\n  action: listDelete,\n  reducer: listDeleteReducer,\n} = create<List, string>('LIST_DELETE', {\n  success: (state, meta, payload) => {\n    return update(state, {\n      lists: {\n        $set: state.lists.filter(list => list.id !== meta.id),\n      },\n    });\n  },\n});\n\nexport const LIST_CREATE_MOVE = 'LIST_CREATE_MOVE';\nexport const listCreateMove =\n  createAction<string, undefined>(LIST_CREATE_MOVE);\n\n// Returns all lists as tabs with relative structure && counts applied. Memoized on mailCounts\nexport const selectListTabsWithCount = createSelector<\n  null,\n  Tab[]|MailCount,\n  Tab[]\n>(\n  [\n    state => selectMailboxCounts(state),\n    state => selectListStuctureTabs(state),\n  ],\n  (mailCount: MailCount, listTabs: Tab[]) =>\n    listTabs.map((tab) => {\n      tab.count = tab.list && mailCount.listsUnread[tab.list.id] || 0;\n      return tab;\n    }),\n  undefined,\n  ['mailCounts'],\n);\n\n// selectListTabs returns tabs with additional meta data. Need counts appended.\n// This is its own selector since the relative structure of lists should remain the same\n// when only counts are affected\nconst selectListStuctureTabs = createSelector<\n  null,\n  List[],\n  Tab[]\n>(\n    [state => state.lists],\n    (lists: List[]) => {\n      const tabs: Tab[] = lists\n        .filter(list => list.status !== ListStatus.Deleting)\n        .map((list) => {\n          let sortIdentifier = list.name;\n          const lowercasedName = list.name.toLowerCase();\n          switch (list.name.toLowerCase()) {\n            case 'social':\n              sortIdentifier = '0' + lowercasedName;\n              break;\n            case 'promotions':\n              sortIdentifier = '1' + lowercasedName;\n              break;\n            case 'updates':\n              sortIdentifier = '2' + lowercasedName;\n              break;\n            default:\n              sortIdentifier = '3' + lowercasedName;\n          }\n          const level = listLevel(list, lists);\n          const parentListId = !!level && parentList(list, lists) || undefined;\n          return {\n            key: list.id,\n            name: level === 0 ? list.name : listDisplayName(list, lists),\n            count: 0,\n            sortIdentifier,\n            listLevel: level,\n            parentList: parentListId,\n            descendants: !!descendants(list, lists).length,\n            list,\n          };\n        });\n      return tabs;\n    },\n    undefined,\n    ['lists'],\n);\n\nexport default [\n  listUpdateReducer,\n  listCreateReducer,\n  listDeleteReducer,\n];\n"]}]}