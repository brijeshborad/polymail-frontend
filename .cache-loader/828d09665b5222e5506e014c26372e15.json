{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Threads/Threads.tsx","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Threads/Threads.tsx","mtime":1675280254112},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Threads/Threads.tsx","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Threads/Threads.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport { History } from 'history';\nimport { last, filter, startCase } from 'lodash';\n\nimport {\n  Thread,\n  ContactGroup,\n  CommandControlType,\n  MessageBody,\n  MailboxType,\n  Mailbox,\n  Account,\n  ThreadBox,\n  Draft,\n  Action,\n  ThreadCommitMeta,\n  Resource,\n  MailCount,\n  Preferences,\n  UnsubscribeBehavior,\n  Me,\n  ShareLink,\n  KeyCode,\n  BlockContactActionType,\n  Features,\n  OnboardingType,\n  ThemeSetting,\n} from '@src/types';\nimport {\n  RightSidebarTab, Page,\n} from '@src/types/rightSidebar';\n\nimport { HotkeyAction, getHotkey, checkNextHotkeyChange } from '@src/lib/hotkeys';\nimport { parseAddress, addressToEmail } from '@src/lib/address';\nimport { threadMoveUndo, threadCommitsSubmit, threadDisableTrack } from '@src/ducks/threads';\n\nimport './Threads.scss';\n\nimport ThreadList from './components/ThreadList';\nimport ThreadDetail from '@src/components/ThreadDetail';\nimport LeftSidebar from '@src/components/LeftSidebar';\nimport RightSidebar from '@src/components/RightSidebar';\nimport CommandControl from '@src/components/CommandControl';\nimport InboxZero from './components/InboxZero/InboxZero';\nimport Toast from '@src/components/Base/Toast';\nimport { recordEvent, UserEvents } from '@src/lib/analytics';\nimport { UpgradePrompt } from '@src/types/billing';\nimport Confirm, { Props as ConfirmProps } from '@src/components/Base/Confirm';\n// tslint:disable-next-line:max-line-length\nimport BlockConfirm, { Props as BlockConfirmProps } from '@src/components/Base/BlockConfirm/BlockConfirm';\nimport OnboardingFooter from '@src/components/Banner/OnboardingFooter/OnboardingFooter';\nimport { commandControlShow } from '@src/ducks/commandControl';\nimport browserHistory from '@src/lib/browserHistory';\nimport { onboardingPatch } from '@src/ducks/me';\nimport { draftCreate, draftDelete, draftSendNow, draftUpdate } from '@src/ducks/drafts';\nimport { createMailToDraft, isDraftSending } from '@src/lib/draft';\nimport GettingStarted from '@src/components/Onboarding/components/GettingStarted';\nimport KeyboardSymbol from '@src/components/Base/KeyboardSymbol/KeyboardSymbol';\nimport { isElectronMac } from '@src/lib/electron';\nimport AppleIconWhite from '@src/components/Icons/AppleIconWhite.svg';\nimport { hotkeyUpdate } from '@src/ducks/hotkeys';\nimport { filterDelete, filterSet, filterBlockCreate } from '@src/ducks/filters';\nimport { Filter } from '@src/types/filters';\nimport { isDraftBox } from '@src/lib/mailbox';\nimport { toastSet, ConfirmationError } from '@src/ducks/toasts';\nimport { getOnboardingActions } from '@src/lib/OnboardingDispatcher';\nimport { appThemeSet } from '@src/ducks/app';\nimport { leftSidebarToggle } from '@src/ducks/leftSidebar';\nimport TeamJoined from '@src/components/Onboarding/components/TeamJoined';\nimport { rightSidebarTabSelect } from '@src/ducks/rightSidebar';\nimport { AmplitudeEvents, logAmplitudeEvent } from '@src/lib/amplitude-analytics';\nimport ContactSupport from '@src/components/ContactSupport';\n\nexport interface Props {\n  history?: History;\n  contactGroups: { [id: string]: ContactGroup; };\n  selectedThread?: Thread;\n  selectedIds: Map<string, boolean>;\n  bodies: MessageBody[];\n  sessionId: number;\n  selectedMailbox: Mailbox;\n  accounts: Account[];\n  threads: Resource<Thread[]>;\n  selectedContact?: string;\n  commandControlType?: CommandControlType;\n  draft?: Draft;\n  sendingDraft?: Draft;\n  mailCount?: MailCount;\n  unsubscribeLink?: string;\n  preferences?: Preferences;\n  me: Resource<Me>;\n  shareLink?: ShareLink;\n  initialSyncing?: boolean;\n  upgradePrompts: UpgradePrompt;\n  closedBanners: { [id: string]: boolean };\n  rightSidebarCollapsed: boolean;\n  rightSidebarTab?: RightSidebarTab;\n  selectedAccount?: string;\n  schedulingUrl?: string;\n  hotkeyActions?: { [key: string]: number };\n  blockFilter?: Filter;\n  features: Features;\n\n  showCommandCenterOnboarding?: boolean;\n  showCompleteOnboarding?: boolean;\n  showCreateDraftOnboarding?: boolean;\n  showExploreModal?: boolean;\n  showInviteTeamOnboarding?: boolean;\n  showMentionsTabOnboarding?: boolean;\n  rsbOnboardingType?: OnboardingType;\n  showTeamInviteJoinedPrompt?: boolean;\n}\n\nexport interface DispatchProps {\n  dispatchAction: (action: Action<any, any>) => void;\n  selectContact: (email: string) => void;\n  submitCommitMeta: (commitMeta: ThreadCommitMeta) => void;\n  updateSelections: (selections: Map<string, boolean>) => void;\n  closeBanner: (banner: string) => void;\n  collapseRightSidebar: (collapse: boolean) => void;\n  updateHotkey: (hotkey: HotkeyAction) => void;\n}\n\nexport interface State {\n  confirmProps?: ConfirmProps;\n  blockConfirmProps?: BlockConfirmProps;\n}\n\nclass Threads extends React.PureComponent<Props & DispatchProps, State> {\n  constructor(props: Props & DispatchProps) {\n    super();\n\n    const { selectedThread } = props;\n    const lastMessage = selectedThread && selectedThread.messages.length ?\n      last(filter(selectedThread.messages, message => !message.sent)) : undefined;\n    const sender = lastMessage && lastMessage.from;\n    if (sender) {\n      props.selectContact(parseAddress(sender).email);\n    }\n\n    this.state = {};\n  }\n\n  UNSAFE_componentWillMount() {\n    window.addEventListener('focus', this.handleFocus);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('focus', this.handleFocus);\n  }\n\n  componentDidUpdate(oldProps: Props & DispatchProps) {\n    const oldActions = oldProps.hotkeyActions || {};\n    const newActions = this.props.hotkeyActions || {};\n    this.handleHotkeyActionsChange(oldActions, newActions);\n\n    if (document.activeElement && document.activeElement.tagName === 'BODY') {\n      this.handleFocus();\n    }\n\n    const { selectedThread, selectContact, selectedContact } = oldProps;\n    const lastMessage = selectedThread && selectedThread.messages.length ?\n      last(filter(selectedThread.messages, message => !message.sent)) : undefined;\n    const sender = lastMessage && lastMessage.from;\n    const email = sender && parseAddress(sender).email;\n    if (email && (!selectedContact || selectedThread !== this.props.selectedThread)) {\n      selectContact(email);\n    }\n\n    // If CommandControl was dismissed, then reset focus back to threads, unless draft is set\n    if (!this.props.commandControlType && oldProps.commandControlType) {\n        // HACK(SHIN): Do not do anything if contenteditable or search has focus\n      if (document.activeElement) {\n        if (document.activeElement.getAttribute('contenteditable')) {\n          return;\n        }\n        if (document.activeElement.getAttribute('type') === 'search') {\n          return;\n        }\n      }\n\n      if (this.props.draft) {\n        const contentEditableElement = document.querySelector('.compose-editable');\n        const composeElement = contentEditableElement && contentEditableElement.parentElement;\n        if (contentEditableElement instanceof HTMLElement && composeElement) {\n          return;\n        }\n\n        return;\n      }\n      this.handleFocus();\n    }\n\n    // Identify if box type changed to refocus threads list\n    const oldMailbox = this.props.selectedMailbox;\n    const newMailbox = oldProps.selectedMailbox;\n    const boxTypeChanged = (\n      newMailbox && (!oldMailbox || oldMailbox && oldMailbox.type !== newMailbox.type));\n\n    // Return focus on draft delete or mailbox change\n    if (boxTypeChanged || (!this.props.draft && oldProps.draft)) {\n      this.handleFocus();\n    }\n  }\n\n  handleHotkeyActionsChange = (\n    oldActions: { [action: string]: number },\n    newActions: { [action: string]: number },\n  ) => {\n    const {\n      dispatchAction,\n      selectedThread,\n      preferences,\n      submitCommitMeta,\n      blockFilter,\n      unsubscribeLink,\n    } = this.props;\n\n    // Handle DarkMode toggle\n    if (checkNextHotkeyChange(HotkeyAction.ToggleDarkMode, newActions, oldActions)) {\n      const theme = document.body.getAttribute('theme') === 'theme-dark'\n        ? ThemeSetting.Light\n        : ThemeSetting.Dark;\n      dispatchAction(appThemeSet(theme));\n      return;\n    }\n\n    // Handle Unblock toggle\n    if (checkNextHotkeyChange(HotkeyAction.UnblockSender, newActions, oldActions)) {\n      if (blockFilter) {\n        dispatchAction(filterDelete(blockFilter.id));\n        return;\n      }\n    }\n\n    // Handle Disable Tracks by first showing confirm modal\n    if (checkNextHotkeyChange(HotkeyAction.DisableTracks, newActions, oldActions)) {\n      if (selectedThread) {\n        const disableTracksConfirmProps: ConfirmProps = {\n          title: 'Disable Tracking for this Conversation?',\n          message: 'Tracking will be turned off this conversation and no new activity will be recorded. This is not reversible. Would you like to continue?',\n          confirmCopy: 'Ok',\n          cancelCopy: 'Cancel',\n          onConfirm: () => {\n            this.setState({ confirmProps: undefined }, () => {\n              this.props.dispatchAction(threadDisableTrack(selectedThread.id));\n            });\n          },\n          onCancel: () => {\n            this.setState({ confirmProps: undefined });\n          },\n        };\n\n        this.setState({ confirmProps: disableTracksConfirmProps });\n        return;\n      }\n    }\n\n    // Handle Block toggle\n    if (checkNextHotkeyChange(HotkeyAction.BlockSender, newActions, oldActions)) {\n      if (selectedThread) {\n        const senderLastMessage = last(selectedThread.messages);\n        if (!senderLastMessage) {\n          return;\n        }\n\n        if (!preferences) {\n          return;\n        }\n\n        // Handle setting block\n        const sender = addressToEmail(senderLastMessage.from).toLowerCase();\n        const blockConfirmProps: BlockConfirmProps = {\n          title: `Block ${sender}`,\n          // tslint:disable-next-line:max-line-length\n          message: `Messages received from this sender will be blocked and automatically moved to ${startCase(preferences.blockContactAction)}.`,\n          hasUnsubscribe: !!unsubscribeLink,\n          onUnsubscribeClick: () => {\n            // Handle unsubscribe\n            this.setState(\n              { blockConfirmProps: undefined },\n              () => this.handleUnsubscribe(),\n            );\n            logAmplitudeEvent(AmplitudeEvents.Unsubscribe);\n          },\n          onConfirm: () => {\n            // Block filter\n            dispatchAction(filterSet(filterBlockCreate(sender)));\n\n            // Handle sending to proper destination box\n            switch (preferences.blockContactAction) {\n              case BlockContactActionType.Archive:\n                const blockArchiveCommit: ThreadCommitMeta = {\n                  singleResource: selectedThread.id,\n                  box: ThreadBox.Archive,\n                };\n                submitCommitMeta(blockArchiveCommit);\n                break;\n              case BlockContactActionType.Trash:\n                const blockTrashCommit: ThreadCommitMeta = {\n                  singleResource: selectedThread.id,\n                  box: ThreadBox.Trash,\n                };\n                submitCommitMeta(blockTrashCommit);\n                break;\n              default: break;\n            }\n            logAmplitudeEvent(AmplitudeEvents.BlockSender);\n\n            // Remove confirmProps\n            this.setState({ blockConfirmProps: undefined });\n          },\n          onCancel: () => {\n            this.setState({ blockConfirmProps: undefined });\n          },\n        };\n\n        // Set ConfirmProps to confirm block\n        this.setState({ blockConfirmProps });\n      }\n    }\n  }\n\n  handleFocus = () => {\n    if (document.activeElement && document.activeElement.tagName.toLowerCase() !== 'body') {\n      return;\n    }\n\n    const { selectedThread } = this.props;\n    const container = document.getElementsByClassName('infinite-thread-list');\n    const element = selectedThread && document.getElementById(selectedThread.id);\n\n    if (element) {\n      element.focus();\n    } else if (container && container.length) {\n      (container[0] as HTMLElement).focus();\n    }\n  }\n\n  // Ability to handle moves for all threads\n  handleThreadMove = (box: ThreadBox) => {\n    this.props.submitCommitMeta({ box });\n  }\n\n  handleTrialExpiredClose = () => {\n    this.props.closeBanner('TrialExpired');\n  }\n\n  handleThreadDelete = () => {\n    const confirmProps: ConfirmProps = {\n      title: 'Permanently delete this thread?',\n      message: 'Are you sure? This cannot be undone.',\n      confirmCopy: 'Delete',\n      cancelCopy: 'Cancel',\n      onConfirm: () => {\n        this.handleThreadMove(ThreadBox.Trash);\n        this.setState({ confirmProps: undefined });\n      },\n      onCancel: () => this.setState({ confirmProps: undefined }),\n    };\n\n    this.setState({ confirmProps });\n  }\n\n  handleKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {\n    const {\n      history,\n      selectedMailbox,\n      selectedThread,\n      dispatchAction,\n      draft,\n      submitCommitMeta,\n      unsubscribeLink,\n      preferences,\n      rightSidebarCollapsed,\n      collapseRightSidebar,\n      selectedAccount,\n      rightSidebarTab,\n      blockFilter,\n    } = this.props;\n    let handled = false;\n\n    if (document.activeElement && (document.activeElement.tagName === 'INPUT' ||\n      document.activeElement.tagName === 'TEXTAREA')) {\n      return;\n    }\n\n    const hotkey = getHotkey(e);\n    switch (hotkey && hotkey.name || e.keyCode) {\n      case HotkeyAction.Search:\n        handled = true;\n        dispatchAction(hotkeyUpdate(HotkeyAction.Search));\n        break;\n      case HotkeyAction.ShowLinks:\n        if (!!selectedThread) {\n          dispatchAction(rightSidebarTabSelect({\n            rsbTab: RightSidebarTab.LinkExtractor,\n          }));\n          handled = true;\n        }\n        break;\n      case HotkeyAction.KeyboardShortcutGuide:\n        if (hotkey && hotkey.action && rightSidebarTab) {\n          dispatchAction(hotkey.action(rightSidebarTab));\n          handled = true;\n        }\n        break;\n      case HotkeyAction.NewDraft:\n        if (hotkey && hotkey.action) {\n          dispatchAction(hotkey.action);\n          handled = true;\n        }\n        break;\n      // UI Toggle\n      case HotkeyAction.ToggleLSB:\n        handled = true;\n        dispatchAction(leftSidebarToggle(true));\n        break;\n      // UI Toggle\n      case HotkeyAction.ToggleRSB:\n        handled = true;\n        collapseRightSidebar(!rightSidebarCollapsed);\n        break;\n\n      // Drafts\n      case HotkeyAction.Reply:\n      case HotkeyAction.ReplyAll:\n      case HotkeyAction.Forward:\n      case HotkeyAction.ReadLater:\n      case HotkeyAction.Label:\n      case HotkeyAction.ReplyBCC: {\n\n        // Do not trigger if last message recipients is less than two\n        if (hotkey?.name === HotkeyAction.ReplyBCC) {\n          const lastMessage = selectedThread && selectedThread.messages.length ?\n            last(filter(selectedThread.messages, message => !message.sent)) : undefined;\n          if (!lastMessage || lastMessage.to.concat(lastMessage.cc).length < 2) {\n            return;\n          }\n        }\n\n        if (hotkey && hotkey.action && selectedThread) {\n          dispatchAction(hotkey.action);\n          handled = true;\n        }\n        break;\n      }\n\n      // Navigation\n      case HotkeyAction.NavigateInbox:\n      case HotkeyAction.NavigateStarred:\n      case HotkeyAction.NavigateReadLater:\n      case HotkeyAction.NavigateArchive:\n      case HotkeyAction.NavigateTrash:\n      case HotkeyAction.NavigateFollowUp:\n      case HotkeyAction.NavigateSent:\n      case HotkeyAction.NavigateSendLater:\n      case HotkeyAction.NavigateDraft:\n        if (history && selectedMailbox && hotkey && hotkey.route) {\n          history.push(hotkey.route(selectedMailbox, selectedAccount));\n          handled = true;\n        }\n        break;\n      case HotkeyAction.MessageTemplates:\n      case HotkeyAction.CalendarInvite:\n        handled = true;\n        if (hotkey && hotkey.action && draft) {\n          dispatchAction(hotkey.action);\n          handled = true;\n        }\n        break;\n      case HotkeyAction.Inbox:\n        if (selectedThread) {\n          this.handleThreadMove(ThreadBox.Inbox);\n          handled = true;\n        }\n        break;\n      case HotkeyAction.Archive:\n        if (this.props.rsbOnboardingType === OnboardingType.Archive) {\n          dispatchAction(onboardingPatch({\n            skipped: false,\n            type: { steps: { [OnboardingType.Archive]: true } },\n          }));\n          logAmplitudeEvent(AmplitudeEvents.TourStepSeven, { skipped: false });\n        }\n        getOnboardingActions().next(OnboardingType.Archive);\n        if (selectedThread) {\n          this.handleThreadMove(ThreadBox.Archive);\n        }\n        break;\n      case HotkeyAction.CancelFollowup: // Handles cancelling follow up reminders via hotkey\n        if (draft && draft.waiting) {\n          dispatchAction(draftUpdate({ ...draft, waiting: null }));\n          handled = true;\n        } else if (selectedThread && selectedThread.waiting) {\n          const commitMeta = { singleResource: selectedThread.id, waiting: null };\n          dispatchAction(threadCommitsSubmit(commitMeta));\n          handled = true;\n        }\n\n        // Show followup removal\n        if (handled) {\n          dispatchAction(\n            toastSet(new ConfirmationError(\n              'Your followup has been canceled!',\n              true,\n            )),\n          );\n        }\n        break;\n      case HotkeyAction.Trash:\n      case KeyCode.ExtendedDelete:\n      case KeyCode.Delete:\n        // Enable deletions of drafts using normal delete when mailbox is draft type\n        if (selectedMailbox && isDraftBox(selectedMailbox.type) && draft) {\n          const discardDraftIds = Array.from(this.props.selectedIds.keys());\n          if (this.props.selectedMailbox &&\n            this.props.selectedMailbox.type === MailboxType.Drafts &&\n            discardDraftIds.length\n          ) {\n            this.handleSelectedDraftsDelete(discardDraftIds);\n          }\n          handled = true;\n          break;\n        }\n        if (selectedMailbox && selectedMailbox.type === MailboxType.Trash &&\n          selectedThread && selectedThread.box === ThreadBox.Trash) {\n          this.handleThreadDelete();\n          handled = true;\n        } else if (selectedThread && selectedThread.box !== ThreadBox.Trash) {\n          this.handleThreadMove(ThreadBox.Trash);\n          handled = true;\n        }\n\n        break;\n      case HotkeyAction.Discard:\n        // Enable deletions of drafts using normal delete when mailbox is draft type\n        if (\n          selectedMailbox &&\n          [MailboxType.Drafts, MailboxType.SendLater].indexOf(selectedMailbox.type) > -1 &&\n          draft\n        ) {\n          const deleteDraftIds = Array.from(this.props.selectedIds.keys());\n          if (this.props.selectedMailbox &&\n            this.props.selectedMailbox.type === MailboxType.Drafts &&\n            deleteDraftIds.length\n          ) {\n            handled = true;\n            this.handleSelectedDraftsDelete(deleteDraftIds);\n          }\n        } else if (draft && !isDraftSending(draft)) {\n          handled = true;\n          this.handleSelectedDraftsDelete([draft.id]);\n        }\n\n        break;\n      case HotkeyAction.Comment:\n        this.props.updateHotkey(HotkeyAction.Comment);\n        handled = true;\n        break;\n      case HotkeyAction.Undo:\n        if (this.props.rsbOnboardingType === OnboardingType.Undo) {\n          dispatchAction(onboardingPatch({\n            skipped: false,\n            type: { steps: { [OnboardingType.Undo]: true } },\n          }));\n          logAmplitudeEvent(AmplitudeEvents.TourStepEight, { skipped: false });\n        }\n        getOnboardingActions().next(OnboardingType.Undo);\n        if (selectedMailbox) {\n          this.props.dispatchAction(threadMoveUndo(selectedMailbox));\n        }\n        break;\n      case HotkeyAction.ToggleUnread:\n        if (selectedThread) {\n          submitCommitMeta({ read: !selectedThread.read });\n        }\n        handled = true;\n        break;\n      case HotkeyAction.ToggleStar:\n        if (selectedThread) {\n          submitCommitMeta({ starred: !selectedThread.starred });\n        }\n        handled = true;\n        break;\n      case HotkeyAction.NavigationCenter:\n        this.props.dispatchAction(commandControlShow(CommandControlType.Navigation));\n        handled = true;\n        break;\n      case HotkeyAction.ToggleCommandControl:\n        if (hotkey && hotkey.action) {\n          const type = draft && !isDraftSending(draft)\n            ? CommandControlType.Draft\n            : CommandControlType.Thread;\n          this.props.dispatchAction(hotkey.action(type));\n          handled = true;\n        }\n        break;\n      case HotkeyAction.UnblockSender:\n      case HotkeyAction.BlockSender:\n        if (this.props.rsbOnboardingType === OnboardingType.Block) {\n          this.props.dispatchAction(onboardingPatch({\n            skipped: false,\n            type: { steps: { [OnboardingType.Block]: true }  },\n          }));\n        }\n        getOnboardingActions().next(OnboardingType.Block);\n        if (blockFilter) {\n          dispatchAction(hotkeyUpdate(HotkeyAction.UnblockSender));\n        } else {\n          dispatchAction(hotkeyUpdate(HotkeyAction.BlockSender));\n        }\n        return;\n\n      case HotkeyAction.MuteConversation:\n      case HotkeyAction.UnmuteConversation:\n        if (selectedThread) {\n          const muteCommitMeta = {\n            singleResource: selectedThread.id,\n            muted: !selectedThread.muted,\n          };\n          submitCommitMeta(muteCommitMeta);\n        }\n        return;\n\n      case HotkeyAction.Unsubscribe:\n        // Handle unsubscribe\n        if (selectedThread && unsubscribeLink && preferences) {\n          this.handleUnsubscribe();\n          handled = true;\n        }\n        break;\n      case HotkeyAction.CopySchedulingUrl:\n        this.props.dispatchAction(commandControlShow(CommandControlType.SchedulingPages));\n        handled = true;\n        break;\n\n      // send immediately with double cmd/ctrl+enter\n      case HotkeyAction.Send:\n      case HotkeyAction.SendImmediately:\n        if (this.props.sendingDraft) {\n          this.props.dispatchAction(draftSendNow(this.props.sendingDraft));\n        }\n        break;\n\n      default:\n        break;\n    }\n\n    if (handled) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n  }\n\n  handleUndo = () => {\n    const { selectedMailbox } = this.props;\n    if (selectedMailbox) {\n      this.props.dispatchAction(threadMoveUndo(selectedMailbox));\n    }\n  }\n\n  handleUnsubscribe = () => {\n    const { selectedThread, unsubscribeLink, preferences, submitCommitMeta } = this.props;\n    if (selectedThread && unsubscribeLink && preferences) {\n      window.open(unsubscribeLink, '_blank');\n      recordEvent(UserEvents.Unsubscribed);\n      switch (preferences.unsubscribeBehavior) {\n        case UnsubscribeBehavior.Archive:\n          submitCommitMeta({\n            singleResource: selectedThread.id,\n            box: ThreadBox.Archive,\n          });\n          break;\n        case UnsubscribeBehavior.Trash:\n          submitCommitMeta({\n            singleResource: selectedThread.id,\n            box: ThreadBox.Trash,\n          });\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  handleStartOnboarding = () => {\n    const { dispatchAction, accounts, preferences, features } = this.props;\n    dispatchAction(onboardingPatch({ skipped: false, type: { exploreModal: true } }));\n    if (!preferences) {\n      return;\n    }\n\n    const mailToString = 'Poly Bot <onboarding@polymail.io>?subject=⚡️ '\n    + 'Send your first message with tracking!&body=Hello! 👋🏼\\n\\n'\n    + 'Polymail automatically gives you insights on the emails you send!'\n    + '\\n\\n'\n    + 'Try clicking send to see how it works!';\n    browserHistory.push('/mail');\n    const draft = createMailToDraft(accounts[0], preferences, features, mailToString);\n    dispatchAction(draftCreate(draft));\n  }\n\n  handleSelectedDraftsDelete = (ids: string[]) => {\n    const draftIds = ids;\n    const title = draftIds.length > 1\n      ? `Delete ${draftIds.length} drafts?`\n      : 'Delete this draft?';\n    const message = draftIds.length > 1\n      ? 'These drafts will be permanently deleted.'\n      : 'This draft will be permanently deleted.';\n    const discardProps: ConfirmProps = {\n      title,\n      message,\n      onConfirm: () => {\n        draftIds.forEach((draftId) => {\n          this.props.dispatchAction(draftDelete(draftId));\n        });\n        this.setState({ confirmProps: undefined });\n      },\n      confirmCopy: 'OK',\n      onCancel: () => {\n        this.setState({ confirmProps: undefined });\n      },\n    };\n\n    this.setState({ confirmProps: discardProps });\n  }\n\n  renderOnboardingFooter = () => {\n    const {\n      dispatchAction,\n      accounts,\n      preferences,\n      showCompleteOnboarding,\n      showCreateDraftOnboarding,\n      showCommandCenterOnboarding,\n      showMentionsTabOnboarding,\n      showInviteTeamOnboarding,\n      features,\n    } = this.props;\n\n    const onboardingHandlers = [\n      {\n        id: 'createDraft',\n        title: 'Real-time insights on every message',\n        message: 'Track when people open, click' +\n         ' and engage with your emails by sending them with Polymail',\n        buttonCopy: 'Try it',\n        onClick: () => {\n          if (preferences) {\n            const mailToString = 'Poly Bot <onboarding@polymail.io>?subject=⚡️ '\n            +  'Send your first message with tracking!&body=Hello! 👋🏼\\n\\n'\n            + 'Polymail automatically tracks your messages to notify you when they’ve been read.'\n            + '\\n\\n'\n            + 'Try clicking send to see how it works!';\n            const draft = createMailToDraft(accounts[0], preferences, features, mailToString);\n            dispatchAction(draftCreate(draft));\n          }\n          dispatchAction(onboardingPatch({ skipped: false, type: { createDraft: true } }));\n        },\n        onSkip: () => {\n          dispatchAction(onboardingPatch({\n            skipped: true,\n            type: {\n              createDraft: true,\n              sendMessage: true,\n              threadDetailTracking: true,\n            },\n          }));\n        },\n      },\n      {\n        id: 'sequences',\n        title: 'Automate outreach with Sequences',\n        message: 'Reaching out to potential customers or clients?' +\n          ' Automate your email outreach and follow-up with Sequences.',\n        buttonCopy: 'Try Sequences',\n        onClick: () => {\n          dispatchAction(onboardingPatch({ skipped: false, type: { sequences: true } }));\n          browserHistory.push('/sequences');\n        },\n        onSkip: () => {\n          dispatchAction(onboardingPatch({ skipped: true, type: { sequences: true } }));\n        },\n      },\n      {\n        id: 'scheduling',\n        title: 'Schedule meetings instantly',\n        message: 'Create your personal Polymail calendar page ' +\n          ' to share available meeting times and let people book meetings with you instantly.',\n        buttonCopy: 'Set Up Calendar',\n        onClick: () => {\n          browserHistory.push('/settings/calendar');\n          dispatchAction(onboardingPatch({ skipped: false, type: { scheduling: true } }));\n        },\n        onSkip: () => {\n          dispatchAction(onboardingPatch({ skipped: true, type: { scheduling: true } }));\n        },\n      },\n      {\n        id: 'downloadNativeApps',\n        title: 'You\\'re all set!',\n        message: 'Download the Polymail apps for Mac and iOS'\n          + ' for full access to messages and notifications on the go.',\n        buttonCopy: 'Download',\n        onClick: () => {\n          dispatchAction(onboardingPatch({ skipped: false, type: { downloadNativeApps: true } }));\n          logAmplitudeEvent(AmplitudeEvents.TourStepThirteen, { skipped: false });\n        },\n        onSkip: () => {\n          dispatchAction(onboardingPatch({ skipped: false, type: { downloadNativeApps: true } }));\n          logAmplitudeEvent(AmplitudeEvents.TourStepThirteen, { skipped: true });\n        },\n      },\n      {\n        id: 'commandCenter',\n        title: 'Get around Polymail faster ✨',\n        messageHtml: (\n          <div>\n            {'Use '}\n              <KeyboardSymbol character={'Cmd'} />\n              <KeyboardSymbol character={KeyCode.J} />\n            {' to easily navigate and perform actions in Polymail!'}\n          </div>\n        ),\n        buttonCopy: 'Try it',\n        onClick: () => {\n          dispatchAction(commandControlShow(CommandControlType.Thread));\n          dispatchAction(onboardingPatch({ skipped: false, type: { commandCenter: true } }));\n        },\n        onSkip: () => {\n          dispatchAction(onboardingPatch({ skipped: true, type: { commandCenter: true } }));\n        },\n      },\n      {\n        id: 'mentions',\n        title: 'You\\'ve been mentioned!',\n        message: 'Someone @mentioned you in a comment! Click the Mentions tab'\n        + ' to view conversations you\\'ve been @mentioned in',\n        buttonCopy: 'See Mentions',\n        onClick: () => {\n          browserHistory.push('/mentions');\n          dispatchAction(onboardingPatch({ skipped: false, type: { mentionsTab: true } }));\n        },\n        onSkip: () => {\n          dispatchAction(onboardingPatch({ skipped: false, type: { mentionsTab: true } }));\n        },\n      },\n      {\n        id: 'teamInvite',\n        title: 'Just Add Teammates',\n        message: 'To get the most out of Polymail, invite some coworkers to start collaborating',\n        buttonCopy: 'Invite Teammates',\n        onClick: () => {\n          dispatchAction(hotkeyUpdate(HotkeyAction.InviteTeamMembers));\n        },\n        onSkip: () => {\n          dispatchAction(onboardingPatch({ skipped: true, type: { inviteTeamMembers: true } }));\n        },\n      },\n    ];\n    let props: any|undefined;\n    if (showCommandCenterOnboarding) {\n      props = onboardingHandlers[4];\n    }\n\n    if (showCompleteOnboarding) {\n      props = onboardingHandlers[3];\n      const downloadIOSClick = () => {\n        window.open('https://itunes.apple.com/us/app/polymail/id1082058386?mt=8', '_blank');\n      };\n\n      const downloadElectronClick = () => {\n        window.open(\n          'https://polymail.io/download?download_mac=1&utm_source=webapp',\n          '_blank',\n        );\n      };\n      props.buttonHtml = (\n        <div className=\"download-buttons\">\n          <div className=\"info-section\">\n            Download Polymail for:\n            {!isElectronMac &&\n              <button\n                className=\"download-button\"\n                onClick={downloadElectronClick}\n              >\n                <AppleIconWhite height=\"15px\" width=\"15px\" className=\"icon\" />\n                Mac\n              </button>\n            }\n            <button\n              onClick={downloadIOSClick}\n              className=\"download-button\"\n            >\n              <AppleIconWhite height=\"15px\" width=\"15px\" className=\"icon\" />\n              iOS\n            </button>\n          </div>\n        </div>\n      );\n      props.skipCopy = 'Done';\n    }\n\n    if (showMentionsTabOnboarding) {\n      props = onboardingHandlers[5];\n    }\n\n    if (showInviteTeamOnboarding) {\n      props = onboardingHandlers[6];\n    }\n\n    if (showCreateDraftOnboarding) {\n      props = onboardingHandlers[0];\n    }\n\n    if (!props) {\n      return null;\n    }\n\n    return (\n      <OnboardingFooter\n        {...props}\n      />\n    );\n  }\n\n  render() {\n    const {\n      selectedMailbox,\n      sessionId,\n      mailCount,\n      selectedThread,\n      draft,\n      initialSyncing,\n      showExploreModal,\n      showTeamInviteJoinedPrompt,\n    } = this.props;\n    const { confirmProps, blockConfirmProps } = this.state;\n\n    const isInboxZero = mailCount && mailCount.inboxRead + mailCount.inboxUnread === 0\n      && !draft\n      && !selectedThread\n      && !initialSyncing\n      && selectedMailbox && !selectedMailbox.query\n      && selectedMailbox.type === MailboxType.Inbox;\n    // TODO (Cindy & Shin): Figure out better way of connecting container\n    const ThreadListConnect = ThreadList as any;\n    const LeftSidebarConnect = LeftSidebar as any;\n\n    return (\n      <div\n        className=\"threads\"\n        onKeyDown={this.handleKeyDown}\n      >\n        <ContactSupport />\n        {blockConfirmProps &&\n          <BlockConfirm\n            {...blockConfirmProps}\n          />\n        }\n        {confirmProps &&\n          <Confirm\n            {...confirmProps}\n          />\n        }\n        <div className=\"main-app\">\n          <LeftSidebarConnect accounts={[]} />\n          <ThreadListConnect\n            onUndo={this.handleUndo}\n          />\n          {!isInboxZero &&\n            <ThreadDetail\n              onThreadDelete={this.handleThreadDelete}\n            />\n          }\n          {isInboxZero && <InboxZero id={sessionId} />}\n          <RightSidebar page={Page.Threads} />\n          <CommandControl default={CommandControlType.Thread}/>\n        </div>\n        <Toast />\n        {this.renderOnboardingFooter()}\n        {showTeamInviteJoinedPrompt && (\n          <TeamJoined />\n        )}\n        {showExploreModal && !showTeamInviteJoinedPrompt &&\n          <GettingStarted\n            onNext={this.handleStartOnboarding}\n          />\n        }\n      </div>\n    );\n  }\n}\n\nexport default Threads;\n"]}]}