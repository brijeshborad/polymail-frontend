{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/hotkeys.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/hotkeys.ts","mtime":1675280254056},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnOwppbXBvcnQgeyBBY3Rpb25TdGF0dXMgfSBmcm9tICdAc3JjL3R5cGVzJzsKaW1wb3J0IHsgSE9US0VZX1VQREFURSwgSE9US0VZX1NVR0dFU1QgfSBmcm9tICdAc3JjL2R1Y2tzL2hvdGtleXMnOwppbXBvcnQgeyBIb3RrZXlBY3Rpb24sIGdldEhvdGtleUJ5TmFtZSB9IGZyb20gJ0BzcmMvbGliL2hvdGtleXMnOwppbXBvcnQgeyB0b2FzdFNldCwgQ29uZmlybWF0aW9uRXJyb3IsIENvbmZpcm1hdGlvblBvc2l0b24gfSBmcm9tICdAc3JjL2R1Y2tzL3RvYXN0cyc7CmltcG9ydCB7IHNlbGVjdENhbGVuZGFyU2NoZWR1bGluZ1VybCB9IGZyb20gJ0BzcmMvZHVja3Mvc2NoZWR1bGluZyc7CmltcG9ydCB7IGhhbmRsZVNjaGVkdWxpbmdVcmxDb3B5IH0gZnJvbSAnQHNyYy9saWIvc2NoZWR1bGluZyc7CmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JzsKaW1wb3J0IHsgbm93IH0gZnJvbSAnQHNyYy9saWIvZGF0ZXRpbWUnOwp2YXIgaG90a2V5VXBkYXRlRXBpYyA9IGZ1bmN0aW9uIChhY3Rpb24kLCBzdG9yZSwgZGVwcykgewogICAgcmV0dXJuIGFjdGlvbiQub2ZUeXBlKEhPVEtFWV9VUERBVEUpCiAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoYWN0aW9uKSB7IHJldHVybiBhY3Rpb24uc3RhdHVzID09PSBBY3Rpb25TdGF0dXMuU3RhcnQ7IH0pCiAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoYWN0aW9uKSB7IHJldHVybiBhY3Rpb24ubWV0YSA9PT0gSG90a2V5QWN0aW9uLkNvcHlTY2hlZHVsaW5nVXJsOyB9KQogICAgICAgIC5kbyhmdW5jdGlvbiAoYWN0aW9uKSB7CiAgICAgICAgdmFyIHVybCA9IHNlbGVjdENhbGVuZGFyU2NoZWR1bGluZ1VybChzdG9yZS5nZXRTdGF0ZSgpKTsKICAgICAgICBpZiAodXJsKSB7CiAgICAgICAgICAgIGhhbmRsZVNjaGVkdWxpbmdVcmxDb3B5KHVybCk7CiAgICAgICAgfQogICAgfSkKICAgICAgICAuZmxhdE1hcChmdW5jdGlvbiAoYWN0aW9uKSB7IHJldHVybiBPYnNlcnZhYmxlLm9mKHRvYXN0U2V0KG5ldyBDb25maXJtYXRpb25FcnJvcignQ2FsZW5kYXIgbGluayBjb3BpZWQgdG8gY2xpcGJvYXJkIScsIHRydWUpKSk7IH0pOwp9OwovLyBEZWJvdW5jZSB0aGF0IHByZXZlbnRzIGhvdGtleSBzdWdnZXN0aW9uIGZvciBzaG93aW5nIGZvciAxMCBtaW51dGVzCnZhciBob3RrZXlEZWJvdW5jZU1hcCA9IHt9Owp2YXIgaG90a2V5U3VnZ2VzdEVwaWMgPSBmdW5jdGlvbiAoYWN0aW9uJCwgc3RvcmUsIGRlcHMpIHsKICAgIHJldHVybiBhY3Rpb24kLm9mVHlwZShIT1RLRVlfU1VHR0VTVCkKICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChhY3Rpb24pIHsgcmV0dXJuIGFjdGlvbi5zdGF0dXMgPT09IEFjdGlvblN0YXR1cy5TdGFydCAmJgogICAgICAgICEhc3RvcmUuZ2V0U3RhdGUoKS5zaG93SG90a2V5U3VnZ2VzdGlvbnM7IH0pCiAgICAgICAgLmRlYm91bmNlVGltZSgxMjAwKSAvLyBBZGQgMS4yIHNlYyBkZWxheQogICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGEpIHsKICAgICAgICB2YXIgdGhyZXNob2xkID0gaG90a2V5RGVib3VuY2VNYXBbYS5tZXRhXTsKICAgICAgICBpZiAodGhyZXNob2xkICYmIG5vdygpLmlzQmVmb3JlKHRocmVzaG9sZCkpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICB2YXIgbmV3VGhyZXNob2xkRGF0ZSA9IG1vbWVudChub3coKSkuYWRkKDEwLCAnbWludXRlcycpOwogICAgICAgIGhvdGtleURlYm91bmNlTWFwW2EubWV0YV0gPSBuZXdUaHJlc2hvbGREYXRlOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfSkKICAgICAgICAubWFwKGZ1bmN0aW9uIChhY3Rpb24pIHsKICAgICAgICB2YXIgaG90a2V5ID0gZ2V0SG90a2V5QnlOYW1lKGFjdGlvbi5tZXRhKTsKICAgICAgICB2YXIgZGVzY3JpcHRpb24gPSAiTmV4dCB0aW1lLCB0cnkgXCIiICsgYWN0aW9uICsgIlwiIGluIHRoZSBDb21tYW5kIENlbnRlciI7CiAgICAgICAgLy8gQ2hvb3NlIHdoaWNoIGhvdGtleSB0byBzaG93CiAgICAgICAgaWYgKGhvdGtleSA9PT0gbnVsbCB8fCBob3RrZXkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGhvdGtleS50ZXh0KSB7CiAgICAgICAgICAgIGRlc2NyaXB0aW9uID0gIk5leHQgdGltZSB0cnkgIjsKICAgICAgICB9CiAgICAgICAgdmFyIHRvYXN0ID0gbmV3IENvbmZpcm1hdGlvbkVycm9yKGRlc2NyaXB0aW9uLCB0cnVlLCBDb25maXJtYXRpb25Qb3NpdG9uLlRvcENlbnRlcik7CiAgICAgICAgdG9hc3QuaG90a2V5ID0gaG90a2V5OwogICAgICAgIHJldHVybiB0b2FzdFNldCh0b2FzdCk7CiAgICB9KTsKfTsKZXhwb3J0IGRlZmF1bHQgWwogICAgaG90a2V5VXBkYXRlRXBpYywKICAgIGhvdGtleVN1Z2dlc3RFcGljLApdOwo="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/hotkeys.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/hotkeys.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs';\nimport { Epic } from 'redux-observable';\n\nimport { ActionStatus, Action, StoreState } from '@src/types';\nimport { Deps } from '@src/lib/epic';\nimport { HOTKEY_UPDATE, HOTKEY_SUGGEST } from '@src/ducks/hotkeys';\nimport { HotkeyAction, getHotkeyByName } from '@src/lib/hotkeys';\nimport { toastSet, ConfirmationError, ConfirmationPositon } from '@src/ducks/toasts';\nimport { selectCalendarSchedulingUrl } from '@src/ducks/scheduling';\nimport { handleSchedulingUrlCopy } from '@src/lib/scheduling';\nimport moment, { Moment } from 'moment';\nimport { now } from '@src/lib/datetime';\n\nconst hotkeyUpdateEpic: Epic<Action<\n  HotkeyAction|Error|ConfirmationError|null,\n  any\n>, StoreState, Deps> = (action$, store, deps) =>\n    action$.ofType(HOTKEY_UPDATE)\n      .filter(action => action.status === ActionStatus.Start)\n      .filter(action => action.meta === HotkeyAction.CopySchedulingUrl)\n      .do((action) => {\n        const url = selectCalendarSchedulingUrl(store.getState());\n        if (url) {\n          handleSchedulingUrlCopy(url);\n        }\n      })\n      .flatMap(action => Observable.of(toastSet(new ConfirmationError(\n        'Calendar link copied to clipboard!',\n        true,\n      ))),\n    );\n\n// Debounce that prevents hotkey suggestion for showing for 10 minutes\nconst hotkeyDebounceMap: { [key: string]: Moment} = {};\nconst hotkeySuggestEpic: Epic<Action<\n  HotkeyAction | string | Error | null,\n  any\n>, StoreState, Deps> = (action$, store, deps) =>\n    action$.ofType(HOTKEY_SUGGEST)\n      .filter(action => action.status === ActionStatus.Start &&\n        !!store.getState().showHotkeySuggestions,\n      )\n      .debounceTime(1200) // Add 1.2 sec delay\n      .filter((a: Action<string, any>) => {\n        const threshold = hotkeyDebounceMap[a.meta];\n        if (threshold && now().isBefore(threshold)) {\n          return false;\n        }\n\n        const newThresholdDate = moment(now()).add(10, 'minutes');\n        hotkeyDebounceMap[a.meta] = newThresholdDate;\n        return true;\n      })\n      .map((action: Action<HotkeyAction|string, any>) => {\n        const hotkey = getHotkeyByName(action.meta);\n        let description = `Next time, try \"${action}\" in the Command Center`;\n\n        // Choose which hotkey to show\n        if (hotkey?.text) {\n          description = `Next time try `;\n        }\n        const toast = new ConfirmationError(\n          description,\n          true,\n          ConfirmationPositon.TopCenter,\n        );\n        toast.hotkey = hotkey;\n        return toastSet(toast);\n      });\n\nexport default [\n  hotkeyUpdateEpic,\n  hotkeySuggestEpic,\n];\n"]}]}