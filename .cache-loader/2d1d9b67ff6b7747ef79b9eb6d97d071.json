{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/commit/FileUploadSync.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/commit/FileUploadSync.ts","mtime":1675280254124},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/commit/FileUploadSync.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/worker/commit/FileUploadSync.ts"],"names":[],"mappings":"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","sourcesContent":["import Cache, { Stores } from '@src/lib/db';\nimport { Observable, Observer, Subject, Subscription, AjaxError } from 'rxjs';\nimport { Combiner, rateLimiter } from '@src/lib/rx';\nimport { Backoff } from '@src/worker/Backoff';\nimport { ApiError } from '@src/api/base';\nimport {\n  CommitStatus,\n  FileUploadMeta,\n  CloudFile,\n  Commit,\n  AttachmentMeta,\n} from '@src/types';\nimport bus, { getBus, BusEvent, BusEventName } from '@src/worker/bus';\nimport { captureException } from '@sentry/browser';\nimport { CloudFileClient, CloudFileAPI } from '@src/api/cloudFile';\nimport {\n  sendAttachmentMetaUpdated,\n  sendDraftAttachmentAddFailed,\n} from '@src/worker/bridge/workerEvents';\n\nexport const resetFileUploadStatuses = (): Observable<null> => {\n  return Cache.list<FileUploadMeta>(\n    Stores.FileUploads,\n    commit => commit.status === CommitStatus.Processing,\n  )\n    .flatMap((commits: FileUploadMeta[]) => {\n      return Cache.load(\n        Stores.FileUploads,\n        commits.map(c => ({ ...c, status: CommitStatus.Ready })),\n      );\n    });\n};\n\nexport const MAX_COMMITS_PER_BATCH = 20;\n\n// FileUploadSync continuously sends idempotent commits to the API.\nexport class FileUploadSync {\n  // State\n  readonly workerId: string;\n  isRunning: boolean;\n  fetchRatelimit: number;\n  resolveRatelimit: number;\n  private backoff: Backoff;\n  private cancelSignal: Subject<null>;\n  private retrigger: boolean;\n\n  // Dependencies\n  private api: CloudFileAPI;\n  private bus: Subject<BusEvent>;\n  private sub: Subscription;\n\n  constructor(api: CloudFileAPI = new CloudFileClient()) {\n    this.workerId = 'FileUploadSync';\n    this.isRunning = false;\n    // HACK(SHIN): Set backoff to 30 seconds until we have a better retry mechanism\n    this.backoff = new Backoff(this.workerId, 30);\n    this.cancelSignal = new Subject<null>();\n    this.retrigger = false;\n\n    // how often FileUploadSync fetches from cache\n    this.fetchRatelimit = 1000; // in milliseconds\\\n\n    // the rate limit how often we make calls to the api\n    this.resolveRatelimit = 1000; // in milliseconds\n\n    this.api = api;\n    this.bus = getBus();\n  }\n\n  init() {\n    // Listen for bus events\n    if (!this.sub) {\n      this.sub = this.bus.subscribe({\n        next: (event: BusEvent) => {\n          this.handleBusEvent(event);\n        },\n        error: (e: Error) => {\n          captureException(e);\n        },\n      });\n    }\n  }\n\n  deinit() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  // deleteItems is ignored by FileUploadSync as we\n  // want to retain commits on clearCache\n  clearCache(): Observable<null> {\n    if (this.isRunning) {\n      this.cancelSignal.next(null);\n    }\n\n    // clearCache is triggered by HistorySync\n    // Don't want to clear commits this way\n    this.backoff.clearErrors();\n    return Observable.of(null);\n  }\n\n  // reset marks any commits in `Processing` status as `Ready`\n  reset(): Observable<null> {\n    return Observable.create((runner: Observer<null>) => {\n      const combiner = new Combiner<FileUploadMeta[]>();\n      combiner.subscribe({\n        next: (commits: FileUploadMeta[]) => {\n          Cache.load(\n            Stores.FileUploads,\n            commits\n              .filter(commit => commit.status === CommitStatus.Processing)\n              .map(commit => ({ ...commit, status: CommitStatus.Ready })),\n          ).subscribe({\n            error: (e: Error) => {\n              combiner.error(e);\n            },\n            complete: () => {\n              combiner.complete();\n            },\n          });\n        },\n        error: (e: Error) => {\n          runner.error(e);\n        },\n        complete: () => {\n          runner.next(null);\n          runner.complete();\n        },\n      });\n      combiner.run(this.fetch());\n    });\n  }\n\n  run(): Observable<null> {\n    return Observable.create((runner: Observer<null>) => {\n      if (!this.backoff.isReady()) {\n        runner.next(null);\n        runner.complete();\n        return;\n      }\n      if (this.isRunning) {\n        runner.next(null);\n        runner.complete();\n        return;\n      }\n      this.isRunning = true;\n\n      // Allow commits to buffer\n      const fetchLimiter = rateLimiter<FileUploadMeta[]>(this.fetchRatelimit);\n\n      // Throttle API calls\n      const resolveLimiter = rateLimiter<Error|null>(this.resolveRatelimit);\n\n      // Error aggregator for each batch of CommitSync\n      const errors: Error[] = [];\n\n      const combiner = new Combiner<FileUploadMeta[]>();\n      combiner.takeUntil(this.cancelSignal).flatMap((commits: FileUploadMeta[]) => {\n        if (commits && commits.length === 0) {\n          // Trigger Commit Sync when completed\n          bus.triggerSync('CommitSync');\n          combiner.complete();\n          return Observable.empty();\n        }\n\n        // Merge commits with the same resource type and id\n        return Observable.of(commits);\n\n      })\n      .subscribe({\n        next: (commits: FileUploadMeta[]) => {\n          // Try triggering CommitSync on every next process\n          bus.triggerSync('CommitSync');\n\n          if (commits.length <= MAX_COMMITS_PER_BATCH) {\n            resolveLimiter(this.resolve(commits.slice(0, MAX_COMMITS_PER_BATCH))).subscribe({\n              next: (e: Error|null) => {\n                // Push errors to aggregator\n                if (e instanceof Error) {\n                  errors.push(e);\n                }\n              },\n              error: (e: Error) => combiner.error(e),\n              complete: () => {\n                // NOTE(SHIN): If we had any errors after finishing the last page, error out\n                // to trigger backoff (we only pass through AJAX/or 500s)\n                if (!!errors.length) {\n                  combiner.error(errors[0]);\n                  return;\n                }\n\n                // Otherwise run another instance of FileUploadSync (terminates if empty)\n                combiner.run(fetchLimiter(this.fetch()));\n              },\n            });\n          } else {\n            resolveLimiter(this.resolve(commits.slice(0, MAX_COMMITS_PER_BATCH))).subscribe({\n              next: (e: Error | null) => {\n                // Push errors to aggregator\n                if (e instanceof Error) {\n                  errors.push(e);\n                }\n              },\n              error: (e: Error) => {\n                combiner.error(e);\n              },\n              complete: () => { // Recurses the entire set by running again with slice (len-Max)\n                return combiner.run(\n                  Observable.of(commits.splice(MAX_COMMITS_PER_BATCH)),\n                );\n              },\n            });\n          }\n        },\n        error: (e: Error) => {\n          this.isRunning = false;\n          this.backoff.setError(e);\n\n          // Try retriggering sync after error\n          if (this.backoff.until) {\n            const delay = this.backoff.until.getTime() - new Date().getTime() + 100;\n            global.setTimeout(\n              () => bus.triggerSync(this.workerId),\n              delay,\n            );\n          }\n\n          runner.error(e);\n        },\n        complete: () => {\n          this.isRunning = false;\n          this.backoff.clearErrors();\n          runner.next(null);\n          runner.complete();\n\n          // Handle retrigger\n          if (this.retrigger) {\n            this.retrigger = false;\n            bus.triggerSync(this.workerId);\n          }\n        },\n      });\n\n      // Buffer initial fetch because it's common for commits to be submitted\n      // together. And we want to resolve after the batch has been submitted\n      // rather than on the first one.\n      combiner.run(Observable.of(null)\n        .delay(this.fetchRatelimit)\n        .flatMap(() => this.fetch()),\n      );\n    });\n  }\n\n  // Resolves resolves a batch of commits with the API. Resolves commit on completion\n  private resolve(metas: FileUploadMeta[]): Observable<Error|null> {\n    return Observable.zip(\n      // Save processing state\n      ...metas.map((commit) => {\n        return Cache.save(Stores.FileUploads, { ...commit, status: CommitStatus.Processing });\n      }),\n    )\n    .flatMap(() => {\n      return Observable.merge(\n        ...metas.map((meta): Observable<Error|null> => {\n          let cloudFile: CloudFile;\n          return this.api.uploadWithProgress(meta.meta.file!)\n            .filter((result) => {\n              if (typeof result === 'number') {\n                const progressMeta: AttachmentMeta = {\n                  ...meta.meta,\n                  progress: result >= 1 ? 0.99 : result,\n                };\n                sendAttachmentMetaUpdated(progressMeta);\n                return false;\n              }\n\n              return true;\n            })\n            .flatMap((result: CloudFile) => {\n              cloudFile = result;\n\n              // Save meta and fetch commit meta\n              return Cache.deleteSingle(Stores.FileUploads, meta.id)\n                .flatMap(() => this.fetchCommit(meta));\n            })\n            .flatMap((commits) => {\n              const commit = commits[0];\n              if (commit && commit.payload && cloudFile) {\n                const updatedCommit: Commit = {\n                  ...commit,\n                  status: CommitStatus.Ready,\n                  payload: {\n                    ...commit.payload,\n                    ...cloudFile,\n                  },\n                };\n                return Cache.save(Stores.Commits, updatedCommit);\n              }\n\n              return Observable.of(null);\n            })\n            .catch((e: Error) => {\n              // When error is of type 400..<500, mark as error and do not process\n              const apiError = (e as ApiError);\n\n              // Marks ajax errors and type errors similar to 500/connectivity errors to retry\n              const ajaxZeroError = (e as AjaxError).status === 0;\n\n              // Set back to ready on 500s and ajaxError zeroes and throw out\n              if ((apiError.code && apiError.code >= 500 && apiError.code < 600) || ajaxZeroError) {\n\n                const isDirectory = meta.meta.file &&\n                  ['app', ''].indexOf(meta.meta.file.type) > -1;\n                const emptyFile = meta.meta.file && meta.meta.file.size <= 0;\n\n                // NOTE(SHIN): Specialized error handler when file is directory/app package\n                // to clear out any stuck commits should be safe to remove after March 10, 2020\n                if (emptyFile || isDirectory) {\n                  return Cache.deleteSingle(Stores.FileUploads, meta.id)\n                    .flatMap(() => this.fetchCommit(meta))\n                    .flatMap((commits: Commit[]) => {\n                      const commit = commits[0];\n                      if (commit && commit.rehydrateMeta) {\n                        sendDraftAttachmentAddFailed(commit.rehydrateMeta, new Error('Invalid file type. Please try again'));\n                      }\n\n                      // Handle updating failed commit, replace payload with error\n                      const failedCommit: Commit = {\n                        ...commit,\n                        status: CommitStatus.Error,\n                        rehydrateMeta: {\n                          ...commit.rehydrateMeta,\n                          error: new Error('Invalid file type. Please try again'),\n                        },\n                      };\n                      return Cache.save(Stores.Commits, failedCommit);\n                    });\n                }\n\n                // Reset commit to try again with backoff\n                return Cache.save(Stores.FileUploads, {\n                  ...meta,\n                  status: CommitStatus.Ready,\n                }).flatMap(() => {\n                  // HACK(SHIN): Does not reset unless we do a fetch immediately after.\n                  // TODO(SHIN): Resolve this hack later\n                  return Cache.get(Stores.FileUploads, meta.id! || '');\n                })\n                .flatMap((result) => { // Pass through error object to be handled on (next) case\n                  return Observable.of(e);\n                });\n              }\n\n              // On 400 - 500, fetch the corresponding commit and send errored state to app\n              if (apiError.code && apiError.code >= 400 && apiError.code < 500 && meta.id) {\n                return Cache.deleteSingle(Stores.FileUploads, meta.id)\n                  .flatMap(() => this.fetchCommit(meta))\n                  .flatMap((commits: Commit[]) => {\n                    const commit = commits[0];\n                    if (commit && commit.rehydrateMeta) {\n                      sendDraftAttachmentAddFailed(commit.rehydrateMeta, e);\n                    }\n\n                    // Handle updating failed commit, replace payload with error\n                    const failedCommit: Commit = {\n                      ...commit,\n                      status: CommitStatus.Error,\n                      rehydrateMeta: {\n                        ...commit.rehydrateMeta,\n                        error: e,\n                      },\n                    };\n                    return Cache.save(Stores.Commits, failedCommit);\n                  });\n              }\n\n              // Otherwise fail with standard message and send failed\n              captureException(e);\n              // tslint:disable-next-line:no-console\n              console.error(e);\n\n              // Fail commit by deleting fileUpload, fetching commit, and sending failed\n              return Cache.deleteSingle(Stores.FileUploads, meta.id)\n                .flatMap(() => this.fetchCommit(meta))\n                .flatMap((commits: Commit[]) => {\n                  const commit = commits[0];\n                  if (commit && commit.rehydrateMeta) {\n                    const message = 'File failed to upload: ' + e.message;\n\n                    // HACK(SHIN): Send Failed message with an object that conforms to error type\n                    // since error objects cannot be copied\n                    sendDraftAttachmentAddFailed(\n                      commit.rehydrateMeta,\n                      ({\n                        description: message,\n                        message,\n                      }) as any,\n                    );\n                  }\n\n                  // Handle updating failed commit\n                  const failedCommit: Commit = {\n                    ...commit,\n                    status: CommitStatus.Error,\n                    payload: e,\n                    rehydrateMeta: {\n                      ...commit.rehydrateMeta,\n                      error: e,\n                    },\n                  };\n                  return Cache.save(Stores.Commits, failedCommit);\n                });\n            });\n        }),\n      );\n    });\n  }\n\n  // Returns commit if found for the file upload meta (using combo of resourceId + attachmentId)\n  private fetchCommit = (meta: FileUploadMeta): Observable<Commit[]> => {\n    return Cache.list(\n      Stores.Commits,\n      (commit: Commit) => commit.payload &&\n        commit.status === CommitStatus.Pending &&\n        commit.resourceHash === meta.resourceId + meta.attachmentId,\n    );\n  }\n\n  // Fetch retrieves a page of commits from the commit log to process\n  private fetch(): Observable<FileUploadMeta[]> {\n    this.retrigger = false;\n    return Cache.list(Stores.FileUploads, (commit: FileUploadMeta) => {\n      return commit.status === CommitStatus.Ready;\n    })\n    .map(results => results.sort((a, b) => b.created.getTime() - a.created.getTime()));\n  }\n\n  private handleBusEvent(event: BusEvent) {\n    switch (event.name) {\n      case BusEventName.ClearErrors:\n        this.backoff.clearErrors();\n        break;\n\n      case BusEventName.CancelSync:\n        if (event.data.workerId && event.data.workerId !== this.workerId) {\n          break;\n        }\n        this.cancelSignal.next(null);\n        return;\n\n      case BusEventName.TriggerSync:\n        if (event.data.workerId && event.data.workerId !== this.workerId) {\n          break;\n        }\n        if (this.isRunning) {\n          this.retrigger = true;\n          return;\n        }\n        this.run().subscribe({\n          next: () => { return; },\n          error: (error) => { return; },\n          complete: () => { return; },\n        });\n        break;\n\n      case BusEventName.HistoryClearCache:\n        this.clearCache().subscribe();\n        break;\n\n      default:\n        break;\n    }\n  }\n}\n\nexport default FileUploadSync;\n"]}]}