{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/PublicSharedThreads/PublicSharedThreads.tsx","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/PublicSharedThreads/PublicSharedThreads.tsx","mtime":1675280254085},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/PublicSharedThreads/PublicSharedThreads.tsx","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/PublicSharedThreads/PublicSharedThreads.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport SignUpHeader from './components/SignUpHeader/SignUpHeader';\n\nimport './PublicSharedThreads.scss';\nimport {\n  SharedThread, Cell, CellType, Comment, SharedThreadActivityType, SharedThreadActivity,\n} from '@src/types/sharedThreads';\nimport { Resource, Thread, Message, MessageBody, TeamMember, Me, Draft } from '@src/types';\nimport { participantsToString, parseAddress } from '@src/lib/address';\nimport CollapsedCell from '@src/components/ThreadDetail/components/Cell/CollapsedCell';\nimport { last, forEach, first } from 'lodash';\nimport ExpandedCell from '@src/components/ThreadDetail/components/Cell/ExpandedCell';\nimport SignUpPopover from './components/SignUpPopover/SignUpPopover';\nimport CommentPopover from './components/CommentPopover/CommentPopover';\nimport CommentCell from '@src/components/Cells/CommentCell';\n\n// tslint:disable-next-line:max-line-length\nimport CommentEditor from '@src/components/ThreadDetail/components/Composer/components/CommentEditor';\nimport { CommentCreateMeta } from '@src/ducks/comments';\n// tslint:disable-next-line:max-line-length\nimport SharedThreadErrorPage from '@src/routes/PublicSharedThreads/components/SharedThreadErrorPage';\nimport browserHistory from '@src/lib/browserHistory';\nimport CenteredLoader from '@src/components/Loader/CenteredLoader';\nimport { SharedThreadActivityCreateMeta, PING_INTERVAL } from '@src/ducks/sharedThreads';\nimport TypingCell, { TypingType } from '@src/components/Cells/TypingCell/TypingCell';\nimport PolymailLogo from '@src/routes/Login/Icons/PolymailLogo@3x.png';\nimport { IS_IOS } from '@src/lib/device';\nimport SharedDraftCell from '@src/components/ThreadDetail/components/Cell/SharedDraftCell';\nimport { AmplitudeEvents, logAmplitudeEvent } from '@src/lib/amplitude-analytics';\n\nexport interface StateProps {\n  sharedThread?: Resource<SharedThread>;\n  thread?: Thread;\n  comments?: Comment[];\n  bodies?: MessageBody[];\n  me?: Me;\n  originalThreadError?: Error;\n  sharedOwner?: TeamMember;\n  sharedOwnerPhotoUrl?: string;\n  selectedMessageId?: string;\n  replying: SharedThreadActivity[];\n  commenting: SharedThreadActivity[];\n  sharedThreadDraft?: Draft;\n}\n\nexport interface DispatchProps {\n  createComment: (meta: CommentCreateMeta) => void;\n  createSharedThreadActivity: (meta: SharedThreadActivityCreateMeta) => void;\n}\n\ninterface State {\n  expandedKeys: { [id: string]: boolean; };\n  cells: Cell[];\n  signUpPopoverShown: boolean;\n  commentPopoverShown: boolean;\n  showBrowser: boolean;\n}\n\nclass PublicSharedThreads extends React.PureComponent<StateProps & DispatchProps, State> {\n  scrolled: boolean;\n  timeout: NodeJS.Timer;\n  ref: HTMLDivElement;\n  viewInterval: NodeJS.Timer;\n\n  constructor(props: StateProps & DispatchProps) {\n    super(props);\n\n    this.state = {\n      expandedKeys: {},\n      cells: this.getCells(props),\n      signUpPopoverShown: false,\n      commentPopoverShown: false,\n      showBrowser: !IS_IOS,\n    };\n  }\n\n  recordView = () => {\n    const { sharedThread, createSharedThreadActivity } = this.props;\n\n    if (sharedThread && sharedThread.data && sharedThread.data.id) {\n      createSharedThreadActivity({\n        type: SharedThreadActivityType.View,\n        sharedThread: sharedThread.data.id,\n      });\n    }\n  }\n\n  componentDidMount() {\n    this.viewInterval = global.setInterval(\n      this.recordView, PING_INTERVAL,\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.viewInterval);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: StateProps) {\n    if (!nextProps.thread) {\n      return;\n    }\n\n    let expandedMessages: string[] = nextProps.thread.messages.filter(m => !m.read).map(m => m.id);\n\n    // Handle changes to thread\n    if (!this.props.thread || this.props.thread.id !== nextProps.thread.id) {\n      this.scrolled = false;\n    }\n\n    // Handle new messages -> expand them automatically\n    if (this.props.thread && nextProps.thread && nextProps.thread.id === this.props.thread.id) {\n      const oldMessages: { [id: string]: boolean } = {};\n\n      this.props.thread.messages.forEach((message) => {\n        oldMessages[message.id] = true && message.read;\n      });\n\n      expandedMessages = nextProps.thread.messages\n        .filter(message => !oldMessages[message.id])\n        .map(message => message.id);\n    }\n\n    // preserve expanded cells\n    if (this.state.expandedKeys) {\n      forEach(this.state.expandedKeys, (value, key) => {\n        if (value && expandedMessages.indexOf(key) === -1) {\n          expandedMessages.push(key);\n        }\n      });\n    }\n\n    // Handle thread messages collapsed/uncollapsed state\n    if (nextProps.thread) {\n      this.processCellCollapseStates(nextProps.thread, expandedMessages);\n    }\n\n    if (nextProps.thread !== this.props.thread ||\n      nextProps.thread.messages !== this.props.thread.messages ||\n      nextProps.comments !== this.props.comments ||\n      nextProps.replying !== this.props.replying ||\n      nextProps.commenting !== this.props.commenting\n    ) {\n      this.setState({ cells: this.getCells(nextProps) });\n    }\n  }\n\n  componentDidUpdate(oldProps: StateProps) {\n    const { sharedThread, me, selectedMessageId } = this.props;\n\n    // Redirect if error and user is not logged in\n    if (sharedThread && sharedThread.error && !me) {\n      return;\n    }\n\n    // Handles moving scroll position whenever new comments are loaded\n    const newComments = this.props.comments || [];\n    const oldComments = oldProps.comments || [];\n    if (newComments.length > oldComments.length) {\n      this.timeout = global.setTimeout(\n        () => {\n          const lastComment = last(newComments);\n          if (lastComment && this.ref) {\n            const cells = this.ref.getElementsByClassName('expanded-cell');\n            const cell = Array.from(cells)\n              .filter((el: HTMLElement) => selectedMessageId ?\n                el.dataset.message === selectedMessageId : true)[0];\n            if (cell) {\n              this.scrolled = true;\n              const table = this.ref.getElementsByClassName('cells');\n              if (table[0]) {\n                const commentScrollPosition = this.getLastCommentScrollPosition();\n                const messageScrollPosition = (cell as any).offsetTop;\n                const behavior = 'smooth';\n                const val = Math.max(commentScrollPosition, messageScrollPosition);\n                table[0].scrollTo({ top: val, behavior });\n              }\n            }\n          }\n        },\n        500,\n      );\n    }\n\n    const newTypingCells = this.props.replying.map(r => `r-${r.userId}`)\n      .concat(this.props.commenting.map(c => `c-${c.userId}`));\n    const oldTypingCells = oldProps.replying.map(r => `r-${r.userId}`)\n      .concat(oldProps.commenting.map(c => `c-${c.userId}`));\n    if (newTypingCells.join('') !== oldTypingCells.join('')) {\n      this.timeout = global.setTimeout(\n        () => {\n          const typingCells = this.ref && this.ref.getElementsByClassName('typing-cell');\n          if (typingCells && typingCells.length) {\n            const cell = typingCells[typingCells.length - 1];\n            if (cell) {\n              this.scrolled = true;\n              const table = this.ref.getElementsByClassName('cells');\n              if (table[0]) {\n                const val = (cell as any).offsetTop;\n                table[0].scrollTo({ top: val, behavior: 'smooth' });\n              }\n            }\n          }\n        },\n        500,\n      );\n    }\n  }\n\n  processCellCollapseStates = (thread: Thread, forceExpand?: string[]) => {\n    const { selectedMessageId } = this.props;\n    const expandedKeys = {};\n\n    thread.messages.forEach((message) => {\n      expandedKeys[message.id] = forceExpand && forceExpand.indexOf(message.id) > -1 ? true : false;\n    });\n\n    // Always show last id for now\n    const lastMessage = last(thread.messages);\n    const lastId = lastMessage && lastMessage.id || '';\n    if (lastId && !selectedMessageId) {\n      expandedKeys[lastId] = true;\n    }\n\n    // Overide expanded selection if we have a specific message selected\n    if (selectedMessageId) {\n      const match = first(\n        thread.messages.filter(message =>\n          message.id === selectedMessageId || message.rfcId === selectedMessageId,\n        ),\n      );\n      if (match) {\n        expandedKeys[match.id] = true;\n      }\n    }\n    this.setState({ expandedKeys });\n  }\n\n  getLastCommentScrollPosition = (): number => {\n    const { comments } = this.props;\n    if (comments && comments.length) {\n      const lastComment = last(comments);\n      if (lastComment && this.ref) {\n        const cells = this.ref.getElementsByClassName('comment-cell');\n        const cell = Array.from(cells)\n          .filter((el: HTMLElement) => el.dataset.comment === lastComment.id)[0];\n        if (cell) {\n          const val = (cell as any).offsetTop;\n          return val;\n        }\n      }\n    }\n    return 0;\n  }\n\n  getLastMessageScrollPosition = (): number => {\n    const { thread } = this.props;\n\n    if (!thread) {\n      return 0;\n    }\n\n    // Always show last id for now\n    const lastMessage = last(thread.messages);\n    const lastId = lastMessage && lastMessage.id || '';\n\n    const cells = this.ref.getElementsByClassName('expanded-cell');\n    const cell = Array.from(cells)\n      .filter((el: HTMLElement) => el.dataset.message === lastId)[0];\n    if (cell) {\n      const val = (cell as any).offsetTop;\n      return val;\n    }\n\n    return 0;\n  }\n\n  getCells = (props: StateProps) => {\n    if (props.thread && props.thread) {\n      const messages: Cell[] = props.thread.messages.map(m => ({\n        type: CellType.Message,\n        date: m.internal,\n        data: m,\n      }));\n      const comments: Cell[] = (props.comments || []).map(c => ({\n        type: CellType.Comment,\n        date: c.created,\n        data: c,\n      }));\n      const replying: Cell[] = (props.replying || []).map(r => ({\n        type: CellType.Typing,\n        date: r.timestamp,\n        data: r,\n      }));\n      const commenting: Cell[] = (props.commenting || []).map(c => ({\n        type: CellType.Typing,\n        date: c.timestamp,\n        data: c,\n      }));\n\n      const drafts: Cell[] = (props.sharedThreadDraft && [props.sharedThreadDraft] || [])\n        .map(c => ({\n          type: CellType.Draft,\n          date: c.updated,\n          data: c,\n        }));\n\n      return messages.concat(comments).sort((a, b) => {\n        if (a.date < b.date) {\n          return  -1;\n        }\n\n        if (a.date > b.date) {\n          return 1;\n        }\n\n        return 0;\n      }).concat(replying).concat(commenting).concat(drafts);\n    }\n\n    return [];\n  }\n\n  renderCell = (cell: Cell) => {\n    if (cell.type === CellType.Message) {\n      return this.renderMessage(cell.data as Message);\n    }\n\n    if (cell.type === CellType.Typing) {\n      return this.renderTyping(cell.data as SharedThreadActivity);\n    }\n\n    if (cell.type === CellType.Draft) {\n      return this.renderSharedDraftCell();\n    }\n\n    return this.renderComment(cell.data as Comment);\n  }\n\n  renderComment = (comment: Comment) => {\n    return <CommentCell comment={comment} key={comment.id} />;\n  }\n\n  renderTyping = (activity: SharedThreadActivity) => {\n    if (!activity.user) {\n      return null;\n    }\n\n    let type;\n    switch (activity.type) {\n      case SharedThreadActivityType.Comment:\n        type = TypingType.Comment;\n        break;\n      case SharedThreadActivityType.Reply:\n        type = TypingType.Reply;\n        break;\n      default:\n        return null;\n    }\n\n    return (\n      <TypingCell\n        key={`${type}-${activity.userId}`}\n        type={type}\n        user={{\n          firstName: activity.user.firstName, photoUrl: activity.user.photoUrl,\n        }}\n      />\n    );\n  }\n\n  renderMessage = (message: Message) => {\n    const { thread, bodies, sharedThread, me, selectedMessageId } = this.props;\n    const collapsed = !this.state.expandedKeys[message.id];\n    const ExpandedCellConnect = ExpandedCell as any;\n    const CollapsedCellConnect = CollapsedCell as any;\n    const isOwner = sharedThread && sharedThread.data && me && sharedThread.data.user === me.id;\n\n    if (!thread) {\n      return null;\n    }\n\n    if (collapsed) {\n      return (\n        <CollapsedCellConnect\n          id={message.id}\n          onToggleExpand={this.handleCellExpand}\n          key={message.id}\n          message={message}\n          hideTracks={!isOwner}\n          publicFocus={selectedMessageId && selectedMessageId === message.id}\n        />\n      );\n    }\n\n    if (!bodies) {\n      return null;\n    }\n\n    const body = bodies.filter(b => b.id === message.id)[0];\n    return (\n      <ExpandedCellConnect\n        onToggleExpand={this.handleCellExpand}\n        key={message.id}\n        message={message}\n        messageBody={body}\n        threadId={thread.id}\n        hideActions\n        hideTracks={!isOwner}\n        publicFocus={selectedMessageId && selectedMessageId === message.id}\n      />\n    );\n  }\n\n  renderSharedDraftCell = () => {\n    return (\n      <SharedDraftCell />\n    );\n  }\n\n  handleCellExpand = (key: string) => {\n    const oldValue  = this.state.expandedKeys[key] || false;\n    const expandedKeys = { ...this.state.expandedKeys, [key]: !oldValue };\n    this.setState({ expandedKeys });\n  }\n\n  handleRef = (ref: HTMLDivElement) => {\n    this.ref = ref;\n  }\n\n  handleSignUpPopoverHide = () => {\n    this.setState({ signUpPopoverShown: false, commentPopoverShown: false });\n  }\n\n  handleSignUpPopoverShow = () => {\n    this.setState({ signUpPopoverShown: true });\n  }\n\n  handleSignInClick = () => {\n    browserHistory.push('/login');\n  }\n\n  handleCommentPopoverHide = () => {\n    this.setState({ signUpPopoverShown: false, commentPopoverShown: false });\n  }\n\n  handleCommentPopoverShow = () => {\n    const { me, sharedThread } = this.props;\n    if (me && sharedThread && sharedThread.data && sharedThread.data.team !== me.team) {\n      this.setState({ commentPopoverShown: true });\n      return;\n    }\n\n    this.setState({ signUpPopoverShown: true });\n  }\n\n  handleComment = (comment: string) => {\n    logAmplitudeEvent(AmplitudeEvents.CommentOnEmail);\n    const { thread, sharedThread, sharedThreadDraft } = this.props;\n    const lastMessage = thread && last(thread.messages);\n    const sharedThreadId = sharedThread && sharedThread.data && sharedThread.data.id;\n    if (sharedThreadId && thread && lastMessage && lastMessage.rfcId) {\n      const computedRfcId = sharedThreadDraft?.id && `<${sharedThreadDraft.id}@polymail.io>` ||\n        lastMessage.rfcId;\n      this.props.createComment({\n        rfcId: computedRfcId,\n        body: comment,\n        thread: sharedThreadId,\n        draft: sharedThreadDraft?.id,\n      });\n    }\n  }\n\n  renderCommentPane = () => {\n    const {\n      me,\n      sharedThread,\n    } = this.props;\n\n    // Show Comment Editor is user is on team\n    const placeholderOverride = IS_IOS && 'Write a comment' || 'Write a comment or @mention a teammate';\n    if (me && sharedThread && sharedThread.data && sharedThread.data.team === me.team) {\n      return (\n        <div className=\"comment-input\">\n          <CommentEditor\n            comment={this.handleComment}\n            placeholderOverride={placeholderOverride}\n          />\n        </div>\n      );\n    }\n\n    // Do not show comment pane if user is not on the same team\n    if (me && sharedThread && sharedThread.data && sharedThread.data.team !== me.team) {\n      return null;\n    }\n\n    // Otherwise show button input\n    return (\n      <div className=\"comment-input\">\n        <button className=\"comment-button\" onClick={this.handleCommentPopoverShow}>\n          {placeholderOverride}\n          </button>\n      </div>\n    );\n  }\n\n  handleMobileBrowserContinue = () => {\n    this.setState({ showBrowser: true });\n  }\n\n  handleiOSOpen = () => {\n    window.location.href = 'polymail://' + window.location.pathname;\n  }\n\n  renderOwnerLabel = () => {\n    const { sharedOwner } = this.props;\n    if (sharedOwner) {\n      if (!!sharedOwner.firstName && !!sharedOwner.lastName) {\n        return `${sharedOwner.firstName} ${sharedOwner.lastName} `;\n      }\n      if (!!sharedOwner.email) {\n        return sharedOwner.email;\n      }\n    }\n    return '';\n  }\n\n  renderMobileCapture = () => {\n    const {\n      sharedThread,\n      sharedOwner,\n      sharedOwnerPhotoUrl,\n    } = this.props;\n\n    // Destructured shared thread\n    const st = sharedThread?.data;\n\n    return (\n      <div className=\"public-shared-threads-mobile-capture\">\n        <div className=\"header-section\">\n          <img src={PolymailLogo} alt=\"\" className=\"logo\"/>\n        </div>\n        {st && (\n          <div className=\"shared-thread-preview\">\n            <div className=\"header\">\n              {sharedOwner &&\n                <div className=\"shared-label\">\n                  <img className=\"member-avatar\" src={sharedOwnerPhotoUrl} />\n                  <span className=\"name-label\">\n                    {this.renderOwnerLabel()}\n                  </span> shared with you:\n              </div>\n              }\n              <h3 className=\"subject\">{st.subject}</h3>\n              <div className=\"participants\">\n                {participantsToString(st.participants.map(parseAddress))}\n              </div>\n            </div>\n          </div>\n        )}\n        <div className=\"action-section\">\n          <button className=\"open-ios\" onClick={this.handleiOSOpen}>\n            Open Polymail iOS\n          </button>\n          <button\n            className=\"open-browser\"\n            onClick={this.handleMobileBrowserContinue}\n          >\n            Open in browser\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    const {\n      sharedThread,\n      thread,\n      sharedOwner,\n      sharedOwnerPhotoUrl,\n      me,\n      originalThreadError,\n    } = this.props;\n    const { signUpPopoverShown, commentPopoverShown, cells, showBrowser } = this.state;\n    const originalError = !!originalThreadError && !thread;\n    const sharedThreadError = sharedThread && sharedThread.error;\n\n    // Show mobile capture page if shared thread fetched properly and browser is not mobile\n    if (!showBrowser && !(sharedThreadError || originalThreadError)) {\n      return this.renderMobileCapture();\n    }\n\n    // Handle case for when user is not logged in\n    if (!me && sharedThreadError) {\n      return (\n        <div className=\"public-shared-threads\" ref={this.handleRef}>\n          <SignUpHeader me={me} onButtonPress={this.handleSignInClick} />\n          <div className=\"main\">\n            <SharedThreadErrorPage\n            />\n          </div>\n          {signUpPopoverShown && <SignUpPopover onHide={this.handleSignUpPopoverHide} />}\n          {commentPopoverShown && <CommentPopover onHide={this.handleCommentPopoverHide} />}\n        </div>\n      );\n    }\n\n    if (me && (sharedThreadError || originalError)) {\n      return (\n        <div className=\"public-shared-threads\" ref={this.handleRef}>\n          <SignUpHeader me={me} onButtonPress={this.handleSignInClick} />\n          <div className=\"main\">\n            <SharedThreadErrorPage\n              email={me.email}\n            />\n          </div>\n          {signUpPopoverShown && <SignUpPopover onHide={this.handleSignUpPopoverHide} />}\n          {commentPopoverShown && <CommentPopover onHide={this.handleCommentPopoverHide} />}\n        </div>\n      );\n    }\n\n    // Show Loader\n    if (!sharedThread || !thread || !sharedThread.data) {\n      return (\n        <div className=\"public-shared-threads\" ref={this.handleRef}>\n          <SignUpHeader me={me} onButtonPress={this.handleSignInClick} />\n          <div className=\"main\">\n            <CenteredLoader />\n          </div>\n          {signUpPopoverShown && <SignUpPopover onHide={this.handleSignUpPopoverHide} />}\n          {commentPopoverShown && <CommentPopover onHide={this.handleCommentPopoverHide} />}\n        </div>\n      );\n    }\n\n    const st = sharedThread.data;\n    // some threads don't have an owner label\n    const sharedString = this.renderOwnerLabel() ? ' shared' : 'Shared';\n    return (\n      <div className=\"public-shared-threads\" ref={this.handleRef}>\n        <SignUpHeader me={me} onButtonPress={this.handleSignInClick} />\n        <div className=\"main\">\n          <div className=\"header\">\n            {sharedOwner &&\n              <div className=\"shared-label\">\n                <img className=\"member-avatar\" src={sharedOwnerPhotoUrl} />\n                <span className=\"name-label\">\n                  {this.renderOwnerLabel()}\n                </span>{sharedString} with you: {st.subject}\n            </div>\n            }\n            <h3 className=\"subject\">{st.subject}</h3>\n            <div className=\"participants\">\n              {participantsToString(st.participants.map(parseAddress))}\n            </div>\n          </div>\n          <div className=\"cells\">\n            {cells.map(this.renderCell)}\n          </div>\n        </div>\n        {this.renderCommentPane()}\n        {signUpPopoverShown && <SignUpPopover onHide={this.handleSignUpPopoverHide} />}\n        {commentPopoverShown && <CommentPopover onHide={this.handleCommentPopoverHide} />}\n      </div>\n    );\n  }\n}\n\nexport default PublicSharedThreads;\n"]}]}