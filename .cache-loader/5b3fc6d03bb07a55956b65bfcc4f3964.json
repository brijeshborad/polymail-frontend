{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/accounts.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/accounts.ts","mtime":1675280254046},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/accounts.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/accounts.ts"],"names":[],"mappings":"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","sourcesContent":["import update from 'immutability-helper';\nimport { findIndex } from 'lodash';\n\nimport { create } from '@src/lib/redux';\n\nimport {\n  Account,\n  AttachmentMeta,\n  Attachment,\n  StoreState,\n  AccountStatus,\n  AccountType,\n  Action,\n} from '@src/types';\n\nimport { createSelector } from '@src/lib/selector';\nimport { resourceOk } from '@src/lib/resource';\nimport { isCompanyDomain } from '@src/lib/email';\nimport { findParentAccount } from '@src/lib/account';\nimport { initialStateWithCachedData } from '@src/lib/state';\n\nfunction createMetaNesting(state: StoreState, resource: string): StoreState {\n  if (state.attachmentMetas[resource]) {\n    return state;\n  }\n\n  return update(state, {\n    attachmentMetas: {\n      [resource]: {\n        $set: {},\n      },\n    },\n  });\n}\n\nexport const {\n  type: ACCOUNT_PROVIDER_SELECT,\n  action: accountProviderSelect,\n  reducer: accountProviderSelectReducer,\n} = create<AccountType, string>('ACCOUNT_PROVIDER_SELECT', {});\n\nexport const {\n  type: ACCOUNT_DELETE,\n  action: accountDelete,\n  reducer: accountDeleteReducer,\n} = create<Account, null>('ACCOUNT_DELETE', {\n  success: (state, meta, payload) => {\n    const accountIndex = findIndex(state.accounts, ['id', meta.id]);\n    if (accountIndex === -1) {\n      return state;\n    }\n    return update(state, {\n      accounts: { [accountIndex]: { status: { $set: AccountStatus.Deleting } } },\n    });\n  },\n});\n\nexport const {\n  type: ACCOUNT_DELETE_ME,\n  action: accountDeleteMe,\n  reducer: accountDeleteMeReducer,\n} = create<null, null>('ACCOUNT_DELETE_ME', {\n  success: (state) => {\n    return {\n      ...state,\n      ...initialStateWithCachedData(),\n      sessionId: state.sessionId,\n    };\n  },\n});\n\nexport const {\n  type: ACCOUNT_CREATE,\n  action: accountCreate,\n  reducer: accountCreateReducer,\n} = create<Partial<Account>, Account>('ACCOUNT_CREATE', {\n  success: (state, meta, payload) => {\n    return update(state, {\n      accounts: { $push: [payload] },\n    });\n  },\n});\n\nexport const {\n  type: ACCOUNT_UPDATE,\n  action: accountUpdate,\n  reducer: accountUpdateReducer,\n} = create<Account, Account>('ACCOUNT_UPDATE', {\n  start: (state, meta) => {\n    const accountId = meta.id;\n    const index = findIndex(state.accounts, ['id', accountId]);\n    return update(state, {\n      accounts: {\n        [index]: { $set: meta },\n      },\n    });\n  },\n});\n\n// TODO(SHAHAN): Ideally would like to work with patches, but currently\n// do not have a good optimistic method\nexport const accountUpdatePassword =\n  (account: Account, newPassword: string): Action<Account, Account> => {\n    const updates: Account = {\n      ...account,\n      id: account.id,\n    };\n\n    switch (account.type) {\n      case AccountType.iCloud:\n        updates.password = newPassword;\n        break;\n      case AccountType.IMAP:\n        if (account.preset) {\n          updates.password = newPassword;\n        } else {\n          updates.imap = {\n            ...updates.imap!,\n            password: newPassword,\n          };\n\n          updates.smtp = {\n            ...updates.smtp!,\n            password: newPassword,\n          };\n        }\n        break;\n      default:\n        break;\n    }\n\n    return accountUpdate(updates);\n  };\n\nexport const {\n  type: ACCOUNT_REAUTHORIZE,\n  action: accountReauthorize,\n  reducer: accountReauthorizeReducer,\n} = create<string, null>('ACCOUNT_REAUTHORIZE', {});\n\nexport const {\n  type: SIGNATURE_IMAGE_ADD,\n  action: signatureImageAdd,\n  reducer: signatureImageAddReducer,\n} = create<AttachmentMeta, Attachment>('SIGNATURE_IMAGE_ADD', {\n  start: (state, meta) => {\n    return update(createMetaNesting(state, meta.resourceId), {\n      attachmentMetas: {\n        [meta.resourceId]: {\n          $merge: {\n            [meta.attachment]: resourceOk(meta),\n          },\n        },\n      },\n    });\n  },\n  success: (state, meta, payload) => {\n    const accountIndex = findIndex(state.accounts, ['id', meta.resourceId]);\n    const account = state.accounts[accountIndex];\n    const updatedAccount = account && {\n      accounts: {\n        [accountIndex]: {\n          signatureImages: { $push: [payload] },\n        },\n      },\n    };\n    return update(createMetaNesting(state, meta.resourceId), {\n      attachmentMetas: { [meta.resourceId]: { $unset: [meta.attachment] } },\n      ...updatedAccount,\n    });\n  },\n});\n\nexport const {\n  type: SIGNATURE_IMAGE_REMOVE,\n  action: signatureImageRemove,\n  reducer: signatureImageRemoveReducer,\n} = create<AttachmentMeta, null>('SIGNATURE_IMAGE_REMOVE', {\n  success: (state, meta, payload) => {\n    const accountIndex = findIndex(state.accounts, ['id', meta.resourceId]);\n    const account = state.accounts[accountIndex];\n    const updatedAccount = account && {\n      accounts: {\n        [accountIndex]: {\n          signatureImages: {\n            $set: account.signatureImages.filter(image => image.id !== meta.attachment),\n          },\n        },\n      },\n    };\n    return update(createMetaNesting(state, meta.resourceId), {\n      attachmentMetas: { [meta.resourceId]: { $unset: [meta.attachment] } },\n      ...updatedAccount,\n    });\n  },\n});\n\n// Selects Parent account for an alias\nexport const selectParentAccount = createSelector<string, Account[]|string, Account|undefined>(\n  [\n    (state: StoreState, account: string) => state.accounts,\n    (state: StoreState, account: string) => account,\n  ],\n  (accounts: Account[], account: string) => findParentAccount(accounts, account),\n  (accounts: Account[], account: string) => account,\n  ['accounts'],\n);\n\nexport const selectAccount = createSelector<string, Account|undefined, Account>(\n  [\n    (state, id) => {\n      const index = findIndex(state.accounts, { id });\n      return state.accounts[index];\n    },\n  ],\n  (account: Account) => account,\n);\n\nexport const selectInvalidAccount = createSelector<undefined, Account|undefined, Account|undefined>(\n  [\n    (state) => {\n      const accounts = state.accounts.filter(account => account.status === AccountStatus.Invalid);\n      return accounts.length > 0 ? accounts[0] : undefined;\n    },\n  ],\n  (account?: Account) => account,\n);\n\nexport const selectAccounts = createSelector<undefined, Account[], Account[]>(\n  [\n    state => state.accounts\n      .filter(each => each.type !== 'alias')\n      .filter(each => each.status !== AccountStatus.Deleting),\n  ],\n  (accounts: Account[]) => accounts,\n  undefined,\n  ['accounts'],\n);\n\nexport const selectAllActiveAccounts = createSelector<undefined, Account[], Account[]>(\n  [\n    state => state.accounts\n      .filter(each => each.status !== AccountStatus.Deleting),\n  ],\n  (accounts: Account[]) => accounts,\n  undefined,\n  ['accounts'],\n);\n\nexport const selectAliases = createSelector<Account, Account[], Account[]>(\n  [\n    (state, account) => state.accounts.filter(each => each.account === account.id),\n  ],\n  (accounts: Account[]) => accounts,\n  undefined,\n  ['accounts'],\n);\n\nexport const selectDomains = createSelector<undefined, Account[], string[]>(\n  [\n    state => state.accounts,\n  ],\n  (accounts: Account[]) => accounts\n    .filter(each => isCompanyDomain(each.email))\n    .map(a => a.email.split('@')[1]),\n  (accounts: Account[]) => accounts.map(account => account.email).join(''),\n  ['accounts'],\n);\n\nexport default [\n  accountUpdateReducer,\n  accountDeleteReducer,\n  accountDeleteMeReducer,\n  accountReauthorizeReducer,\n  accountCreateReducer,\n  signatureImageAddReducer,\n  signatureImageRemoveReducer,\n  accountProviderSelectReducer,\n];\n"]}]}