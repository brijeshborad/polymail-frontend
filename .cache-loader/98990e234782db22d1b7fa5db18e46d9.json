{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/scheduling.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/scheduling.ts","mtime":1675280253980},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnOwppbXBvcnQgeyBqc29uUmVxdWVzdCwgYmxhbmtSZXF1ZXN0IH0gZnJvbSAnQHNyYy9hcGkvYmFzZSc7CmltcG9ydCB7IGNyZWF0ZUNhbGVuZGFyRXZlbnQgfSBmcm9tICdAc3JjL21vY2tzL2NhbGVuZGFyRXZlbnRzJzsKaW1wb3J0IHsgY3JlYXRlU2NoZWR1bGluZywgY3JlYXRlVGltZVNsb3QgfSBmcm9tICdAc3JjL21vY2tzL3NjaGVkdWxpbmcnOwppbXBvcnQgeyBhcHBseURlZmF1bHRTY2hlZHVsaW5nUHVibGljLCBhcHBseURlZmF1bHRTY2hlZHVsaW5nIH0gZnJvbSAnQHNyYy9saWIvc2NoZWR1bGluZyc7CmltcG9ydCB7IGFwcGx5Q2FsZW5kYXJFdmVudERlZmF1bHRzIH0gZnJvbSAnQHNyYy9saWIvbW9kZWxzL2NhbGVuZGFyRXZlbnRzJzsKdmFyIFNjaGVkdWxpbmdDbGllbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7CiAgICBmdW5jdGlvbiBTY2hlZHVsaW5nQ2xpZW50KCkgewogICAgfQogICAgU2NoZWR1bGluZ0NsaWVudC5wcm90b3R5cGUubGlzdCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4ganNvblJlcXVlc3QoewogICAgICAgICAgICBtZXRob2Q6ICdHRVQnLAogICAgICAgICAgICByb3V0ZTogIi92MS9zY2hlZHVsaW5nIiwKICAgICAgICB9KS5tYXAoZnVuY3Rpb24gKHJlc3VsdHMpIHsKICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHMubWFwKGZ1bmN0aW9uIChyZXN1bHQpIHsgcmV0dXJuIGFwcGx5RGVmYXVsdFNjaGVkdWxpbmcocmVzdWx0KTsgfSk7CiAgICAgICAgfSk7CiAgICB9OwogICAgU2NoZWR1bGluZ0NsaWVudC5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24gKHNjaGVkdWxpbmcpIHsKICAgICAgICByZXR1cm4ganNvblJlcXVlc3QoewogICAgICAgICAgICBtZXRob2Q6ICdQT1NUJywKICAgICAgICAgICAgcm91dGU6ICIvdjEvc2NoZWR1bGluZyIsCiAgICAgICAgICAgIGJvZHk6IHNjaGVkdWxpbmcsCiAgICAgICAgfSkubWFwKGZ1bmN0aW9uIChyZXN1bHQpIHsgcmV0dXJuIGFwcGx5RGVmYXVsdFNjaGVkdWxpbmcocmVzdWx0KTsgfSk7CiAgICB9OwogICAgU2NoZWR1bGluZ0NsaWVudC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKHNjaGVkdWxpbmcpIHsKICAgICAgICByZXR1cm4ganNvblJlcXVlc3QoewogICAgICAgICAgICBtZXRob2Q6ICdQQVRDSCcsCiAgICAgICAgICAgIHJvdXRlOiAiL3YxL3NjaGVkdWxpbmcvIiArIHNjaGVkdWxpbmcuaWQsCiAgICAgICAgICAgIGJvZHk6IHNjaGVkdWxpbmcsCiAgICAgICAgfSkubWFwKGZ1bmN0aW9uIChyZXN1bHQpIHsgcmV0dXJuIGFwcGx5RGVmYXVsdFNjaGVkdWxpbmcocmVzdWx0KTsgfSk7CiAgICB9OwogICAgU2NoZWR1bGluZ0NsaWVudC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKGlkKSB7CiAgICAgICAgcmV0dXJuIGJsYW5rUmVxdWVzdCh7CiAgICAgICAgICAgIG1ldGhvZDogJ0RFTEVURScsCiAgICAgICAgICAgIHJvdXRlOiAiL3YxL3NjaGVkdWxpbmcvIiArIGlkLAogICAgICAgIH0pOwogICAgfTsKICAgIFNjaGVkdWxpbmdDbGllbnQucHJvdG90eXBlLmdldFB1YmxpYyA9IGZ1bmN0aW9uIChtZXRhKSB7CiAgICAgICAgcmV0dXJuIGpzb25SZXF1ZXN0KHsKICAgICAgICAgICAgbWV0aG9kOiAnR0VUJywKICAgICAgICAgICAgcm91dGU6ICIvdjIvc2NoZWR1bGluZy9wdWJsaWMvIiArIG1ldGEudXNlclNsdWcgKyAiLyIgKyBtZXRhLnNsdWcsCiAgICAgICAgICAgIGRpc2FibGVDb3JzT3B0aW1pemF0aW9uOiB0cnVlLAogICAgICAgIH0pLm1hcChmdW5jdGlvbiAocmVzdWx0KSB7IHJldHVybiBhcHBseURlZmF1bHRTY2hlZHVsaW5nUHVibGljKHJlc3VsdCk7IH0pOwogICAgfTsKICAgIFNjaGVkdWxpbmdDbGllbnQucHJvdG90eXBlLnRpbWVzbG90cyA9IGZ1bmN0aW9uIChtZXRhKSB7CiAgICAgICAgcmV0dXJuIGpzb25SZXF1ZXN0KHsKICAgICAgICAgICAgbWV0aG9kOiAnR0VUJywKICAgICAgICAgICAgcm91dGU6ICIvdjIvc2NoZWR1bGluZy9wdWJsaWMvIiArIG1ldGEudXNlclNsdWcgKyAiLyIgKyBtZXRhLnNsdWcgKyAiL3RpbWVzbG90cyIgKwogICAgICAgICAgICAgICAgKCI/YWZ0ZXI9IiArIG1ldGEuc3RhcnQudG9JU09TdHJpbmcoKSArICImYmVmb3JlPSIgKyBtZXRhLmVuZC50b0lTT1N0cmluZygpKSwKICAgICAgICAgICAgZGlzYWJsZUNvcnNPcHRpbWl6YXRpb246IHRydWUsCiAgICAgICAgfSk7CiAgICB9OwogICAgU2NoZWR1bGluZ0NsaWVudC5wcm90b3R5cGUuY3JlYXRlRXZlbnQgPSBmdW5jdGlvbiAobWV0YSkgewogICAgICAgIHJldHVybiBqc29uUmVxdWVzdCh7CiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLAogICAgICAgICAgICByb3V0ZTogIi92Mi9zY2hlZHVsaW5nL3B1YmxpYy8iICsgbWV0YS51c2VyU2x1ZyArICIvIiArIG1ldGEuc2x1ZyArICIvZXZlbnRzIiwKICAgICAgICAgICAgYm9keTogewogICAgICAgICAgICAgICAgc3RhcnRUaW1lOiBtZXRhLnN0YXJ0LAogICAgICAgICAgICAgICAgZW5kVGltZTogbWV0YS5lbmQsCiAgICAgICAgICAgICAgICBhdHRlbmRlZXM6IG1ldGEuYXR0ZW5kZWVzLAogICAgICAgICAgICB9LAogICAgICAgICAgICBkaXNhYmxlQ29yc09wdGltaXphdGlvbjogdHJ1ZSwKICAgICAgICB9KS5tYXAoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGFwcGx5Q2FsZW5kYXJFdmVudERlZmF1bHRzKGUpOyB9KTsKICAgIH07CiAgICByZXR1cm4gU2NoZWR1bGluZ0NsaWVudDsKfSgpKTsKZXhwb3J0IHsgU2NoZWR1bGluZ0NsaWVudCB9OwpleHBvcnQgZnVuY3Rpb24gbW9ja1NjaGVkdWxpbmdDbGllbnQoKSB7CiAgICByZXR1cm4gewogICAgICAgIGxpc3Q6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE9ic2VydmFibGUub2YoW2NyZWF0ZVNjaGVkdWxpbmcoKV0pOyB9LAogICAgICAgIGNyZWF0ZTogZnVuY3Rpb24gKHNjaGVkdWxpbmcpIHsgcmV0dXJuIE9ic2VydmFibGUub2YoY3JlYXRlU2NoZWR1bGluZyhzY2hlZHVsaW5nKSk7IH0sCiAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiAoc2NoZWR1bGluZykgeyByZXR1cm4gT2JzZXJ2YWJsZS5vZihzY2hlZHVsaW5nKTsgfSwKICAgICAgICBkZWxldGU6IGZ1bmN0aW9uIChpZCkgeyByZXR1cm4gT2JzZXJ2YWJsZS5vZihudWxsKTsgfSwKICAgICAgICBnZXRQdWJsaWM6IGZ1bmN0aW9uIChzY2hlZHVsaW5nKSB7IHJldHVybiBPYnNlcnZhYmxlLm9mKGNyZWF0ZVNjaGVkdWxpbmcoKSk7IH0sCiAgICAgICAgdGltZXNsb3RzOiBmdW5jdGlvbiAobWV0YSkgeyByZXR1cm4gT2JzZXJ2YWJsZS5vZihbY3JlYXRlVGltZVNsb3QoKV0pOyB9LAogICAgICAgIGNyZWF0ZUV2ZW50OiBmdW5jdGlvbiAobWV0YSkgeyByZXR1cm4gT2JzZXJ2YWJsZS5vZihjcmVhdGVDYWxlbmRhckV2ZW50KCkpOyB9LAogICAgfTsKfQo="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/scheduling.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/scheduling.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs';\n\nimport { CalendarEvent } from '@src/types';\nimport { Scheduling, SchedulingPublic, TimeSlot } from '@src/types/scheduling';\nimport { jsonRequest, blankRequest } from '@src/api/base';\nimport { createCalendarEvent } from '@src/mocks/calendarEvents';\nimport { createScheduling, createTimeSlot } from '@src/mocks/scheduling';\nimport {\n  SchedulingCreateMeta,\n  TimeSlotMeta,\n  SchedulingPublicMeta,\n  CalendarEventCreateMeta,\n} from '@src/ducks/scheduling';\nimport { applyDefaultSchedulingPublic, applyDefaultScheduling } from '@src/lib/scheduling';\nimport { applyCalendarEventDefaults } from '@src/lib/models/calendarEvents';\n\nexport interface PublicSchedulingMeta {\n  userSlug: string;\n  slug: string;\n}\n\nexport interface SchedulingAPI {\n  list(): Observable<Scheduling[]>;\n  create(scheduling: SchedulingCreateMeta): Observable<Scheduling>;\n  update(scheduling: Scheduling): Observable<Scheduling>;\n  delete(id: string): Observable<null>;\n\n  getPublic(meta: SchedulingPublicMeta): Observable<SchedulingPublic>;\n  timeslots(meta: TimeSlotMeta): Observable<TimeSlot[]>;\n  createEvent(meta: CalendarEventCreateMeta): Observable<CalendarEvent>;\n}\n\nexport class SchedulingClient implements SchedulingAPI {\n  list(): Observable<Scheduling[]>  {\n    return jsonRequest({\n      method: 'GET',\n      route: `/v1/scheduling`,\n    }).map(results =>\n      results.map((result: Scheduling) => applyDefaultScheduling(result),\n    ));\n  }\n\n  create(scheduling: SchedulingCreateMeta): Observable<Scheduling> {\n    return jsonRequest({\n      method: 'POST',\n      route: `/v1/scheduling`,\n      body: scheduling,\n    }).map(result => applyDefaultScheduling(result));\n  }\n\n  update(scheduling: Scheduling): Observable<Scheduling> {\n    return jsonRequest({\n      method: 'PATCH',\n      route: `/v1/scheduling/${scheduling.id}`,\n      body: scheduling,\n    }).map(result => applyDefaultScheduling(result));\n  }\n\n  delete(id: string): Observable<null> {\n    return blankRequest({\n      method: 'DELETE',\n      route: `/v1/scheduling/${id}`,\n    });\n  }\n\n  getPublic(meta: PublicSchedulingMeta): Observable<SchedulingPublic> {\n    return jsonRequest({\n      method: 'GET',\n      route: `/v2/scheduling/public/${meta.userSlug}/${meta.slug}`,\n      disableCorsOptimization: true,\n    }).map(result => applyDefaultSchedulingPublic(result));\n  }\n\n  timeslots(meta: TimeSlotMeta): Observable<TimeSlot[]> {\n    return jsonRequest({\n      method: 'GET',\n      route: `/v2/scheduling/public/${meta.userSlug}/${meta.slug}/timeslots` +\n        `?after=${meta.start.toISOString()}&before=${meta.end.toISOString()}`,\n      disableCorsOptimization: true,\n    });\n  }\n\n  createEvent(meta: CalendarEventCreateMeta): Observable<CalendarEvent> {\n    return jsonRequest({\n      method: 'POST',\n      route: `/v2/scheduling/public/${meta.userSlug}/${meta.slug}/events`,\n      body: {\n        startTime: meta.start,\n        endTime: meta.end,\n        attendees: meta.attendees,\n      },\n      disableCorsOptimization: true,\n    }).map(e => applyCalendarEventDefaults(e));\n  }\n}\n\nexport function mockSchedulingClient(): SchedulingAPI {\n  return {\n    list: () => Observable.of([createScheduling()]),\n    create: scheduling => Observable.of(createScheduling(scheduling)),\n    update: scheduling => Observable.of(scheduling),\n    delete: id => Observable.of(null),\n    getPublic: scheduling => Observable.of(createScheduling()),\n    timeslots: meta => Observable.of([createTimeSlot()]),\n    createEvent: meta => Observable.of(createCalendarEvent()),\n  };\n}\n"]}]}