{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Threads/components/ThreadList/components/InfiniteThreadList/ProviderSearchCell/index.tsx","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Threads/components/ThreadList/components/InfiniteThreadList/ProviderSearchCell/index.tsx","mtime":1675280254117},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JzsKaW1wb3J0IFByb3ZpZGVyU2VhcmNoQ2VsbCBmcm9tICcuL1Byb3ZpZGVyU2VhcmNoQ2VsbCc7CmltcG9ydCB7IHRocmVhZHNTZWFyY2ggfSBmcm9tICdAc3JjL2R1Y2tzL3RocmVhZHMnOwovLyBVcGRhdGUgU2VhcmNoIHdpbGwgcmVzZXQgbWFpbGJveCwgdGhlbiBmaXJlIGFub3RoZXIgc2VhcmNoCnZhciBtYXBEaXNwYXRjaFRvUHJvcHMgPSBmdW5jdGlvbiAoZGlzcGF0Y2gpIHsgcmV0dXJuICh7CiAgICBzZWFyY2hQcm92aWRlcjogZnVuY3Rpb24gKG1ldGEpIHsgcmV0dXJuIGRpc3BhdGNoKHRocmVhZHNTZWFyY2gobWV0YSkpOyB9LAp9KTsgfTsKZXhwb3J0IGRlZmF1bHQgY29ubmVjdChudWxsLCBtYXBEaXNwYXRjaFRvUHJvcHMpKFByb3ZpZGVyU2VhcmNoQ2VsbCk7Cg=="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Threads/components/ThreadList/components/InfiniteThreadList/ProviderSearchCell/index.tsx","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/routes/Threads/components/ThreadList/components/InfiniteThreadList/ProviderSearchCell/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAY,MAAM,aAAa,CAAC;AAEhD,OAAO,kBAA4C,MAAM,sBAAsB,CAAC;AAChF,OAAO,EAAE,aAAa,EAAE,MAAM,oBAAoB,CAAC;AAEnD,6DAA6D;AAC7D,IAAM,kBAAkB,GAAG,UAAC,QAA8B,IAAoB,OAAA,CAAC;IAC7E,cAAc,EAAE,UAAA,IAAI,IAAI,OAAA,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,EAA7B,CAA6B;CACtD,CAAC,EAF4E,CAE5E,CAAC;AAEH,eAAe,OAAO,CACpB,IAAI,EACJ,kBAAkB,CACnB,CAAC,kBAAkB,CAAC,CAAC","sourcesContent":["import { connect, Dispatch } from 'react-redux';\nimport { StoreState } from '@src/types';\nimport ProviderSearchCell, { DispatchProps, Props } from './ProviderSearchCell';\nimport { threadsSearch } from '@src/ducks/threads';\n\n// Update Search will reset mailbox, then fire another search\nconst mapDispatchToProps = (dispatch: Dispatch<StoreState>): DispatchProps => ({\n  searchProvider: meta => dispatch(threadsSearch(meta)),\n});\n\nexport default connect<Props & null, DispatchProps, Props>(\n  null,\n  mapDispatchToProps,\n)(ProviderSearchCell);\n"]}]}