{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/calendarEvents.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/calendarEvents.ts","mtime":1675280253979},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnOwppbXBvcnQgeyBqc29uUmVxdWVzdCB9IGZyb20gJy4vYmFzZSc7CmltcG9ydCB7IGNyZWF0ZUNhbGVuZGFyRXZlbnQgfSBmcm9tICdAc3JjL21vY2tzL2NhbGVuZGFyRXZlbnRzJzsKaW1wb3J0IHsgYXBwbHlDYWxlbmRhckV2ZW50RGVmYXVsdHMgfSBmcm9tICdAc3JjL2xpYi9tb2RlbHMvY2FsZW5kYXJFdmVudHMnOwp2YXIgQ2FsZW5kYXJFdmVudENsaWVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHsKICAgIGZ1bmN0aW9uIENhbGVuZGFyRXZlbnRDbGllbnQoKSB7CiAgICB9CiAgICBDYWxlbmRhckV2ZW50Q2xpZW50LnByb3RvdHlwZS5saXN0ID0gZnVuY3Rpb24gKGFjY291bnQsIGZyb20pIHsKICAgICAgICAvLyBlcGljIGxpc3RDYWxlbmRhckV2ZW50IGNvbXB1dGVzIGNhbGVuZGFyRXZlbnQgbW9kZWwgdXNpbmcgY2FsZW5kYXIgaW4gc3RhdGUKICAgICAgICByZXR1cm4ganNvblJlcXVlc3QoewogICAgICAgICAgICBtZXRob2Q6ICdHRVQnLAogICAgICAgICAgICByb3V0ZTogZnJvbQogICAgICAgICAgICAgICAgPyAiL3YxL2NhbGVuZGFyRXZlbnRzP2FjY291bnQ9IiArIGFjY291bnQgKyAiJmZyb209IiArIGZyb20KICAgICAgICAgICAgICAgIDogIi92MS9jYWxlbmRhckV2ZW50cz9hY2NvdW50PSIgKyBhY2NvdW50LAogICAgICAgIH0pLm1hcChmdW5jdGlvbiAoZXZlbnRzKSB7IHJldHVybiBldmVudHMubWFwKGZ1bmN0aW9uIChlKSB7IHJldHVybiBhcHBseUNhbGVuZGFyRXZlbnREZWZhdWx0cyhlKTsgfSk7IH0pOwogICAgfTsKICAgIENhbGVuZGFyRXZlbnRDbGllbnQucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChpZCkgewogICAgICAgIHJldHVybiBqc29uUmVxdWVzdCh7CiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsCiAgICAgICAgICAgIHJvdXRlOiAiL3YxL2NhbGVuZGFyRXZlbnRzLyIgKyBpZCwKICAgICAgICB9KS5tYXAoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGFwcGx5Q2FsZW5kYXJFdmVudERlZmF1bHRzKGUpOyB9KTsKICAgIH07CiAgICBDYWxlbmRhckV2ZW50Q2xpZW50LnByb3RvdHlwZS5yZXNwb25kID0gZnVuY3Rpb24gKGlkLCBzdGF0dXMpIHsKICAgICAgICByZXR1cm4ganNvblJlcXVlc3QoewogICAgICAgICAgICBtZXRob2Q6ICdQT1NUJywKICAgICAgICAgICAgcm91dGU6ICIvdjEvY2FsZW5kYXJFdmVudHMvIiArIGlkICsgIi9yZXNwb25kIiwKICAgICAgICAgICAgYm9keTogewogICAgICAgICAgICAgICAgc3RhdHVzOiBzdGF0dXMsCiAgICAgICAgICAgIH0sCiAgICAgICAgfSkubWFwKGZ1bmN0aW9uIChlKSB7IHJldHVybiBhcHBseUNhbGVuZGFyRXZlbnREZWZhdWx0cyhlKTsgfSk7CiAgICB9OwogICAgcmV0dXJuIENhbGVuZGFyRXZlbnRDbGllbnQ7Cn0oKSk7CmV4cG9ydCB7IENhbGVuZGFyRXZlbnRDbGllbnQgfTsKZXhwb3J0IHZhciBtb2NrQ2FsZW5kYXJFdmVudENsaWVudCA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB7CiAgICAgICAgbGlzdDogZnVuY3Rpb24gKGFjY291bnQsIGZyb20pIHsgcmV0dXJuIE9ic2VydmFibGUub2YoW10pOyB9LAogICAgICAgIGdldDogZnVuY3Rpb24gKGlkKSB7IHJldHVybiBPYnNlcnZhYmxlLm9mKGNyZWF0ZUNhbGVuZGFyRXZlbnQoKSk7IH0sCiAgICAgICAgcmVzcG9uZDogZnVuY3Rpb24gKGlkLCBzdGF0dXMpIHsgcmV0dXJuIE9ic2VydmFibGUub2YoY3JlYXRlQ2FsZW5kYXJFdmVudCgpKTsgfSwKICAgIH07Cn07Cg=="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/calendarEvents.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/calendarEvents.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAClC,OAAO,EAAE,WAAW,EAAE,MAAM,QAAQ,CAAC;AACrC,OAAO,EAAE,mBAAmB,EAAE,MAAM,2BAA2B,CAAC;AAChE,OAAO,EAAE,0BAA0B,EAAE,MAAM,gCAAgC,CAAC;AAQ5E;IAAA;IA2BA,CAAC;IA1BC,kCAAI,GAAJ,UAAK,OAAe,EAAE,IAAa;QACjC,8EAA8E;QAC9E,OAAO,WAAW,CAAC;YACjB,MAAM,EAAE,KAAK;YACb,KAAK,EAAE,IAAI;gBACT,CAAC,CAAC,gCAA8B,OAAO,cAAS,IAAM;gBACtD,CAAC,CAAC,gCAA8B,OAAS;SAC5C,CAAC,CAAC,GAAG,CAAC,UAAC,MAAuB,IAAK,OAAA,MAAM,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,0BAA0B,CAAC,CAAC,CAAC,EAA7B,CAA6B,CAAC,EAA9C,CAA8C,CAAC,CAAC;IACtF,CAAC;IAED,iCAAG,GAAH,UAAI,EAAU;QACZ,OAAO,WAAW,CAAC;YACjB,MAAM,EAAE,KAAK;YACb,KAAK,EAAE,wBAAsB,EAAI;SAClC,CAAC,CAAC,GAAG,CAAC,UAAC,CAAgB,IAAK,OAAA,0BAA0B,CAAC,CAAC,CAAC,EAA7B,CAA6B,CAAC,CAAC;IAC9D,CAAC;IAED,qCAAO,GAAP,UAAQ,EAAU,EAAE,MAAsB;QACxC,OAAO,WAAW,CAAC;YACjB,MAAM,EAAE,MAAM;YACd,KAAK,EAAE,wBAAsB,EAAE,aAAU;YACzC,IAAI,EAAE;gBACJ,MAAM,QAAA;aACP;SACF,CAAC,CAAC,GAAG,CAAC,UAAC,CAAgB,IAAK,OAAA,0BAA0B,CAAC,CAAC,CAAC,EAA7B,CAA6B,CAAC,CAAC;IAC9D,CAAC;IACH,0BAAC;AAAD,CAAC,AA3BD,IA2BC;;AAED,MAAM,CAAC,IAAM,uBAAuB,GAAG;IACrC,OAAO;QACL,IAAI,EAAE,UAAC,OAAe,EAAE,IAAa,IAAK,OAAA,UAAU,CAAC,EAAE,CAAC,EAAE,CAAC,EAAjB,CAAiB;QAC3D,GAAG,EAAE,UAAC,EAAU,IAAK,OAAA,UAAU,CAAC,EAAE,CAAC,mBAAmB,EAAE,CAAC,EAApC,CAAoC;QACzD,OAAO,EAAE,UAAC,EAAU,EAAE,MAAsB,IAAK,OAAA,UAAU,CAAC,EAAE,CAAC,mBAAmB,EAAE,CAAC,EAApC,CAAoC;KACtF,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { CalendarEvent, AttendeeStatus } from '@src/types';\nimport { Observable } from 'rxjs';\nimport { jsonRequest } from './base';\nimport { createCalendarEvent } from '@src/mocks/calendarEvents';\nimport { applyCalendarEventDefaults } from '@src/lib/models/calendarEvents';\n\nexport interface CalendarEventAPI {\n  list(account: string, from?: string): Observable<CalendarEvent[]>;\n  get(id: string): Observable<CalendarEvent>;\n  respond(id: string, status: AttendeeStatus): Observable<CalendarEvent>;\n}\n\nexport class CalendarEventClient implements CalendarEventAPI {\n  list(account: string, from?: string): Observable<CalendarEvent[]> {\n    // epic listCalendarEvent computes calendarEvent model using calendar in state\n    return jsonRequest({\n      method: 'GET',\n      route: from\n        ? `/v1/calendarEvents?account=${account}&from=${from}`\n        : `/v1/calendarEvents?account=${account}`,\n    }).map((events: CalendarEvent[]) => events.map(e => applyCalendarEventDefaults(e)));\n  }\n\n  get(id: string): Observable<CalendarEvent> {\n    return jsonRequest({\n      method: 'GET',\n      route: `/v1/calendarEvents/${id}`,\n    }).map((e: CalendarEvent) => applyCalendarEventDefaults(e));\n  }\n\n  respond(id: string, status: AttendeeStatus): Observable<CalendarEvent> {\n    return jsonRequest({\n      method: 'POST',\n      route: `/v1/calendarEvents/${id}/respond`,\n      body: {\n        status,\n      },\n    }).map((e: CalendarEvent) => applyCalendarEventDefaults(e));\n  }\n}\n\nexport const mockCalendarEventClient = (): CalendarEventAPI => {\n  return {\n    list: (account: string, from?: string) => Observable.of([]),\n    get: (id: string) => Observable.of(createCalendarEvent()),\n    respond: (id: string, status: AttendeeStatus) => Observable.of(createCalendarEvent()),\n  };\n};\n"]}]}