{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/contactNotes.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/contactNotes.ts","mtime":1675280254055},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgb3JkZXJCeSB9IGZyb20gJ2xvZGFzaCc7CmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJzsKaW1wb3J0IHsgQWN0aW9uU3RhdHVzIH0gZnJvbSAnQHNyYy90eXBlcy9pbmRleCc7CmltcG9ydCBDYWNoZSwgeyBTdG9yZXMgfSBmcm9tICdAc3JjL2xpYi9kYic7CmltcG9ydCB7IENPTlRBQ1RfTk9URVNfRkVUQ0gsIGNvbnRhY3ROb3Rlc0ZldGNoLCB9IGZyb20gJ0BzcmMvZHVja3MvY29udGFjdE5vdGVzJzsKdmFyIGNvbnRhY3ROb3Rlc0xpc3QgPSBmdW5jdGlvbiAoY29udGFjdCkgewogICAgcmV0dXJuIENhY2hlLmxpc3QoU3RvcmVzLkNvbnRhY3ROb3RlcywgZnVuY3Rpb24gKG5vdGUpIHsKICAgICAgICBpZiAobm90ZS5jb250YWN0ID09PSBjb250YWN0KSB7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9KQogICAgICAgIC5tYXAoZnVuY3Rpb24gKG5vdGVzKSB7IHJldHVybiBvcmRlckJ5KG5vdGVzLCAndXBkYXRlZCcsICdkZXNjJyk7IH0pOwp9OwpleHBvcnQgdmFyIGZldGNoQ29udGFjdE5vdGVzID0gZnVuY3Rpb24gKGFjdGlvbiQsIHN0b3JlKSB7CiAgICByZXR1cm4gYWN0aW9uJAogICAgICAgIC5vZlR5cGUoQ09OVEFDVF9OT1RFU19GRVRDSCkKICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChhY3Rpb24pIHsgcmV0dXJuIGFjdGlvbi5zdGF0dXMgPT09IEFjdGlvblN0YXR1cy5TdGFydDsgfSkKICAgICAgICAuZmxhdE1hcChmdW5jdGlvbiAoYWN0aW9uKSB7CiAgICAgICAgcmV0dXJuIGNvbnRhY3ROb3Rlc0xpc3QoYWN0aW9uLm1ldGEpCiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKG5vdGVzKSB7IHJldHVybiBjb250YWN0Tm90ZXNGZXRjaChhY3Rpb24ubWV0YSwgbm90ZXMpOyB9KQogICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGUpIHsgcmV0dXJuIE9ic2VydmFibGUub2YoY29udGFjdE5vdGVzRmV0Y2goYWN0aW9uLm1ldGEsIGUpKTsgfSk7CiAgICB9KTsKfTsKZXhwb3J0IGRlZmF1bHQgW2ZldGNoQ29udGFjdE5vdGVzXTsK"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/contactNotes.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/contactNotes.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,QAAQ,CAAC;AACjC,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAGlC,OAAO,EAAsB,YAAY,EAA2B,MAAM,kBAAkB,CAAC;AAE7F,OAAO,KAAK,EAAE,EAAE,MAAM,EAAE,MAAM,aAAa,CAAC;AAE5C,OAAO,EACL,mBAAmB,EAAE,iBAAiB,GACvC,MAAM,yBAAyB,CAAC;AAEjC,IAAM,gBAAgB,GAAG,UAAC,OAAe;IACvC,OAAO,KAAK,CAAC,IAAI,CAAc,MAAM,CAAC,YAAY,EAAE,UAAC,IAAI;QACvD,IAAI,IAAI,CAAC,OAAO,KAAK,OAAO,EAAE;YAC5B,OAAO,IAAI,CAAC;SACb;QAED,OAAO,KAAK,CAAC;IACf,CAAC,CAAC;SACD,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,OAAO,CAAC,KAAK,EAAE,SAAS,EAAE,MAAM,CAAC,EAAjC,CAAiC,CAAC,CAAC;AACnD,CAAC,CAAC;AAEF,MAAM,CAAC,IAAM,iBAAiB,GAC5B,UAAC,OAAO,EAAE,KAAK;IACb,OAAA,OAAO;SACJ,MAAM,CAAC,mBAAmB,CAAC;SAC3B,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,MAAM,KAAK,YAAY,CAAC,KAAK,EAApC,CAAoC,CAAC;SACtD,OAAO,CAAC,UAAA,MAAM;QACb,OAAA,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC;aAC1B,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,iBAAiB,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,EAArC,CAAqC,CAAC;aACnD,KAAK,CAAC,UAAC,CAAQ,IAAK,OAAA,UAAU,CAAC,EAAE,CAAC,iBAAiB,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,EAAhD,CAAgD,CAAC;IAFxE,CAEwE,CACzE;AAPH,CAOG,CAAC;AAER,eAAe,CAAC,iBAAiB,CAAC,CAAC","sourcesContent":["import { orderBy } from 'lodash';\nimport { Observable } from 'rxjs';\nimport { Epic } from 'redux-observable';\n\nimport { StoreState, Action, ActionStatus, ContactNote, TeamMember } from '@src/types/index';\n\nimport Cache, { Stores } from '@src/lib/db';\n\nimport {\n  CONTACT_NOTES_FETCH, contactNotesFetch,\n} from '@src/ducks/contactNotes';\n\nconst contactNotesList = (contact: string) => {\n  return Cache.list<ContactNote>(Stores.ContactNotes, (note) => {\n    if (note.contact === contact) {\n      return true;\n    }\n\n    return false;\n  })\n  .map(notes => orderBy(notes, 'updated', 'desc'));\n};\n\nexport const fetchContactNotes: Epic<Action<string, ContactNote[]|TeamMember|null>, StoreState> =\n  (action$, store) =>\n    action$\n      .ofType(CONTACT_NOTES_FETCH)\n      .filter(action => action.status === ActionStatus.Start)\n      .flatMap(action =>\n        contactNotesList(action.meta)\n          .map(notes => contactNotesFetch(action.meta, notes))\n          .catch((e: Error) => Observable.of(contactNotesFetch(action.meta, e))),\n      );\n\nexport default [fetchContactNotes];\n"]}]}