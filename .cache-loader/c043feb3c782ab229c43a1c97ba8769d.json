{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/sequenceRecipients.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/sequenceRecipients.ts","mtime":1675280253980},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/sequenceRecipients.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/sequenceRecipients.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs';\n\nimport {\n  SequenceRecipient, SequenceRecipientFilter, SequenceRecipientStatus,\n} from '@src/types/sequences';\nimport { jsonRequest, blankRequest, sequenceRecipientBatchRequest } from './base';\nimport { createSequenceRecipient } from '@src/mocks/sequences';\nimport { applySequenceRecipientDefaults } from '@src/lib/models/sequenceRecipients';\nimport {\n  SequenceRecipientUploadPayload,\n  SequenceRecipientListMeta,\n  SequenceRecipientCreatePayload,\n  SequenceRecipientCreateRecipient,\n} from '@src/ducks/sequenceRecipients';\n\ninterface SequenceCreateBody {\n  sequence: string;\n  recipients: SequenceRecipientCreateRecipient[];\n}\n\ninterface SequenceRecipientValidateBody {\n  email: string;\n  sequence: string;\n  givenName?: string;\n  familyName?: string;\n  variables?: { [header: string]: string };\n}\n\nexport interface SequenceRecipientAPI {\n  list(meta: SequenceRecipientListMeta): Observable<SequenceRecipient[]>;\n  upload(\n    sequence: string,\n    cloudFile: string,\n    emailHeader: string,\n    givenNameHeader?: string,\n    familyNameHeader?: string,\n  ): Observable<SequenceRecipientUploadPayload>;\n  update(recipient: Partial<SequenceRecipient>): Observable<SequenceRecipient>;\n  delete(recipient: SequenceRecipient): Observable<null>;\n  create(recipient: SequenceCreateBody):\n    Observable<SequenceRecipientCreatePayload>;\n  validate(recipient: SequenceRecipientValidateBody):\n    Observable<SequenceRecipient>;\n  reactivate(recipient: SequenceRecipient): Observable<SequenceRecipient>;\n}\n\nexport class SequenceRecipientClient implements SequenceRecipientAPI {\n  list(meta: SequenceRecipientListMeta): Observable<SequenceRecipient[]> {\n    const query = new URLSearchParams();\n\n    if (meta.query) {\n      query.append('q', meta.query);\n    }\n\n    if (meta.filter && meta.filter !== SequenceRecipientFilter.All) {\n      query.append('filter', meta.filter.toLowerCase());\n    }\n\n    if (meta.sort) {\n      query.append('sort', meta.sort);\n      if (meta.desc) {\n        query.append('desc', 'true');\n      }\n    }\n\n    if (meta.offset) {\n      query.append('offset', meta.offset.toString());\n    }\n\n    const queryString = query.toString();\n    return jsonRequest({\n      method: 'GET',\n      route: !!queryString ?\n        `/v1/sequences/${meta.sequence}/recipients?${queryString}` :\n        `/v1/sequences/${meta.sequence}/recipients`,\n    })\n    .map(recipients => recipients.map(\n      (r: SequenceRecipient) => applySequenceRecipientDefaults(r),\n    ));\n  }\n\n  upload(\n    sequence: string,\n    cloudFile: string,\n    emailHeader: string,\n    givenNameHeader: string,\n    familyNameHeader: string,\n  ): Observable<SequenceRecipientUploadPayload> {\n    return jsonRequest({\n      method: 'POST',\n      route: `/v5/sequences/${sequence}/recipients/upload`,\n      body: {\n        cloudFile,\n        emailHeader,\n        givenNameHeader,\n        familyNameHeader,\n      },\n    })\n    .map((results: SequenceRecipientUploadPayload) => ({\n      ...results,\n      recipients: results.recipients\n        .map(applySequenceRecipientDefaults),\n      invalidRecipients: results.invalidRecipients\n        .map(applySequenceRecipientDefaults),\n    }));\n  }\n\n  create(meta: SequenceCreateBody): Observable<SequenceRecipientCreatePayload> {\n    return sequenceRecipientBatchRequest({\n      requests: meta.recipients.map(r => ({\n        method: 'POST',\n        url: `/v1/sequences/${meta.sequence}/recipients`,\n        body: JSON.stringify(r),\n      })),\n    })\n    .map((response) => {\n      const recipients: SequenceRecipient[] = [];\n      const invalidRecipients: SequenceRecipientCreateRecipient[] = [];\n\n      response.forEach((r, i) => {\n        if (r.code === 201) {\n          recipients.push(applySequenceRecipientDefaults(r.body));\n        } else {\n          invalidRecipients.push({\n            ...meta.recipients[i],\n            status: SequenceRecipientStatus.Invalid,\n            invalidReason: r.body.description,\n          });\n        }\n      });\n\n      return ({\n        recipients,\n        invalidRecipients,\n      });\n    });\n  }\n\n  update(recipient: Partial<SequenceRecipient>): Observable<SequenceRecipient> {\n    return jsonRequest({\n      method: 'PATCH',\n      route: `/v1/sequences/${recipient.sequence}/recipients/${recipient.id}`,\n      body: recipient,\n    })\n      .map(s => applySequenceRecipientDefaults(s));\n  }\n\n  delete(recipient: SequenceRecipient): Observable<null> {\n    return blankRequest({\n      method: 'DELETE',\n      route: `/v1/sequences/${recipient.sequence}/recipients/${recipient.id}`,\n    });\n  }\n\n  validate(recipient: SequenceRecipientValidateBody): Observable<SequenceRecipient> {\n    return jsonRequest({\n      method: 'POST',\n      route: `/v2/sequences/${recipient.sequence}/recipients/validate`,\n      body: {\n        email: recipient.email,\n        givenName: recipient.givenName,\n        familyName: recipient.familyName,\n        variables: recipient.variables,\n      },\n    }).map(s => applySequenceRecipientDefaults(s));\n  }\n\n  reactivate(recipient: SequenceRecipient): Observable<SequenceRecipient> {\n    return jsonRequest({\n      method: 'POST',\n      route: `/v1/sequences/${recipient.sequence}/recipients/${recipient.id}/reactivate`,\n    });\n  }\n}\n\nexport function mockSequenceRecipientClient(): SequenceRecipientAPI {\n  return {\n    list: () => Observable.of([createSequenceRecipient()]),\n    upload: info => Observable.of({\n      recipients: [createSequenceRecipient()],\n      invalidRecipients: [],\n    }),\n    update: recipient => Observable.of(createSequenceRecipient(recipient)),\n    delete: recipient => Observable.of(null),\n    create: recipient => Observable.of({\n      recipients: [createSequenceRecipient()],\n      invalidRecipients: [],\n    }),\n    validate: recipient => Observable.of(createSequenceRecipient(recipient)),\n    reactivate: recipient => Observable.of({\n      ...createSequenceRecipient(recipient),\n      status: SequenceRecipientStatus.Active,\n    }),\n  };\n}\n"]}]}