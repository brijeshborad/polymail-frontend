{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/models/messageBodies.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/models/messageBodies.ts","mtime":1675280254066},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkgewogICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHsKICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHsKICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTsKICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKQogICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07CiAgICAgICAgfQogICAgICAgIHJldHVybiB0OwogICAgfTsKICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9OwppbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7CmltcG9ydCBDYWNoZSwgeyBTdG9yZXMgfSBmcm9tICdAc3JjL2xpYi9kYic7CmltcG9ydCB7IGludGVyc2VjdGlvbiB9IGZyb20gJ2xvZGFzaCc7CmltcG9ydCB7IGdldFNlYXJjaERiLCBTRUFSQ0hfQk9ESUVTX0VWSUNUSU9OX0RBWVMgfSBmcm9tICcuLi9zZWFyY2hEYic7CmltcG9ydCB7IGdldFNlYXJjaERiQ29uZmlnIH0gZnJvbSAnLi4vZGV2aWNlJzsKaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnOwppbXBvcnQgeyBjYXB0dXJlRXhjZXB0aW9uIH0gZnJvbSAnQHNlbnRyeS9icm93c2VyJzsKZXhwb3J0IHZhciBjb21wdXRlTWVzc2FnZUJvZHkgPSBmdW5jdGlvbiAoYm9keSkgewogICAgdmFyIGNvbXB1dGVkID0gX19hc3NpZ24oe30sIGJvZHkpOwogICAgaWYgKCEoYm9keS51cGRhdGVkIGluc3RhbmNlb2YgRGF0ZSkpIHsKICAgICAgICBjb21wdXRlZC51cGRhdGVkID0gbmV3IERhdGUoYm9keS51cGRhdGVkKTsKICAgIH0KICAgIHJldHVybiBfX2Fzc2lnbih7fSwgY29tcHV0ZWQpOwp9OwpleHBvcnQgZnVuY3Rpb24gY2FjaGVHZXRNZXNzYWdlQm9kaWVzKHRocmVhZCkgewogICAgdmFyIGNhY2hlUmVxdWVzdCA9IENhY2hlLmxpc3RJbmRleChTdG9yZXMuTWVzc2FnZUJvZGllcywgJ3RocmVhZCcsIElEQktleVJhbmdlLm9ubHkodGhyZWFkKSwgdHJ1ZSk7CiAgICByZXR1cm4gY2FjaGVSZXF1ZXN0Owp9CmV4cG9ydCBmdW5jdGlvbiBjYWNoZVNhdmVNZXNzYWdlQm9kaWVzKG1lc3NhZ2VCb2RpZXMpIHsKICAgIHJldHVybiBDYWNoZS5sb2FkKFN0b3Jlcy5NZXNzYWdlQm9kaWVzLCBtZXNzYWdlQm9kaWVzKTsKfQpleHBvcnQgZnVuY3Rpb24gY2FjaGVEZWxldGVNZXNzYWdlQm9kaWVzKHRocmVhZCkgewogICAgcmV0dXJuIENhY2hlLmRlbGV0ZUluZGV4UmFuZ2UoU3RvcmVzLk1lc3NhZ2VCb2RpZXMsICd0aHJlYWQnLCBJREJLZXlSYW5nZS5vbmx5KHRocmVhZCkpCiAgICAgICAgLmZsYXRNYXAoZnVuY3Rpb24gKCkgewogICAgICAgIGlmIChnZXRTZWFyY2hEYkNvbmZpZygpLmVuYWJsZWQpIHsKICAgICAgICAgICAgcmV0dXJuIE9ic2VydmFibGUKICAgICAgICAgICAgICAgIC5mcm9tKGdldFNlYXJjaERiKCkuYm9kaWVzLndoZXJlKCd0aHJlYWQnKS5lcXVhbHModGhyZWFkKS5kZWxldGUoKSkKICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gbnVsbDsgfSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBPYnNlcnZhYmxlLm9mKG51bGwpOwogICAgfSk7Cn0KZnVuY3Rpb24gZ2V0RnJlc2hNZXNzYWdlQm9kaWVzKGFwaSwgdGhyZWFkKSB7CiAgICByZXR1cm4gYXBpLmdldE1lc3NhZ2VCb2RpZXModGhyZWFkKQogICAgICAgIC5kbyhmdW5jdGlvbiAocmVzdWx0cykgewogICAgICAgIGlmIChyZXN1bHRzLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICBjYWNoZURlbGV0ZU1lc3NhZ2VCb2RpZXModGhyZWFkKS5zdWJzY3JpYmUoewogICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1jb25zb2xlCiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTsKICAgICAgICAgICAgICAgICAgICBjYXB0dXJlRXhjZXB0aW9uKGUpOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgY2FjaGVTYXZlTWVzc2FnZUJvZGllcyhyZXN1bHRzKS5zdWJzY3JpYmUoewogICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tY29uc29sZQogICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTsKICAgICAgICAgICAgICAgIGNhcHR1cmVFeGNlcHRpb24oZSk7CiAgICAgICAgICAgIH0sCiAgICAgICAgfSk7CiAgICB9KTsKfQovLyBnZXRNZXNzYWdlQm9kaWVzIGZldGNoZXMgbWVzc2FnZSBib2RpZXMgZnJvbSB0aGUgY2FjaGUsCi8vIGJ1dCBmYWxscyBiYWNrIHRvIG1ha2luZyBhbiBBUEkgcmVxdWVzdCBpZiBtZXNzYWdlIGJvZGllcyBhcmUgbm90IGZvdW5kLgpleHBvcnQgZnVuY3Rpb24gZ2V0TWVzc2FnZUJvZGllcyhhcGksIHRocmVhZCkgewogICAgcmV0dXJuIGNhY2hlR2V0TWVzc2FnZUJvZGllcyh0aHJlYWQuaWQpCiAgICAgICAgLmZsYXRNYXAoZnVuY3Rpb24gKG1lc3NhZ2VCb2RpZXMpIHsKICAgICAgICB2YXIgYm9keUlkcyA9IG1lc3NhZ2VCb2RpZXMubWFwKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtLmlkOyB9KTsKICAgICAgICB2YXIgbWVzc2FnZUlkcyA9IHRocmVhZC5tZXNzYWdlcy5tYXAoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0uaWQ7IH0pOwogICAgICAgIHZhciBpbnRlcnNlY3Rpb25JZHMgPSBpbnRlcnNlY3Rpb24oYm9keUlkcywgbWVzc2FnZUlkcyk7CiAgICAgICAgLy8gSWYgbGVuZ3RoIG9mIG1hdGNoZWQgaWRzIGFyZSBpbmNvcnJlY3QsIHJlcXVlc3QgZnJlc2ggYmF0Y2ggb2YgbWVzc2FnZSBib2RpZXMKICAgICAgICBpZiAoaW50ZXJzZWN0aW9uSWRzLmxlbmd0aCAhPT0gbWVzc2FnZUlkcy5sZW5ndGgpIHsKICAgICAgICAgICAgcmV0dXJuIGdldEZyZXNoTWVzc2FnZUJvZGllcyhhcGksIHRocmVhZC5pZCk7CiAgICAgICAgfQogICAgICAgIC8vIFJldHVybiBtZXNzYWdlIGJvZGllcwogICAgICAgIHJldHVybiBPYnNlcnZhYmxlLm9mKG1lc3NhZ2VCb2RpZXMpOwogICAgfSk7Cn0KLy8gbGltaXRlZCB0byAzMDAgZGVsZXRpb25zIGF0IGEgdGltZQpleHBvcnQgZnVuY3Rpb24gZXZpY3RFeHBpcmVkTWVzc2FnZUJvZGllcygpIHsKICAgIHZhciBib2R5RGVsZXRlUmFuZ2UgPSBJREJLZXlSYW5nZS51cHBlckJvdW5kKG1vbWVudCgpLnN1YnRyYWN0KFNFQVJDSF9CT0RJRVNfRVZJQ1RJT05fREFZUywgJ2RheXMnKS50b0RhdGUoKSk7CiAgICByZXR1cm4gQ2FjaGUuZGVsZXRlSW5kZXhSYW5nZShTdG9yZXMuTWVzc2FnZUJvZGllcywgJ3VwZGF0ZWQnLCBib2R5RGVsZXRlUmFuZ2UsIDMwMCk7Cn0K"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/models/messageBodies.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/models/messageBodies.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs';\nimport { Thread, MessageBody } from '@src/types';\nimport Cache, { Stores } from '@src/lib/db';\nimport { ThreadAPI } from '@src/api/threads';\nimport { intersection } from 'lodash';\nimport { getSearchDb, SEARCH_BODIES_EVICTION_DAYS } from '../searchDb';\nimport { getSearchDbConfig } from '../device';\nimport moment from 'moment';\nimport { captureException } from '@sentry/browser';\n\nexport const computeMessageBody = (body: MessageBody): MessageBody => {\n  const computed = {\n    ...body,\n  };\n  if (!(body.updated instanceof Date)) {\n    computed.updated = new Date(body.updated);\n  }\n  return {\n    ...computed,\n  };\n};\n\nexport function cacheGetMessageBodies(thread: string): Observable<MessageBody[]> {\n  const cacheRequest = Cache.listIndex<MessageBody>(\n    Stores.MessageBodies,\n    'thread',\n    IDBKeyRange.only(thread),\n    true,\n  );\n  return cacheRequest;\n}\n\nexport function cacheSaveMessageBodies(messageBodies: MessageBody[]): Observable<null> {\n  return Cache.load(Stores.MessageBodies, messageBodies);\n}\n\nexport function cacheDeleteMessageBodies(thread: string): Observable<null> {\n  return Cache.deleteIndexRange(Stores.MessageBodies, 'thread', IDBKeyRange.only(thread))\n    .flatMap(() => { // Handle deletions from search db\n      if (getSearchDbConfig().enabled) {\n        return Observable\n          .from(getSearchDb().bodies.where('thread').equals(thread).delete())\n          .map(() => null);\n      }\n      return Observable.of(null);\n    });\n}\n\nfunction getFreshMessageBodies(api: ThreadAPI, thread: string): Observable<MessageBody[]> {\n  return api.getMessageBodies(thread)\n    .do((results: MessageBody[]) => {\n      if (results.length === 0) {\n        cacheDeleteMessageBodies(thread).subscribe({\n          error: (e) => {\n            // tslint:disable-next-line: no-console\n            console.error(e);\n            captureException(e);\n          },\n        });\n        return;\n      }\n\n      cacheSaveMessageBodies(results).subscribe({\n        error: (e) => {\n          // tslint:disable-next-line: no-console\n          console.error(e);\n          captureException(e);\n        },\n      });\n    });\n}\n\n// getMessageBodies fetches message bodies from the cache,\n// but falls back to making an API request if message bodies are not found.\nexport function getMessageBodies(api: ThreadAPI, thread: Thread): Observable<MessageBody[]> {\n  return cacheGetMessageBodies(thread.id)\n    .flatMap((messageBodies: MessageBody[]) => {\n      const bodyIds = messageBodies.map(m => m.id);\n      const messageIds = thread.messages.map(m => m.id);\n      const intersectionIds = intersection(bodyIds, messageIds);\n\n      // If length of matched ids are incorrect, request fresh batch of message bodies\n      if (intersectionIds.length !== messageIds.length) {\n        return getFreshMessageBodies(api, thread.id);\n      }\n\n      // Return message bodies\n      return Observable.of(messageBodies);\n    });\n}\n\n// limited to 300 deletions at a time\nexport function evictExpiredMessageBodies(): Observable<null> {\n  const bodyDeleteRange = IDBKeyRange.upperBound(\n    moment().subtract(SEARCH_BODIES_EVICTION_DAYS, 'days').toDate(),\n  );\n  return Cache.deleteIndexRange(Stores.MessageBodies, 'updated', bodyDeleteRange, 300);\n}\n"]}]}