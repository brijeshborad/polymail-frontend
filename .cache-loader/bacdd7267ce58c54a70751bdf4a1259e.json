{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/device.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/device.ts","mtime":1675280254063},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkgewogICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHsKICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHsKICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTsKICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKQogICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07CiAgICAgICAgfQogICAgICAgIHJldHVybiB0OwogICAgfTsKICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9Owp2YXIgX2E7CmltcG9ydCBwbGF0Zm9ybSBmcm9tICdwbGF0Zm9ybSc7CmltcG9ydCB7IERldmljZU5vdGlmaWNhdGlvbnNUcmFja2luZyB9IGZyb20gJ0BzcmMvdHlwZXMnOwovLyBHbG9iYWwgVmFyaWFibGVzIHRvIGRldGVybWluZSB3aGV0aGVyIG9yIG5vdCB0byB1c2Ugc2VhcmNoIGRiCnZhciBTZWFyY2hEYkNvbmZpZyA9IHsKICAgIGVuYWJsZWQ6IGZhbHNlLAogICAgdGhyZWFkc0V2aWN0aW9uRGF5czogOTAsCn07CmV4cG9ydCB2YXIgZ2V0U2VhcmNoRGJDb25maWcgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gU2VhcmNoRGJDb25maWc7Cn07CmV4cG9ydCB2YXIgZW5hYmxlU2VhcmNoRGIgPSBmdW5jdGlvbiAoY29uZmlnKSB7CiAgICBTZWFyY2hEYkNvbmZpZyA9IF9fYXNzaWduKF9fYXNzaWduKF9fYXNzaWduKHt9LCBTZWFyY2hEYkNvbmZpZyksIGNvbmZpZyksIHsgZW5hYmxlZDogdHJ1ZSB9KTsKICAgIHJldHVybjsKfTsKLy8gR2xvYmFsIHZhcmlhYmxlIHRvIGRldGVybWluZSBpZiBjaHJvbWUgb3IgY2hyb21lIGRlcml2YXRpdmUKZXhwb3J0IHZhciBJU19DSFJPTUUgPSBwbGF0Zm9ybSAmJiBwbGF0Zm9ybS5sYXlvdXQgJiYgcGxhdGZvcm0ubGF5b3V0ID09PSAnQmxpbmsnOwovLyBHbG9iYWwgdmFyaWFibGUgdGhhdCBkZXRlcm1pbmVzIGlmIGRldmljZSBpcyBtYWMKZXhwb3J0IHZhciBJU19NQUMgPSBwbGF0Zm9ybSAmJiBwbGF0Zm9ybS5vcyAmJiBwbGF0Zm9ybS5vcy5mYW1pbHkgJiYKICAgIHBsYXRmb3JtLm9zLmZhbWlseS50b1VwcGVyQ2FzZSgpLnN0YXJ0c1dpdGgoJ09TIFgnKSB8fCBmYWxzZTsKZXhwb3J0IHZhciBJU19XSU5ET1dTID0gcGxhdGZvcm0gJiYgcGxhdGZvcm0ub3MgJiYgcGxhdGZvcm0ub3MuZmFtaWx5ICYmCiAgICBwbGF0Zm9ybS5vcy5mYW1pbHkudG9VcHBlckNhc2UoKS5zdGFydHNXaXRoKCdXSU5ET1dTJykgfHwgZmFsc2U7Ci8vIEdsb2JhbCB2YXJpYWJsZSB0byBkZXRlcm1pbmUgaWYgZGV2aWNlIGlzIG1vYmlsZQpleHBvcnQgdmFyIElTX0lPUyA9ICgoX2EgPSBwbGF0Zm9ybS5vcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmZhbWlseSkgJiYKICAgIFsnaU9TJywgJ2lQYWQnXS5pbmRleE9mKHBsYXRmb3JtLm9zLmZhbWlseSkgPiAtMTsKZXhwb3J0IGZ1bmN0aW9uIGFwcGx5RGV2aWNlRGVmYXVsdHMoZGV2aWNlKSB7CiAgICB2YXIgbmV3RGV2aWNlID0gX19hc3NpZ24oeyB2ZXJzaW9uOiAwIH0sIGRldmljZSk7CiAgICBpZiAoIShuZXdEZXZpY2UuY3JlYXRlZCBpbnN0YW5jZW9mIERhdGUpICYmICh0eXBlb2YgbmV3RGV2aWNlLmNyZWF0ZWQgPT09ICdzdHJpbmcnKSkgewogICAgICAgIG5ld0RldmljZS5jcmVhdGVkID0gbmV3IERhdGUobmV3RGV2aWNlLmNyZWF0ZWQpOwogICAgfQogICAgaWYgKCEobmV3RGV2aWNlLnVwZGF0ZWQgaW5zdGFuY2VvZiBEYXRlKSAmJiAodHlwZW9mIG5ld0RldmljZS51cGRhdGVkID09PSAnc3RyaW5nJykpIHsKICAgICAgICBuZXdEZXZpY2UudXBkYXRlZCA9IG5ldyBEYXRlKG5ld0RldmljZS51cGRhdGVkKTsKICAgIH0KICAgIGlmICghKG5ld0RldmljZS5sYXN0U2VlbiBpbnN0YW5jZW9mIERhdGUpICYmICh0eXBlb2YgbmV3RGV2aWNlLmxhc3RTZWVuID09PSAnc3RyaW5nJykpIHsKICAgICAgICBuZXdEZXZpY2UubGFzdFNlZW4gPSBuZXcgRGF0ZShuZXdEZXZpY2UubGFzdFNlZW4pOwogICAgfQogICAgcmV0dXJuIG5ld0RldmljZTsKfQpleHBvcnQgdmFyIERFVklDRV9UUkFDS0lOR19OT1RJRklDQVRJT05fU0VUVElOR1MgPSBbCiAgICB7CiAgICAgICAgdHlwZTogRGV2aWNlTm90aWZpY2F0aW9uc1RyYWNraW5nLkZpcnN0LAogICAgICAgIGRlc2NyaXB0aW9uOiAnRmlyc3QgdGltZSBhIG1lc3NhZ2UgaXMgcmVhZCcsCiAgICB9LAogICAgewogICAgICAgIHR5cGU6IERldmljZU5vdGlmaWNhdGlvbnNUcmFja2luZy5BbGwsCiAgICAgICAgZGVzY3JpcHRpb246ICdFdmVyeSB0aW1lIGEgbWVzc2FnZSBpcyByZWFkJywKICAgIH0sCiAgICB7CiAgICAgICAgdHlwZTogRGV2aWNlTm90aWZpY2F0aW9uc1RyYWNraW5nLk5vbmUsCiAgICAgICAgZGVzY3JpcHRpb246ICdEb25cJ3Qgbm90aWZ5JywKICAgIH0sCl07Cg=="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/device.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/lib/device.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,OAAO,QAAQ,MAAM,UAAU,CAAC;AAChC,OAAO,EAAU,2BAA2B,EAAE,MAAM,YAAY,CAAC;AAEjE,gEAAgE;AAChE,IAAI,cAAc,GAA0B;IAC1C,OAAO,EAAE,KAAK;IACd,mBAAmB,EAAE,EAAE;CACxB,CAAC;AAEF,MAAM,CAAC,IAAM,iBAAiB,GAAG;IAC/B,OAAO,cAAc,CAAC;AACxB,CAAC,CAAC;AAQF,MAAM,CAAC,IAAM,cAAc,GAAG,UAAC,MAAsC;IACnE,cAAc,kCACT,cAAc,GACd,MAAM,KACT,OAAO,EAAE,IAAI,GACd,CAAC;IACF,OAAO;AACT,CAAC,CAAC;AAEF,8DAA8D;AAC9D,MAAM,CAAC,IAAM,SAAS,GAAG,QAAQ,IAAI,QAAQ,CAAC,MAAM,IAAI,QAAQ,CAAC,MAAM,KAAK,OAAO,CAAC;AAEpF,mDAAmD;AACnD,MAAM,CAAC,IAAM,MAAM,GAAG,QAAQ,IAAI,QAAQ,CAAC,EAAE,IAAI,QAAQ,CAAC,EAAE,CAAC,MAAM;IACjE,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC;AAE/D,MAAM,CAAC,IAAM,UAAU,GAAG,QAAQ,IAAI,QAAQ,CAAC,EAAE,IAAI,QAAQ,CAAC,EAAE,CAAC,MAAM;IACrE,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,KAAK,CAAC;AAElE,mDAAmD;AACnD,MAAM,CAAC,IAAM,MAAM,GAAG,OAAA,QAAQ,CAAC,EAAE,0CAAE,MAAM;IACvC,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;AAEnD,MAAM,UAAU,mBAAmB,CAAC,MAAc;IAChD,IAAM,SAAS,cACb,OAAO,EAAE,CAAC,IACP,MAAM,CACV,CAAC;IAEF,IAAI,CAAC,CAAC,SAAS,CAAC,OAAO,YAAY,IAAI,CAAC,IAAI,CAAC,OAAO,SAAS,CAAC,OAAO,KAAK,QAAQ,CAAC,EAAE;QACnF,SAAS,CAAC,OAAO,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;KACjD;IAED,IAAI,CAAC,CAAC,SAAS,CAAC,OAAO,YAAY,IAAI,CAAC,IAAI,CAAC,OAAO,SAAS,CAAC,OAAO,KAAK,QAAQ,CAAC,EAAE;QACnF,SAAS,CAAC,OAAO,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;KACjD;IAED,IAAI,CAAC,CAAC,SAAS,CAAC,QAAQ,YAAY,IAAI,CAAC,IAAI,CAAC,OAAO,SAAS,CAAC,QAAQ,KAAK,QAAQ,CAAC,EAAE;QACrF,SAAS,CAAC,QAAQ,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;KACnD;IAED,OAAO,SAAS,CAAC;AACnB,CAAC;AAED,MAAM,CAAC,IAAM,qCAAqC,GAAG;IACnD;QACE,IAAI,EAAE,2BAA2B,CAAC,KAAK;QACvC,WAAW,EAAE,8BAA8B;KAC5C;IACD;QACE,IAAI,EAAE,2BAA2B,CAAC,GAAG;QACrC,WAAW,EAAE,8BAA8B;KAC5C;IACD;QACE,IAAI,EAAE,2BAA2B,CAAC,IAAI;QACtC,WAAW,EAAE,eAAe;KAC7B;CACF,CAAC","sourcesContent":["import platform from 'platform';\nimport { Device, DeviceNotificationsTracking } from '@src/types';\n\n// Global Variables to determine whether or not to use search db\nlet SearchDbConfig: SearchDbConfiguration = {\n  enabled: false,\n  threadsEvictionDays: 90,\n};\n\nexport const getSearchDbConfig = (): SearchDbConfiguration => {\n  return SearchDbConfig;\n};\n\nexport interface SearchDbConfiguration {\n  enabled: boolean;\n  threadsEvictionDays: number;\n  language?: string;\n}\n\nexport const enableSearchDb = (config: Partial<SearchDbConfiguration>) => {\n  SearchDbConfig = {\n    ...SearchDbConfig,\n    ...config,\n    enabled: true,\n  };\n  return;\n};\n\n// Global variable to determine if chrome or chrome derivative\nexport const IS_CHROME = platform && platform.layout && platform.layout === 'Blink';\n\n// Global variable that determines if device is mac\nexport const IS_MAC = platform && platform.os && platform.os.family &&\n  platform.os.family.toUpperCase().startsWith('OS X') || false;\n\nexport const IS_WINDOWS = platform && platform.os && platform.os.family &&\n  platform.os.family.toUpperCase().startsWith('WINDOWS') || false;\n\n// Global variable to determine if device is mobile\nexport const IS_IOS = platform.os?.family &&\n  ['iOS', 'iPad'].indexOf(platform.os.family) > -1;\n\nexport function applyDeviceDefaults(device: Device): Device {\n  const newDevice = {\n    version: 0,\n    ...device,\n  };\n\n  if (!(newDevice.created instanceof Date) && (typeof newDevice.created === 'string')) {\n    newDevice.created = new Date(newDevice.created);\n  }\n\n  if (!(newDevice.updated instanceof Date) && (typeof newDevice.updated === 'string')) {\n    newDevice.updated = new Date(newDevice.updated);\n  }\n\n  if (!(newDevice.lastSeen instanceof Date) && (typeof newDevice.lastSeen === 'string')) {\n    newDevice.lastSeen = new Date(newDevice.lastSeen);\n  }\n\n  return newDevice;\n}\n\nexport const DEVICE_TRACKING_NOTIFICATION_SETTINGS = [\n  {\n    type: DeviceNotificationsTracking.First,\n    description: 'First time a message is read',\n  },\n  {\n    type: DeviceNotificationsTracking.All,\n    description: 'Every time a message is read',\n  },\n  {\n    type: DeviceNotificationsTracking.None,\n    description: 'Don\\'t notify',\n  },\n];\n"]}]}