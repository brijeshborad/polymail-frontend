{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/messageBodies.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/messageBodies.ts","mtime":1675280254050},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIF9hLCBfYjsKaW1wb3J0IHVwZGF0ZSBmcm9tICdpbW11dGFiaWxpdHktaGVscGVyJzsKaW1wb3J0IHsgY3JlYXRlU2VsZWN0b3IgfSBmcm9tICdAc3JjL2xpYi9zZWxlY3Rvcic7CmltcG9ydCB7IGNyZWF0ZSB9IGZyb20gJ0BzcmMvbGliL3JlZHV4JzsKaW1wb3J0IHsgc2VsZWN0T3B0aW1pc3RpY01lc3NhZ2VCb2RpZXNGb3JUaHJlYWQgfSBmcm9tICdAc3JjL2R1Y2tzL2RyYWZ0cyc7CmltcG9ydCB7IHJlc291cmNlT2ssIHJlc291cmNlUmVmcmVzaGluZywgcmVzb3VyY2VGYWlsZWQgfSBmcm9tICdAc3JjL2xpYi9yZXNvdXJjZSc7CmltcG9ydCB7IHVuaXFCeSB9IGZyb20gJ2xvZGFzaCc7CmV4cG9ydCB2YXIgTUVTU0FHRV9CT0RJRVNfRkVUQ0ggPSAoX2EgPSBjcmVhdGUoJ01FU1NBR0VfQk9ESUVTX0ZFVENIJywgewogICAgc3RhcnQ6IGZ1bmN0aW9uIChzdGF0ZSwgbWV0YSkgewogICAgICAgIHZhciBfYTsKICAgICAgICB2YXIgZm91bmRCb2RpZXMgPSBzdGF0ZS5tZXNzYWdlQm9kaWVzW21ldGFdICYmIHN0YXRlLm1lc3NhZ2VCb2RpZXNbbWV0YV0uZGF0YSB8fCBbXTsKICAgICAgICByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgICAgIG1lc3NhZ2VCb2RpZXM6IChfYSA9IHt9LAogICAgICAgICAgICAgICAgX2FbbWV0YV0gPSB7ICRzZXQ6IHJlc291cmNlUmVmcmVzaGluZyhmb3VuZEJvZGllcykgfSwKICAgICAgICAgICAgICAgIF9hKSwKICAgICAgICB9KTsKICAgIH0sCiAgICBzdWNjZXNzOiBmdW5jdGlvbiAoc3RhdGUsIG1ldGEsIHBheWxvYWQpIHsKICAgICAgICB2YXIgX2E7CiAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICBtZXNzYWdlQm9kaWVzOiAoX2EgPSB7fSwKICAgICAgICAgICAgICAgIF9hW21ldGFdID0geyAkc2V0OiByZXNvdXJjZU9rKHBheWxvYWQpIH0sCiAgICAgICAgICAgICAgICBfYSksCiAgICAgICAgfSk7CiAgICB9LAogICAgZmFpbHVyZTogZnVuY3Rpb24gKHN0YXRlLCBtZXRhLCBlcnJvcikgewogICAgICAgIHZhciBfYTsKICAgICAgICByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgICAgIG1lc3NhZ2VCb2RpZXM6IChfYSA9IHt9LAogICAgICAgICAgICAgICAgX2FbbWV0YV0gPSB7ICRzZXQ6IHJlc291cmNlRmFpbGVkKGVycm9yKSB9LAogICAgICAgICAgICAgICAgX2EpLAogICAgICAgIH0pOwogICAgfSwKfSksIF9hLnR5cGUpLCBtZXNzYWdlQm9kaWVzRmV0Y2ggPSBfYS5hY3Rpb24sIG1lc3NhZ2VCb2RpZXNSZWR1Y2VyID0gX2EucmVkdWNlcjsKZXhwb3J0IHZhciBTSEFSRURfVEhSRUFEX01FU1NBR0VfQk9ESUVTX0ZFVENIID0gKF9iID0gY3JlYXRlKCdTSEFSRURfVEhSRUFEX01FU1NBR0VfQk9ESUVTX0ZFVENIJywge30pLCBfYi50eXBlKSwgc2hhcmVkVGhyZWFkTWVzc2FnZUJvZGllc0ZldGNoID0gX2IuYWN0aW9uLCBzaGFyZWRUaHJlYWRNZXNzYWdlQm9kaWVzRmV0Y2hSZWR1Y2VyID0gX2IucmVkdWNlcjsKdmFyIGVtcHR5Qm9kaWVzID0gW107Ci8vIFNlbGVjdHMgYWxsIG1lc3NhZ2UgYm9kaWVzIChyZWFsIGFuZCBvcHRpbWlzdGljIGZvciBhIHRocmVhZCkKZXhwb3J0IHZhciBzZWxlY3RNZXNzYWdlQm9kaWVzID0gY3JlYXRlU2VsZWN0b3IoWwogICAgZnVuY3Rpb24gKHN0YXRlLCB0aHJlYWQpIHsgcmV0dXJuIHN0YXRlLm1lc3NhZ2VCb2RpZXNbdGhyZWFkXSAmJiBzdGF0ZS5tZXNzYWdlQm9kaWVzW3RocmVhZF0uZGF0YTsgfSwKICAgIGZ1bmN0aW9uIChzdGF0ZSwgdGhyZWFkKSB7IHJldHVybiBzZWxlY3RPcHRpbWlzdGljTWVzc2FnZUJvZGllc0ZvclRocmVhZChzdGF0ZSwgdGhyZWFkKTsgfSwKXSwgZnVuY3Rpb24gKGFsbEJvZGllcywgb3B0aW1pc3RpY0JvZGllcykgewogICAgaWYgKGFsbEJvZGllcyA9PT0gdm9pZCAwKSB7IGFsbEJvZGllcyA9IGVtcHR5Qm9kaWVzOyB9CiAgICBpZiAob3B0aW1pc3RpY0JvZGllcyA9PT0gdm9pZCAwKSB7IG9wdGltaXN0aWNCb2RpZXMgPSBlbXB0eUJvZGllczsgfQogICAgLy8gTk9URShTSElOKTogQ29uY2F0IGFsbEJvZGllcyBpbnRvIG9wdGltaXN0aWMgYm9kaWVzLCBzaW5jZSB3ZSB3YW50IHRvCiAgICAvLyB0YWtlIHJlZ2VuZXJhdGVkIG9wdGltaXN0aWNzIGZpcnN0IGZvciB1bmlxQnkgYW5kIHJlbW92ZSB0aGUgcmVzdAogICAgdmFyIGVuZCA9IHVuaXFCeShvcHRpbWlzdGljQm9kaWVzLmNvbmNhdChhbGxCb2RpZXMpLCAnaWQnKTsKICAgIHJldHVybiBlbmQ7Cn0sIHVuZGVmaW5lZCwgWydtZXNzYWdlQm9kaWVzJywgJ2RyYWZ0cyddKTsKLy8gRXh0cmFjdHMgdW5zdWJzY3JpYmUgbGluayBmcm9tIHNlbGVjdGVkIHRocmVhZAovLyBUT0RPKFNISU4pOiBIYXNoIHVzaW5nIG1lc3NhZ2UgaWQKZXhwb3J0IHZhciBzZWxlY3RVbnN1YnNjcmliZUxpbmsgPSBjcmVhdGVTZWxlY3RvcihbCiAgICBmdW5jdGlvbiAoc3RhdGUsIHRocmVhZCkgeyByZXR1cm4gc3RhdGUubWVzc2FnZUJvZGllc1t0aHJlYWRdICYmIHN0YXRlLm1lc3NhZ2VCb2RpZXNbdGhyZWFkXS5kYXRhOyB9LApdLCBmdW5jdGlvbiAoYm9kaWVzKSB7CiAgICBpZiAoYm9kaWVzID09PSB2b2lkIDApIHsgYm9kaWVzID0gZW1wdHlCb2RpZXM7IH0KICAgIHZhciBmb3VuZExpbmsgPSBib2RpZXMuZmlsdGVyKGZ1bmN0aW9uIChib2R5KSB7IHJldHVybiAhIWJvZHkudW5zdWJzY3JpYmVMaW5rOyB9KVswXTsKICAgIHJldHVybiBmb3VuZExpbmsgJiYgZm91bmRMaW5rLnVuc3Vic2NyaWJlTGluazsKfSwgZnVuY3Rpb24gKGJvZGllcywgdGhyZWFkKSB7IHJldHVybiB0aHJlYWQ7IH0pOwpleHBvcnQgZGVmYXVsdCBbCiAgICBtZXNzYWdlQm9kaWVzUmVkdWNlciwKXTsK"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/messageBodies.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/messageBodies.ts"],"names":[],"mappings":";AAAA,OAAO,MAAM,MAAM,qBAAqB,CAAC;AACzC,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AACnD,OAAO,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;AAGxC,OAAO,EAAE,sCAAsC,EAAE,MAAM,mBAAmB,CAAC;AAC3E,OAAO,EAAE,UAAU,EAAE,kBAAkB,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AACnF,OAAO,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AAEhC,MAAM,CACJ,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;YAA0B,EAC1B,8BAA0B,EAC1B,iCAA6B,CA0B5B;AAOH,MAAM,CACJ,IAAA,qGAAwC,EACxC,0CAAsC,EACtC,kDAA8C,CAG9C;AAEF,IAAM,WAAW,GAAkB,EAAE,CAAC;AAEtC,gEAAgE;AAChE,MAAM,CAAC,IAAM,mBAAmB,GAAG,cAAc,CAC/C;IACE,UAAC,KAAK,EAAE,MAAM,IAAK,OAAA,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,IAAI,EAA/D,CAA+D;IAClF,UAAC,KAAK,EAAE,MAAM,IAAK,OAAA,sCAAsC,CAAC,KAAK,EAAE,MAAM,CAAC,EAArD,CAAqD;CACzE,EACD,UAAC,SAAsC,EAAE,gBAA6C;IAArF,0BAAA,EAAA,uBAAsC;IAAE,iCAAA,EAAA,8BAA6C;IAEpF,wEAAwE;IACxE,oEAAoE;IACpE,IAAM,GAAG,GAAG,MAAM,CAChB,gBAAgB,CAAC,MAAM,CAAC,SAAS,CAAC,EAClC,IAAI,CACL,CAAC;IACF,OAAO,GAAG,CAAC;AACb,CAAC,EACD,SAAS,EACT,CAAC,eAAe,EAAE,QAAQ,CAAC,CAC5B,CAAC;AAEF,iDAAiD;AACjD,oCAAoC;AACpC,MAAM,CAAC,IAAM,qBAAqB,GAClC,cAAc,CACZ;IACE,UAAC,KAAK,EAAE,MAAM,IAAK,OAAA,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,IAAI,EAA/D,CAA+D;CACnF,EACD,UAAC,MAAmC;IAAnC,uBAAA,EAAA,oBAAmC;IAClC,IAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,CAAC,CAAC,IAAI,CAAC,eAAe,EAAtB,CAAsB,CAAC,CAAC,CAAC,CAAC,CAAC;IACnE,OAAO,SAAS,IAAI,SAAS,CAAC,eAAe,CAAC;AAChD,CAAC,EACD,UAAC,MAAqB,EAAE,MAAc,IAAK,OAAA,MAAM,EAAN,CAAM,CAClD,CAAC;AAEF,eAAe;IACb,oBAAoB;CACrB,CAAC","sourcesContent":["import update from 'immutability-helper';\nimport { createSelector } from '@src/lib/selector';\nimport { create } from '@src/lib/redux';\nimport { MessageBody, Thread } from '@src/types';\n\nimport { selectOptimisticMessageBodiesForThread } from '@src/ducks/drafts';\nimport { resourceOk, resourceRefreshing, resourceFailed } from '@src/lib/resource';\nimport { uniqBy } from 'lodash';\n\nexport const {\n  type: MESSAGE_BODIES_FETCH,\n  action: messageBodiesFetch,\n  reducer: messageBodiesReducer,\n} = create<string, MessageBody[]>('MESSAGE_BODIES_FETCH', {\n  start: (state, meta) => {\n    const foundBodies = state.messageBodies[meta] && state.messageBodies[meta].data || [];\n    return update(state, {\n      messageBodies: {\n        [meta]: { $set: resourceRefreshing(foundBodies) },\n      },\n    });\n  },\n\n  success: (state, meta, payload) => {\n    return update(state, {\n      messageBodies: {\n        [meta]: { $set: resourceOk(payload) },\n      },\n    });\n  },\n\n  failure: (state, meta, error) => {\n    return update(state, {\n      messageBodies: {\n        [meta]: { $set: resourceFailed(error) },\n      },\n    });\n  },\n});\n\nexport interface SharedThreadMessageBodiesFetchMeta {\n  sharedThread: string;\n  thread: Thread;\n}\n\nexport const {\n  type: SHARED_THREAD_MESSAGE_BODIES_FETCH,\n  action: sharedThreadMessageBodiesFetch,\n  reducer: sharedThreadMessageBodiesFetchReducer,\n} = create<SharedThreadMessageBodiesFetchMeta, MessageBody[]>(\n  'SHARED_THREAD_MESSAGE_BODIES_FETCH', {},\n);\n\nconst emptyBodies: MessageBody[] = [];\n\n// Selects all message bodies (real and optimistic for a thread)\nexport const selectMessageBodies = createSelector<string, MessageBody[]|undefined, MessageBody[]>(\n  [\n    (state, thread) => state.messageBodies[thread] && state.messageBodies[thread].data,\n    (state, thread) => selectOptimisticMessageBodiesForThread(state, thread),\n  ],\n  (allBodies: MessageBody[] = emptyBodies, optimisticBodies: MessageBody[] = emptyBodies) => {\n\n    // NOTE(SHIN): Concat allBodies into optimistic bodies, since we want to\n    // take regenerated optimistics first for uniqBy and remove the rest\n    const end = uniqBy(\n      optimisticBodies.concat(allBodies),\n      'id',\n    );\n    return end;\n  },\n  undefined,\n  ['messageBodies', 'drafts'],\n);\n\n// Extracts unsubscribe link from selected thread\n// TODO(SHIN): Hash using message id\nexport const selectUnsubscribeLink =\ncreateSelector<string, MessageBody[]|undefined, string|undefined>(\n  [\n    (state, thread) => state.messageBodies[thread] && state.messageBodies[thread].data,\n  ],\n  (bodies: MessageBody[] = emptyBodies) => {\n    const foundLink = bodies.filter(body => !!body.unsubscribeLink)[0];\n    return foundLink && foundLink.unsubscribeLink;\n  },\n  (bodies: MessageBody[], thread: string) => thread,\n);\n\nexport default [\n  messageBodiesReducer,\n];\n"]}]}