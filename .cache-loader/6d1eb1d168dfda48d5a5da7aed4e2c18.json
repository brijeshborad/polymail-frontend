{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/sequenceStageInstances.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/sequenceStageInstances.ts","mtime":1675280254058},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/sequenceStageInstances.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/sequenceStageInstances.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,EACL,YAAY,EAIZ,oBAAoB,GAIrB,MAAM,YAAY,CAAC;AAIpB,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAClC,OAAO,EACL,4BAA4B,EAAE,yBAAyB,EACvD,8BAA8B,EAAE,2BAA2B,EAC3D,8BAA8B,EAAE,2BAA2B,EAC3D,2BAA2B,EAAE,8BAA8B,EAK3D,4BAA4B,EAC5B,yBAAyB,EAEzB,sCAAsC,EAAE,kCAAkC,EAC1E,qCAAqC,EACrC,oCAAoC,EAAE,wCAAwC,EAC9E,yCAAyC,EAAE,qCAAqC,EAChF,sCAAsC,GACvC,MAAM,mCAAmC,CAAC;AAC3C,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAE7C,OAAO,EAAE,gCAAgC,EAAE,oBAAoB,EAAE,MAAM,mBAAmB,CAAC;AAC3F,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,QAAQ,CAAC;AACzC,OAAO,EAAE,4BAA4B,EAAE,MAAM,wCAAwC,CAAC;AACtF,OAAO,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAC;AACpD,OAAO,EAAE,iBAAiB,EAAE,MAAM,2BAA2B,CAAC;AAE9D,IAAM,6BAA6B,GAO/B,UAAC,OAAO,EAAE,KAAK,EAAE,IAAI;IACvB,OAAA,OAAO,CAAC,MAAM,CAAC,4BAA4B,CAAC;SACzC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,MAAM,KAAK,YAAY,CAAC,KAAK,EAApC,CAAoC,CAAC;SACtD,OAAO,CAAC,UAAC,MAAkE;QAC1E,OAAA,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;aACtE,OAAO,CAAC,UAAC,MAAM;YACd,IAAM,WAAW,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YAC9B,IAAM,OAAO,GAAwC;gBACnD,UAAU,CAAC,EAAE,CAAC,yBAAyB,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;aAC9D,CAAC;YACF,IAAI,WAAW,EAAE;gBACf,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,oCAAoC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;aAChF;YACD,OAAO,UAAU,CAAC,KAAK,OAAhB,UAAU,EACZ,OAAO,EACV;QACJ,CAAC,CAAC;aACD,KAAK,CAAC,UAAC,CAAQ,IAAK,OAAA,UAAU,CAAC,EAAE,CAAC,yBAAyB,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,EAAxD,CAAwD,CAAC;IAbhF,CAagF,CACnF;AAjBD,CAiBC,CAAC;AAEJ,IAAM,+BAA+B,GAK/B,UAAC,OAAO,EAAE,KAAK,EAAE,IAAI;IACvB,OAAA,OAAO,CAAC,MAAM,CAAC,8BAA8B,CAAC;SAC3C,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,MAAM,KAAK,YAAY,CAAC,KAAK,EAApC,CAAoC,CAAC;SACtD,OAAO,CAAC,UAAC,MAA4D;QACpE,OAAA,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;aAC5C,OAAO,CAAC,UAAA,MAAM,IAAI,OAAA,UAAU,CAAC,KAAK,CACjC,UAAU,CAAC,EAAE,CAAC,2BAA2B,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,EAC/D,UAAU,CAAC,EAAE,CAAC,yBAAyB,CAAC;YACtC,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ;YAC9B,KAAK,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK;SACzB,CAAC,CAAC,CACJ,EANkB,CAMlB,CAAC;aACD,KAAK,CAAC,UAAC,CAAQ,IAAK,OAAA,UAAU,CAAC,KAAK,CACnC,UAAU,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAC1B,UAAU,CAAC,EAAE,CAAC,2BAA2B,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAC3D,EAHoB,CAGpB,CAAC;IAXJ,CAWI,CACP;AAfD,CAeC,CAAC;AAEN,IAAM,+BAA+B,GAK/B,UAAC,OAAO,EAAE,KAAK,EAAE,IAAI;IACvB,OAAA,OAAO,CAAC,MAAM,CAAC,8BAA8B,CAAC;SAC3C,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,MAAM,KAAK,YAAY,CAAC,KAAK,EAApC,CAAoC,CAAC;SACtD,OAAO,CAAC,UAAC,MAA4D;QACpE,OAAA,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;aAC5C,OAAO,CAAC,UAAA,MAAM;YACb,OAAA,UAAU,CAAC,KAAK,CACd,UAAU,CAAC,EAAE,CAAC,2BAA2B,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,EAC/D,UAAU,CAAC,EAAE,CAAC,qCAAqC,CAAC,MAAM,CAAC,CAAC,CAC7D;QAHD,CAGC,CACF;aACA,KAAK,CAAC,UAAC,CAAQ,IAAK,OAAA,UAAU,CAAC,KAAK,CACnC,UAAU,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAC1B,UAAU,CAAC,EAAE,CAAC,2BAA2B,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAC3D,EAHoB,CAGpB,CAAC;IAVJ,CAUI,CACP;AAdD,CAcC,CAAC;AAEN,IAAM,+BAA+B,GAEjC,UAAC,OAAO,EAAE,KAAK,EAAE,IAAI;IACrB,OAAA,OAAO,CAAC,MAAM,CAAC,8BAA8B,CAAC;SAC3C,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,MAAM,KAAK,YAAY,CAAC,KAAK,EAApC,CAAoC,CAAC;SACtD,OAAO,CAAC,UAAC,MAA2C;QACnD,OAAA,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;aAC5C,OAAO,CAAC,UAAA,MAAM;YACb,OAAA,UAAU,CAAC,MAAM,CACf,UAAU,CAAC,EAAE,CAAC,2BAA2B,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,EAC7D,UAAU,CAAC,EAAE,CAAC,iBAAiB,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CACvD;QAHD,CAGC,CAAC;aACH,KAAK,CAAC,UAAC,CAAC;YACP,2BAA2B;YAC3B,IAAI,CAAa,IAAI,CAAC,CAAC,IAAI,KAAK,GAAG,EAAE;gBACnC,OAAO,UAAU,CAAC,EAAE,CAAC,2BAA2B,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;aACtE;YAED,MAAM,CAAC,CAAC;QACV,CAAC,CAAC;aACD,KAAK,CAAC,UAAC,CAAQ,IAAK,OAAA,UAAU,CAAC,KAAK,CACnC,UAAU,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAC1B,UAAU,CAAC,EAAE,CAAC,2BAA2B,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAC3D,EAHoB,CAGpB,CAAC;IAjBJ,CAiBI,CACP;AArBD,CAqBC,CAAC;AAEN,IAAM,6BAA6B,GAG/B,UAAC,OAAO,EAAE,KAAK,EAAE,IAAI;IACrB,OAAA,OAAO,CAAC,MAAM,CAAC,4BAA4B,CAAC;SACzC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,MAAM,KAAK,YAAY,CAAC,KAAK,EAApC,CAAoC,CAAC;SACtD,OAAO,CAAC,UAAA,MAAM;QACb,OAAA,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,MAAM,CAAC,IAAqC,CAAC;aAC3E,GAAG,CAAC,UAAA,MAAM;YACT,OAAA,yBAAyB,CAAC,MAAM,CAAC,IAAqC,EAAE,IAAI,CAAC;QAA7E,CAA6E,CAAC;aAC/E,KAAK,CAAC,UAAA,CAAC,IAAI,OAAA,UAAU,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAA1B,CAA0B,CAAC;IAHzC,CAGyC,CAC1C;AAPH,CAOG,CAAC;AAER,IAAM,sCAAsC,GAKxC,UAAC,OAAO,EAAE,KAAK,EAAE,IAAI;IACvB,OAAA,OAAO,CAAC,MAAM,CAAC,sCAAsC,CAAC;SACrD,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,MAAM,KAAK,YAAY,CAAC,KAAK,EAApC,CAAoC,CAAC;SACtD,OAAO,CAAC,UAAC,MAE4B;QACpC,OAAA,IAAI,CAAC,sBAAsB,CAAC,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC;aACrD,OAAO,CAAC,UAAC,SAAS;YACjB,6BAA6B;YAC7B,IAAI,OAAO,SAAS,KAAK,QAAQ,EAAE;gBACjC,OAAO,UAAU,CAAC,EAAE,CAAC,oBAAoB,uBACpC,MAAM,CAAC,IAAI,KACd,QAAQ,EAAE,SAAS,IACnB,CAAC,CAAC;aACL;YAED,IAAM,KAAK,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;YACzB,IAAA,gBAA6C,EAA3C,gBAAK,EAAE,sBAAQ,EAAE,0BAA0B,CAAC;YACpD,IAAM,YAAY,yBACb,MAAM,CAAC,IAAI,KACd,SAAS,EAAE,SAAS,CAAC,SAAS,EAC9B,QAAQ,EAAE,SAAS,CAAC,QAAQ,EAC5B,MAAM,EAAE,oBAAoB,CAAC,MAAM,EACnC,QAAQ,EAAE,CAAC,GACZ,CAAC;YACF,mBAAmB;YACnB,IAAM,aAAa,GACjB,gCAAgC,CAChC,KAAK,CAAC,QAAQ,EAAE,EAChB,MAAM,CAAC,IAAI,CAAC,UAAU,CACvB,CAAC;YAEF,IAAM,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAb,CAAa,CAAC,CAAC,CAAC,CAAC;YAE5E,mFAAmF;YACnF,+DAA+D;YAC/D,IAAM,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,UAAU,KAAK,MAAM,CAAC,IAAI,CAAC,UAAU,EAA1C,CAA0C,CAAC,CAAC,CAAC,CAAC,CAAC;YACxF,IAAM,aAAa,GAAG,KAAK,CAAC,sBAAsB,CAAC,QAAQ,GAAG,KAAK,CAAC;gBAClE,KAAK,CAAC,sBAAsB,CAAC,QAAQ,GAAG,KAAK,CAAC,CAAC,UAAU,CAAC;gBAC1D,KAAK,CAAC,sBAAsB,CAAC,QAAQ,GAAG,KAAK,CAAC,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC;YAClE,IAAI,WAAW,IAAI,WAAW,CAAC,MAAM,KAAK,oBAAoB,CAAC,iBAAiB;gBAC9E,aAAa,EACb;gBACA,OAAO,IAAI,CAAC,sBAAsB;qBAC/B,gBAAgB,CAAC,YAAY,CAAC;qBAC9B,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,qCAAqC,CACtD,aAAa,EACb,CAAC,UAAU,CAAC,CACb,EAHkB,CAGlB,CAAC,CAAC;aACN;YAED,yDAAyD;YACzD,OAAO,UAAU,CAAC,EAAE,CAClB,kCAAkC,CAAC,MAAM,CAAC,IAAI,EAAE,YAAY,CAAC,CAC9D,CAAC;QACJ,CAAC,CAAC;aACD,KAAK,CAAC,UAAA,CAAC,IAAI,OAAA,UAAU,CAAC,EAAE,CAAC,kCAAkC,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,EAAjE,CAAiE,CAAC;IAlDhF,CAkDgF,CACjF;AAxDD,CAwDC,CAAC;AAEJ,qDAAqD;AACrD,gEAAgE;AAChE,8CAA8C;AAC9C,yBAAyB;AACzB,8BAA8B;AAC9B,8DAA8D;AAC9D,8DAA8D;AAC9D,2BAA2B;AAC3B,yBAAyB;AACzB,oCAAoC;AACpC,yCAAyC;AACzC,+EAA+E;AAC/E,6FAA6F;AAC7F,OAAO;AAEP,IAAM,yCAAyC,GAGxB,UAAC,OAAO,EAAE,KAAK,EAAE,IAAI;IAC1C,OAAA,OAAO,CAAC,MAAM,CAAC,yCAAyC,CAAC;SACtD,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,MAAM,KAAK,YAAY,CAAC,KAAK,EAApC,CAAoC,CAAC;SACtD,OAAO,CAAC,UAAC,MAAmD;QAC3D,IAAM,KAAK,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;QAC/B,IAAM,aAAa,GACjB,gCAAgC,CAC9B,KAAK,EACL,MAAM,CAAC,IAAI,CAAC,EAAE,CACf,CAAC;QACJ,IAAM,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAb,CAAa,CAAC,CAAC,CAAC,CAAC;QAC5E,IAAM,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,MAAM,KAAK,oBAAoB,CAAC,MAAM,EAA3C,CAA2C,CAAC,CAAC;QACnF,IAAM,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,MAAM,KAAK,oBAAoB,CAAC,MAAM,EAA3C,CAA2C,CAAC,CAAC;QACtF,IAAM,cAAc,GAAG,KAAK,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,MAAM,KAAK,oBAAoB,CAAC,SAAS,EAA9C,CAA8C,CAAC,CAAC;QAE5F,2EAA2E;QAC3E,IAAM,WAAW,GAAG,QAAQ;aACzB,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,sBAAsB,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAlD,CAAkD,CAAC,CAAC;QACnE,IAAM,UAAU,GAAG,UAAU,CAAC,GAAG,OAAd,UAAU,EAAQ,WAAW,EAC7C,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,qCAAqC,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,EAA1D,CAA0D,CAAC,CAAC;QAE7E,8EAA8E;QAC9E,IAAM,aAAa,GAAG,WAAW;aAC9B,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,sBAAsB;aACrC,gBAAgB,CAAC,IAAI,CAAC;aACtB,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,qCAAqC,CAAC,IAAI,EAAE,IAAI,CAAC,EAAjD,CAAiD,CAAC,EAFvD,CAEuD,CAAC,CAAC;QAExE,6CAA6C;QAC7C,IAAM,qBAAqB,GAAG,cAAc;aACvC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,UAAU,CAAC,EAAE,CAAC,kCAAkC,CAC3D,IAAI,wBACC,IAAI,KAAE,MAAM,EAAE,oBAAoB,CAAC,iBAAiB,IAC1D,CAAC,EAHW,CAGX,CAAC,CAAC;QAER,mBAAmB;QACnB,OAAO,UAAU,CAAC,KAAK,OAAhB,UAAU,iBACZ,qBAAqB,GACxB,UAAU,GACP,aAAa,GAChB,KAAK,CAAC,UAAC,CAAQ,IAAK,OAAA,UAAU,CAAC,KAAK,CACpC,UAAU,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAC1B,UAAU,CAAC,EAAE,CAAC,qCAAqC,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CACrE,EAHqB,CAGrB,CAAC,CAAC;IACL,CAAC,CAAC;AA1CJ,CA0CI,CAAC;AAEP,IAAM,wCAAwC,GAG1C,UAAC,OAAO,EAAE,KAAK,EAAE,IAAI;IACrB,OAAA,OAAO,CAAC,MAAM,CAAC,wCAAwC,CAAC;SACrD,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,MAAM,KAAK,YAAY,CAAC,KAAK,EAApC,CAAoC,CAAC;SACtD,OAAO,CAAC,UAAA,MAAM;QACb,OAAA,IAAI,CAAC,sBAAsB;aACxB,eAAe,CACd,MAAM,CAAC,IAAI,CAAC,QAAQ,EACpB,MAAM,CAAC,IAAI,CAAC,KAAK,EACjB,MAAM,CAAC,IAAI,CAAC,EAAE,CACjB;aACE,GAAG,CAAC,UAAA,WAAW,IAAI,OAAA,oCAAoC,CAAC,MAAM,CAAC,IAAI,EAAE,WAAW,CAAC,EAA9D,CAA8D,CAAC;aAClF,KAAK,CAAC,UAAA,CAAC,IAAI,OAAA,UAAU,CAAC,EAAE,CAAC,oCAAoC,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,EAAnE,CAAmE,CAAC;IAPlF,CAOkF,CACrF;AAXD,CAWC,CAAC;AAEN,yDAAyD;AACzD,IAAM,sCAAsC,GAMxC,UAAC,OAAO,EAAE,KAAK,EAAE,IAAI;IACvB,OAAA,OAAO,CAAC,MAAM,CAAC,sCAAsC,CAAC;SACnD,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,MAAM,KAAK,YAAY,CAAC,KAAK,EAApC,CAAoC,CAAC;SACtD,MAAM,CAAC;QACN,IAAM,KAAK,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;QAC/B,IAAM,UAAU,GAAG,KAAK,CAAC,gBAAgB,CAAC;QAC1C,IAAM,OAAO,GAAG,KAAK,CAAC,qBAAqB,CAAC;QAC5C,IAAI,CAAC,CAAC,UAAU,IAAI,OAAO,IAAI,KAAK,CAAC,sBAAsB,CAAC,UAAU,GAAG,OAAO,CAAC,CAAC,EAAE;YAClF,OAAO,KAAK,CAAC;SACd;QACD,IAAM,aAAa,GAAG,MAAM,CAAC,KAAK,CAAC,sBAAsB,CAAC,UAAU,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACpF,OAAO,aAAa,IAAI,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC;IAC/C,CAAC,CAAC;SACD,OAAO,CAAC,UAAC,MAA+C;QACvD,IAAM,KAAK,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;QAC/B,IAAM,UAAU,GAAG,KAAK,CAAC,gBAAiB,CAAC;QAC3C,IAAM,OAAO,GAAG,KAAK,CAAC,qBAAqB,CAAC;QAC5C,IAAM,aAAa,GAAG,MAAM,CAAC,KAAK,CAAC,sBAAsB,CAAC,UAAU,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAK,CAAC;QAC1F,IAAM,QAAQ,GAAG,UAAU,IAAI,KAAK,CAAC,SAAS,CAAC,UAAU,CAAC;YACxD,KAAK,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC;QACnC,IAAM,KAAK,GAAG,OAAO,IAAI,KAAK,CAAC,cAAc,CAAC,UAAU,CAAC;YACvD,KAAK,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,IAAI,KAAK,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC;QAC9F,IAAM,OAAO,GAAG,QAAQ,IAAI,QAAQ,CAAC,OAAO,IAAI,EAAE,CAAC;QACnD,IAAM,uBAAuB,GAAG,4BAA4B,CAC1D,aAAa,EACb,MAAM,CAAC,IAAI,EACX,OAAO,EACP,KAAK,IAAI,KAAK,CAAC,SAAS,IAAI,KAAK,CAClC,CAAC;QACF,IAAM,mBAAmB,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;QACpD,IAAM,yBAAyB,GAAG,mBAAmB;aAClD,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,uBACd,aAAa,CAAC,UAAU,EAAE,aAAa,CAAC,EAAE,CAAC,KAC9C,UAAU,EAAE,UAAU,CAAC,EAAE,EACzB,QAAQ,EAAE,aAAa,CAAC,QAAQ,EAChC,KAAK,EAAE,aAAa,CAAC,KAAK,EAC1B,UAAU,EAAE,aAAa,CAAC,EAAE,EAC5B,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,EACxB,MAAM,EAAE,oBAAoB,CAAC,MAAM,EACnC,QAAQ,EAAE,UAAU,CAAC,QAAQ,EAC7B,QAAQ,EAAE,CAAC,IACX,EAViB,CAUjB,CAAC;aACJ,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,UAAU,CAAC,EAAE,CAAC,kCAAkC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,EAA7D,CAA6D,CAAC,CAAC;QAE5E,4CAA4C;QAC5C,IAAM,gBAAgB,GAAoC,gCAAgC,CACxF,KAAK,EACL,aAAa,CAAC,EAAE,CACjB,CAAC;QACF,IAAM,QAAQ,GAAG,OAAO,CAAC,MAAM,CAAC,gBAAgB,CAAC,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAb,CAAa,CAAC,CAAC,CAAC,CAAC;QAClF,IAAM,aAAa,GAAG,QAAQ;aAC3B,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAf,CAAe,CAAC;aAC/B,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,QAAQ,KAAK,MAAM,CAAC,IAAI,CAAC,EAAE,EAAhC,CAAgC,CAAC;aAChD,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,qCAAqC,uBAC7C,IAAI,KACP,QAAQ,EAAE,aAAa,CAAC,QAAQ,EAChC,KAAK,EAAE,aAAa,CAAC,KAAK,EAC1B,MAAM,EAAE,oBAAoB,CAAC,MAAM,IACnC,EALW,CAKX,CAAC;aACF,GAAG,CAAC,UAAA,YAAY,IAAI,OAAA,UAAU,CAAC,EAAE,CAAC,YAAY,CAAC,EAA3B,CAA2B,CAAC,CAAC;QAEpD,OAAO,UAAU,CAAC,KAAK,OAAhB,UAAU,iBACZ,aAAa,EACb,yBAAyB,GAC5B,UAAU,CAAC,EAAE,CAAC,2BAA2B,CAAC,aAAa,EAAE,uBAAuB,CAAC,CAAC,IAClF;IACJ,CAAC,CAAC;AAjEJ,CAiEI,CAAC;AAEP,eAAe;IACb,+BAA+B;IAC/B,6BAA6B;IAC7B,+BAA+B;IAC/B,+BAA+B;IAC/B,6BAA6B;IAC7B,sCAAsC;IACtC,6CAA6C;IAC7C,wCAAwC;IACxC,yCAAyC;IACzC,sCAAsC;CACvC,CAAC","sourcesContent":["import {\n  ActionStatus,\n  Action,\n  StoreState,\n  Attachment,\n  AttachmentMetaStatus,\n  AttachmentMeta,\n  Template,\n  Resource,\n} from '@src/types';\nimport { SequenceStageInstance } from '@src/types/sequences';\nimport { Epic } from 'redux-observable';\nimport { Deps } from '@src/lib/epic';\nimport { Observable } from 'rxjs';\nimport {\n  SEQUENCE_STAGE_INSTANCE_LIST, sequenceStageInstanceList,\n  SEQUENCE_STAGE_INSTANCE_DELETE, sequenceStageInstanceDelete,\n  SEQUENCE_STAGE_INSTANCE_UPDATE, sequenceStageInstanceUpdate,\n  sequenceStageInstanceCreate, SEQUENCE_STAGE_INSTANCE_CREATE,\n  SequenceStageInstanceMeta,\n  SequenceStageInstanceCreateMeta,\n  SequenceStageInstanceUpdateMeta,\n  SequenceStageInstanceTestMeta,\n  SEQUENCE_STAGE_INSTANCE_TEST,\n  sequenceStageInstanceTest,\n  SequenceStageInstanceAttachmentMeta,\n  SEQUENCE_STAGE_INSTANCE_ATTACHMENT_ADD, sequenceStageInstanceAttachmentAdd,\n  sequenceStageInstanceAttachmentRemove,\n  sequenceStageInstanceAttachmentsList, SEQUENCE_STAGE_INSTANCE_ATTACHMENTS_LIST,\n  SEQUENCE_STAGE_INSTANCE_ATTACHMENTS_APPLY, sequenceStageInstanceAttachmentsApply,\n  SEQUENCE_STAGE_INSTANCE_TEMPLATE_APPLY,\n} from '@src/ducks/sequenceStageInstances';\nimport { toastSet } from '@src/ducks/toasts';\nimport { ApiError } from '@src/api/base';\nimport { selectAttachmentMetasForResource, attachmentMetaCreate } from '@src/ducks/drafts';\nimport { values, compact } from 'lodash';\nimport { applyTemplateToStageInstance } from '@src/lib/models/sequenceStageInstances';\nimport { convertToMeta } from '@src/lib/attachment';\nimport { sequenceStageList } from '@src/ducks/sequenceStages';\n\nconst sequenceStageInstanceListEpic: Epic<\n  Action<\n    SequenceStageInstanceMeta | SequenceStageInstance,\n    SequenceStageInstance[] | Attachment[]\n  >,\n  StoreState,\n  Deps\n> = (action$, store, deps) =>\n  action$.ofType(SEQUENCE_STAGE_INSTANCE_LIST)\n    .filter(action => action.status === ActionStatus.Start)\n    .flatMap((action: Action<SequenceStageInstanceMeta, SequenceStageInstance[]>) =>\n      deps.sequenceStageInstances.list(action.meta.sequence, action.meta.stage)\n        .flatMap((result) => {\n          const firstResult = result[0];\n          const actions: Array<Observable<Action<any, any>>> = [\n            Observable.of(sequenceStageInstanceList(action.meta, result)),\n          ];\n          if (firstResult) {\n            actions.push(Observable.of(sequenceStageInstanceAttachmentsList(firstResult)));\n          }\n          return Observable.merge(\n            ...actions,\n          );\n        })\n        .catch((e: Error) => Observable.of(sequenceStageInstanceList(action.meta, e))),\n  );\n\nconst sequenceStageInstanceCreateEpic: Epic<\n  Action<\n    SequenceStageInstanceCreateMeta | SequenceStageInstanceMeta | Error | null,\n    SequenceStageInstance | SequenceStageInstance[] | null\n  >, StoreState, Deps\n  > = (action$, store, deps) =>\n    action$.ofType(SEQUENCE_STAGE_INSTANCE_CREATE)\n      .filter(action => action.status === ActionStatus.Start)\n      .flatMap((action: Action<SequenceStageInstance, SequenceStageInstance>) =>\n        deps.sequenceStageInstances.create(action.meta)\n          .flatMap(result => Observable.merge(\n            Observable.of(sequenceStageInstanceCreate(action.meta, result)),\n            Observable.of(sequenceStageInstanceList({\n              sequence: action.meta.sequence,\n              stage: action.meta.stage,\n            })),\n          ))\n          .catch((e: Error) => Observable.merge(\n            Observable.of(toastSet(e)),\n            Observable.of(sequenceStageInstanceCreate(action.meta, e)),\n          )),\n    );\n\nconst sequenceStageInstanceUpdateEpic: Epic<\n  Action<\n    SequenceStageInstanceUpdateMeta | SequenceStageInstance |  Error | null,\n    SequenceStageInstance | null | Attachment[]\n  >, StoreState, Deps\n  > = (action$, store, deps) =>\n    action$.ofType(SEQUENCE_STAGE_INSTANCE_UPDATE)\n      .filter(action => action.status === ActionStatus.Start)\n      .flatMap((action: Action<SequenceStageInstance, SequenceStageInstance>) =>\n        deps.sequenceStageInstances.update(action.meta)\n          .flatMap(result =>\n            Observable.merge(\n              Observable.of(sequenceStageInstanceUpdate(action.meta, result)),\n              Observable.of(sequenceStageInstanceAttachmentsApply(result)),\n            ),\n          )\n          .catch((e: Error) => Observable.merge(\n            Observable.of(toastSet(e)),\n            Observable.of(sequenceStageInstanceUpdate(action.meta, e)),\n          )),\n    );\n\nconst sequenceStageInstanceDeleteEpic: Epic<\n  Action<any, any>, StoreState, Deps\n> = (action$, store, deps) =>\n    action$.ofType(SEQUENCE_STAGE_INSTANCE_DELETE)\n      .filter(action => action.status === ActionStatus.Start)\n      .flatMap((action: Action<SequenceStageInstance, null>) =>\n        deps.sequenceStageInstances.delete(action.meta)\n          .flatMap(result =>\n            Observable.concat(\n              Observable.of(sequenceStageInstanceDelete(action.meta, null)),\n              Observable.of(sequenceStageList(action.meta.sequence)),\n            ))\n          .catch((e) => {\n            // handle 404 as completion\n            if (e as ApiError && e.code === 404) {\n              return Observable.of(sequenceStageInstanceDelete(action.meta, null));\n            }\n\n            throw e;\n          })\n          .catch((e: Error) => Observable.merge(\n            Observable.of(toastSet(e)),\n            Observable.of(sequenceStageInstanceDelete(action.meta, e)),\n          )),\n    );\n\nconst sequenceStageInstanceTestEpic: Epic<Action<\n  SequenceStageInstanceTestMeta|Error|null, null\n>, StoreState, Deps>\n  = (action$, store, deps) =>\n    action$.ofType(SEQUENCE_STAGE_INSTANCE_TEST)\n      .filter(action => action.status === ActionStatus.Start)\n      .flatMap(action =>\n        deps.sequenceStageInstances.test(action.meta as SequenceStageInstanceTestMeta)\n          .map(result =>\n            sequenceStageInstanceTest(action.meta as SequenceStageInstanceTestMeta, null))\n          .catch(e => Observable.of(toastSet(e))),\n      );\n\nconst sequenceStageInstanceAttachmentAddEpic: Epic<Action<\n    SequenceStageInstanceAttachmentMeta | SequenceStageInstance | AttachmentMeta,\n    SequenceStageInstanceAttachmentMeta | Attachment[] | AttachmentMeta>,\n  StoreState,\n  Deps\n> = (action$, store, deps) =>\n  action$.ofType(SEQUENCE_STAGE_INSTANCE_ATTACHMENT_ADD)\n  .filter(action => action.status === ActionStatus.Start)\n  .flatMap((action: Action<\n    SequenceStageInstanceAttachmentMeta,\n    SequenceStageInstanceAttachmentMeta>) =>\n    deps.sequenceStageInstances.uploadCloudFile(action.meta)\n      .flatMap((cloudFile) => {\n        // Handle any progress events\n        if (typeof cloudFile === 'number') {\n          return Observable.of(attachmentMetaCreate({\n            ...action.meta,\n            progress: cloudFile,\n          }));\n        }\n\n        const state = store.getState();\n        const { stage, sequence, resourceId } = action.meta;\n        const uploadedMeta = {\n          ...action.meta,\n          cloudFile: cloudFile.cloudFile,\n          cloudUrl: cloudFile.cloudUrl,\n          status: AttachmentMetaStatus.Create,\n          progress: 1,\n        };\n        // Check state meta\n        const metaResources: Array<Resource<SequenceStageInstanceAttachmentMeta>> =\n          selectAttachmentMetasForResource(\n          store.getState(),\n          action.meta.resourceId,\n        );\n\n        const metas = compact(values(metaResources.map(resource => resource.data)));\n\n        // Grab fetched meta and staged instance. If staged for create after upload process\n        // Apply to instance immediately and call apply success handler\n        const fetchedMeta = metas.filter(meta => meta.attachment === action.meta.attachment)[0];\n        const stageInstance = state.sequenceStageInstances[sequence + stage] &&\n          state.sequenceStageInstances[sequence + stage][resourceId] &&\n          state.sequenceStageInstances[sequence + stage][resourceId].data;\n        if (fetchedMeta && fetchedMeta.status === AttachmentMetaStatus.CreateAfterUpload &&\n          stageInstance\n        ) {\n          return deps.sequenceStageInstances\n            .uploadAttachment(uploadedMeta)\n            .map(attachment => sequenceStageInstanceAttachmentsApply(\n              stageInstance,\n              [attachment],\n            ));\n        }\n\n        // Otherwise mark for creation by calling success handler\n        return Observable.of(\n          sequenceStageInstanceAttachmentAdd(action.meta, uploadedMeta),\n        );\n      })\n      .catch(e => Observable.of(sequenceStageInstanceAttachmentAdd(action.meta, e))),\n  );\n\n// // TODO(SHIN): Remove epic handling of attachments\n// const sequenceStageInstanceAttachmentRemoveEpic: Epic<Action<\n//   SequenceStageInstanceAttachmentMeta, null\n//   >, StoreState, Deps>\n// = (action$, store, deps) =>\n//   action$.ofType(SEQUENCE_STAGE_INSTANCE_ATTACHMENT_REMOVE)\n//     .filter(action => action.status === ActionStatus.Start)\n//     .filter(() => false)\n//     .flatMap(action =>\n//       deps.sequenceStageInstances\n//         .removeAttachment(action.meta)\n//         .map(() => sequenceStageInstanceAttachmentRemove(action.meta, null))\n//         .catch(e => Observable.of(sequenceStageInstanceAttachmentRemove(action.meta, e))),\n//   );\n\nconst sequenceStageInstanceAttachmentsApplyEpic: Epic<Action<\n  SequenceStageInstance | Error | null | AttachmentMeta,\n  Attachment[] | AttachmentMeta | null\n>, StoreState, Deps> = (action$, store, deps) =>\n  action$.ofType(SEQUENCE_STAGE_INSTANCE_ATTACHMENTS_APPLY)\n    .filter(action => action.status === ActionStatus.Start)\n    .flatMap((action: Action<SequenceStageInstance, Attachment[]>) => {\n      const state = store.getState();\n      const metaResources: Array<Resource<SequenceStageInstanceAttachmentMeta>> =\n        selectAttachmentMetasForResource(\n          state,\n          action.meta.id,\n        );\n      const metas = compact(values(metaResources.map(resource => resource.data)));\n      const addMetas = metas.filter(meta => meta.status === AttachmentMetaStatus.Create);\n      const deleteMetas = metas.filter(meta => meta.status === AttachmentMetaStatus.Delete);\n      const uploadingMetas = metas.filter(meta => meta.status === AttachmentMetaStatus.Uploading);\n\n      // Turns all add metas into upload requests and calls apply success handler\n      const addRequests = addMetas\n        .map(meta => deps.sequenceStageInstances.uploadAttachment(meta));\n      const addHandler = Observable.zip(...addRequests)\n        .map(result => sequenceStageInstanceAttachmentsApply(action.meta, result));\n\n      // Turns all delete metas into remove requests and call remove success handler\n      const deleteHandler = deleteMetas\n        .map(meta => deps.sequenceStageInstances\n          .removeAttachment(meta)\n          .map(payload => sequenceStageInstanceAttachmentRemove(meta, null)));\n\n      // Turns all uploading to create after upload\n      const stillUploadingHandler = uploadingMetas\n          .map(meta => Observable.of(sequenceStageInstanceAttachmentAdd(\n            meta,\n            { ...meta, status: AttachmentMetaStatus.CreateAfterUpload },\n          )));\n\n      // Merge both calls\n      return Observable.merge(\n        ...stillUploadingHandler,\n        addHandler,\n        ...deleteHandler,\n      ).catch((e: Error) => Observable.merge(\n        Observable.of(toastSet(e)),\n        Observable.of(sequenceStageInstanceAttachmentsApply(action.meta, e)),\n      ));\n    });\n\nconst sequenceStageInstanceAttachmentsListEpic: Epic<Action<\n  SequenceStageInstance, Attachment[]\n  >, StoreState, Deps>\n  = (action$, store, deps) =>\n    action$.ofType(SEQUENCE_STAGE_INSTANCE_ATTACHMENTS_LIST)\n      .filter(action => action.status === ActionStatus.Start)\n      .flatMap(action =>\n        deps.sequenceStageInstances\n          .listAttachments(\n            action.meta.sequence,\n            action.meta.stage,\n            action.meta.id,\n        )\n          .map(attachments => sequenceStageInstanceAttachmentsList(action.meta, attachments))\n          .catch(e => Observable.of(sequenceStageInstanceAttachmentsList(action.meta, e))),\n    );\n\n// Base handling for applying sequenceStagInstance update\nconst sequenceStageInstanceTemplateApplyEpic: Epic<\n  Action<\n    Template | SequenceStageInstanceUpdateMeta | SequenceStageInstanceAttachmentMeta,\n    SequenceStageInstance | AttachmentMeta | Error | null>,\n  StoreState,\n  Deps\n> = (action$, store, deps) =>\n  action$.ofType(SEQUENCE_STAGE_INSTANCE_TEMPLATE_APPLY)\n    .filter(action => action.status === ActionStatus.Start)\n    .filter(() => {\n      const state = store.getState();\n      const sequenceId = state.selectedSequence;\n      const stageId = state.selectedSequenceStage;\n      if (!(sequenceId && stageId && state.sequenceStageInstances[sequenceId + stageId])) {\n        return false;\n      }\n      const stageInstance = values(state.sequenceStageInstances[sequenceId + stageId])[0];\n      return stageInstance && !!stageInstance.data;\n    })\n    .flatMap((action: Action<Template, SequenceStageInstance>) => {\n      const state = store.getState();\n      const sequenceId = state.selectedSequence!;\n      const stageId = state.selectedSequenceStage;\n      const stageInstance = values(state.sequenceStageInstances[sequenceId + stageId])[0].data!;\n      const sequence = sequenceId && state.sequences[sequenceId] &&\n        state.sequences[sequenceId].data;\n      const stage = stageId && state.sequenceStages[sequenceId] &&\n        state.sequenceStages[sequenceId][stageId] && state.sequenceStages[sequenceId][stageId].data;\n      const headers = sequence && sequence.headers || [];\n      const templateAppliedInstance = applyTemplateToStageInstance(\n        stageInstance,\n        action.meta,\n        headers,\n        stage && stage.newThread || false,\n      );\n      const templateAttachments = action.meta.attachments;\n      const templateAttachmentActions = templateAttachments\n        .map(attachment => ({\n          ...convertToMeta(attachment, stageInstance.id),\n          attachment: attachment.id,\n          sequence: stageInstance.sequence,\n          stage: stageInstance.stage,\n          resourceId: stageInstance.id,\n          template: action.meta.id,\n          status: AttachmentMetaStatus.Create,\n          cloudUrl: attachment.cloudUrl,\n          progress: 1,\n        }))\n      .map(meta => Observable.of(sequenceStageInstanceAttachmentAdd(meta, meta)));\n\n      // Remove any old metas for attachment metas\n      const oldMetaResources: Array<Resource<AttachmentMeta>> = selectAttachmentMetasForResource(\n        state,\n        stageInstance.id,\n      );\n      const oldMetas = compact(values(oldMetaResources.map(resource => resource.data)));\n      const removeActions = oldMetas\n        .filter(meta => !!meta.template)\n        .filter(meta => meta.template !== action.meta.id)\n        .map(meta => sequenceStageInstanceAttachmentRemove({\n          ...meta,\n          sequence: stageInstance.sequence,\n          stage: stageInstance.stage,\n          status: AttachmentMetaStatus.Delete,\n        }))\n        .map(removeAction => Observable.of(removeAction));\n\n      return Observable.merge(\n        ...removeActions,\n        ...templateAttachmentActions,\n        Observable.of(sequenceStageInstanceUpdate(stageInstance, templateAppliedInstance)),\n      );\n    });\n\nexport default [\n  sequenceStageInstanceCreateEpic,\n  sequenceStageInstanceListEpic,\n  sequenceStageInstanceDeleteEpic,\n  sequenceStageInstanceUpdateEpic,\n  sequenceStageInstanceTestEpic,\n  sequenceStageInstanceAttachmentAddEpic,\n  // sequenceStageInstanceAttachmentRemoveEpic,\n  sequenceStageInstanceAttachmentsListEpic,\n  sequenceStageInstanceAttachmentsApplyEpic,\n  sequenceStageInstanceTemplateApplyEpic,\n];\n"]}]}