{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/contacts.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/contacts.ts","mtime":1675280254048},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/contacts.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/contacts.ts"],"names":[],"mappings":"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","sourcesContent":["import update from 'immutability-helper';\nimport { createSelector } from '@src/lib/selector';\n\nimport { create, createAction, createSingle } from '@src/lib/redux';\nimport { resourceLoading, resourceOk, resourcePending } from '@src/lib/resource';\n\nimport {\n  Contact, StoreState, ResourceStatus, ContactGroup, Resource, ContactType, RequiredPartial,\n} from '@src/types';\nimport { defaultContact } from '@src/lib/contact';\nimport { parseAddress } from '@src/lib/address';\n\nexport const {\n  type: CONTACT_SELECT,\n  action: contactSelect,\n  reducer: contactSelectReducer,\n} = create<string|undefined, null>('CONTACT_SELECT', {\n  success: (state, meta, payload) =>\n    update(state, {\n      selectedContact: { $set: meta === undefined ? meta : parseAddress(meta).email },\n    }),\n});\n\nexport const {\n  type: CONTACT_FETCH,\n  action: contactFetch,\n  reducer: contactFetchReducer,\n} = create<string, Contact>('CONTACT_FETCH', {\n  // NOTE(SHIN): Safe setup because contacts can become cleared?\n  setup: (state, meta) => {\n    if (state.contacts[meta]) {\n      return state;\n    }\n    return update(state, {\n      contacts: {\n        [meta]: { $set: resourcePending() },\n      },\n    });\n  },\n  start: (state, meta) => {\n    const existing = state.contacts[meta].data;\n    if (existing) {\n      return update(state, {\n        contacts: {\n          [meta]: {\n            status: { $set: ResourceStatus.Loading },\n          },\n        },\n      });\n    }\n\n    return update(state, {\n      contacts: {\n        [meta]: { $set: resourceLoading<Contact>() },\n      },\n    });\n  },\n\n  success: (state, meta, payload) => {\n    return update(state, {\n      contacts: {\n        [meta]: {\n          status: { $set: ResourceStatus.Ok },\n          data: { $set: { ...payload, type: ContactType.Enriched } },\n        },\n      },\n    });\n  },\n\n  failure: (state, meta, error) => {\n    return update(state, {\n      contacts: {\n        [meta]: {\n          status: { $set: ResourceStatus.Failure },\n          error: { $set: error },\n        },\n      },\n    });\n  },\n});\n\nexport type ContactUpdateMeta = RequiredPartial<\n  Contact,\n  'givenName' | 'familyName' | 'fullName'| 'email'| 'id'\n>;\n\nexport const {\n  type: CONTACT_UPDATE,\n  action: contactUpdate,\n  reducer: contactUpdateReducer,\n} = create<ContactUpdateMeta, Contact>('CONTACTS_PATCH', {\n  success: (state, meta, payload) => {\n    const email = parseAddress(meta.email).email.toLowerCase().trim();\n    return update(state, {\n      contacts: {\n        [email]: {\n          $set: resourceOk(payload),\n        },\n      },\n    });\n  },\n});\n\nexport const {\n  type: CONTACTS_ADD,\n  action: contactsAdd,\n  reducer: contactsAddReducer,\n} = create<string, Contact[]>('CONTACTS_ADD', {\n  success: (state, meta, payload) => {\n    if (!payload.length) {\n      return state;\n    }\n\n    const contacts = state.contacts;\n    payload.forEach((contact) => {\n      const oldContact = contacts[contact.email];\n\n      if ((oldContact && oldContact.data && oldContact.data.type === ContactType.Default) ||\n        !oldContact) {\n        contacts[contact.email] = resourceOk(contact);\n      }\n    });\n\n    return update(state, {\n      contacts: { $set: contacts },\n    });\n  },\n});\n\nexport const {\n  type: CONTACT_TYPEAHEAD,\n  action: contactTypeahead,\n  reducer: contactTypeaheadReducer,\n} = create<string, Array<Contact|ContactGroup>>('CONTACT_TYPEAHEAD', {\n  success: (state, meta, payload) => {\n    return update(state, {\n      typeaheadContacts: { $set: payload },\n    });\n  },\n});\n\nexport const {\n  type: CONTACT_TYPEAHEAD_DOMAIN,\n  action: contactTypeaheadDomain,\n  reducer: contactTypeaheadDomainReducer,\n} = create<string[], Contact[]>('CONTACT_TYPEAHEAD_DOMAIN', {\n  success: (state, meta, payload) => {\n    return update(state, {\n      typeaheadContacts: { $set: payload },\n    });\n  },\n});\n\nexport const {\n  type: CONTACT_TYPEAHEAD_CLEAR,\n  action: contactTypeaheadClear,\n  reducer: contactTypeaheadClearReducer,\n} = createSingle<Contact[]>('CONTACT_TYPEAHEAD_CLEAR',  (state, meta) => {\n  return update(state, {\n    typeaheadContacts: { $set: [] },\n  });\n});\n\n// NOTE(SHIN) IncrementCount is used to only fetch an item once\nexport const {\n  type: CONTACT_GET,\n  action: contactGet,\n  reducer: contactGetReducer,\n} = create<string, Contact>('CONTACT_GET', {\n  start: (state, meta) => {\n    const address = parseAddress(meta);\n    const { email, givenName, familyName } = address;\n    const contact = state.contacts[email];\n    const incrementCount = contact?.incrementCount || 0;\n    // const checkKeys = ['email', 'givenName', 'familyName'];\n\n    if (!contact) {\n      return update(state, {\n        contacts: {\n          [email]: {\n            $set: {\n              ...resourceOk({\n                ...defaultContact(email, givenName, familyName),\n              }),\n              incrementCount: incrementCount + 1,\n            },\n          },\n        },\n      });\n    }\n\n    if (contact?.data?.type === ContactType.Default) {\n      return update(state, {\n        contacts: { [email]: {\n          $set: {\n            ...resourceOk({\n              ...defaultContact(\n                email,\n                givenName || contact.data.givenName,\n                familyName || contact.data.familyName,\n              ),\n            }),\n            incrementCount: incrementCount + 1,\n          },\n        } },\n      });\n    }\n\n    return state;\n  },\n  success: (state, meta, payload) => {\n    // Do not update with cached data if already enriched\n    const parsedEmail = parseAddress(meta).email;\n    const foundContact = state.contacts[parsedEmail]?.data;\n    if (foundContact && foundContact.type === ContactType.Enriched) {\n      return state;\n    }\n\n    // Otherwise update\n    return update(state, {\n      contacts: {\n        [parseAddress(meta).email]: {\n          $set: {\n            ...resourceOk({\n              ...payload,\n            }),\n            incrementCount: (state.contacts[parsedEmail]?.incrementCount || 0) + 1,\n          },\n        },\n      },\n    });\n  },\n});\n\nexport const CONTACT_RESOURCES_FETCH = 'CONTACT_RESOURCES_FETCH';\nexport const contactResourcesFetch = createAction<string|undefined, null>(\n  CONTACT_RESOURCES_FETCH,\n);\n\n// Selects contact typeaheads with valid email, memoized on typeahead contacts\nexport const selectTypeaheadContacts = createSelector<undefined, Contact[], Contact[]>(\n  [state => state.typeaheadContacts],\n  (contacts: Contact[]) => {\n    return contacts.filter(contact => !!contact.email);\n  },\n  undefined,\n  ['typeaheadContacts'],\n);\n\n// selectContact finds the contact in the state,\n//  and provides a default placeholder contact when not in the state\nexport const selectContact = createSelector<string, Resource<Contact>, Contact>(\n  [\n    (state: StoreState, address: string) => {\n      const id = parseAddress(address).email.toLowerCase().trim();\n      return state.contacts[id];\n    },\n  ],\n  (contact: Resource<Contact>, address: string) => {\n    const { email, givenName, familyName } = parseAddress(address);\n\n    if (contact && contact.data) {\n      return contact.data;\n    }\n\n    return defaultContact(email, givenName, familyName);\n  },\n  (contact: Resource<Contact>, address: string) => parseAddress(address).email,\n);\n\nexport default [\n  contactFetchReducer,\n  contactTypeaheadReducer,\n  contactTypeaheadClearReducer,\n  contactSelectReducer,\n  contactGetReducer,\n  contactsAddReducer,\n  contactTypeaheadDomainReducer,\n  contactUpdateReducer,\n];\n"]}]}