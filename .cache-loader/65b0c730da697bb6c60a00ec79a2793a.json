{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/sequences.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/sequences.ts","mtime":1675280253981},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkgewogICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHsKICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHsKICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTsKICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKQogICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07CiAgICAgICAgfQogICAgICAgIHJldHVybiB0OwogICAgfTsKICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9OwppbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7CmltcG9ydCB7IGpzb25SZXF1ZXN0LCBibGFua1JlcXVlc3QsIGNzdlJlcXVlc3QgfSBmcm9tICcuL2Jhc2UnOwppbXBvcnQgeyBjcmVhdGVTZXF1ZW5jZSwgY3JlYXRlU2VxdWVuY2VSZWNpcGllbnRVcGxvYWRNZXRhIH0gZnJvbSAnQHNyYy9tb2Nrcy9zZXF1ZW5jZXMnOwppbXBvcnQgeyBhcHBseVNlcXVlbmNlRGVmYXVsdHMgfSBmcm9tICdAc3JjL2xpYi9tb2RlbHMvc2VxdWVuY2VzJzsKaW1wb3J0IHsgY3JlYXRlRmlsZSB9IGZyb20gJ0BzcmMvbW9ja3MvYXR0YWNobWVudHMnOwp2YXIgU2VxdWVuY2VDbGllbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7CiAgICBmdW5jdGlvbiBTZXF1ZW5jZUNsaWVudCgpIHsKICAgIH0KICAgIFNlcXVlbmNlQ2xpZW50LnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoc2VxdWVuY2UpIHsKICAgICAgICByZXR1cm4ganNvblJlcXVlc3QoewogICAgICAgICAgICBtZXRob2Q6ICdHRVQnLAogICAgICAgICAgICByb3V0ZTogIi92MS9zZXF1ZW5jZXMvIiArIHNlcXVlbmNlLAogICAgICAgIH0pCiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIGFwcGx5U2VxdWVuY2VEZWZhdWx0cyhzKTsgfSk7CiAgICB9OwogICAgU2VxdWVuY2VDbGllbnQucHJvdG90eXBlLmxpc3QgPSBmdW5jdGlvbiAoYXJjaGl2ZWQpIHsKICAgICAgICByZXR1cm4ganNvblJlcXVlc3QoewogICAgICAgICAgICBtZXRob2Q6ICdHRVQnLAogICAgICAgICAgICByb3V0ZTogIi92MS9zZXF1ZW5jZXM/YXJjaGl2ZWQ9IiArIGFyY2hpdmVkLAogICAgICAgIH0pCiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHNlcXVlbmNlcykgewogICAgICAgICAgICByZXR1cm4gc2VxdWVuY2VzLm1hcChmdW5jdGlvbiAocykgeyByZXR1cm4gYXBwbHlTZXF1ZW5jZURlZmF1bHRzKHMpOyB9KTsKICAgICAgICB9KTsKICAgIH07CiAgICBTZXF1ZW5jZUNsaWVudC5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24gKHNlcXVlbmNlKSB7CiAgICAgICAgcmV0dXJuIGpzb25SZXF1ZXN0KHsKICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsCiAgICAgICAgICAgIHJvdXRlOiAiL3YxL3NlcXVlbmNlcyIsCiAgICAgICAgICAgIGJvZHk6IHNlcXVlbmNlLAogICAgICAgIH0pCiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIGFwcGx5U2VxdWVuY2VEZWZhdWx0cyhzKTsgfSk7CiAgICB9OwogICAgU2VxdWVuY2VDbGllbnQucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChzZXF1ZW5jZSkgewogICAgICAgIHJldHVybiBqc29uUmVxdWVzdCh7CiAgICAgICAgICAgIG1ldGhvZDogJ1BBVENIJywKICAgICAgICAgICAgcm91dGU6ICIvdjEvc2VxdWVuY2VzLyIgKyBzZXF1ZW5jZS5pZCwKICAgICAgICAgICAgYm9keTogc2VxdWVuY2UsCiAgICAgICAgfSkKICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAocykgeyByZXR1cm4gYXBwbHlTZXF1ZW5jZURlZmF1bHRzKHMpOyB9KTsKICAgIH07CiAgICBTZXF1ZW5jZUNsaWVudC5wcm90b3R5cGUuc2hhcmUgPSBmdW5jdGlvbiAoc2VxdWVuY2UpIHsKICAgICAgICByZXR1cm4ganNvblJlcXVlc3QoewogICAgICAgICAgICBtZXRob2Q6ICdQT1NUJywKICAgICAgICAgICAgcm91dGU6ICIvdjEvc2VxdWVuY2VzLyIgKyBzZXF1ZW5jZS5pZCArICIvc2hhcmUiLAogICAgICAgICAgICBib2R5OiB7CiAgICAgICAgICAgICAgICB0ZWFtOiBzZXF1ZW5jZS50ZWFtLAogICAgICAgICAgICB9LAogICAgICAgIH0pCiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIGFwcGx5U2VxdWVuY2VEZWZhdWx0cyhzKTsgfSk7CiAgICB9OwogICAgU2VxdWVuY2VDbGllbnQucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uIChzZXF1ZW5jZSkgewogICAgICAgIHJldHVybiBibGFua1JlcXVlc3QoewogICAgICAgICAgICBtZXRob2Q6ICdERUxFVEUnLAogICAgICAgICAgICByb3V0ZTogIi92MS9zZXF1ZW5jZXMvIiArIHNlcXVlbmNlLmlkLAogICAgICAgIH0pOwogICAgfTsKICAgIFNlcXVlbmNlQ2xpZW50LnByb3RvdHlwZS5wYXJzZUNzdiA9IGZ1bmN0aW9uIChjbG91ZEZpbGUpIHsKICAgICAgICByZXR1cm4ganNvblJlcXVlc3QoewogICAgICAgICAgICBtZXRob2Q6ICdQT1NUJywKICAgICAgICAgICAgcm91dGU6ICIvdjMvc2VxdWVuY2VzL3BhcnNlQ3N2SGVhZGVycyIsCiAgICAgICAgICAgIGJvZHk6IHsKICAgICAgICAgICAgICAgIGNsb3VkRmlsZTogY2xvdWRGaWxlLAogICAgICAgICAgICB9LAogICAgICAgIH0pOwogICAgfTsKICAgIFNlcXVlbmNlQ2xpZW50LnByb3RvdHlwZS5kdXBsaWNhdGUgPSBmdW5jdGlvbiAoc2VxdWVuY2UpIHsKICAgICAgICByZXR1cm4ganNvblJlcXVlc3QoewogICAgICAgICAgICBtZXRob2Q6ICdQT1NUJywKICAgICAgICAgICAgcm91dGU6ICIvdjEvc2VxdWVuY2VzLyIgKyBzZXF1ZW5jZSArICIvZHVwbGljYXRlIiwKICAgICAgICB9KTsKICAgIH07CiAgICBTZXF1ZW5jZUNsaWVudC5wcm90b3R5cGUuZXhwb3J0ID0gZnVuY3Rpb24gKHNlcXVlbmNlKSB7CiAgICAgICAgcmV0dXJuIGNzdlJlcXVlc3QoewogICAgICAgICAgICBtZXRob2Q6ICdHRVQnLAogICAgICAgICAgICByb3V0ZTogIi92MS9zZXF1ZW5jZXMvIiArIHNlcXVlbmNlICsgIi9leHBvcnQiLAogICAgICAgIH0pOwogICAgfTsKICAgIHJldHVybiBTZXF1ZW5jZUNsaWVudDsKfSgpKTsKZXhwb3J0IHsgU2VxdWVuY2VDbGllbnQgfTsKZXhwb3J0IGZ1bmN0aW9uIG1vY2tTZXF1ZW5jZUNsaWVudCgpIHsKICAgIHJldHVybiB7CiAgICAgICAgbGlzdDogZnVuY3Rpb24gKCkgeyByZXR1cm4gT2JzZXJ2YWJsZS5vZihbY3JlYXRlU2VxdWVuY2UoKV0pOyB9LAogICAgICAgIGNyZWF0ZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gT2JzZXJ2YWJsZS5vZihjcmVhdGVTZXF1ZW5jZSgpKTsgfSwKICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE9ic2VydmFibGUub2YoY3JlYXRlU2VxdWVuY2UoKSk7IH0sCiAgICAgICAgc2hhcmU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE9ic2VydmFibGUub2YoY3JlYXRlU2VxdWVuY2UoKSk7IH0sCiAgICAgICAgZGVsZXRlOiBmdW5jdGlvbiAoKSB7IHJldHVybiBPYnNlcnZhYmxlLm9mKG51bGwpOyB9LAogICAgICAgIHBhcnNlQ3N2OiBmdW5jdGlvbiAoKSB7IHJldHVybiBPYnNlcnZhYmxlLm9mKF9fYXNzaWduKF9fYXNzaWduKHt9LCBjcmVhdGVTZXF1ZW5jZVJlY2lwaWVudFVwbG9hZE1ldGEoKSksIHsgaGVhZGVyczogW10sIGVtYWlsSGVhZGVyOiAnZW1haWxIZWFkZXInIH0pKTsgfSwKICAgICAgICBkdXBsaWNhdGU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE9ic2VydmFibGUub2YoY3JlYXRlU2VxdWVuY2UoKSk7IH0sCiAgICAgICAgZXhwb3J0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBPYnNlcnZhYmxlLm9mKGNyZWF0ZUZpbGUoKSk7IH0sCiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBPYnNlcnZhYmxlLm9mKGNyZWF0ZVNlcXVlbmNlKCkpOyB9LAogICAgfTsKfQo="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/sequences.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/sequences.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs';\n\nimport { Sequence } from '@src/types/sequences';\nimport { jsonRequest, blankRequest, csvRequest } from './base';\nimport { createSequence, createSequenceRecipientUploadMeta } from '@src/mocks/sequences';\nimport { applySequenceDefaults } from '@src/lib/models/sequences';\nimport { createFile } from '@src/mocks/attachments';\n\nexport interface SequenceAPI {\n  get(sequence: string): Observable<Sequence>;\n  list(archived: boolean): Observable<Sequence[]>;\n  create(sequence: Sequence): Observable<Sequence>;\n  update(sequence: Sequence): Observable<Sequence>;\n  share(sequence: Sequence): Observable<Sequence>;\n  delete(sequence: Sequence): Observable<null>;\n  parseCsv(cloudFile: string): Observable<ParseCSVResponse>;\n  duplicate(sequence: string): Observable<Sequence>;\n  export(sequence: string): Observable<Blob>;\n}\n\ninterface ParseCSVResponse {\n  headers: string[];\n  emailHeader: string;\n  givenNameHeader?: string;\n  familyNameHeader?: string;\n}\n\nexport class SequenceClient implements SequenceAPI {\n  get(sequence: string): Observable<Sequence> {\n    return jsonRequest({\n      method: 'GET',\n      route: `/v1/sequences/${sequence}`,\n    })\n    .map(s => applySequenceDefaults(s));\n  }\n\n  list(archived: boolean): Observable<Sequence[]> {\n    return jsonRequest({\n      method: 'GET',\n      route: `/v1/sequences?archived=${archived}`,\n    })\n    .map(sequences =>\n      sequences.map((s: Sequence) => applySequenceDefaults(s)),\n    );\n  }\n\n  create(sequence: Sequence): Observable<Sequence> {\n    return jsonRequest({\n      method: 'POST',\n      route: `/v1/sequences`,\n      body: sequence,\n    })\n    .map(s => applySequenceDefaults(s));\n  }\n\n  update(sequence: Sequence): Observable<Sequence> {\n    return jsonRequest({\n      method: 'PATCH',\n      route: `/v1/sequences/${sequence.id}`,\n      body: sequence,\n    })\n    .map(s => applySequenceDefaults(s));\n  }\n\n  share(sequence: Sequence): Observable<Sequence> {\n    return jsonRequest({\n      method: 'POST',\n      route: `/v1/sequences/${sequence.id}/share`,\n      body: {\n        team: sequence.team,\n      },\n    })\n    .map(s => applySequenceDefaults(s));\n  }\n\n  delete(sequence: Sequence): Observable<null> {\n    return blankRequest({\n      method: 'DELETE',\n      route: `/v1/sequences/${sequence.id}`,\n    });\n  }\n\n  parseCsv(cloudFile: string): Observable<ParseCSVResponse> {\n    return jsonRequest({\n      method: 'POST',\n      route: `/v3/sequences/parseCsvHeaders`,\n      body: {\n        cloudFile,\n      },\n    });\n  }\n\n  duplicate(sequence: string): Observable<Sequence> {\n    return jsonRequest({\n      method: 'POST',\n      route: `/v1/sequences/${sequence}/duplicate`,\n    });\n  }\n\n  export(sequence: string): Observable<Blob> {\n    return csvRequest({\n      method: 'GET',\n      route: `/v1/sequences/${sequence}/export`,\n    });\n  }\n}\n\nexport function mockSequenceClient(): SequenceAPI {\n  return {\n    list: () => Observable.of([createSequence()]),\n    create: () => Observable.of(createSequence()),\n    update: () => Observable.of(createSequence()),\n    share: () => Observable.of(createSequence()),\n    delete: () => Observable.of(null),\n    parseCsv: () => Observable.of({\n      ...createSequenceRecipientUploadMeta(),\n      headers: [],\n      emailHeader: 'emailHeader',\n    }),\n    duplicate: () => Observable.of(createSequence()),\n    export: () => Observable.of(createFile()),\n    get: () => Observable.of(createSequence()),\n  };\n}\n"]}]}