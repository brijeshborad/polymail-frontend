{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/slack.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/slack.ts","mtime":1675280254052},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIF9hLCBfYiwgX2M7CmltcG9ydCB1cGRhdGUgZnJvbSAnaW1tdXRhYmlsaXR5LWhlbHBlcic7CmltcG9ydCB7IGNyZWF0ZSB9IGZyb20gJ0BzcmMvbGliL3JlZHV4JzsKaW1wb3J0IHsgcmVzb3VyY2VMb2FkaW5nLCByZXNvdXJjZU9rIH0gZnJvbSAnQHNyYy9saWIvcmVzb3VyY2UnOwppbXBvcnQgeyBSZXNvdXJjZVN0YXR1cyB9IGZyb20gJ0BzcmMvdHlwZXMnOwpleHBvcnQgdmFyIFNMQUNLX0NIQU5ORUxfTElTVCA9IChfYSA9IGNyZWF0ZSgnU0xBQ0tfQ0hBTk5FTF9MSVNUJywgewogICAgc2V0dXA6IGZ1bmN0aW9uIChzdGF0ZSwgbWV0YSkgewogICAgICAgIGlmIChzdGF0ZS5zbGFjayAmJiBzdGF0ZS5zbGFjay5jaGFubmVscykgewogICAgICAgICAgICByZXR1cm4gc3RhdGU7CiAgICAgICAgfQogICAgICAgIGlmIChzdGF0ZS5zbGFjaykgewogICAgICAgICAgICByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgICAgICAgICBzbGFjazogewogICAgICAgICAgICAgICAgICAgIGNoYW5uZWxzOiB7ICRzZXQ6IHJlc291cmNlTG9hZGluZygpIH0sCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICBzbGFjazogewogICAgICAgICAgICAgICAgJHNldDogewogICAgICAgICAgICAgICAgICAgIGNoYW5uZWxzOiByZXNvdXJjZUxvYWRpbmcoKSwKICAgICAgICAgICAgICAgICAgICBtZW1iZXJzOiByZXNvdXJjZUxvYWRpbmcoKSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgfSk7CiAgICB9LAogICAgc3RhcnQ6IGZ1bmN0aW9uIChzdGF0ZSwgbWV0YSkgewogICAgICAgIHJldHVybiB1cGRhdGUoc3RhdGUsIHsKICAgICAgICAgICAgc2xhY2s6IHsKICAgICAgICAgICAgICAgIGNoYW5uZWxzOiB7CiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiB7ICRzZXQ6IFJlc291cmNlU3RhdHVzLkxvYWRpbmcgfSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgfSk7CiAgICB9LAogICAgc3VjY2VzczogZnVuY3Rpb24gKHN0YXRlLCBtZXRhLCBwYXlsb2FkKSB7CiAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICBzbGFjazogewogICAgICAgICAgICAgICAgY2hhbm5lbHM6IHsKICAgICAgICAgICAgICAgICAgICAkc2V0OiByZXNvdXJjZU9rKHBheWxvYWQpLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICB9KTsKICAgIH0sCn0pLCBfYS50eXBlKSwgc2xhY2tDaGFubmVsTGlzdCA9IF9hLmFjdGlvbiwgc2xhY2tDaGFubmVsTGlzdFJlZHVjZXIgPSBfYS5yZWR1Y2VyOwpleHBvcnQgdmFyIFNMQUNLX01FTUJFUl9MSVNUID0gKF9iID0gY3JlYXRlKCdTTEFDS19NRU1CRVJfTElTVCcsIHsKICAgIHNldHVwOiBmdW5jdGlvbiAoc3RhdGUsIG1ldGEpIHsKICAgICAgICBpZiAoc3RhdGUuc2xhY2sgJiYgc3RhdGUuc2xhY2subWVtYmVycykgewogICAgICAgICAgICByZXR1cm4gc3RhdGU7CiAgICAgICAgfQogICAgICAgIGlmIChzdGF0ZS5zbGFjaykgewogICAgICAgICAgICByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgICAgICAgICBzbGFjazogewogICAgICAgICAgICAgICAgICAgIG1lbWJlcnM6IHsgJHNldDogcmVzb3VyY2VMb2FkaW5nKCkgfSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdXBkYXRlKHN0YXRlLCB7CiAgICAgICAgICAgIHNsYWNrOiB7CiAgICAgICAgICAgICAgICAkc2V0OiB7CiAgICAgICAgICAgICAgICAgICAgY2hhbm5lbHM6IHJlc291cmNlTG9hZGluZygpLAogICAgICAgICAgICAgICAgICAgIG1lbWJlcnM6IHJlc291cmNlTG9hZGluZygpLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICB9KTsKICAgIH0sCiAgICBzdGFydDogZnVuY3Rpb24gKHN0YXRlLCBtZXRhKSB7CiAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwgewogICAgICAgICAgICBzbGFjazogewogICAgICAgICAgICAgICAgbWVtYmVyczogewogICAgICAgICAgICAgICAgICAgIHN0YXR1czogeyAkc2V0OiBSZXNvdXJjZVN0YXR1cy5Mb2FkaW5nIH0sCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgIH0pOwogICAgfSwKICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChzdGF0ZSwgbWV0YSwgcGF5bG9hZCkgewogICAgICAgIHJldHVybiB1cGRhdGUoc3RhdGUsIHsKICAgICAgICAgICAgc2xhY2s6IHsKICAgICAgICAgICAgICAgIG1lbWJlcnM6IHsKICAgICAgICAgICAgICAgICAgICAkc2V0OiByZXNvdXJjZU9rKHBheWxvYWQpLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICB9KTsKICAgIH0sCn0pLCBfYi50eXBlKSwgc2xhY2tNZW1iZXJMaXN0ID0gX2IuYWN0aW9uLCBzbGFja01lbWJlckxpc3RSZWR1Y2VyID0gX2IucmVkdWNlcjsKZXhwb3J0IHZhciBTTEFDS19NRVNTQUdFX1BPU1QgPSAoX2MgPSBjcmVhdGUoJ1NMQUNLX01FU1NBR0VfUE9TVCcsIHt9KSwgX2MudHlwZSksIHNsYWNrTWVzc2FnZVBvc3QgPSBfYy5hY3Rpb24sIHNsYWNrTWVzc2FnZVBvc3RSZWR1Y2VyID0gX2MucmVkdWNlcjsKZXhwb3J0IGRlZmF1bHQgW3NsYWNrQ2hhbm5lbExpc3RSZWR1Y2VyLCBzbGFja01lbWJlckxpc3RSZWR1Y2VyXTsK"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/slack.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/ducks/slack.ts"],"names":[],"mappings":";AAAA,OAAO,MAAM,MAAM,qBAAqB,CAAC;AACzC,OAAO,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;AACxC,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,MAAM,mBAAmB,CAAC;AAEhE,OAAO,EAAE,cAAc,EAAE,MAAM,YAAY,CAAC;AAE5C,MAAM,CACJ,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAAwB,EACxB,4BAAwB,EACxB,oCAAgC,CAwC/B;AAEH,MAAM,CACJ,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAAuB,EACvB,2BAAuB,EACvB,mCAA+B,CAwC9B;AAQH,MAAM,CACJ,IAAA,qEAAwB,EACxB,4BAAwB,EACxB,oCAAgC,CAC+B;AAEjE,eAAe,CAAC,uBAAuB,EAAE,sBAAsB,CAAC,CAAC","sourcesContent":["import update from 'immutability-helper';\nimport { create } from '@src/lib/redux';\nimport { resourceLoading, resourceOk } from '@src/lib/resource';\nimport { SlackChannel, SlackMember } from '@src/types/slack';\nimport { ResourceStatus } from '@src/types';\n\nexport const {\n  type: SLACK_CHANNEL_LIST,\n  action: slackChannelList,\n  reducer: slackChannelListReducer,\n} = create<null, SlackChannel[]>('SLACK_CHANNEL_LIST', {\n  setup: (state, meta) => {\n    if (state.slack && state.slack.channels) {\n      return state;\n    }\n\n    if (state.slack) {\n      return update(state, {\n        slack: {\n          channels: { $set: resourceLoading() },\n        },\n      });\n    }\n\n    return update(state, {\n      slack: {\n        $set: {\n          channels: resourceLoading(),\n          members: resourceLoading(),\n        },\n      },\n    });\n  },\n  start: (state, meta) =>\n    update(state, {\n      slack: {\n        channels: {\n          status: { $set: ResourceStatus.Loading },\n        },\n      },\n    }),\n  success: (state, meta, payload) =>\n    update(state, {\n      slack: {\n        channels: {\n          $set: resourceOk(payload),\n        },\n      },\n    }),\n});\n\nexport const {\n  type: SLACK_MEMBER_LIST,\n  action: slackMemberList,\n  reducer: slackMemberListReducer,\n} = create<null, SlackMember[]>('SLACK_MEMBER_LIST', {\n  setup: (state, meta) => {\n    if (state.slack && state.slack.members) {\n      return state;\n    }\n\n    if (state.slack) {\n      return update(state, {\n        slack: {\n          members: { $set: resourceLoading() },\n        },\n      });\n    }\n\n    return update(state, {\n      slack: {\n        $set: {\n          channels: resourceLoading(),\n          members: resourceLoading(),\n        },\n      },\n    });\n  },\n  start: (state, meta) =>\n    update(state, {\n      slack: {\n        members: {\n          status: { $set: ResourceStatus.Loading },\n        },\n      },\n    }),\n  success: (state, meta, payload) =>\n    update(state, {\n      slack: {\n        members: {\n          $set: resourceOk(payload),\n        },\n      },\n    }),\n});\n\nexport interface SlackMessagePostMeta {\n  message: string;\n  channel?: string;\n  members?: string[];\n}\n\nexport const {\n  type: SLACK_MESSAGE_POST,\n  action: slackMessagePost,\n  reducer: slackMessagePostReducer,\n} = create<SlackMessagePostMeta, null>('SLACK_MESSAGE_POST', {});\n\nexport default [slackChannelListReducer, slackMemberListReducer];\n"]}]}