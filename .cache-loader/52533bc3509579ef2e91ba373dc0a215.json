{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/sequenceStages.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/sequenceStages.ts","mtime":1675280253980},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnOwppbXBvcnQgeyBqc29uUmVxdWVzdCwgYmxhbmtSZXF1ZXN0IH0gZnJvbSAnLi9iYXNlJzsKaW1wb3J0IHsgY3JlYXRlU2VxdWVuY2VTdGFnZSB9IGZyb20gJ0BzcmMvbW9ja3Mvc2VxdWVuY2VzJzsKaW1wb3J0IHsgYXBwbHlTZXF1ZW5jZVN0YWdlRGVmYXVsdHMgfSBmcm9tICdAc3JjL2xpYi9tb2RlbHMvc2VxdWVuY2VTdGFnZXMnOwp2YXIgU2VxdWVuY2VTdGFnZUNsaWVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHsKICAgIGZ1bmN0aW9uIFNlcXVlbmNlU3RhZ2VDbGllbnQoKSB7CiAgICB9CiAgICBTZXF1ZW5jZVN0YWdlQ2xpZW50LnByb3RvdHlwZS5saXN0ID0gZnVuY3Rpb24gKHNlcXVlbmNlKSB7CiAgICAgICAgcmV0dXJuIGpzb25SZXF1ZXN0KHsKICAgICAgICAgICAgbWV0aG9kOiAnR0VUJywKICAgICAgICAgICAgcm91dGU6ICIvdjEvc2VxdWVuY2VzLyIgKyBzZXF1ZW5jZSArICIvc3RhZ2VzIiwKICAgICAgICB9KQogICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChzdGFnZXMpIHsgcmV0dXJuIHN0YWdlcy5tYXAoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIGFwcGx5U2VxdWVuY2VTdGFnZURlZmF1bHRzKHMpOyB9KTsgfSk7CiAgICB9OwogICAgU2VxdWVuY2VTdGFnZUNsaWVudC5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24gKG1ldGEpIHsKICAgICAgICByZXR1cm4ganNvblJlcXVlc3QoewogICAgICAgICAgICBtZXRob2Q6ICdQT1NUJywKICAgICAgICAgICAgcm91dGU6ICIvdjEvc2VxdWVuY2VzLyIgKyBtZXRhLnN0YWdlLnNlcXVlbmNlICsgIi9zdGFnZXMiLAogICAgICAgICAgICBib2R5OiBtZXRhLnN0YWdlLAogICAgICAgIH0pCiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIGFwcGx5U2VxdWVuY2VTdGFnZURlZmF1bHRzKHMpOyB9KTsKICAgIH07CiAgICBTZXF1ZW5jZVN0YWdlQ2xpZW50LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoc3RhZ2UpIHsKICAgICAgICByZXR1cm4ganNvblJlcXVlc3QoewogICAgICAgICAgICBtZXRob2Q6ICdQQVRDSCcsCiAgICAgICAgICAgIHJvdXRlOiAiL3YxL3NlcXVlbmNlcy8iICsgc3RhZ2Uuc2VxdWVuY2UgKyAiL3N0YWdlcy8iICsgc3RhZ2UuaWQsCiAgICAgICAgICAgIGJvZHk6IHN0YWdlLAogICAgICAgIH0pCiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIGFwcGx5U2VxdWVuY2VTdGFnZURlZmF1bHRzKHMpOyB9KTsKICAgIH07CiAgICBTZXF1ZW5jZVN0YWdlQ2xpZW50LnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAoc3RhZ2UpIHsKICAgICAgICByZXR1cm4gYmxhbmtSZXF1ZXN0KHsKICAgICAgICAgICAgbWV0aG9kOiAnREVMRVRFJywKICAgICAgICAgICAgcm91dGU6ICIvdjEvc2VxdWVuY2VzLyIgKyBzdGFnZS5zZXF1ZW5jZSArICIvc3RhZ2VzLyIgKyBzdGFnZS5pZCwKICAgICAgICB9KTsKICAgIH07CiAgICBTZXF1ZW5jZVN0YWdlQ2xpZW50LnByb3RvdHlwZS5kdXBsaWNhdGUgPSBmdW5jdGlvbiAoc2VxdWVuY2UsIHN0YWdlKSB7CiAgICAgICAgcmV0dXJuIGpzb25SZXF1ZXN0KHsKICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsCiAgICAgICAgICAgIHJvdXRlOiAiL3YxL3NlcXVlbmNlcy8iICsgc2VxdWVuY2UgKyAiL3N0YWdlcy8iICsgc3RhZ2UgKyAiL2R1cGxpY2F0ZSIsCiAgICAgICAgfSkKICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAocykgeyByZXR1cm4gYXBwbHlTZXF1ZW5jZVN0YWdlRGVmYXVsdHMocyk7IH0pOwogICAgfTsKICAgIHJldHVybiBTZXF1ZW5jZVN0YWdlQ2xpZW50Owp9KCkpOwpleHBvcnQgeyBTZXF1ZW5jZVN0YWdlQ2xpZW50IH07CmV4cG9ydCBmdW5jdGlvbiBtb2NrU2VxdWVuY2VTdGFnZUNsaWVudCgpIHsKICAgIHJldHVybiB7CiAgICAgICAgbGlzdDogZnVuY3Rpb24gKCkgeyByZXR1cm4gT2JzZXJ2YWJsZS5vZihbY3JlYXRlU2VxdWVuY2VTdGFnZSgpXSk7IH0sCiAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiAoc3RhZ2UpIHsgcmV0dXJuIE9ic2VydmFibGUub2YoY3JlYXRlU2VxdWVuY2VTdGFnZShzdGFnZSkpOyB9LAogICAgICAgIGRlbGV0ZTogZnVuY3Rpb24gKHN0YWdlKSB7IHJldHVybiBPYnNlcnZhYmxlLm9mKG51bGwpOyB9LAogICAgICAgIGNyZWF0ZTogZnVuY3Rpb24gKG1ldGEpIHsgcmV0dXJuIE9ic2VydmFibGUub2YoY3JlYXRlU2VxdWVuY2VTdGFnZShtZXRhLnN0YWdlKSk7IH0sCiAgICAgICAgZHVwbGljYXRlOiBmdW5jdGlvbiAoc2VxdWVuY2UsIHN0YWdlKSB7IHJldHVybiBPYnNlcnZhYmxlLm9mKGNyZWF0ZVNlcXVlbmNlU3RhZ2UoKSk7IH0sCiAgICB9Owp9Cg=="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/sequenceStages.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/sequenceStages.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAIlC,OAAO,EAAE,WAAW,EAAE,YAAY,EAAE,MAAM,QAAQ,CAAC;AACnD,OAAO,EAAE,mBAAmB,EAAE,MAAM,sBAAsB,CAAC;AAC3D,OAAO,EAAE,0BAA0B,EAAE,MAAM,gCAAgC,CAAC;AAW5E;IAAA;IA0CA,CAAC;IAzCC,kCAAI,GAAJ,UAAK,QAAgB;QACnB,OAAO,WAAW,CAAC;YACjB,MAAM,EAAE,KAAK;YACb,KAAK,EAAE,mBAAiB,QAAQ,YAAS;SAC1C,CAAC;aACD,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,GAAG,CACvB,UAAC,CAAgB,IAAK,OAAA,0BAA0B,CAAC,CAAC,CAAC,EAA7B,CAA6B,CACpD,EAFc,CAEd,CAAC,CAAC;IACL,CAAC;IACD,oCAAM,GAAN,UAAO,IAA6B;QAClC,OAAO,WAAW,CAAC;YACjB,MAAM,EAAE,MAAM;YACd,KAAK,EAAE,mBAAiB,IAAI,CAAC,KAAK,CAAC,QAAQ,YAAS;YACpD,IAAI,EAAE,IAAI,CAAC,KAAK;SACjB,CAAC;aACC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,0BAA0B,CAAC,CAAC,CAAC,EAA7B,CAA6B,CAAC,CAAC;IAC7C,CAAC;IAED,oCAAM,GAAN,UAAO,KAA6B;QAClC,OAAO,WAAW,CAAC;YACjB,MAAM,EAAE,OAAO;YACf,KAAK,EAAE,mBAAiB,KAAK,CAAC,QAAQ,gBAAW,KAAK,CAAC,EAAI;YAC3D,IAAI,EAAE,KAAK;SACZ,CAAC;aACC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,0BAA0B,CAAC,CAAC,CAAC,EAA7B,CAA6B,CAAC,CAAC;IAC7C,CAAC;IAED,oCAAM,GAAN,UAAO,KAAoB;QACzB,OAAO,YAAY,CAAC;YAClB,MAAM,EAAE,QAAQ;YAChB,KAAK,EAAE,mBAAiB,KAAK,CAAC,QAAQ,gBAAW,KAAK,CAAC,EAAI;SAC5D,CAAC,CAAC;IACL,CAAC;IAED,uCAAS,GAAT,UAAU,QAAgB,EAAE,KAAa;QACvC,OAAO,WAAW,CAAC;YACjB,MAAM,EAAE,MAAM;YACd,KAAK,EAAE,mBAAiB,QAAQ,gBAAW,KAAK,eAAY;SAC7D,CAAC;aACC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,0BAA0B,CAAC,CAAC,CAAC,EAA7B,CAA6B,CAAC,CAAC;IAC7C,CAAC;IACH,0BAAC;AAAD,CAAC,AA1CD,IA0CC;;AAED,MAAM,UAAU,uBAAuB;IACrC,OAAO;QACL,IAAI,EAAE,cAAM,OAAA,UAAU,CAAC,EAAE,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC,EAAtC,CAAsC;QAClD,MAAM,EAAE,UAAA,KAAK,IAAI,OAAA,UAAU,CAAC,EAAE,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,EAAzC,CAAyC;QAC1D,MAAM,EAAE,UAAA,KAAK,IAAI,OAAA,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,EAAnB,CAAmB;QACpC,MAAM,EAAE,UAAA,IAAI,IAAI,OAAA,UAAU,CAAC,EAAE,CAAC,mBAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAA9C,CAA8C;QAC9D,SAAS,EAAE,UAAC,QAAQ,EAAE,KAAK,IAAK,OAAA,UAAU,CAAC,EAAE,CAAC,mBAAmB,EAAE,CAAC,EAApC,CAAoC;KACrE,CAAC;AACJ,CAAC","sourcesContent":["import { Observable } from 'rxjs';\n\nimport { SequenceStage } from '@src/types/sequences';\nimport { Partial } from '@src/types';\nimport { jsonRequest, blankRequest } from './base';\nimport { createSequenceStage } from '@src/mocks/sequences';\nimport { applySequenceStageDefaults } from '@src/lib/models/sequenceStages';\nimport { SequenceStageCreateMeta } from '@src/ducks/sequenceStages';\n\nexport interface SequenceStageAPI {\n  list(sequence: string): Observable<SequenceStage[]>;\n  update(stage: Partial<SequenceStage>): Observable<SequenceStage>;\n  delete(stage: SequenceStage): Observable<null>;\n  create(stage: SequenceStageCreateMeta): Observable<SequenceStage>;\n  duplicate(sequence: string, stage: string): Observable<SequenceStage>;\n}\n\nexport class SequenceStageClient implements SequenceStageAPI {\n  list(sequence: string): Observable<SequenceStage[]> {\n    return jsonRequest({\n      method: 'GET',\n      route: `/v1/sequences/${sequence}/stages`,\n    })\n    .map(stages => stages.map(\n      (s: SequenceStage) => applySequenceStageDefaults(s),\n    ));\n  }\n  create(meta: SequenceStageCreateMeta): Observable<SequenceStage> {\n    return jsonRequest({\n      method: 'POST',\n      route: `/v1/sequences/${meta.stage.sequence}/stages`,\n      body: meta.stage,\n    })\n      .map(s => applySequenceStageDefaults(s));\n  }\n\n  update(stage: Partial<SequenceStage>): Observable<SequenceStage> {\n    return jsonRequest({\n      method: 'PATCH',\n      route: `/v1/sequences/${stage.sequence}/stages/${stage.id}`,\n      body: stage,\n    })\n      .map(s => applySequenceStageDefaults(s));\n  }\n\n  delete(stage: SequenceStage): Observable<null> {\n    return blankRequest({\n      method: 'DELETE',\n      route: `/v1/sequences/${stage.sequence}/stages/${stage.id}`,\n    });\n  }\n\n  duplicate(sequence: string, stage: string): Observable<SequenceStage> {\n    return jsonRequest({\n      method: 'POST',\n      route: `/v1/sequences/${sequence}/stages/${stage}/duplicate`,\n    })\n      .map(s => applySequenceStageDefaults(s));\n  }\n}\n\nexport function mockSequenceStageClient(): SequenceStageAPI {\n  return {\n    list: () => Observable.of([createSequenceStage()]),\n    update: stage => Observable.of(createSequenceStage(stage)),\n    delete: stage => Observable.of(null),\n    create: meta => Observable.of(createSequenceStage(meta.stage)),\n    duplicate: (sequence, stage) => Observable.of(createSequenceStage()),\n  };\n}\n"]}]}