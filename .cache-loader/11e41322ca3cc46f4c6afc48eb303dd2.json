{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/drafts.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/drafts.ts","mtime":1675280254055},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/drafts.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/epics/drafts.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs';\nimport { Epic } from 'redux-observable';\nimport { last, findIndex, uniqBy, first, flatten, compact, find } from 'lodash';\nimport { Deps } from '@src/lib/epic';\nimport Cache, { Stores } from '@src/lib/db';\nimport { mongoId } from '@src/lib/crypt';\n\nimport {\n  StoreState,\n  Action,\n  ActionStatus,\n  Draft,\n  AttachmentMeta,\n  Attachment,\n  Thread,\n  DraftStatus,\n  TimeBlock,\n  Contact,\n  EventRecipientType,\n  ContactType,\n  HistoryObject,\n  Commit,\n  CommitStatus,\n  Template,\n  OnboardingType,\n  Onboarding,\n  MessageBody,\n  Message,\n  ThreadBox,\n  ThreadCommitMeta,\n  Resource,\n  FileUploadMeta,\n} from '@src/types';\n\nimport { LOCATION_CHANGE, LocationChangeAction } from 'react-router-redux';\n\nimport { DB_READY } from '@src/ducks/db';\n\nimport {\n  DRAFT_SELECT, draftSelect,\n  DRAFT_FETCH, draftFetch,\n  DRAFT_LIST, draftList,\n  DRAFT_UPDATE, draftUpdate,\n  DRAFT_CREATE, draftCreate,\n  DRAFT_SEND,\n  DRAFT_DELETE, draftDelete,\n  DRAFT_ATTACHMENT_ADD,\n  DRAFT_ATTACHMENT_REMOVE, draftAttachmentRemove,\n  DRAFT_CREATE_CONFIGURATION,\n  selectDraftForThread,\n  selectDraft,\n  DraftContactGroupMeta, DRAFT_CONTACT_GROUP_ADD,\n  DRAFT_SEND_UNDO, draftSendUndo,\n  DRAFT_TEMPLATE_APPLY,\n  draftAttachmentsAppend,\n  DRAFT_CALENDAR_INVITE_ADD,\n  draftCalendarInviteAdd,\n  draftCreateConfiguration,\n  DraftConfigurationMeta,\n  attachmentMetaCreate,\n  DRAFT_ATTTACHMENTS_APPEND,\n  draftAttachmentAdd,\n  selectSelectedDraft,\n  selectDraftForOptimisticThread,\n  draftUpdateBroadcast,\n  draftSend,\n  DraftSendMeta,\n  selectOptimisticMessagesForThread,\n  draftSendNow,\n  DRAFT_SEND_NOW,\n  draftSendBroadcast,\n  selectAttachmentMetasForResource,\n  attachmentMetaUpdate,\n  ATTACHMENT_META_HYDRATE,\n  attachmentMetaHydrate,\n} from '@src/ducks/drafts';\n\nimport { selectMessageBodies } from '@src/ducks/messageBodies';\n\nimport { DraftClient } from '@src/api/drafts';\nimport {\n  createDraft,\n  toThread,\n  configureRecipients,\n  createNewDraft,\n  applyTemplateToDraft,\n  appendThread,\n  Configuration,\n  createMailToDraft,\n  applyAttachmentToDraft,\n  isDraftSending,\n  removeTemplateRecipientsFromDraft,\n} from '@src/lib/draft';\nimport {\n  threadSingle,\n  threadSelect,\n  threadDelete,\n  selectThread,\n  threadCommitsSubmit,\n} from '@src/ducks/threads';\nimport { toastSet, ConfirmationError, ConfirmationPositon } from '@src/ducks/toasts';\nimport { contactSelect, contactsAdd } from '@src/ducks/contacts';\nimport {\n  getContactsByContactGroup,\n  getContactsByRecipientType,\n  defaultContact,\n} from '@src/lib/contact';\nimport { getQueryVariable } from '@src/lib/query';\nimport { ApiError } from '@src/api/base';\nimport { recordEvent, UserEvents } from '@src/lib/analytics';\nimport {\n  draftCreateCommit,\n  draftDeleteCommit,\n  draftUpdateCommit,\n  fileUploadMeta,\n  draftAttachmentAddCommit,\n  draftForwardAttachmentsCommit,\n  draftSendCommit,\n  submitCommit,\n  draftSendNowCommit,\n  draftAttachmentDeleteCommit,\n} from '@src/lib/commit';\nimport { onboardingPatch, meFetch, OnboardingPatchMeta } from '@src/ducks/me';\nimport { RightSidebarMeta } from '@src/ducks/rightSidebar';\nimport { sharedThreadSelect } from '@src/ducks/sharedThreads';\nimport { SharedThread } from '@src/types/sharedThreads';\nimport { MeBody } from '@src/api/me';\nimport browserHistory from '@src/lib/browserHistory';\nimport { computeThread } from '@src/lib/thread';\nimport { routeFromMailbox, isDraftBox } from '@src/lib/mailbox';\nimport { captureException } from '@sentry/browser';\nimport { convertToOptimistic } from '@src/lib/attachment';\nimport { selectTemplate } from '@src/ducks/templates';\nimport { AmplitudeEvents, logAmplitudeEvent } from '@src/lib/amplitude-analytics';\n\n// DB ready triggers list of drafts\nconst dbReadyTriggerListDraft: Epic<Action<string, Draft[]>, StoreState> = action$ =>\n  action$\n    .ofType(DB_READY)\n    .map(() => draftList(''));\n\nconst dbReadyHydrateMetas: Epic<Action<string|AttachmentMeta, AttachmentMeta|null>, StoreState>\n= action$ => action$\n    .ofType(DB_READY)\n    .flatMap(() => Cache.list(\n      Stores.Commits,\n      (commit: Commit) =>\n        [HistoryObject.DraftAttachment, HistoryObject.DraftAttachmentAppend]\n          .indexOf(commit.resource) > -1 &&\n        [CommitStatus.Pending, CommitStatus.Ready, CommitStatus.Error, CommitStatus.Processing]\n          .indexOf(commit.status) > -1,\n    ))\n    .filter(commits => !!commits.filter(commit => !!commit.rehydrateMeta).length)\n    .flatMap((commits) => {\n      // Create rehydration metas based off append cases\n      const metas: AttachmentMeta[] = flatten(\n        compact(\n          commits\n            .filter((commit: Commit) => commit.status !== CommitStatus.Error)\n            .map((commit: Commit) => commit.rehydrateMeta),\n        ),\n      );\n\n      const failedRehydrateMetas: AttachmentMeta[] = flatten(\n        compact(\n          commits\n            .filter((commit: Commit) => commit.status === CommitStatus.Error)\n            .map((commit: Commit) => commit.rehydrateMeta),\n        ),\n      );\n\n      const failedMetas = failedRehydrateMetas\n        .map((rehydrateMeta: any) => {\n          // Handle error checks\n          let error = rehydrateMeta.error;\n          const backupMessage = error && error.description || error.message ||\n            'There was an issue attaching this file.' + ' Please remove it and try again!';\n          if (!error || !(error instanceof Error)) {\n            error = new Error(backupMessage);\n          }\n\n          return Observable.of(attachmentMetaCreate(rehydrateMeta, error));\n        });\n\n      // Merge all attachments into new metas\n      return Observable.merge(\n        ...metas.map(meta => Observable.of(attachmentMetaCreate(meta))),\n        // tslint:disable-next-line:max-line-length\n        ...failedMetas,\n      );\n    });\n\n// Location change selects draft\nconst locationChangeSelectDraft:\n  Epic<Action<string | DraftConfigurationMeta | Configuration, string|null|undefined>, StoreState> =\n  (action$, store) =>\n  action$\n    .ofType(LOCATION_CHANGE)\n    .map((action: any): string => {\n      const split = (action as LocationChangeAction).payload.pathname.toLowerCase().split('/');\n      if (split[3] === 'compose') {\n        const mailto = getQueryVariable(\n          'mailto',\n          (action as LocationChangeAction).payload.search,\n        );\n\n        if (mailto && mailto.match(/^mailto:/)) {\n          return mailto;\n        }\n      }\n\n      if (split[1] === 'popout' && split[2] === 'drafts' && split.length > 3) {\n        return split[split.length - 1];\n      }\n\n      if (split.length < 5) {\n        return '';\n      }\n\n      if (['drafts', 'sendlater', 'outbox'].indexOf(split[3]) === -1) {\n        return '';\n      }\n\n      return split[split.length - 1];\n    })\n    .filter(id => id !== '')\n    .map((id) => {\n      if (id.match(/^mailto:/)) {\n        return draftCreateConfiguration({\n          configuration: Configuration.MailTo,\n          recipients: [id.slice('mailto:'.length)],\n        });\n      }\n      return draftSelect(id);\n    });\n\n// Situationally hydrates a meta with a new object url if needed for attachment meta\nexport const hydrateAttachmentMetaEpic: Epic<\n  Action<AttachmentMeta|Draft, AttachmentMeta|Draft>, StoreState, Deps\n> = (action$, store, deps) =>\n    action$.ofType(ATTACHMENT_META_HYDRATE)\n      .filter(action => action.status === ActionStatus.Start)\n      .filter((action: Action<AttachmentMeta, AttachmentMeta>) => !!action.meta.cloudUrl &&\n        action.meta.cloudUrl.startsWith('blob:' || false),\n      )\n      .flatMap((action: Action<AttachmentMeta, AttachmentMeta>) => {\n        const meta = action.meta;\n        const request = meta.cloudUrl\n          ? Observable.fromPromise(fetch(meta.cloudUrl))\n          : Observable.of(null);\n\n        // Make request to local fileUrl\n        return request\n          .catch((e) => {\n            return Observable.of(null);\n          })\n          .filter(r => !r || r.status !== 200) // Do nothing if request was valid\n          .flatMap((r) => {\n            return Cache.list(\n              Stores.FileUploads,\n              (fm: FileUploadMeta) => fm.resourceId === meta.resourceId &&\n                fm.attachmentId === meta.attachment,\n              )\n              .filter(fms => !!fms.length && !!fms[0].meta.file)\n              .flatMap((fileMetas: FileUploadMeta[]) => {\n                const fileMeta = fileMetas[0];\n                if (meta.cloudUrl) {\n                  URL.revokeObjectURL(meta.cloudUrl);\n                }\n\n                const url = URL.createObjectURL(fileMeta.meta.file);\n                const updatedMeta: AttachmentMeta = { ...meta, cloudUrl: url };\n                const state = store.getState();\n\n                // If draft match and status is sending, send a draft update event\n                if (state.selectedDraft === updatedMeta.resourceId) {\n                  const draft: Resource<Draft>|undefined = selectSelectedDraft(state);\n\n                  // TODO(SHIN): This currently causes race conditions with sending state reverting\n                  if (draft && draft.data && isDraftSending(draft.data)) {\n                    const updatedDraft = applyAttachmentToDraft(\n                      draft.data,\n                      convertToOptimistic(updatedMeta, draft.data.id),\n                    );\n                    return Observable.merge(\n                      Observable.of(attachmentMetaUpdate(updatedMeta)),\n                      Observable.of(draftUpdate(updatedDraft, updatedDraft)),\n                    );\n                  }\n                }\n\n                // Send attachment meta update if draft is not status sending\n                return Observable.of(attachmentMetaUpdate(updatedMeta));\n              });\n          });\n      });\n\nexport const draftSelectHydrateMetas: Epic<\n  Action<string | AttachmentMeta, string | null | AttachmentMeta>, StoreState, Deps\n> = (action$, store, deps) =>\n    action$.ofType(DRAFT_SELECT)\n      .filter(action => action.status === ActionStatus.Success)\n      .flatMap((action: Action<string, string>) => {\n        const state = store.getState();\n        const draft: Resource<Draft> | undefined = selectSelectedDraft(state);\n        const draftId = draft && draft.data && draft.data.id || '';\n\n        const attachmentMetas: Array<Resource<AttachmentMeta>> = selectAttachmentMetasForResource(\n          state,\n          draftId,\n        );\n\n        const compactedMetas = compact(attachmentMetas.map(m => m.data));\n        return Observable.merge(\n          ...compactedMetas.map(m => Observable.of(attachmentMetaHydrate(m))),\n        );\n      });\n\nexport const selectDraftEpic:\n  Epic<Action<string|null, string|Thread|null>, StoreState, Deps> = (action$, store, deps) =>\n  action$.ofType(DRAFT_SELECT)\n    .filter(action => action.status === ActionStatus.Start)\n    .flatMap((action: Action<string, string|null>) => {\n      const state = store.getState();\n      const stateDraft = selectDraft(state, action.meta);\n      const request: Observable<Draft|undefined> = (!!stateDraft && !!stateDraft.data)\n        ? Observable.of(stateDraft.data)\n        : Cache.get(Stores.Drafts, action.meta);\n      return request\n        .flatMap((result) => {\n          if (result) {\n            return Observable.of(result);\n          }\n          return deps.drafts.get(action.meta);\n        })\n        .flatMap((draft: Draft) => {\n          const actions: Array<Observable<Action<any, any>>> = [\n            Observable.of(draftSelect(draft.id, draft.id)),\n          ];\n\n          const mailbox = store.getState().mailbox;\n          if (mailbox && isDraftBox(mailbox.type)) {\n            actions.push(draft.to.length ?\n              Observable.of(contactSelect(draft.to[0])) :\n              Observable.of(contactSelect(undefined)));\n          }\n\n          // Inserts optimistic thread selectio nif in sending state\n          if (!draft.threadV2 && isDraftSending(draft)) {\n            const optimistic = toThread(draft, store.getState().accounts);\n            actions.push(Observable.of(threadSelect(optimistic.id, optimistic)));\n          } else if (draft.threadV2) {\n            actions.push(Observable.of(threadSelect(draft.threadV2)));\n          } else {\n            actions.push(Observable.of(threadSelect('', null)));\n          }\n\n          return Observable.merge(...actions);\n        });\n    });\n\n// Fetch draft fetches a single draft from the server\nconst fetchDraft: Epic<Action<string, Draft>, StoreState, Deps> = (action$, store, deps) =>\n action$.ofType(DRAFT_FETCH)\n  .filter(action => action.status === ActionStatus.Start)\n  .filter(action => !selectDraft(store.getState(), action.meta).data)\n  .flatMap(action =>\n    deps.drafts.get(action.meta)\n      .map(draft => draftFetch(action.meta, draft))\n      .catch(e => Observable.of(draftFetch(action.meta, e))),\n  );\n\n// List draft fetches all drafts from cache\nconst listDraft: Epic<Action<string, Draft[]>, StoreState> = action$ =>\n action$.ofType(DRAFT_LIST)\n  .filter(action => action.status === ActionStatus.Start)\n  .flatMap(action =>\n    Cache.list<Draft>(Stores.Drafts)\n      .map(drafts => draftList(action.meta, drafts))\n      .catch(e => Observable.of(draftList(action.meta, e))),\n  );\n\n// Updates Draft in commits then broadcasts to worker\nexport const draftUpdateEpic: Epic<\nAction<Draft, Draft|null>, StoreState, Deps\n> = (action$, store, deps) =>\n action$.ofType(DRAFT_UPDATE)\n  .filter(action => action.status === ActionStatus.Start)\n  .flatMap((action) => {\n    const updatedDraft: Draft = { ...action.meta, updated: deps.now() };\n    return Cache.save(Stores.Commits, draftUpdateCommit(updatedDraft))\n      .flatMap(() => {\n        return Cache.save(Stores.Drafts, updatedDraft);\n      })\n      .map(() => draftUpdateBroadcast(updatedDraft))\n      .catch((e: Error) => Observable.of(draftUpdate(updatedDraft, e)));\n  });\n\n// Appends any forward-attachments that need append after draft has been created\nexport const draftAttachmentsAppendEpic: Epic<Action<AttachmentMeta, any>, StoreState, Deps>\n= (action$, store, deps) =>\n  action$.ofType(DRAFT_ATTTACHMENTS_APPEND)\n    .filter(action => action.status === ActionStatus.Start)\n    .flatMap((action) => {\n      return Cache.save(Stores.Commits, draftForwardAttachmentsCommit(action.meta))\n        .flatMap(() => Observable.of(draftAttachmentsAppend(action.meta, action.meta))\n        .catch(e => Observable.of(draftAttachmentsAppend(action.meta, e))));\n    });\n\n// TODO(SHIN): Will need test for create and select since we lose type safety\n// HACK(SHIN): Temporary solution for sending draft when it hasn't been updated to server\nconst draftCreateEpic: Epic<Action<any, any>, StoreState, Deps> = (action$, store, deps) =>\n action$.ofType(DRAFT_CREATE)\n  .filter(action => action.status === ActionStatus.Start)\n  .flatMap(action =>\n    deps.drafts.create(action.meta)\n      .catch(e => Cache.save(Stores.Commits, draftCreateCommit(action.meta)))\n      .flatMap(() => Cache.save(Stores.Drafts, action.meta))\n      .flatMap(() => {\n        // return draftCreate(action.meta, draft);\n        // TODO(SHIN): Observable.merge does not work for actions of different types\n        // Create draft, select if thread has not been set\n        const actions: Array<Action<any, any>> = [\n          draftCreate(action.meta, action.meta),\n        ];\n\n        if (!action.meta.thread) {\n          actions.push(draftSelect(action.meta.id));\n        }\n\n        // Merge actions by saving into draftCreateCommit\n        return Observable.merge(...actions.map(each => Observable.of(each)));\n\n      })\n      .catch(e => Observable.of(draftCreate(action.meta, e))),\n  );\n\nexport const draftCreateConfigurationEpic: Epic<Action<any, any>, StoreState> = (action$, store) =>\n    action$\n      .ofType(DRAFT_CREATE_CONFIGURATION)\n      .filter(action => action.status === ActionStatus.Start)\n      .filter((action) => {\n        const state = store.getState();\n        if (!state.accounts.length) {\n          return false;\n        }\n\n        const existingThread = state.selectedThread;\n        return action.meta === Configuration.New ||\n          action.meta.configuration && action.meta.configuration === Configuration.MailTo ||\n          !!(existingThread && selectMessageBodies(state, existingThread.id).length);\n      })\n      .do((action: Action<DraftConfigurationMeta, any>) => { // Track Move BCC as part of creation\n        if (action.meta.configuration === Configuration.MoveBcc) {\n          recordEvent(UserEvents.DraftCreated, { type: action.meta.configuration });\n        }\n      })\n      .flatMap((action) => {\n        // Identify if existing draft\n        // TODO(SHIN): Have to identify existing draft if reclicking onto an optimistic thread\n        const state = store.getState();\n        const existingDraft = state.selectedDraft &&\n          selectDraft(state, state.selectedDraft).data ||\n          state.selectedThread && selectDraftForThread(state, state.selectedThread.id).data ||\n          state.selectedThread && selectDraftForOptimisticThread(state, state.selectedThread.id);\n        const { meta } = action;\n        const configuration = typeof meta === 'string' ? meta : action.meta.configuration;\n\n        // Show error prompt if draft new message and optimistic and reply-type configuration\n        if (existingDraft && isDraftSending(existingDraft)\n          && !existingDraft.threadV2\n          && existingDraft.cancelBy && existingDraft.cancelBy > new Date()\n          && (configuration === Configuration.Reply || configuration === Configuration.ReplyAll)\n        ) {\n          const secondsLeft = (existingDraft.cancelBy.getTime() - new Date().getTime()) / 1000;\n          const roundedSeconds = Math.floor(secondsLeft);\n          return Observable.of(\n            toastSet(new ApiError(\n              429,\n              `Please wait ${roundedSeconds} seconds to reply on a new thread`,\n            )),\n          );\n        }\n\n        const existingThread = state.selectedThread;\n\n        // If existing thread, message, and draft, update draft w. recipients\n        if (existingDraft && existingDraft.smtp\n          && existingThread && !isDraftSending(existingDraft)) {\n          const messageIndex = findIndex(\n            existingThread.messages,\n            { rfcId: existingDraft.smtp },\n          );\n\n          const draftMessage = existingThread.messages[messageIndex];\n          if (draftMessage) {\n            const newRecipients = configureRecipients(\n              configuration,\n              draftMessage,\n              state.accounts);\n            switch (configuration) {\n              case Configuration.MoveBcc:\n              case Configuration.Reply:\n              case Configuration.ReplyAll:\n                const recipientsUpdatedDraft = { ...existingDraft, ...newRecipients };\n                const description = configuration === Configuration.MoveBcc\n                  ? 'Moved Sender to BCC'\n                  : 'Updated Recipients';\n                const replaceToast = new ConfirmationError(\n                  description,\n                  true,\n                  ConfirmationPositon.BottomCenter,\n                );\n                return Observable.merge(\n                  Observable.of(toastSet(replaceToast)),\n                  Observable.of(draftUpdate(recipientsUpdatedDraft)),\n                );\n              default: break;\n            }\n          }\n        }\n\n        // Otherwise create new draft\n        const newDraft = configuration === Configuration.New\n           || configuration === Configuration.MailTo;\n        const moveBcc = configuration === Configuration.MoveBcc;\n        const thread = state.selectedThread;\n        const actions = [];\n        let selectedDraft: Draft;\n\n        if (newDraft) {\n          const defaultAccount = state.preferences.defaultAccount || state.accounts[0].id;\n          const selectedAccount = state.mailbox.account || defaultAccount;\n          const accountIndex = findIndex(state.accounts, { id: selectedAccount });\n          const index = accountIndex !== -1 ? accountIndex : 0;\n          selectedDraft = configuration === Configuration.New ? createNewDraft(\n            state.accounts[index],\n            state.preferences,\n            state.features,\n            typeof meta === 'string' ? undefined : meta.recipients,\n          ) : createMailToDraft(\n            state.accounts[index],\n            state.preferences,\n            state.features,\n            typeof meta === 'string' ? '' : meta.recipients[0] || '',\n          );\n        } else {\n          const allMessageBodies: MessageBody[] = selectMessageBodies(state, thread!.id);\n          const lastMessage = thread && last(thread.messages);\n          const lastMatchedMessageBody = lastMessage && find(\n            allMessageBodies,\n            body => body.id === lastMessage.id,\n          );\n          const lastMessageBody = lastMatchedMessageBody ||\n            last(selectMessageBodies(state, thread!.id));\n          selectedDraft = createDraft(\n            thread!,\n            configuration,\n            typeof meta === 'string' || !meta.body\n              ? lastMessageBody\n              : meta.body,\n            state.preferences,\n            state.accounts,\n            state.features,\n            typeof meta === 'string' ? undefined : meta.recipients,\n          );\n        }\n\n        if (selectedDraft) {\n          actions.push(Observable.of(draftCreate(selectedDraft)));\n        }\n\n        // Show toast if sender moved to bcc\n        if (moveBcc) {\n          actions.push(Observable.of(\n            toastSet(new ConfirmationError(\n              'Moved Sender to BCC',\n              true,\n            )),\n          ));\n        }\n\n        // Handle forwarding attachments by dispatching forward action\n        // HACK(SHIN): Set cloudUrl to attachment.url as backup for forward attachment case\n        // TODO(SHIN): Resolve potential race condition since even though the action for\n        // DRAFT_CREATE && DRAFTATTACHMENTAPPEND is synchronous, the saving to cache may not be\n        // TODO(SHIN): Need to figure out dedupe method so multiple append requests do not go out\n        if (thread && configuration === Configuration.Forward) {\n          const messageIndex = findIndex(thread.messages, { id: (meta.body && meta.body.id) });\n          const message = thread.messages[messageIndex] || last(thread.messages);\n          if (message && !!message.attachments.length) {\n            const forwardAttachmentActions = message.attachments.map(attachment =>\n              Observable.of(draftAttachmentsAppend({\n                attachment: mongoId(),\n                resourceId: selectedDraft.id,\n                thread: thread.id,\n                message: message.id,\n                account: thread.account,\n                filename: attachment.filename,\n                length: attachment.length,\n                cloudUrl: attachment.url,\n                inline: attachment.inline,\n              })));\n            actions.push(...forwardAttachmentActions);\n          }\n        }\n\n        return Observable.merge(...actions);\n      });\n\nconst draftDeleteEpic:\n  Epic<Action<Error|null|string, string|null|MeBody>, StoreState> = (action$, store) =>\n  action$.ofType(DRAFT_DELETE)\n    .filter(action => action.status === ActionStatus.Start)\n    .flatMap((action: Action<string, null>) =>\n      Cache.save(Stores.Commits, draftDeleteCommit(action.meta))\n        .flatMap(() => Cache.deleteSingle(Stores.Drafts, action.meta))\n        .flatMap(() => {\n          const actions: Array<Observable<Action<any, any>>> = [\n            Observable.of(draftDelete(action.meta, action.meta)),\n          ];\n          const state = store.getState();\n\n          // check if referral has now been redeemed\n          if (state.me.data && state.me.data.referrer && !state.me.data.referralRedeemed) {\n            actions.push(Observable.of(meFetch('')));\n          }\n\n          return Observable.merge(\n            ...actions,\n          );\n        })\n        .catch(e => Observable.of(toastSet(e))),\n    );\n\nexport const draftSendEpic: Epic<\n  Action<DraftSendMeta|Draft|Error|null|OnboardingType|string|AttachmentMeta,\n  Draft|null|Onboarding|SharedThread>,\n  StoreState, Deps\n> = (action$, store, deps) =>\n  action$.ofType(DRAFT_SEND)\n    .filter(action => action.status === ActionStatus.Start)\n    // Track Message Sents\n    .do((action: Action<DraftSendMeta, Draft>) => {\n      recordEvent(UserEvents.MessageSent, {\n        later: action.meta.draft.scheduled,\n        followUp: !!action.meta.draft.waiting,\n        track: action.meta.draft.track,\n        calendarInvite: !!action.meta.draft.calendarInvite,\n        template: action.meta.draft.template,\n      });\n    })\n    .flatMap((action: Action<DraftSendMeta, Draft>) => {\n      // Update send meta with updated delay property\n      const isOnboarding = !store.getState().onboarding.sendMessage;\n      const delay =  isOnboarding ? 0 : undefined;\n      const state = store.getState();\n\n      // Convert found attachment metas to optimistic attachments\n      const metas = compact(selectAttachmentMetasForResource(state, action.meta.draft.id)\n        .map((r: Resource<AttachmentMeta>) => r.data));\n      const optimisticAttachments = metas\n        .map((m: AttachmentMeta) => convertToOptimistic(m, action.meta.draft.id)) || [];\n\n      // Create optimistic meta\n      const sendMeta = deps.drafts.generateOptimistic(\n        { ...action.meta, delay },\n        optimisticAttachments,\n      );\n      const stagedDraft = sendMeta.meta.draft;\n      const attachmentRemoveRequests = sendMeta.deletedAttachments\n        .map(a => submitCommit(draftAttachmentDeleteCommit(stagedDraft.id, a.attachment)));\n\n      // Start Commit submissions\n      return Observable.of(stagedDraft)\n        .flatMap(() => {\n          const deleteHandler = !!attachmentRemoveRequests.length\n            ? Observable.zip(...attachmentRemoveRequests)\n            : Observable.of(null);\n          return deleteHandler\n            .flatMap(() => submitCommit(draftUpdateCommit(stagedDraft)))\n            .flatMap(() => submitCommit(draftSendCommit(sendMeta.meta)))\n            .flatMap(() => {\n              const actions: Array<Observable<\n                Action<Draft | DraftSendMeta | null | string | AttachmentMeta,\n                Draft | SharedThread | null>\n              >> = [\n                ...sendMeta.deletedAttachments.map(\n                  a => Observable.of(\n                    draftAttachmentRemove({\n                      resourceId: stagedDraft.id,\n                      attachment: a.attachment,\n                    }),\n                  ),\n                ),\n                Observable.of(draftSend(\n                  sendMeta.meta,\n                  stagedDraft,\n                )),\n              ];\n\n              // Also broadcast draft send events because these can happen from new window\n              actions.push(Observable.of(draftSendBroadcast(sendMeta.meta)));\n\n              // Clear shared thread if sending on a new draft\n              if (!stagedDraft.threadV2) {\n                actions.push(Observable.of(sharedThreadSelect(null)));\n              }\n\n              // Async save staged draft\n              Cache.save(Stores.Drafts, stagedDraft).subscribe({\n                error: (e) => {\n                  captureException(e);\n                  // tslint:disable-next-line:no-console\n                  console.error(e);\n                },\n              });\n\n              logAmplitudeEvent(AmplitudeEvents.SendEmail);\n\n              // Merge actions and save draft async since we dont want to block on IndexedDB\n              // We're losing a guarantee of Cache being consistent here though\n              return Observable\n                .merge(...actions);\n            });\n        })\n        .catch(e => Observable.of(draftSend(action.meta, e)));\n    });\n\n// Handles undo send by emitting success, updating selectedThread and calling threadSingle\nexport const draftSendUndoEpic: Epic<Action<any, any>, StoreState> = (action$, store, deps) =>\n action$.ofType(DRAFT_SEND_UNDO)\n  .filter(action => action.status === ActionStatus.Start)\n  .do(() => recordEvent(UserEvents.UndoSend))\n  .flatMap((action: Action<Draft, Draft>) => {\n\n    // Optimistic version of draft\n    const optimisticUndo: Draft = {\n      ...action.meta,\n      status: DraftStatus.Draft,\n      attachments: action.meta.attachments.filter(a => !a.optimistic),\n    };\n\n    // API request if draft is not staged\n    const sentRequest = deps.drafts.undoSend(action.meta);\n\n    // Return end request\n    return sentRequest\n      .catch((e: Error) => {\n        // Pass through typeError since we don't have to worry about offline race conditions\n        const typeError = e instanceof TypeError;\n        if (typeError) {\n          return Observable.of(optimisticUndo);\n        }\n\n        throw e;\n      })\n      .do((draft: Draft) => { // Remove all draft send commit\n        const commits = Cache.list(\n          Stores.Commits,\n          (commit: Commit) => commit.resourceId === draft.id && commit.route.endsWith('send'),\n        );\n        return commits.flatMap((results: Commit[]) => {\n          const deleteIds = compact(results.map(r => r.id));\n          return Cache.deleteBatch(Stores.Commits, deleteIds);\n        }).subscribe({\n          error: (e) => {\n            captureException(e);\n            // tslint:disable-next-line:no-console\n            console.error(e);\n          },\n        });\n      })\n      .flatMap((d: Draft) => {\n        const draft = {\n          ...d,\n          body: optimisticUndo.body,\n          subject: optimisticUndo.subject,\n        };\n        const actions: Array<Observable<any>> = [\n          Observable.of(draftSendUndo(action.meta, draft)),\n        ];\n\n        if (draft.threadV2) {\n          actions.push(Observable.of(threadSelect(draft.threadV2)));\n        }\n\n        if (!draft.threadV2) {\n          actions.push(Observable.of(threadDelete(`<${draft.id}@polymail.io>`, null)));\n        }\n\n        // Handle Emission of thread update to remove any optimistic messages\n        if (draft.threadV2) {\n          const existingThread: Thread | undefined = selectThread(store.getState(), draft.threadV2);\n          const existingThreadAction = (existingThread\n            ? Observable.of(existingThread)\n            : Cache.get(Stores.Threads, existingThread))\n            .filter(thread => !!thread)\n            .flatMap((thread) => {\n              const updatedThread = {\n                ...thread,\n                messages: thread.messages\n                  .filter((message: Message) => message.rfcId !== `<${draft.id}@polymail.io>`),\n              };\n\n              if (draft.waiting && updatedThread.waiting) {\n                delete updatedThread.waiting;\n              }\n\n              return Observable.of(threadSingle(updatedThread));\n            });\n          actions.push(existingThreadAction);\n        }\n\n        // HACK(SHIN): Want to persist to cache if no changes made\n        // (async to allow UI to be non-blocked)\n        Cache.save(Stores.Drafts, draft).subscribe({\n          error: (e) => {\n            // tslint:disable-next-line:no-console\n            console.error(e);\n            captureException(e);\n          },\n        });\n\n        return Observable.merge(...actions);\n      })\n      .catch((e: Error) => Observable.of(draftSendUndo(action.meta, e)));\n  });\n\n// Handle emitting out thread single from optimistic draft send\n// TODO(SHIN): Issue with send and archive getting triggered multiple times\n// (bc success called off worker) need to identify first\nexport const draftSendAndArchiveEpic: Epic<\n  Action<DraftSendMeta|ThreadCommitMeta, Draft|null>, StoreState, Deps\n> = (action$, store, deps) =>\n  action$.ofType(DRAFT_SEND)\n    .filter(action => action.status === ActionStatus.Success)\n    .filter((action: any) => {\n      const state = store.getState();\n      const stateDraftResource = state.drafts[action.meta.draft.id];\n      const incrementCount = stateDraftResource && stateDraftResource.incrementCount;\n      const incrementCheck = incrementCount && incrementCount === 1 || false;\n      return isDraftSending(action.payload) && incrementCheck;\n    })\n    .filter((action: Action<DraftSendMeta, Draft>) => {\n      const state = store.getState();\n      let oddCounter = 0;\n      if (action.meta.toggleArchive) {\n        oddCounter = 1 + oddCounter;\n      }\n\n      if (state.preferences.sendAndArchive) {\n        oddCounter = 1 + oddCounter;\n      }\n      return oddCounter % 2 !== 0;\n    })\n    .do((action: Action<DraftSendMeta, Draft>) => {\n      if (!action.meta.draft || !action.meta.draft.threadV2) {\n        const mailbox = store.getState().mailbox;\n        // Return to previously selected thread if not in any draft box\n        if (!isDraftBox(mailbox.type)) {\n          const location = browserHistory.location.pathname;\n          browserHistory.push(location);\n        } else {\n           // If in drafts or send later return back to top of mailbox\n           // (fixes draft showing in sending state)\n          browserHistory.push(routeFromMailbox(mailbox));\n        }\n      }\n    })\n    .filter((action: Action<DraftSendMeta, Draft>) => !!action.meta.draft.threadV2)\n    .flatMap((action: any) => {\n      return Observable.of(threadCommitsSubmit({\n        box: ThreadBox.Archive,\n        singleResource: action.meta.draft.threadV2,\n      }));\n    });\n\n// Handle removing optimistic messages on DRAFT_SEND_FAIL events\nexport const draftSendFailEpic: Epic<\n  Action<DraftSendMeta | ThreadCommitMeta, Draft|null|undefined>, StoreState, Deps\n> = (action$, store, deps) =>\n    action$.ofType(DRAFT_SEND)\n      .filter(action => action.status === ActionStatus.Failure)\n      .flatMap((action: Action<DraftSendMeta, Draft>) => {\n        // Get existing thread id\n        const state = store.getState();\n        const draft = action.meta.draft;\n        const optimisticId = `<${draft.id}@polymail.io>`;\n        let threadId = draft.threadV2;\n\n        // If threadId exists, then call threadSingle with the removed optimistic message\n        if (threadId) {\n          const stateThread: Thread|undefined = selectThread(state, threadId);\n          if (stateThread) {\n            const toUpdate = {\n              ...stateThread,\n              messages: stateThread.messages\n                .filter(m => m.rfcId !== optimisticId),\n            };\n\n            return Observable.of(threadSingle(toUpdate));\n          }\n        }\n\n        // Remove thread and reselect draft if thread matches\n        threadId = toThread(action.meta.draft, state.accounts).id;\n        if (state.selectedThread && state.selectedThread.id === optimisticId) {\n          return Observable.merge(\n            Observable.of(draftSelect(action.meta.draft.id)),\n            Observable.of(threadDelete(threadId, null)),\n          );\n        }\n\n        // Otherwise just delete draft\n        return Observable.of(threadDelete(threadId, null));\n      });\n\n// Handles Send Now by submitting a sendNowCommit into queue for CommitSync\nexport const draftSendNowEpic: Epic<\n  Action<Draft, Draft>, StoreState, Deps\n> = (action$, store, deps) =>\n    action$.ofType(DRAFT_SEND_NOW)\n    .filter(action => action.status === ActionStatus.Start)\n    .flatMap((action: Action<Draft, Draft>) => {\n      const updated: Draft = {\n        ...action.meta,\n        cancelBy: deps.now(),\n        cancelByTtl: 0,\n      };\n      return submitCommit(draftSendNowCommit(action.meta))\n        .map(() => draftSendNow(action.meta, updated))\n        .do(() => {\n          store.dispatch(toastSet(new ConfirmationError('Your message was sent!', true)));\n        })\n        .catch((e) => {\n          return Observable.of(draftSendNow(action.meta, e));\n        });\n    });\n\n// Handle emitting out thread single from optimistic draft send\n// TODO(SHIN): We can make this faster if thread matches selected thread\nexport const draftSendOptimisticEpic: Epic<\n  Action<Thread|DraftSendMeta, undefined>, StoreState\n> = (action$, store) =>\n action$.ofType(DRAFT_SEND)\n  .filter(action => action.status === ActionStatus.Success)\n  .filter((action: any) => isDraftSending(action.payload))\n  .flatMap((action: any) => {\n    if (action.payload.threadV2) {\n      const state = store.getState();\n\n      // Try to fetch thread from state first\n      let matchedThread = selectThread(state, action.payload.threadV2);\n      if (!matchedThread && state.selectedThread &&\n        state.selectedThread.id === action.payload.threadV2) {\n        matchedThread = state.selectedThread;\n      }\n\n      // Turn thread into observable\n      const observableThread = !!matchedThread\n        ? Observable.of(matchedThread)\n        : Cache.get(Stores.Threads, action.payload.threadV2);\n\n      // Apply optimistic handling, clearing out duplicates before hand to have fresh copies of\n      // optimistics\n      return observableThread\n        .map((thread: Thread) => {\n          const filteredMessages = thread.messages.filter(m => !m.optimistic);\n          const filteredThread = { ...thread, messages: filteredMessages };\n          const appended = appendThread(filteredThread, action.payload, store.getState().accounts);\n          const uniqueMessages = uniqBy(\n            appended.messages.concat(\n              selectOptimisticMessagesForThread(store.getState(), thread.id),\n            ),\n            'rfcId',\n          );\n\n          const updated = computeThread({ ...appended, messages: uniqueMessages });\n          return threadSingle(updated);\n        });\n    }\n\n    return Observable.of(\n      threadSingle(toThread(action.payload, store.getState().accounts)),\n    );\n  });\n\n// Handle emitting out thread single from optimistic draft send\nexport const draftSendOnboardingEpic: Epic<\n  Action<\n    DraftSendMeta|OnboardingPatchMeta|RightSidebarMeta,\n    Draft|Onboarding|null\n  >,\n  StoreState,\n  Deps\n> = (action$, store, deps) => action$.ofType(DRAFT_SEND)\n  .filter(action => action.status === ActionStatus.Success)\n  .filter((action: any) => !action.payload.threadV2 && !store.getState().onboarding.sendMessage)\n  .flatMap((action: Action<DraftSendMeta, Draft>) =>\n    deps.me.fakeTrack(\n      action.meta.draft.account,\n      action.meta.draft.id,\n      action.meta.draft.to[0] || 'onboarding@polymail.io',\n    )\n    .catch(e => Observable.of(null))\n    .flatMap(() =>\n      Observable.merge(\n        Observable.of(onboardingPatch({\n          skipped: false,\n          type: { sendMessage: true },\n        }))),\n      ),\n    );\n\nconst draftAttachmentAddEpic: Epic<Action<AttachmentMeta, Attachment|AttachmentMeta>, StoreState>\n= (action$, store) =>\n action$.ofType(DRAFT_ATTACHMENT_ADD)\n  .filter(action => action.status === ActionStatus.Start)\n  .flatMap((action) => {\n\n    // Create file upload if not template attachment\n    const fileUploadSave = !!action.meta.template\n        ? Observable.of(null)\n        : Cache.save(Stores.FileUploads, fileUploadMeta(action.meta));\n\n    // Save corresponding commit to process via CommitSync\n    return fileUploadSave\n      .flatMap(() => Cache.save(Stores.Commits, draftAttachmentAddCommit(action.meta)))\n      .flatMap(() => Observable.of(attachmentMetaCreate(action.meta, action.meta)))\n      .catch(e => Observable.of(attachmentMetaCreate(action.meta, e)));\n  });\n\n// Shows toast when failure case happens and selected draft is shown\nexport const draftAttachmentAddFailureEpic: Epic<\nAction<AttachmentMeta|Error|null, Error|null>, StoreState\n> = (action$, store) =>\n  action$.ofType(DRAFT_ATTACHMENT_ADD)\n    .filter(action => action.status === ActionStatus.Failure)\n    .filter((action: Action<AttachmentMeta, Error>) => {\n      const draft = selectSelectedDraft(store.getState());\n      return !!draft.data && draft.data.id === action.meta.resourceId;\n    })\n    .flatMap((action: Action<AttachmentMeta, Error>) => {\n      return Observable.of(toastSet(action.error!));\n    });\n\n// Applies attachment replace on successful draft in the background when draft is not selected\nconst draftAttachmentAddSuccessEpic: Epic<\nAction<AttachmentMeta|Draft|Error|null, Attachment| AttachmentMeta|null|Draft>, StoreState>\n  = (action$, store) =>\n    action$.ofType(DRAFT_ATTACHMENT_ADD)\n      .filter(action => action.status === ActionStatus.Success)\n      .filter((action: Action<AttachmentMeta, Attachment>) => {\n        const state = store.getState();\n        const draftResource = selectSelectedDraft(state);\n        const draft = draftResource && draftResource.data;\n        if (!draft) {\n          return true;\n        }\n        return !!action.meta.inline || !!action.meta.cloud;\n      })\n      .flatMap((action: Action<AttachmentMeta, Attachment>) => {\n        return Cache.get(Stores.Drafts, action.meta.resourceId)\n          .flatMap((draft: Draft) => {\n            // Reduce through all attachments and apply any cloud/inline\n            // NOTE(SHIN): We do all in cases of race condition\n            const allAttachments = draft.attachments.concat(action.payload!);\n            const updatedDraft = allAttachments.reduce(\n              (d, a) => applyAttachmentToDraft(d, a),\n              draft,\n            );\n            return Observable.of(draftUpdate(updatedDraft));\n          });\n      })\n      .catch((e: Error) => Observable.of(toastSet(e)));\n\nexport const draftTemplateApplyEpic: Epic<Action<\n  Template|Draft|AttachmentMeta, Draft|Attachment\n>, StoreState> = (action$, store, deps) =>\n action$.ofType(DRAFT_TEMPLATE_APPLY)\n  .filter((action) => {\n    const state = store.getState();\n    const draft = state.selectedDraft\n      ? selectDraft(state, state.selectedDraft).data\n      : state.selectedThread && selectDraftForThread(state, state.selectedThread.id).data;\n    return action.status === ActionStatus.Start && !!draft;\n  })\n  .flatMap((action: Action<Template, Draft>) => {\n    const state = store.getState();\n    const draft = state.selectedDraft\n      ? selectDraft(state, state.selectedDraft).data\n      : state.selectedThread && selectDraftForThread(state, state.selectedThread.id).data;\n\n    // Remove old template properties from draft\n    let updatedDraft = draft;\n    if (draft.template) {\n      const oldTemplate = selectTemplate(state, draft.template);\n      if (oldTemplate) {\n        updatedDraft = removeTemplateRecipientsFromDraft(updatedDraft, oldTemplate);\n      }\n    }\n\n    // Set new template to draft\n    updatedDraft = applyTemplateToDraft(updatedDraft, action.meta);\n    const actions: Array<Observable<Action<Draft|AttachmentMeta, Draft|Attachment>>> = [\n      Observable.of(draftUpdate({ ...updatedDraft })),\n    ];\n\n    // Append attachments create commits if necessary, ignoring cloud\n    if (action.meta.attachments.length) {\n      action.meta.attachments\n        .filter(attachment => !attachment.cloud)\n        .forEach((attachment) => {\n          const attachmentMeta: AttachmentMeta = {\n            attachment: attachment.id,\n            resourceId: draft.id,\n            template: action.meta.id,\n            cloudFile: attachment.cloudFile,\n            cloudUrl: attachment.cloudUrl,\n            filename: attachment.filename,\n            length: attachment.length,\n            cloud: attachment.cloud,\n            inline: attachment.inline,\n            file: undefined,\n          };\n\n          actions.push(Observable.of(draftAttachmentAdd(attachmentMeta)));\n        });\n    }\n\n    return Observable.merge(\n      ...actions,\n    );\n  });\n\nconst draftAttachmentRemoveEpic: Epic<Action<AttachmentMeta, null>, StoreState> = action$ =>\n   action$.ofType(DRAFT_ATTACHMENT_REMOVE)\n    .filter(action => action.status === ActionStatus.Start)\n    .flatMap(action =>\n      new DraftClient().removeAttachment(action.meta.resourceId, action.meta.attachment)\n        .map(() => draftAttachmentRemove(action.meta, null))\n        .catch(e => Observable.of(draftAttachmentRemove(action.meta, e))),\n    );\n\n// draftAttachmentCommitRemove Epic deletes any attachmentMeta commits when deleting attachments\nconst draftAttachmentCommitRemoveEpic: Epic<Action<AttachmentMeta, null>, StoreState> =\n(action$, store) =>\n  action$.ofType(DRAFT_ATTACHMENT_REMOVE)\n    .filter(action => action.status === ActionStatus.Start)\n    .filter((action) => {\n      const state = store.getState();\n      const resourceId = action.meta.resourceId;\n      const attachmentId = action.meta.attachment;\n      return !!state.attachmentMetas[resourceId] &&\n        !!state.attachmentMetas[resourceId][attachmentId];\n    })\n    .flatMap(action =>\n      Cache.list<Commit>(\n        Stores.Commits,\n        (model => model && model.rehydrateMeta &&\n          model.rehydrateMeta.attachment === action.meta.attachment &&\n          model.rehydrateMeta.resourceId === action.meta.resourceId),\n        )\n      .flatMap((commits: Commit[]) => {\n        const commit = first(commits);\n        if (commit && commit.id) {\n          return Cache.deleteSingle(Stores.Commits, commit.id);\n        }\n        return Observable.empty();\n      })\n      .flatMap(() => Observable.of(draftAttachmentRemove(action.meta, null)))\n      .catch(e => Observable.of(draftAttachmentRemove(action.meta, e))),\n  );\n\nexport const draftContactGroupAddEpic:\n  Epic<Action<DraftContactGroupMeta|Draft, Draft>, StoreState> = action$ =>\n  action$.ofType(DRAFT_CONTACT_GROUP_ADD)\n    .filter(action => action.status === ActionStatus.Start)\n    .flatMap(action =>\n      getContactsByContactGroup((action.meta as DraftContactGroupMeta).contactGroup)\n        .map((contacts) => {\n          const meta = action.meta as DraftContactGroupMeta;\n          const newDraft = {};\n          newDraft[(action.meta as DraftContactGroupMeta).list] =\n            meta.draft[meta.list].concat(\n              contacts.map(contact => `${contact.fullName} <${contact.email}>`),\n            );\n\n          return draftUpdate({\n            ...meta.draft,\n            ...newDraft,\n          });\n        }),\n    );\n\nexport const draftCalendarInviteAddEpic:\n  Epic<Action<TimeBlock|string, TimeBlock|Contact[]>, StoreState> = action$ =>\n  action$.ofType(DRAFT_CALENDAR_INVITE_ADD)\n    .filter(action => action.status === ActionStatus.Start)\n    .flatMap(action =>\n      getContactsByRecipientType((action.meta as TimeBlock).event.recipients)\n        .flatMap((contacts) => {\n          const allContacts = contacts\n            .map(c => ({ ...c, type: ContactType.Cache }))\n            .concat(\n              (action.meta as TimeBlock).event.recipients\n                .filter(r => !contacts.find(c => c.email === r.identifier) &&\n                  r.type !== EventRecipientType.ContactGroup)\n                .map(r => defaultContact(r.identifier)),\n            );\n          const tb = action.meta as TimeBlock;\n          tb.event.recipients = uniqBy(\n            allContacts\n              .map(c => ({\n                type: EventRecipientType.Contact,\n                displayName: `${c.fullName} ${c.fullName ? '<' : ''}\n                  ${c.email}${c.fullName ? '>' : ''}`,\n                identifier: c.email,\n              })),\n            'identifier',\n          );\n\n          return Observable.merge(\n            Observable.of(contactsAdd('', allContacts)),\n            Observable.of(draftCalendarInviteAdd(action.meta as TimeBlock, tb)),\n          );\n        }),\n    );\n\nexport default [\n  dbReadyTriggerListDraft,\n  dbReadyHydrateMetas,\n  selectDraftEpic,\n  locationChangeSelectDraft,\n  fetchDraft,\n  listDraft,\n  draftUpdateEpic,\n  draftCreateEpic,\n  draftSendEpic,\n  draftSendUndoEpic,\n  draftAttachmentAddEpic,\n  draftAttachmentRemoveEpic,\n  draftDeleteEpic,\n  draftCreateConfigurationEpic,\n  draftContactGroupAddEpic,\n  draftSendOptimisticEpic,\n  draftTemplateApplyEpic,\n  draftAttachmentsAppendEpic,\n  draftCalendarInviteAddEpic,\n  draftAttachmentAddSuccessEpic,\n  draftAttachmentCommitRemoveEpic,\n  draftAttachmentAddFailureEpic,\n  draftSendOnboardingEpic,\n  draftSendNowEpic,\n  draftSendFailEpic,\n  draftSelectHydrateMetas,\n  hydrateAttachmentMetaEpic,\n];\n"]}]}