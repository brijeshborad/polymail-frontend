{"remainingRequest":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js??ref--6-1!/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/messageBodies.ts","dependencies":[{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/messageBodies.ts","mtime":1675280253980},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/cache-loader/dist/cjs.js","mtime":1675365393858},{"path":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/node_modules/ts-loader/index.js","mtime":1675365391714}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnOwppbXBvcnQgeyBqc29uUmVxdWVzdCB9IGZyb20gJy4vYmFzZSc7CmltcG9ydCB7IGNyZWF0ZU1lc3NhZ2VCb2RpZXMgfSBmcm9tICdAc3JjL21vY2tzL21lc3NhZ2VCb2RpZXMnOwppbXBvcnQgeyBjcmVhdGVUaHJlYWQgfSBmcm9tICdAc3JjL21vY2tzL3RocmVhZHMnOwppbXBvcnQgeyBjb21wdXRlTWVzc2FnZUJvZHkgfSBmcm9tICdAc3JjL2xpYi9tb2RlbHMvbWVzc2FnZUJvZGllcyc7CnZhciBNZXNzYWdlQm9kaWVzQ2xpZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkgewogICAgZnVuY3Rpb24gTWVzc2FnZUJvZGllc0NsaWVudCgpIHsKICAgIH0KICAgIE1lc3NhZ2VCb2RpZXNDbGllbnQucHJvdG90eXBlLmxpc3QgPSBmdW5jdGlvbiAoZnJvbSkgewogICAgICAgIHJldHVybiBqc29uUmVxdWVzdCh7CiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsCiAgICAgICAgICAgIHJvdXRlOiBmcm9tID8gIi92MS9tZXNzYWdlQm9kaWVzP2Zyb209IiArIGZyb20gOiAnL3YxL21lc3NhZ2VCb2RpZXMnLAogICAgICAgIH0pLm1hcChmdW5jdGlvbiAocmVzcG9uc2UpIHsgcmV0dXJuIHJlc3BvbnNlLm1hcChmdW5jdGlvbiAoYikgeyByZXR1cm4gY29tcHV0ZU1lc3NhZ2VCb2R5KGIpOyB9KTsgfSk7CiAgICB9OwogICAgTWVzc2FnZUJvZGllc0NsaWVudC5wcm90b3R5cGUubGlzdEluY3IgPSBmdW5jdGlvbiAodG8pIHsKICAgICAgICByZXR1cm4ganNvblJlcXVlc3QoewogICAgICAgICAgICBtZXRob2Q6ICdHRVQnLAogICAgICAgICAgICByb3V0ZTogdG8gPyAiL3YxL21lc3NhZ2VCb2RpZXM/dG89IiArIHRvIDogJy92MS9tZXNzYWdlQm9kaWVzJywKICAgICAgICB9KS5tYXAoZnVuY3Rpb24gKHJlc3BvbnNlKSB7IHJldHVybiByZXNwb25zZS5tYXAoZnVuY3Rpb24gKGIpIHsgcmV0dXJuIGNvbXB1dGVNZXNzYWdlQm9keShiKTsgfSk7IH0pOwogICAgfTsKICAgIHJldHVybiBNZXNzYWdlQm9kaWVzQ2xpZW50Owp9KCkpOwpleHBvcnQgeyBNZXNzYWdlQm9kaWVzQ2xpZW50IH07CmV4cG9ydCBmdW5jdGlvbiBtb2NrTWVzc2FnZUJvZGllc0NsaWVudCgpIHsKICAgIHJldHVybiB7CiAgICAgICAgbGlzdDogZnVuY3Rpb24gKGZyb20pIHsgcmV0dXJuIE9ic2VydmFibGUub2YoY3JlYXRlTWVzc2FnZUJvZGllcyhjcmVhdGVUaHJlYWQoKSkpOyB9LAogICAgICAgIGxpc3RJbmNyOiBmdW5jdGlvbiAodG8pIHsgcmV0dXJuIE9ic2VydmFibGUub2YoY3JlYXRlTWVzc2FnZUJvZGllcyhjcmVhdGVUaHJlYWQoKSkpOyB9LAogICAgfTsKfQo="},{"version":3,"file":"/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/messageBodies.ts","sourceRoot":"","sources":["/Users/andrewsamboy/Desktop/Git/polymail/webapp/src/api/messageBodies.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAGlC,OAAO,EAAE,WAAW,EAAE,MAAM,QAAQ,CAAC;AACrC,OAAO,EAAE,mBAAmB,EAAE,MAAM,0BAA0B,CAAC;AAC/D,OAAO,EAAE,YAAY,EAAE,MAAM,oBAAoB,CAAC;AAClD,OAAO,EAAE,kBAAkB,EAAE,MAAM,+BAA+B,CAAC;AAOnE;IAAA;IAaA,CAAC;IAZC,kCAAI,GAAJ,UAAK,IAAa;QAChB,OAAO,WAAW,CAAC;YACjB,MAAM,EAAE,KAAK;YACb,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC,4BAA0B,IAAM,CAAC,CAAC,CAAC,mBAAmB;SACrE,CAAC,CAAC,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,GAAG,CAAC,UAAC,CAAc,IAAK,OAAA,kBAAkB,CAAC,CAAC,CAAC,EAArB,CAAqB,CAAC,EAAvD,CAAuD,CAAC,CAAC;IAC9E,CAAC;IACD,sCAAQ,GAAR,UAAS,EAAW;QAClB,OAAO,WAAW,CAAC;YACjB,MAAM,EAAE,KAAK;YACb,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,0BAAwB,EAAI,CAAC,CAAC,CAAC,mBAAmB;SAC/D,CAAC,CAAC,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,GAAG,CAAC,UAAC,CAAc,IAAK,OAAA,kBAAkB,CAAC,CAAC,CAAC,EAArB,CAAqB,CAAC,EAAvD,CAAuD,CAAC,CAAC;IAC9E,CAAC;IACH,0BAAC;AAAD,CAAC,AAbD,IAaC;;AAED,MAAM,UAAU,uBAAuB;IACrC,OAAO;QACL,IAAI,EAAE,UAAA,IAAI,IAAI,OAAA,UAAU,CAAC,EAAE,CAAC,mBAAmB,CAAC,YAAY,EAAE,CAAC,CAAC,EAAlD,CAAkD;QAChE,QAAQ,EAAE,UAAA,EAAE,IAAI,OAAA,UAAU,CAAC,EAAE,CAAC,mBAAmB,CAAC,YAAY,EAAE,CAAC,CAAC,EAAlD,CAAkD;KACnE,CAAC;AACJ,CAAC","sourcesContent":["import { Observable } from 'rxjs';\n\nimport { MessageBody } from '@src/types';\nimport { jsonRequest } from './base';\nimport { createMessageBodies } from '@src/mocks/messageBodies';\nimport { createThread } from '@src/mocks/threads';\nimport { computeMessageBody } from '@src/lib/models/messageBodies';\n\nexport interface MessageBodiesAPI {\n  list(from?: string): Observable<MessageBody[]>;\n  listIncr(to?: string): Observable<MessageBody[]>;\n}\n\nexport class MessageBodiesClient implements MessageBodiesAPI {\n  list(from?: string): Observable<MessageBody[]> {\n    return jsonRequest({\n      method: 'GET',\n      route: from ? `/v1/messageBodies?from=${from}` : '/v1/messageBodies',\n    }).map(response => response.map((b: MessageBody) => computeMessageBody(b)));\n  }\n  listIncr(to?: string): Observable<MessageBody[]> {\n    return jsonRequest({\n      method: 'GET',\n      route: to ? `/v1/messageBodies?to=${to}` : '/v1/messageBodies',\n    }).map(response => response.map((b: MessageBody) => computeMessageBody(b)));\n  }\n}\n\nexport function mockMessageBodiesClient(): MessageBodiesAPI {\n  return {\n    list: from => Observable.of(createMessageBodies(createThread())),\n    listIncr: to => Observable.of(createMessageBodies(createThread())),\n  };\n}\n"]}]}